// Generated from org\pgcase\xobot\parsers\postgres\PlPgSql.g4 by ANTLR 4.5
package org.pgcase.xobot.parsers.postgres;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlPgSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, K_MESSAGE=20, K_NEXT=21, K_MESSAGE_TEXT=22, K_STACKED=23, 
		K_DIAGNOSTICS=24, K_PG_EXCEPTION_CONTEXT=25, K_LOOP=26, K_USE_COLUMN=27, 
		K_DUMP=28, K_SLICE=29, K_EXECUTE=30, K_COLLATE=31, K_RESULT_OID=32, K_WHILE=33, 
		K_ERROR=34, K_FORWARD=35, K_FOREACH=36, K_RETURNED_SQLSTATE=37, K_BACKWARD=38, 
		K_EXCEPTION=39, K_HINT=40, K_CURRENT=41, K_RAISE=42, K_OPEN=43, K_DETAIL=44, 
		K_RETURN=45, K_CLOSE=46, K_SCROLL=47, K_MOVE=48, K_USE_VARIABLE=49, K_ALIAS=50, 
		K_INFO=51, K_NO=52, K_RELATIVE=53, K_LOG=54, K_QUERY=55, K_GET=56, K_CONTINUE=57, 
		K_FETCH=58, K_ROW_COUNT=59, K_DEBUG=60, K_CONSTANT=61, K_CURSOR=62, K_PG_EXCEPTION_DETAIL=63, 
		K_ELSIF=64, K_PRIOR=65, K_EXIT=66, K_ABSOLUTE=67, K_FIRST=68, K_LAST=69, 
		K_ROWTYPE=70, K_VARIABLE_CONFLICT=71, K_PG_EXCEPTION_HINT=72, K_OPTION=73, 
		K_NOTICE=74, K_PERFORM=75, K_WARNING=76, K_REVERSE=77, NULLS_FIRST=78, 
		NULLS_LAST=79, WITH_TIME=80, ABORT_P=81, ABSOLUTE_P=82, ACCESS=83, ACTION=84, 
		ADD_P=85, ADMIN=86, AFTER=87, AGGREGATE=88, ALL=89, ALSO=90, ALTER=91, 
		ALWAYS=92, ANALYSE=93, ANALYZE=94, AND=95, ANY=96, ARRAY=97, AS=98, ASC=99, 
		ASSERTION=100, ASSIGNMENT=101, ASYMMETRIC=102, AT=103, ATTRIBUTE=104, 
		AUTHORIZATION=105, BACKWARD=106, BEFORE=107, BEGIN_P=108, BETWEEN=109, 
		BIGINT=110, BINARY=111, BIT=112, BOOLEAN_P=113, BOTH=114, BY=115, CACHE=116, 
		CALLED=117, CASCADE=118, CASCADED=119, CASE=120, CAST=121, CATALOG_P=122, 
		CHAIN=123, CHAR_P=124, CHARACTER=125, CHARACTERISTICS=126, CHECK=127, 
		CHECKPOINT=128, CLASS=129, CLOSE=130, CLUSTER=131, COALESCE=132, COLLATE=133, 
		COLLATION=134, COLUMN=135, COMMENT=136, COMMENTS=137, COMMIT=138, COMMITTED=139, 
		CONCURRENTLY=140, CONFIGURATION=141, CONNECTION=142, CONSTRAINT=143, CONSTRAINTS=144, 
		CONTENT_P=145, CONTINUE_P=146, CONVERSION_P=147, COPY=148, COST=149, CREATE=150, 
		CROSS=151, CSV=152, CURRENT_P=153, CURRENT_CATALOG=154, CURRENT_DATE=155, 
		CURRENT_ROLE=156, CURRENT_SCHEMA=157, CURRENT_TIME=158, CURRENT_TIMESTAMP=159, 
		CURRENT_USER=160, CURSOR=161, CYCLE=162, DATA_P=163, DATABASE=164, DAY_P=165, 
		DEALLOCATE=166, DEC=167, DECIMAL_P=168, DECLARE=169, DEFAULT=170, DEFAULTS=171, 
		DEFERRABLE=172, DEFERRED=173, DEFINER=174, DELETE_P=175, DELIMITER=176, 
		DELIMITERS=177, DESC=178, DICTIONARY=179, DISABLE_P=180, DISCARD=181, 
		DISTINCT=182, DO=183, DOCUMENT_P=184, DOMAIN_P=185, DOUBLE_P=186, DROP=187, 
		EACH=188, ELSE=189, ENABLE_P=190, ENCODING=191, ENCRYPTED=192, END_P=193, 
		ENUM_P=194, ESCAPE=195, EXCEPT=196, EXCLUDE=197, EXCLUDING=198, EXCLUSIVE=199, 
		EXECUTE=200, EXISTS=201, EXPLAIN=202, EXTENSION=203, EXTERNAL=204, EXTRACT=205, 
		FALSE_P=206, FAMILY=207, FETCH=208, FIRST_P=209, FLOAT_P=210, FOLLOWING=211, 
		FOR=212, FORCE=213, FOREIGN=214, FORWARD=215, FREEZE=216, FROM=217, FULL=218, 
		FUNCTION=219, FUNCTIONS=220, GLOBAL=221, GRANT=222, GRANTED=223, GREATEST=224, 
		GROUP_P=225, HANDLER=226, HAVING=227, HEADER_P=228, HOLD=229, HOUR_P=230, 
		IDENTITY_P=231, IF_P=232, ILIKE=233, IMMEDIATE=234, IMMUTABLE=235, IMPLICIT_P=236, 
		IN_P=237, INCLUDING=238, INCREMENT=239, INDEX=240, INDEXES=241, INHERIT=242, 
		INHERITS=243, INITIALLY=244, INLINE_P=245, INNER_P=246, INOUT=247, INPUT_P=248, 
		INSENSITIVE=249, INSERT=250, INSTEAD=251, INT_P=252, INTEGER=253, INTERSECT=254, 
		INTERVAL=255, INTO=256, INVOKER=257, IS=258, ISNULL=259, ISOLATION=260, 
		JOIN=261, KEY=262, LABEL=263, LANGUAGE=264, LARGE_P=265, LAST_P=266, LC_COLLATE_P=267, 
		LC_CTYPE_P=268, LEADING=269, LEAKPROOF=270, LEAST=271, LEFT=272, LEVEL=273, 
		LIKE=274, LIMIT=275, LISTEN=276, LOAD=277, LOCAL=278, LOCALTIME=279, LOCALTIMESTAMP=280, 
		LOCATION=281, LOCK_P=282, MAPPING=283, MATCH=284, MAXVALUE=285, MINUTE_P=286, 
		MINVALUE=287, MODE=288, MONTH_P=289, MOVE=290, NAME_P=291, NAMES=292, 
		NATIONAL=293, NATURAL=294, NCHAR=295, NEXT=296, NO=297, NONE=298, NOT=299, 
		NOTHING=300, NOTIFY=301, NOTNULL=302, NOWAIT=303, NULL_P=304, NULLIF=305, 
		NULLS_P=306, NUMERIC=307, OBJECT_P=308, OF=309, OFF=310, OFFSET=311, OIDS=312, 
		ON=313, ONLY=314, OPERATOR=315, OPTION=316, OPTIONS=317, OR=318, ORDER=319, 
		OUT_P=320, OUTER_P=321, OVER=322, OVERLAPS=323, OVERLAY=324, OWNED=325, 
		OWNER=326, PARSER=327, PARTIAL=328, PARTITION=329, PASSING=330, PASSWORD=331, 
		PLACING=332, PLANS=333, POSITION=334, PRECEDING=335, PRECISION=336, PREPARE=337, 
		PREPARED=338, PRESERVE=339, PRIMARY=340, PRIOR=341, PRIVILEGES=342, PROCEDURAL=343, 
		PROCEDURE=344, QUOTE=345, RANGE=346, READ=347, REAL=348, REASSIGN=349, 
		RECHECK=350, RECURSIVE=351, REF=352, REFERENCES=353, REINDEX=354, RELATIVE_P=355, 
		RELEASE=356, RENAME=357, REPEATABLE=358, REPLACE=359, REPLICA=360, RESET=361, 
		RESTART=362, RESTRICT=363, RETURNING=364, RETURNS=365, REVOKE=366, RIGHT=367, 
		ROLE=368, ROLLBACK=369, ROW=370, ROWS=371, RULE=372, SAVEPOINT=373, SCHEMA=374, 
		SCROLL=375, SEARCH=376, SECOND_P=377, SECURITY=378, SELECT=379, SEQUENCE=380, 
		SEQUENCES=381, SERIALIZABLE=382, SERVER=383, SESSION=384, SESSION_USER=385, 
		SET=386, SETOF=387, SHARE=388, SHOW=389, SIMILAR=390, SIMPLE=391, SMALLINT=392, 
		SNAPSHOT=393, SOME=394, STABLE=395, STANDALONE_P=396, START=397, STATEMENT=398, 
		STATISTICS=399, STDIN=400, STDOUT=401, STORAGE=402, STRICT_P=403, STRIP_P=404, 
		SUBSTRING=405, SYMMETRIC=406, SYSID=407, SYSTEM_P=408, TABLE=409, TABLES=410, 
		TABLESPACE=411, TEMP=412, TEMPLATE=413, TEMPORARY=414, TEXT_P=415, THEN=416, 
		TIME=417, TIMESTAMP=418, TO=419, TRAILING=420, TRANSACTION=421, TREAT=422, 
		TRIGGER=423, TRIM=424, TRUE_P=425, TRUNCATE=426, TRUSTED=427, TYPE_P=428, 
		TYPES_P=429, UNBOUNDED=430, UNCOMMITTED=431, UNENCRYPTED=432, UNION=433, 
		UNIQUE=434, UNKNOWN=435, UNLISTEN=436, UNLOGGED=437, UNTIL=438, UPDATE=439, 
		USER=440, USING=441, VACUUM=442, VALID=443, VALIDATE=444, VALIDATOR=445, 
		VALUE_P=446, VALUES=447, VARCHAR=448, VARIADIC=449, VARYING=450, VERBOSE=451, 
		VERSION_P=452, VIEW=453, VOLATILE=454, WHEN=455, WHERE=456, WHITESPACE_P=457, 
		WINDOW=458, WITH=459, WITHOUT=460, WORK=461, WRAPPER=462, WRITE=463, XML_P=464, 
		XMLATTRIBUTES=465, XMLCONCAT=466, XMLELEMENT=467, XMLEXISTS=468, XMLFOREST=469, 
		XMLPARSE=470, XMLPI=471, XMLROOT=472, XMLSERIALIZE=473, YEAR_P=474, YES_P=475, 
		ZONE=476, LESS_LESS=477, GREATER_GREATER=478, TYPECAST=479, DOT_DOT=480, 
		COLON_EQUALS=481, SCONST=482, BCONST=483, XCONST=484, IDENT=485, PARAM=486, 
		FCONST=487, ICONST=488, Op=489, T_comment=490, T_ccomment=491, T_space=492, 
		T_newline=493, T_whitespace=494, T_special_whitespace=495, T_horiz_whitespace=496, 
		T_whitespace_with_newline=497, T_horiz_space=498, PSQL_COMMAND=499;
	public static final int
		RULE_pl_function = 0, RULE_comp_options = 1, RULE_comp_option = 2, RULE_opt_semi = 3, 
		RULE_pl_block = 4, RULE_decl_sect = 5, RULE_decl_start = 6, RULE_decl_stmts = 7, 
		RULE_decl_stmt = 8, RULE_decl_statement = 9, RULE_opt_scrollable = 10, 
		RULE_decl_cursor_query = 11, RULE_decl_cursor_args = 12, RULE_decl_cursor_arglist = 13, 
		RULE_decl_cursor_arg = 14, RULE_decl_is_for = 15, RULE_decl_aliasitem = 16, 
		RULE_decl_varname = 17, RULE_decl_const = 18, RULE_decl_datatype = 19, 
		RULE_decl_collate = 20, RULE_decl_notnull = 21, RULE_decl_defval = 22, 
		RULE_decl_defkey = 23, RULE_assign_operator = 24, RULE_proc_sect = 25, 
		RULE_proc_stmts = 26, RULE_proc_stmt = 27, RULE_stmt_perform = 28, RULE_stmt_assign = 29, 
		RULE_stmt_getdiag = 30, RULE_getdiag_area_opt = 31, RULE_getdiag_list = 32, 
		RULE_getdiag_list_item = 33, RULE_getdiag_item = 34, RULE_getdiag_target = 35, 
		RULE_assign_var = 36, RULE_stmt_if = 37, RULE_stmt_elsif = 38, RULE_stmt_else = 39, 
		RULE_stmt_case = 40, RULE_opt_expr_until_when = 41, RULE_case_when_list = 42, 
		RULE_case_when = 43, RULE_opt_case_else = 44, RULE_stmt_loop = 45, RULE_stmt_while = 46, 
		RULE_stmt_for = 47, RULE_for_control = 48, RULE_for_variable = 49, RULE_stmt_foreach_a = 50, 
		RULE_foreach_slice = 51, RULE_stmt_exit = 52, RULE_exit_type = 53, RULE_stmt_return = 54, 
		RULE_stmt_raise = 55, RULE_raiseLevel = 56, RULE_raise_expr = 57, RULE_loop_body = 58, 
		RULE_stmt_execsql = 59, RULE_stmt_dynexecute = 60, RULE_usingClause = 61, 
		RULE_usingClauseArgumentsList = 62, RULE_usingClauseArgument = 63, RULE_stmt_open = 64, 
		RULE_cursorArgumentsList = 65, RULE_cursorArgument = 66, RULE_stmt_fetch = 67, 
		RULE_stmt_move = 68, RULE_opt_fetch_direction = 69, RULE_stmt_close = 70, 
		RULE_stmt_null = 71, RULE_cursor_variable = 72, RULE_exception_sect = 73, 
		RULE_proc_exceptions = 74, RULE_proc_exception = 75, RULE_proc_conditions = 76, 
		RULE_proc_condition = 77, RULE_expr_until_semi = 78, RULE_expr_until_rightbracket = 79, 
		RULE_expr_until_then = 80, RULE_expr_until_loop = 81, RULE_opt_block_label = 82, 
		RULE_opt_label = 83, RULE_opt_exitcond = 84, RULE_any_identifier = 85, 
		RULE_stmtblock = 86, RULE_stmtmulti = 87, RULE_stmt = 88, RULE_createRoleStmt = 89, 
		RULE_opt_with = 90, RULE_optRoleList = 91, RULE_alterOptRoleList = 92, 
		RULE_alterOptRoleElem = 93, RULE_createOptRoleElem = 94, RULE_createUserStmt = 95, 
		RULE_alterRoleStmt = 96, RULE_opt_in_database = 97, RULE_alterRoleSetStmt = 98, 
		RULE_alterUserStmt = 99, RULE_alterUserSetStmt = 100, RULE_dropRoleStmt = 101, 
		RULE_dropUserStmt = 102, RULE_createGroupStmt = 103, RULE_alterGroupStmt = 104, 
		RULE_add_drop = 105, RULE_dropGroupStmt = 106, RULE_createSchemaStmt = 107, 
		RULE_optSchemaName = 108, RULE_optSchemaEltList = 109, RULE_schema_stmt = 110, 
		RULE_variableSetStmt = 111, RULE_set_rest = 112, RULE_set_rest_more = 113, 
		RULE_var_name = 114, RULE_var_list = 115, RULE_var_value = 116, RULE_iso_level = 117, 
		RULE_opt_boolean_or_string = 118, RULE_zone_value = 119, RULE_opt_encoding = 120, 
		RULE_colId_or_Sconst = 121, RULE_variableResetStmt = 122, RULE_setResetClause = 123, 
		RULE_functionSetResetClause = 124, RULE_variableShowStmt = 125, RULE_constraintsSetStmt = 126, 
		RULE_constraints_set_list = 127, RULE_constraints_set_mode = 128, RULE_checkPointStmt = 129, 
		RULE_discardStmt = 130, RULE_alterTableStmt = 131, RULE_alter_table_cmds = 132, 
		RULE_alter_table_cmd = 133, RULE_alter_column_default = 134, RULE_opt_drop_behavior = 135, 
		RULE_opt_collate_clause = 136, RULE_alter_using = 137, RULE_reloptions = 138, 
		RULE_opt_reloptions = 139, RULE_reloption_list = 140, RULE_reloption_elem = 141, 
		RULE_alterCompositeTypeStmt = 142, RULE_alter_type_cmds = 143, RULE_alter_type_cmd = 144, 
		RULE_closePortalStmt = 145, RULE_copyStmt = 146, RULE_copy_from = 147, 
		RULE_copy_file_name = 148, RULE_copy_options = 149, RULE_copy_opt_list = 150, 
		RULE_copy_opt_item = 151, RULE_opt_binary = 152, RULE_opt_oids = 153, 
		RULE_copy_delimiter = 154, RULE_opt_using = 155, RULE_copy_generic_opt_list = 156, 
		RULE_copy_generic_opt_elem = 157, RULE_copy_generic_opt_arg = 158, RULE_copy_generic_opt_arg_list = 159, 
		RULE_copy_generic_opt_arg_list_item = 160, RULE_createStmt = 161, RULE_optTemp = 162, 
		RULE_optTableElementList = 163, RULE_optTypedTableElementList = 164, RULE_tableElementList = 165, 
		RULE_typedTableElementList = 166, RULE_tableElement = 167, RULE_typedTableElement = 168, 
		RULE_columnDef = 169, RULE_columnOptions = 170, RULE_colQualList = 171, 
		RULE_colConstraint = 172, RULE_colConstraintElem = 173, RULE_constraintAttr = 174, 
		RULE_tableLikeClause = 175, RULE_tableLikeOptionList = 176, RULE_tableLikeOption = 177, 
		RULE_tableConstraint = 178, RULE_constraintElem = 179, RULE_opt_no_inherit = 180, 
		RULE_opt_column_list = 181, RULE_columnList = 182, RULE_columnElem = 183, 
		RULE_key_match = 184, RULE_exclusionConstraintList = 185, RULE_exclusionConstraintElem = 186, 
		RULE_exclusionWhereClause = 187, RULE_key_actions = 188, RULE_key_update = 189, 
		RULE_key_delete = 190, RULE_key_action = 191, RULE_optInherit = 192, RULE_optWith = 193, 
		RULE_onCommitOption = 194, RULE_optTableSpace = 195, RULE_optConsTableSpace = 196, 
		RULE_existingIndex = 197, RULE_createAsStmt = 198, RULE_create_as_target = 199, 
		RULE_opt_with_data = 200, RULE_createSeqStmt = 201, RULE_alterSeqStmt = 202, 
		RULE_optSeqOptList = 203, RULE_seqOptList = 204, RULE_seqOptElem = 205, 
		RULE_opt_by = 206, RULE_numericOnly = 207, RULE_numericOnly_list = 208, 
		RULE_createPLangStmt = 209, RULE_opt_trusted = 210, RULE_handler_name = 211, 
		RULE_opt_inline_handler = 212, RULE_validator_clause = 213, RULE_opt_validator = 214, 
		RULE_dropPLangStmt = 215, RULE_opt_procedural = 216, RULE_createTableSpaceStmt = 217, 
		RULE_optTableSpaceOwner = 218, RULE_dropTableSpaceStmt = 219, RULE_createExtensionStmt = 220, 
		RULE_create_extension_opt_list = 221, RULE_create_extension_opt_item = 222, 
		RULE_alterExtensionStmt = 223, RULE_alter_extension_opt_list = 224, RULE_alter_extension_opt_item = 225, 
		RULE_alterExtensionContentsStmt = 226, RULE_createFdwStmt = 227, RULE_fdw_option = 228, 
		RULE_fdw_options = 229, RULE_opt_fdw_options = 230, RULE_dropFdwStmt = 231, 
		RULE_alterFdwStmt = 232, RULE_create_generic_options = 233, RULE_generic_option_list = 234, 
		RULE_alter_generic_options = 235, RULE_alter_generic_option_list = 236, 
		RULE_alter_generic_option_elem = 237, RULE_generic_option_elem = 238, 
		RULE_generic_option_name = 239, RULE_generic_option_arg = 240, RULE_createForeignServerStmt = 241, 
		RULE_opt_type = 242, RULE_foreign_server_version = 243, RULE_opt_foreign_server_version = 244, 
		RULE_dropForeignServerStmt = 245, RULE_alterForeignServerStmt = 246, RULE_createForeignTableStmt = 247, 
		RULE_optForeignTableElementList = 248, RULE_foreignTableElementList = 249, 
		RULE_foreignTableElement = 250, RULE_alterForeignTableStmt = 251, RULE_createUserMappingStmt = 252, 
		RULE_auth_ident = 253, RULE_dropUserMappingStmt = 254, RULE_alterUserMappingStmt = 255, 
		RULE_createTrigStmt = 256, RULE_triggerActionTime = 257, RULE_triggerEvents = 258, 
		RULE_triggerOneEvent = 259, RULE_triggerForSpec = 260, RULE_triggerForOptEach = 261, 
		RULE_triggerForType = 262, RULE_triggerWhen = 263, RULE_triggerFuncArgs = 264, 
		RULE_triggerFuncArg = 265, RULE_optConstrFromTable = 266, RULE_constraintAttributeSpec = 267, 
		RULE_constraintAttributeElem = 268, RULE_dropTrigStmt = 269, RULE_createAssertStmt = 270, 
		RULE_dropAssertStmt = 271, RULE_defineStmt = 272, RULE_definition = 273, 
		RULE_def_list = 274, RULE_def_elem = 275, RULE_def_arg = 276, RULE_aggr_args = 277, 
		RULE_old_aggr_definition = 278, RULE_old_aggr_list = 279, RULE_old_aggr_elem = 280, 
		RULE_opt_enum_val_list = 281, RULE_enum_val_list = 282, RULE_alterEnumStmt = 283, 
		RULE_createOpClassStmt = 284, RULE_opclass_item_list = 285, RULE_opclass_item = 286, 
		RULE_opt_default = 287, RULE_opt_opfamily = 288, RULE_opclass_purpose = 289, 
		RULE_opt_recheck = 290, RULE_createOpFamilyStmt = 291, RULE_alterOpFamilyStmt = 292, 
		RULE_opclass_drop_list = 293, RULE_opclass_drop = 294, RULE_dropOpClassStmt = 295, 
		RULE_dropOpFamilyStmt = 296, RULE_dropOwnedStmt = 297, RULE_reassignOwnedStmt = 298, 
		RULE_dropStmt = 299, RULE_drop_type = 300, RULE_any_name_list = 301, RULE_any_name = 302, 
		RULE_attrs = 303, RULE_truncateStmt = 304, RULE_opt_restart_seqs = 305, 
		RULE_commentStmt = 306, RULE_comment_type = 307, RULE_comment_text = 308, 
		RULE_secLabelStmt = 309, RULE_opt_provider = 310, RULE_security_label_type = 311, 
		RULE_security_label = 312, RULE_fetchStmt = 313, RULE_fetch_args = 314, 
		RULE_from_in = 315, RULE_opt_from_in = 316, RULE_grantStmt = 317, RULE_revokeStmt = 318, 
		RULE_privileges = 319, RULE_privilege_list = 320, RULE_privilege = 321, 
		RULE_privilege_target = 322, RULE_grantee_list = 323, RULE_grantee = 324, 
		RULE_opt_grant_grant_option = 325, RULE_function_with_argtypes_list = 326, 
		RULE_function_with_argtypes = 327, RULE_grantRoleStmt = 328, RULE_revokeRoleStmt = 329, 
		RULE_opt_grant_admin_option = 330, RULE_opt_granted_by = 331, RULE_alterDefaultPrivilegesStmt = 332, 
		RULE_defACLOptionList = 333, RULE_defACLOption = 334, RULE_defACLAction = 335, 
		RULE_defacl_privilege_target = 336, RULE_indexStmt = 337, RULE_opt_unique = 338, 
		RULE_opt_concurrently = 339, RULE_opt_index_name = 340, RULE_access_method_clause = 341, 
		RULE_index_params = 342, RULE_index_elem = 343, RULE_opt_collate = 344, 
		RULE_opt_class = 345, RULE_opt_asc_desc = 346, RULE_opt_nulls_order = 347, 
		RULE_createFunctionStmt = 348, RULE_opt_or_replace = 349, RULE_func_args = 350, 
		RULE_func_args_list = 351, RULE_func_args_with_defaults = 352, RULE_func_args_with_defaults_list = 353, 
		RULE_func_arg = 354, RULE_arg_class = 355, RULE_param_name = 356, RULE_func_return = 357, 
		RULE_func_type = 358, RULE_func_arg_with_default = 359, RULE_createfunc_opt_list = 360, 
		RULE_common_func_opt_item = 361, RULE_createfunc_opt_item = 362, RULE_func_as = 363, 
		RULE_opt_definition = 364, RULE_table_func_column = 365, RULE_table_func_column_list = 366, 
		RULE_alterFunctionStmt = 367, RULE_alterfunc_opt_list = 368, RULE_opt_restrict = 369, 
		RULE_removeFuncStmt = 370, RULE_removeAggrStmt = 371, RULE_removeOperStmt = 372, 
		RULE_oper_argtypes = 373, RULE_any_operator = 374, RULE_doStmt = 375, 
		RULE_dostmt_opt_list = 376, RULE_dostmt_opt_item = 377, RULE_createCastStmt = 378, 
		RULE_cast_context = 379, RULE_dropCastStmt = 380, RULE_opt_if_exists = 381, 
		RULE_reindexStmt = 382, RULE_reindex_type = 383, RULE_opt_force = 384, 
		RULE_renameStmt = 385, RULE_opt_column = 386, RULE_opt_set_data = 387, 
		RULE_alterObjectSchemaStmt = 388, RULE_alterOwnerStmt = 389, RULE_ruleStmt = 390, 
		RULE_ruleActionList = 391, RULE_ruleActionMulti = 392, RULE_ruleActionStmt = 393, 
		RULE_ruleActionStmtOrEmpty = 394, RULE_event = 395, RULE_opt_instead = 396, 
		RULE_dropRuleStmt = 397, RULE_notifyStmt = 398, RULE_notify_payload = 399, 
		RULE_listenStmt = 400, RULE_unlistenStmt = 401, RULE_transactionStmt = 402, 
		RULE_opt_transaction = 403, RULE_transaction_mode_item = 404, RULE_transaction_mode_list = 405, 
		RULE_transaction_mode_list_or_empty = 406, RULE_viewStmt = 407, RULE_opt_check_option = 408, 
		RULE_loadStmt = 409, RULE_createdbStmt = 410, RULE_createdb_opt_list = 411, 
		RULE_createdb_opt_item = 412, RULE_opt_equal = 413, RULE_alterDatabaseStmt = 414, 
		RULE_alterDatabaseSetStmt = 415, RULE_alterdb_opt_list = 416, RULE_alterdb_opt_item = 417, 
		RULE_dropdbStmt = 418, RULE_createDomainStmt = 419, RULE_alterDomainStmt = 420, 
		RULE_opt_as = 421, RULE_alterTSDictionaryStmt = 422, RULE_alterTSConfigurationStmt = 423, 
		RULE_createConversionStmt = 424, RULE_clusterStmt = 425, RULE_cluster_index_specification = 426, 
		RULE_vacuumStmt = 427, RULE_vacuum_option_list = 428, RULE_vacuum_option_elem = 429, 
		RULE_analyzeStmt = 430, RULE_analyze_keyword = 431, RULE_opt_verbose = 432, 
		RULE_opt_full = 433, RULE_opt_freeze = 434, RULE_opt_name_list = 435, 
		RULE_explainStmt = 436, RULE_explainableStmt = 437, RULE_explain_option_list = 438, 
		RULE_explain_option_elem = 439, RULE_explain_option_name = 440, RULE_explain_option_arg = 441, 
		RULE_prepareStmt = 442, RULE_prep_type_clause = 443, RULE_preparableStmt = 444, 
		RULE_executeStmt = 445, RULE_execute_param_clause = 446, RULE_deallocateStmt = 447, 
		RULE_insertStmt = 448, RULE_insert_rest = 449, RULE_insert_column_list = 450, 
		RULE_insert_column_item = 451, RULE_returning_clause = 452, RULE_deleteStmt = 453, 
		RULE_using_clause = 454, RULE_lockStmt = 455, RULE_opt_lock = 456, RULE_lock_type = 457, 
		RULE_opt_nowait = 458, RULE_updateStmt = 459, RULE_set_clause_list = 460, 
		RULE_set_clause = 461, RULE_single_set_clause = 462, RULE_multiple_set_clause = 463, 
		RULE_set_target = 464, RULE_set_target_list = 465, RULE_declareCursorStmt = 466, 
		RULE_cursor_name = 467, RULE_cursor_options = 468, RULE_opt_hold = 469, 
		RULE_selectStmt = 470, RULE_select_with_parens = 471, RULE_select_no_parens = 472, 
		RULE_select_clause = 473, RULE_simple_select = 474, RULE_with_clause = 475, 
		RULE_cte_list = 476, RULE_common_table_expr = 477, RULE_opt_with_clause = 478, 
		RULE_into_clause = 479, RULE_into_clause_arguments = 480, RULE_into_clause_argument = 481, 
		RULE_optTempTableName = 482, RULE_opt_table = 483, RULE_opt_all = 484, 
		RULE_opt_distinct = 485, RULE_opt_sort_clause = 486, RULE_sort_clause = 487, 
		RULE_sortby_list = 488, RULE_sortby = 489, RULE_select_limit = 490, RULE_opt_select_limit = 491, 
		RULE_limit_clause = 492, RULE_offset_clause = 493, RULE_select_limit_value = 494, 
		RULE_select_offset_value = 495, RULE_opt_select_fetch_first_value = 496, 
		RULE_select_offset_value2 = 497, RULE_row_or_rows = 498, RULE_first_or_next = 499, 
		RULE_group_clause = 500, RULE_having_clause = 501, RULE_for_locking_clause = 502, 
		RULE_opt_for_locking_clause = 503, RULE_for_locking_items = 504, RULE_for_locking_item = 505, 
		RULE_locked_rels_list = 506, RULE_values_clause = 507, RULE_from_clause = 508, 
		RULE_from_list = 509, RULE_table_ref = 510, RULE_table_ref2 = 511, RULE_joined_table = 512, 
		RULE_alias_clause = 513, RULE_join_type = 514, RULE_join_outer = 515, 
		RULE_join_qual = 516, RULE_relation_expr = 517, RULE_relation_expr_list = 518, 
		RULE_relation_expr_opt_alias = 519, RULE_func_table = 520, RULE_where_clause = 521, 
		RULE_where_or_current_clause = 522, RULE_optTableFuncElementList = 523, 
		RULE_tableFuncElementList = 524, RULE_tableFuncElement = 525, RULE_typename = 526, 
		RULE_opt_array_bounds = 527, RULE_simpleTypename = 528, RULE_constTypename = 529, 
		RULE_genericType = 530, RULE_opt_type_modifiers = 531, RULE_numeric = 532, 
		RULE_opt_float = 533, RULE_bit = 534, RULE_constBit = 535, RULE_bitWithLength = 536, 
		RULE_bitWithoutLength = 537, RULE_character_ = 538, RULE_constCharacter = 539, 
		RULE_characterWithLength = 540, RULE_characterWithoutLength = 541, RULE_character = 542, 
		RULE_opt_varying = 543, RULE_opt_charset = 544, RULE_constDatetime = 545, 
		RULE_constInterval = 546, RULE_opt_timezone = 547, RULE_opt_interval = 548, 
		RULE_interval_second = 549, RULE_a_expr = 550, RULE_b_expr = 551, RULE_c_expr = 552, 
		RULE_func_expr = 553, RULE_xml_root_version = 554, RULE_opt_xml_root_standalone = 555, 
		RULE_xml_attributes = 556, RULE_xml_attribute_list = 557, RULE_xml_attribute_el = 558, 
		RULE_document_or_content = 559, RULE_xml_whitespace_option = 560, RULE_xmlexists_argument = 561, 
		RULE_window_clause = 562, RULE_window_definition_list = 563, RULE_window_definition = 564, 
		RULE_over_clause = 565, RULE_window_specification = 566, RULE_opt_existing_window_name = 567, 
		RULE_opt_partition_clause = 568, RULE_opt_frame_clause = 569, RULE_frame_extent = 570, 
		RULE_frame_bound = 571, RULE_row = 572, RULE_sub_type = 573, RULE_all_Op = 574, 
		RULE_mathOp = 575, RULE_qual_Op = 576, RULE_qual_all_Op = 577, RULE_subquery_Op = 578, 
		RULE_expr_list = 579, RULE_func_arg_list = 580, RULE_func_arg_expr = 581, 
		RULE_type_list = 582, RULE_array_expr = 583, RULE_array_expr_list = 584, 
		RULE_extract_list = 585, RULE_extract_arg = 586, RULE_overlay_list = 587, 
		RULE_overlay_placing = 588, RULE_position_list = 589, RULE_substr_list = 590, 
		RULE_substr_from = 591, RULE_substr_for = 592, RULE_trim_list = 593, RULE_in_expr = 594, 
		RULE_case_expr = 595, RULE_when_clause_list = 596, RULE_when_clause = 597, 
		RULE_case_default = 598, RULE_case_arg = 599, RULE_columnref = 600, RULE_indirection_el = 601, 
		RULE_indirection = 602, RULE_opt_indirection = 603, RULE_opt_asymmetric = 604, 
		RULE_ctext_expr = 605, RULE_ctext_expr_list = 606, RULE_ctext_row = 607, 
		RULE_target_list = 608, RULE_target_el = 609, RULE_qualified_name_list = 610, 
		RULE_qualified_name = 611, RULE_name_list = 612, RULE_name = 613, RULE_database_name = 614, 
		RULE_access_method = 615, RULE_attr_name = 616, RULE_index_name = 617, 
		RULE_file_name = 618, RULE_func_name = 619, RULE_aexprConst = 620, RULE_iconst = 621, 
		RULE_sconst = 622, RULE_roleId = 623, RULE_signedIconst = 624, RULE_colId = 625, 
		RULE_type_function_name = 626, RULE_colLabel = 627, RULE_unreserved_keyword = 628, 
		RULE_col_name_keyword = 629, RULE_type_func_name_keyword = 630, RULE_reserved_keyword = 631;
	public static final String[] ruleNames = {
		"pl_function", "comp_options", "comp_option", "opt_semi", "pl_block", 
		"decl_sect", "decl_start", "decl_stmts", "decl_stmt", "decl_statement", 
		"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
		"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
		"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
		"assign_operator", "proc_sect", "proc_stmts", "proc_stmt", "stmt_perform", 
		"stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
		"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsif", 
		"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
		"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "stmt_raise", "raiseLevel", "raise_expr", "loop_body", 
		"stmt_execsql", "stmt_dynexecute", "usingClause", "usingClauseArgumentsList", 
		"usingClauseArgument", "stmt_open", "cursorArgumentsList", "cursorArgument", 
		"stmt_fetch", "stmt_move", "opt_fetch_direction", "stmt_close", "stmt_null", 
		"cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_then", "expr_until_loop", "opt_block_label", "opt_label", 
		"opt_exitcond", "any_identifier", "stmtblock", "stmtmulti", "stmt", "createRoleStmt", 
		"opt_with", "optRoleList", "alterOptRoleList", "alterOptRoleElem", "createOptRoleElem", 
		"createUserStmt", "alterRoleStmt", "opt_in_database", "alterRoleSetStmt", 
		"alterUserStmt", "alterUserSetStmt", "dropRoleStmt", "dropUserStmt", "createGroupStmt", 
		"alterGroupStmt", "add_drop", "dropGroupStmt", "createSchemaStmt", "optSchemaName", 
		"optSchemaEltList", "schema_stmt", "variableSetStmt", "set_rest", "set_rest_more", 
		"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
		"zone_value", "opt_encoding", "colId_or_Sconst", "variableResetStmt", 
		"setResetClause", "functionSetResetClause", "variableShowStmt", "constraintsSetStmt", 
		"constraints_set_list", "constraints_set_mode", "checkPointStmt", "discardStmt", 
		"alterTableStmt", "alter_table_cmds", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "reloptions", 
		"opt_reloptions", "reloption_list", "reloption_elem", "alterCompositeTypeStmt", 
		"alter_type_cmds", "alter_type_cmd", "closePortalStmt", "copyStmt", "copy_from", 
		"copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", 
		"opt_oids", "copy_delimiter", "opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", 
		"copy_generic_opt_arg", "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", 
		"createStmt", "optTemp", "optTableElementList", "optTypedTableElementList", 
		"tableElementList", "typedTableElementList", "tableElement", "typedTableElement", 
		"columnDef", "columnOptions", "colQualList", "colConstraint", "colConstraintElem", 
		"constraintAttr", "tableLikeClause", "tableLikeOptionList", "tableLikeOption", 
		"tableConstraint", "constraintElem", "opt_no_inherit", "opt_column_list", 
		"columnList", "columnElem", "key_match", "exclusionConstraintList", "exclusionConstraintElem", 
		"exclusionWhereClause", "key_actions", "key_update", "key_delete", "key_action", 
		"optInherit", "optWith", "onCommitOption", "optTableSpace", "optConsTableSpace", 
		"existingIndex", "createAsStmt", "create_as_target", "opt_with_data", 
		"createSeqStmt", "alterSeqStmt", "optSeqOptList", "seqOptList", "seqOptElem", 
		"opt_by", "numericOnly", "numericOnly_list", "createPLangStmt", "opt_trusted", 
		"handler_name", "opt_inline_handler", "validator_clause", "opt_validator", 
		"dropPLangStmt", "opt_procedural", "createTableSpaceStmt", "optTableSpaceOwner", 
		"dropTableSpaceStmt", "createExtensionStmt", "create_extension_opt_list", 
		"create_extension_opt_item", "alterExtensionStmt", "alter_extension_opt_list", 
		"alter_extension_opt_item", "alterExtensionContentsStmt", "createFdwStmt", 
		"fdw_option", "fdw_options", "opt_fdw_options", "dropFdwStmt", "alterFdwStmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createForeignServerStmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "dropForeignServerStmt", 
		"alterForeignServerStmt", "createForeignTableStmt", "optForeignTableElementList", 
		"foreignTableElementList", "foreignTableElement", "alterForeignTableStmt", 
		"createUserMappingStmt", "auth_ident", "dropUserMappingStmt", "alterUserMappingStmt", 
		"createTrigStmt", "triggerActionTime", "triggerEvents", "triggerOneEvent", 
		"triggerForSpec", "triggerForOptEach", "triggerForType", "triggerWhen", 
		"triggerFuncArgs", "triggerFuncArg", "optConstrFromTable", "constraintAttributeSpec", 
		"constraintAttributeElem", "dropTrigStmt", "createAssertStmt", "dropAssertStmt", 
		"defineStmt", "definition", "def_list", "def_elem", "def_arg", "aggr_args", 
		"old_aggr_definition", "old_aggr_list", "old_aggr_elem", "opt_enum_val_list", 
		"enum_val_list", "alterEnumStmt", "createOpClassStmt", "opclass_item_list", 
		"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
		"createOpFamilyStmt", "alterOpFamilyStmt", "opclass_drop_list", "opclass_drop", 
		"dropOpClassStmt", "dropOpFamilyStmt", "dropOwnedStmt", "reassignOwnedStmt", 
		"dropStmt", "drop_type", "any_name_list", "any_name", "attrs", "truncateStmt", 
		"opt_restart_seqs", "commentStmt", "comment_type", "comment_text", "secLabelStmt", 
		"opt_provider", "security_label_type", "security_label", "fetchStmt", 
		"fetch_args", "from_in", "opt_from_in", "grantStmt", "revokeStmt", "privileges", 
		"privilege_list", "privilege", "privilege_target", "grantee_list", "grantee", 
		"opt_grant_grant_option", "function_with_argtypes_list", "function_with_argtypes", 
		"grantRoleStmt", "revokeRoleStmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterDefaultPrivilegesStmt", "defACLOptionList", "defACLOption", "defACLAction", 
		"defacl_privilege_target", "indexStmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem", 
		"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createFunctionStmt", 
		"opt_or_replace", "func_args", "func_args_list", "func_args_with_defaults", 
		"func_args_with_defaults_list", "func_arg", "arg_class", "param_name", 
		"func_return", "func_type", "func_arg_with_default", "createfunc_opt_list", 
		"common_func_opt_item", "createfunc_opt_item", "func_as", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterFunctionStmt", "alterfunc_opt_list", 
		"opt_restrict", "removeFuncStmt", "removeAggrStmt", "removeOperStmt", 
		"oper_argtypes", "any_operator", "doStmt", "dostmt_opt_list", "dostmt_opt_item", 
		"createCastStmt", "cast_context", "dropCastStmt", "opt_if_exists", "reindexStmt", 
		"reindex_type", "opt_force", "renameStmt", "opt_column", "opt_set_data", 
		"alterObjectSchemaStmt", "alterOwnerStmt", "ruleStmt", "ruleActionList", 
		"ruleActionMulti", "ruleActionStmt", "ruleActionStmtOrEmpty", "event", 
		"opt_instead", "dropRuleStmt", "notifyStmt", "notify_payload", "listenStmt", 
		"unlistenStmt", "transactionStmt", "opt_transaction", "transaction_mode_item", 
		"transaction_mode_list", "transaction_mode_list_or_empty", "viewStmt", 
		"opt_check_option", "loadStmt", "createdbStmt", "createdb_opt_list", "createdb_opt_item", 
		"opt_equal", "alterDatabaseStmt", "alterDatabaseSetStmt", "alterdb_opt_list", 
		"alterdb_opt_item", "dropdbStmt", "createDomainStmt", "alterDomainStmt", 
		"opt_as", "alterTSDictionaryStmt", "alterTSConfigurationStmt", "createConversionStmt", 
		"clusterStmt", "cluster_index_specification", "vacuumStmt", "vacuum_option_list", 
		"vacuum_option_elem", "analyzeStmt", "analyze_keyword", "opt_verbose", 
		"opt_full", "opt_freeze", "opt_name_list", "explainStmt", "explainableStmt", 
		"explain_option_list", "explain_option_elem", "explain_option_name", "explain_option_arg", 
		"prepareStmt", "prep_type_clause", "preparableStmt", "executeStmt", "execute_param_clause", 
		"deallocateStmt", "insertStmt", "insert_rest", "insert_column_list", "insert_column_item", 
		"returning_clause", "deleteStmt", "using_clause", "lockStmt", "opt_lock", 
		"lock_type", "opt_nowait", "updateStmt", "set_clause_list", "set_clause", 
		"single_set_clause", "multiple_set_clause", "set_target", "set_target_list", 
		"declareCursorStmt", "cursor_name", "cursor_options", "opt_hold", "selectStmt", 
		"select_with_parens", "select_no_parens", "select_clause", "simple_select", 
		"with_clause", "cte_list", "common_table_expr", "opt_with_clause", "into_clause", 
		"into_clause_arguments", "into_clause_argument", "optTempTableName", "opt_table", 
		"opt_all", "opt_distinct", "opt_sort_clause", "sort_clause", "sortby_list", 
		"sortby", "select_limit", "opt_select_limit", "limit_clause", "offset_clause", 
		"select_limit_value", "select_offset_value", "opt_select_fetch_first_value", 
		"select_offset_value2", "row_or_rows", "first_or_next", "group_clause", 
		"having_clause", "for_locking_clause", "opt_for_locking_clause", "for_locking_items", 
		"for_locking_item", "locked_rels_list", "values_clause", "from_clause", 
		"from_list", "table_ref", "table_ref2", "joined_table", "alias_clause", 
		"join_type", "join_outer", "join_qual", "relation_expr", "relation_expr_list", 
		"relation_expr_opt_alias", "func_table", "where_clause", "where_or_current_clause", 
		"optTableFuncElementList", "tableFuncElementList", "tableFuncElement", 
		"typename", "opt_array_bounds", "simpleTypename", "constTypename", "genericType", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constBit", "bitWithLength", 
		"bitWithoutLength", "character_", "constCharacter", "characterWithLength", 
		"characterWithoutLength", "character", "opt_varying", "opt_charset", "constDatetime", 
		"constInterval", "opt_timezone", "opt_interval", "interval_second", "a_expr", 
		"b_expr", "c_expr", "func_expr", "xml_root_version", "opt_xml_root_standalone", 
		"xml_attributes", "xml_attribute_list", "xml_attribute_el", "document_or_content", 
		"xml_whitespace_option", "xmlexists_argument", "window_clause", "window_definition_list", 
		"window_definition", "over_clause", "window_specification", "opt_existing_window_name", 
		"opt_partition_clause", "opt_frame_clause", "frame_extent", "frame_bound", 
		"row", "sub_type", "all_Op", "mathOp", "qual_Op", "qual_all_Op", "subquery_Op", 
		"expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
		"array_expr_list", "extract_list", "extract_arg", "overlay_list", "overlay_placing", 
		"position_list", "substr_list", "substr_from", "substr_for", "trim_list", 
		"in_expr", "case_expr", "when_clause_list", "when_clause", "case_default", 
		"case_arg", "columnref", "indirection_el", "indirection", "opt_indirection", 
		"opt_asymmetric", "ctext_expr", "ctext_expr_list", "ctext_row", "target_list", 
		"target_el", "qualified_name_list", "qualified_name", "name_list", "name", 
		"database_name", "access_method", "attr_name", "index_name", "file_name", 
		"func_name", "aexprConst", "iconst", "sconst", "roleId", "signedIconst", 
		"colId", "type_function_name", "colLabel", "unreserved_keyword", "col_name_keyword", 
		"type_func_name_keyword", "reserved_keyword"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'#'", "';'", "'('", "')'", "','", "'%'", "'='", "'['", "']'", "'.'", 
		"'*'", "'-'", "'^'", "'/'", "'+'", "'<'", "'>'", "'||'", "':'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'<<'", "'>>'", "'::'", "'..'", "':='"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "K_MESSAGE", "K_NEXT", 
		"K_MESSAGE_TEXT", "K_STACKED", "K_DIAGNOSTICS", "K_PG_EXCEPTION_CONTEXT", 
		"K_LOOP", "K_USE_COLUMN", "K_DUMP", "K_SLICE", "K_EXECUTE", "K_COLLATE", 
		"K_RESULT_OID", "K_WHILE", "K_ERROR", "K_FORWARD", "K_FOREACH", "K_RETURNED_SQLSTATE", 
		"K_BACKWARD", "K_EXCEPTION", "K_HINT", "K_CURRENT", "K_RAISE", "K_OPEN", 
		"K_DETAIL", "K_RETURN", "K_CLOSE", "K_SCROLL", "K_MOVE", "K_USE_VARIABLE", 
		"K_ALIAS", "K_INFO", "K_NO", "K_RELATIVE", "K_LOG", "K_QUERY", "K_GET", 
		"K_CONTINUE", "K_FETCH", "K_ROW_COUNT", "K_DEBUG", "K_CONSTANT", "K_CURSOR", 
		"K_PG_EXCEPTION_DETAIL", "K_ELSIF", "K_PRIOR", "K_EXIT", "K_ABSOLUTE", 
		"K_FIRST", "K_LAST", "K_ROWTYPE", "K_VARIABLE_CONFLICT", "K_PG_EXCEPTION_HINT", 
		"K_OPTION", "K_NOTICE", "K_PERFORM", "K_WARNING", "K_REVERSE", "NULLS_FIRST", 
		"NULLS_LAST", "WITH_TIME", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", 
		"ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", 
		"ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSERTION", 
		"ASSIGNMENT", "ASYMMETRIC", "AT", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", 
		"BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", 
		"BOTH", "BY", "CACHE", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", 
		"CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", 
		"COLUMN", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", 
		"CONFIGURATION", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE", "CROSS", "CSV", 
		"CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", 
		"DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", 
		"DELIMITER", "DELIMITERS", "DESC", "DICTIONARY", "DISABLE_P", "DISCARD", 
		"DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", 
		"ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", 
		"EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", 
		"EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FIRST_P", 
		"FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", 
		"FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", "GRANTED", 
		"GREATEST", "GROUP_P", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", 
		"IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", 
		"IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS", 
		"INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", 
		"INSERT", "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", 
		"INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", 
		"LARGE_P", "LAST_P", "LC_COLLATE_P", "LC_CTYPE_P", "LEADING", "LEAKPROOF", 
		"LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", 
		"LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "MAPPING", "MATCH", 
		"MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", 
		"NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT", "NO", "NONE", "NOT", 
		"NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", 
		"NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "ON", "ONLY", "OPERATOR", 
		"OPTION", "OPTIONS", "OR", "ORDER", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", 
		"OVERLAY", "OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
		"PASSWORD", "PLACING", "PLANS", "POSITION", "PRECEDING", "PRECISION", 
		"PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
		"PROCEDURE", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", 
		"RECURSIVE", "REF", "REFERENCES", "REINDEX", "RELATIVE_P", "RELEASE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", 
		"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROW", 
		"ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND_P", 
		"SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SESSION_USER", "SET", "SETOF", "SHARE", "SHOW", "SIMILAR", 
		"SIMPLE", "SMALLINT", "SNAPSHOT", "SOME", "STABLE", "STANDALONE_P", "START", 
		"STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
		"SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESPACE", 
		"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME", "TIMESTAMP", 
		"TO", "TRAILING", "TRANSACTION", "TREAT", "TRIGGER", "TRIM", "TRUE_P", 
		"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
		"UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
		"UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", 
		"VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", 
		"VIEW", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
		"XMLSERIALIZE", "YEAR_P", "YES_P", "ZONE", "LESS_LESS", "GREATER_GREATER", 
		"TYPECAST", "DOT_DOT", "COLON_EQUALS", "SCONST", "BCONST", "XCONST", "IDENT", 
		"PARAM", "FCONST", "ICONST", "Op", "T_comment", "T_ccomment", "T_space", 
		"T_newline", "T_whitespace", "T_special_whitespace", "T_horiz_whitespace", 
		"T_whitespace_with_newline", "T_horiz_space", "PSQL_COMMAND"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlPgSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlPgSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Pl_functionContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1264);
			comp_options(0);
			setState(1265);
			pl_block();
			setState(1266);
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Comp_optionContext comp_option() {
			return getRuleContext(Comp_optionContext.class,0);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		return comp_options(0);
	}

	private Comp_optionsContext comp_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, _parentState);
		Comp_optionsContext _prevctx = _localctx;
		int _startState = 2;
		enterRecursionRule(_localctx, 2, RULE_comp_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1273);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Comp_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_comp_options);
					setState(1269);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1270);
					comp_option();
					}
					} 
				}
				setState(1275);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Comp_optionContext extends ParserRuleContext {
		public TerminalNode K_OPTION() { return getToken(PlPgSqlParser.K_OPTION, 0); }
		public TerminalNode K_DUMP() { return getToken(PlPgSqlParser.K_DUMP, 0); }
		public TerminalNode K_VARIABLE_CONFLICT() { return getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0); }
		public TerminalNode K_ERROR() { return getToken(PlPgSqlParser.K_ERROR, 0); }
		public TerminalNode K_USE_VARIABLE() { return getToken(PlPgSqlParser.K_USE_VARIABLE, 0); }
		public TerminalNode K_USE_COLUMN() { return getToken(PlPgSqlParser.K_USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_comp_option);
		try {
			setState(1288);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1276);
				match(T__0);
				setState(1277);
				match(K_OPTION);
				setState(1278);
				match(K_DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1279);
				match(T__0);
				setState(1280);
				match(K_VARIABLE_CONFLICT);
				setState(1281);
				match(K_ERROR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1282);
				match(T__0);
				setState(1283);
				match(K_VARIABLE_CONFLICT);
				setState(1284);
				match(K_USE_VARIABLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1285);
				match(T__0);
				setState(1286);
				match(K_VARIABLE_CONFLICT);
				setState(1287);
				match(K_USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_semiContext extends ParserRuleContext {
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_opt_semi);
		try {
			setState(1292);
			switch (_input.LA(1)) {
			case T__1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1290);
				match(T__1);
				}
				break;
			case EOF:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PlPgSqlParser.BEGIN_P, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1294);
			decl_sect();
			setState(1295);
			match(BEGIN_P);
			setState(1296);
			proc_sect();
			setState(1297);
			exception_sect();
			setState(1298);
			match(END_P);
			setState(1299);
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_decl_sect);
		try {
			setState(1309);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1301);
				opt_block_label();
				setState(1302);
				decl_start();
				setState(1303);
				decl_stmts(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1305);
				opt_block_label();
				setState(1306);
				decl_start();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1308);
				opt_block_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PlPgSqlParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtsContext extends ParserRuleContext {
		public Decl_stmtContext decl_stmt() {
			return getRuleContext(Decl_stmtContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		return decl_stmts(0);
	}

	private Decl_stmtsContext decl_stmts(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, _parentState);
		Decl_stmtsContext _prevctx = _localctx;
		int _startState = 14;
		enterRecursionRule(_localctx, 14, RULE_decl_stmts, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1314);
			decl_stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1320);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_stmtsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_stmts);
					setState(1316);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1317);
					decl_stmt();
					}
					} 
				}
				setState(1322);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Decl_stmtContext extends ParserRuleContext {
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public TerminalNode LESS_LESS() { return getToken(PlPgSqlParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PlPgSqlParser.GREATER_GREATER, 0); }
		public TerminalNode DECLARE() { return getToken(PlPgSqlParser.DECLARE, 0); }
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_decl_stmt);
		try {
			setState(1329);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1323);
				decl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1324);
				match(LESS_LESS);
				setState(1325);
				any_identifier();
				setState(1326);
				match(GREATER_GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1328);
				match(DECLARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public TerminalNode K_CURSOR() { return getToken(PlPgSqlParser.K_CURSOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public TerminalNode K_ALIAS() { return getToken(PlPgSqlParser.K_ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_decl_statement);
		try {
			setState(1352);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1331);
				decl_varname();
				setState(1332);
				decl_const();
				setState(1333);
				decl_datatype();
				setState(1334);
				decl_collate();
				setState(1335);
				decl_notnull();
				setState(1336);
				decl_defval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1338);
				decl_varname();
				setState(1339);
				opt_scrollable();
				setState(1340);
				match(K_CURSOR);
				setState(1341);
				decl_cursor_args();
				setState(1342);
				decl_is_for();
				setState(1343);
				decl_cursor_query();
				setState(1344);
				match(T__1);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1346);
				decl_varname();
				setState(1347);
				match(K_ALIAS);
				setState(1348);
				match(FOR);
				setState(1349);
				decl_aliasitem();
				setState(1350);
				match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode K_NO() { return getToken(PlPgSqlParser.K_NO, 0); }
		public TerminalNode K_SCROLL() { return getToken(PlPgSqlParser.K_SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_opt_scrollable);
		try {
			setState(1358);
			switch (_input.LA(1)) {
			case K_CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(1355);
				match(K_NO);
				setState(1356);
				match(K_SCROLL);
				}
				break;
			case K_SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1357);
				match(K_SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_decl_cursor_args);
		try {
			setState(1367);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(1362);
				match(T__2);
				setState(1363);
				decl_cursor_arglist(0);
				setState(1364);
				match(T__3);
				}
				break;
			case FOR:
			case IS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public Decl_cursor_argContext decl_cursor_arg() {
			return getRuleContext(Decl_cursor_argContext.class,0);
		}
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		return decl_cursor_arglist(0);
	}

	private Decl_cursor_arglistContext decl_cursor_arglist(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, _parentState);
		Decl_cursor_arglistContext _prevctx = _localctx;
		int _startState = 26;
		enterRecursionRule(_localctx, 26, RULE_decl_cursor_arglist, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1370);
			decl_cursor_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(1377);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Decl_cursor_arglistContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_decl_cursor_arglist);
					setState(1372);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1373);
					match(T__4);
					setState(1374);
					decl_cursor_arg();
					}
					} 
				}
				setState(1379);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380);
			decl_varname();
			setState(1381);
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_aliasitemContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_decl_aliasitem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1385);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_varnameContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_decl_varname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode K_CONSTANT() { return getToken(PlPgSqlParser.K_CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_decl_const);
		try {
			setState(1391);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1390);
				match(K_CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_datatypeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode K_ROWTYPE() { return getToken(PlPgSqlParser.K_ROWTYPE, 0); }
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_decl_datatype);
		try {
			setState(1402);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1393);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1394);
				typename();
				setState(1395);
				match(T__5);
				setState(1396);
				match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1398);
				typename();
				setState(1399);
				match(T__5);
				setState(1400);
				match(K_ROWTYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode K_COLLATE() { return getToken(PlPgSqlParser.K_COLLATE, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_decl_collate);
		try {
			setState(1407);
			switch (_input.LA(1)) {
			case T__1:
			case T__6:
			case DEFAULT:
			case NOT:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1405);
				match(K_COLLATE);
				setState(1406);
				match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_decl_notnull);
		try {
			setState(1412);
			switch (_input.LA(1)) {
			case T__1:
			case T__6:
			case DEFAULT:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1410);
				match(NOT);
				setState(1411);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_decl_defval);
		try {
			setState(1423);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1414);
				match(T__1);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1415);
				decl_defkey();
				setState(1416);
				stmt();
				setState(1417);
				match(T__1);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1419);
				decl_defkey();
				setState(1420);
				a_expr(0);
				setState(1421);
				match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defkeyContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_decl_defkey);
		try {
			setState(1427);
			switch (_input.LA(1)) {
			case T__6:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1425);
				assign_operator();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1426);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode COLON_EQUALS() { return getToken(PlPgSqlParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1429);
			_la = _input.LA(1);
			if ( !(_la==T__6 || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sectContext extends ParserRuleContext {
		public Proc_stmtsContext proc_stmts() {
			return getRuleContext(Proc_stmtsContext.class,0);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_proc_sect);
		try {
			setState(1433);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1431);
				proc_stmts(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmtsContext extends ParserRuleContext {
		public Proc_stmtContext proc_stmt() {
			return getRuleContext(Proc_stmtContext.class,0);
		}
		public Proc_stmtsContext proc_stmts() {
			return getRuleContext(Proc_stmtsContext.class,0);
		}
		public Proc_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmts; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtsContext proc_stmts() throws RecognitionException {
		return proc_stmts(0);
	}

	private Proc_stmtsContext proc_stmts(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_stmtsContext _localctx = new Proc_stmtsContext(_ctx, _parentState);
		Proc_stmtsContext _prevctx = _localctx;
		int _startState = 52;
		enterRecursionRule(_localctx, 52, RULE_proc_stmts, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1436);
			proc_stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1442);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_stmtsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_stmts);
					setState(1438);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1439);
					proc_stmt();
					}
					} 
				}
				setState(1444);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_proc_stmt);
		try {
			setState(1469);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1445);
				pl_block();
				setState(1446);
				match(T__1);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1448);
				stmt_assign();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1449);
				stmt_if();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1450);
				stmt_case();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1451);
				stmt_loop();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1452);
				stmt_while();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1453);
				stmt_for();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1454);
				stmt_foreach_a();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1455);
				stmt_exit();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1456);
				stmt_return();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1457);
				stmt_raise();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1458);
				stmt_execsql();
				setState(1459);
				match(T__1);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1461);
				stmt_dynexecute();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1462);
				stmt_perform();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1463);
				stmt_getdiag();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1464);
				stmt_open();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1465);
				stmt_fetch();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1466);
				stmt_move();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1467);
				stmt_close();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1468);
				stmt_null();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode K_PERFORM() { return getToken(PlPgSqlParser.K_PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			match(K_PERFORM);
			setState(1472);
			expr_until_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1474);
			assign_var(0);
			setState(1475);
			assign_operator();
			setState(1476);
			expr_until_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode K_GET() { return getToken(PlPgSqlParser.K_GET, 0); }
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public TerminalNode K_DIAGNOSTICS() { return getToken(PlPgSqlParser.K_DIAGNOSTICS, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478);
			match(K_GET);
			setState(1479);
			getdiag_area_opt();
			setState(1480);
			match(K_DIAGNOSTICS);
			setState(1481);
			getdiag_list(0);
			setState(1482);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode K_CURRENT() { return getToken(PlPgSqlParser.K_CURRENT, 0); }
		public TerminalNode K_STACKED() { return getToken(PlPgSqlParser.K_STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_getdiag_area_opt);
		try {
			setState(1487);
			switch (_input.LA(1)) {
			case K_DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1485);
				match(K_CURRENT);
				}
				break;
			case K_STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1486);
				match(K_STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_listContext extends ParserRuleContext {
		public Getdiag_list_itemContext getdiag_list_item() {
			return getRuleContext(Getdiag_list_itemContext.class,0);
		}
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		return getdiag_list(0);
	}

	private Getdiag_listContext getdiag_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, _parentState);
		Getdiag_listContext _prevctx = _localctx;
		int _startState = 64;
		enterRecursionRule(_localctx, 64, RULE_getdiag_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1490);
			getdiag_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(1497);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Getdiag_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_getdiag_list);
					setState(1492);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1493);
					match(T__4);
					setState(1494);
					getdiag_list_item();
					}
					} 
				}
				setState(1499);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1500);
			getdiag_target();
			setState(1501);
			assign_operator();
			setState(1502);
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_itemContext extends ParserRuleContext {
		public TerminalNode K_ROW_COUNT() { return getToken(PlPgSqlParser.K_ROW_COUNT, 0); }
		public TerminalNode K_RESULT_OID() { return getToken(PlPgSqlParser.K_RESULT_OID, 0); }
		public TerminalNode K_PG_EXCEPTION_DETAIL() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_DETAIL, 0); }
		public TerminalNode K_PG_EXCEPTION_HINT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_HINT, 0); }
		public TerminalNode K_PG_EXCEPTION_CONTEXT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_CONTEXT, 0); }
		public TerminalNode K_MESSAGE_TEXT() { return getToken(PlPgSqlParser.K_MESSAGE_TEXT, 0); }
		public TerminalNode K_RETURNED_SQLSTATE() { return getToken(PlPgSqlParser.K_RETURNED_SQLSTATE, 0); }
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_getdiag_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1504);
			_la = _input.LA(1);
			if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (K_MESSAGE_TEXT - 22)) | (1L << (K_PG_EXCEPTION_CONTEXT - 22)) | (1L << (K_RESULT_OID - 22)) | (1L << (K_RETURNED_SQLSTATE - 22)) | (1L << (K_ROW_COUNT - 22)) | (1L << (K_PG_EXCEPTION_DETAIL - 22)) | (1L << (K_PG_EXCEPTION_HINT - 22)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_targetContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_getdiag_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1506);
			match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_varContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Expr_until_rightbracketContext expr_until_rightbracket() {
			return getRuleContext(Expr_until_rightbracketContext.class,0);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		return assign_var(0);
	}

	private Assign_varContext assign_var(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assign_varContext _localctx = new Assign_varContext(_ctx, _parentState);
		Assign_varContext _prevctx = _localctx;
		int _startState = 72;
		enterRecursionRule(_localctx, 72, RULE_assign_var, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1509);
			any_identifier();
			}
			_ctx.stop = _input.LT(-1);
			setState(1516);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assign_varContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assign_var);
					setState(1511);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1512);
					match(T__7);
					setState(1513);
					expr_until_rightbracket();
					}
					} 
				}
				setState(1518);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Stmt_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF_P() { return getTokens(PlPgSqlParser.IF_P); }
		public TerminalNode IF_P(int i) {
			return getToken(PlPgSqlParser.IF_P, i);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public List<Stmt_elsifContext> stmt_elsif() {
			return getRuleContexts(Stmt_elsifContext.class);
		}
		public Stmt_elsifContext stmt_elsif(int i) {
			return getRuleContext(Stmt_elsifContext.class,i);
		}
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_stmt_if);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1519);
			match(IF_P);
			setState(1520);
			expr_until_then();
			setState(1521);
			proc_sect();
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_ELSIF) {
				{
				{
				setState(1522);
				stmt_elsif();
				}
				}
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1529);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1528);
				stmt_else();
				}
			}

			setState(1531);
			match(END_P);
			setState(1532);
			match(IF_P);
			setState(1533);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elsifContext extends ParserRuleContext {
		public TerminalNode K_ELSIF() { return getToken(PlPgSqlParser.K_ELSIF, 0); }
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsif; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_elsif(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifContext stmt_elsif() throws RecognitionException {
		Stmt_elsifContext _localctx = new Stmt_elsifContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_stmt_elsif);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			match(K_ELSIF);
			setState(1536);
			expr_until_then();
			setState(1537);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_stmt_else);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			match(ELSE);
			setState(1540);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_caseContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PlPgSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlPgSqlParser.CASE, i);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1542);
			match(CASE);
			setState(1543);
			opt_expr_until_when();
			setState(1544);
			case_when_list(0);
			setState(1545);
			opt_case_else();
			setState(1546);
			match(END_P);
			setState(1547);
			match(CASE);
			setState(1548);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_opt_expr_until_when);
		try {
			setState(1552);
			switch (_input.LA(1)) {
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(1550);
				a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_when_listContext extends ParserRuleContext {
		public Case_whenContext case_when() {
			return getRuleContext(Case_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		return case_when_list(0);
	}

	private Case_when_listContext case_when_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, _parentState);
		Case_when_listContext _prevctx = _localctx;
		int _startState = 84;
		enterRecursionRule(_localctx, 84, RULE_case_when_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1555);
			case_when();
			}
			_ctx.stop = _input.LT(-1);
			setState(1561);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Case_when_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_case_when_list);
					setState(1557);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1558);
					case_when();
					}
					} 
				}
				setState(1563);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1564);
			match(WHEN);
			setState(1565);
			expr_until_then();
			setState(1566);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_case_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_opt_case_else);
		try {
			setState(1571);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1568);
				match(ELSE);
				setState(1569);
				proc_sect();
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573);
			opt_block_label();
			setState(1574);
			match(K_LOOP);
			setState(1575);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_whileContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode K_WHILE() { return getToken(PlPgSqlParser.K_WHILE, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1577);
			opt_block_label();
			setState(1578);
			match(K_WHILE);
			setState(1579);
			expr_until_loop();
			setState(1580);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			opt_block_label();
			setState(1583);
			match(FOR);
			setState(1584);
			for_control();
			setState(1585);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode K_EXECUTE() { return getToken(PlPgSqlParser.K_EXECUTE, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode DOT_DOT() { return getToken(PlPgSqlParser.DOT_DOT, 0); }
		public TerminalNode K_REVERSE() { return getToken(PlPgSqlParser.K_REVERSE, 0); }
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_for_control);
		int _la;
		try {
			setState(1633);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1587);
				for_variable();
				setState(1588);
				match(IN_P);
				setState(1589);
				match(K_EXECUTE);
				setState(1590);
				select_clause();
				setState(1591);
				match(K_LOOP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1593);
				for_variable();
				setState(1594);
				match(IN_P);
				setState(1595);
				select_clause();
				setState(1596);
				match(USING);
				setState(1597);
				a_expr(0);
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << T__11) | (1L << T__14) | (1L << K_MESSAGE) | (1L << K_NEXT) | (1L << K_MESSAGE_TEXT) | (1L << K_STACKED) | (1L << K_PG_EXCEPTION_CONTEXT) | (1L << K_USE_COLUMN) | (1L << K_DUMP) | (1L << K_SLICE) | (1L << K_RESULT_OID) | (1L << K_ERROR) | (1L << K_FORWARD) | (1L << K_RETURNED_SQLSTATE) | (1L << K_BACKWARD) | (1L << K_HINT) | (1L << K_CURRENT) | (1L << K_DETAIL) | (1L << K_SCROLL) | (1L << K_USE_VARIABLE) | (1L << K_ALIAS) | (1L << K_INFO) | (1L << K_NO) | (1L << K_RELATIVE) | (1L << K_LOG) | (1L << K_QUERY) | (1L << K_ROW_COUNT) | (1L << K_DEBUG) | (1L << K_CONSTANT) | (1L << K_CURSOR) | (1L << K_PG_EXCEPTION_DETAIL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (K_PRIOR - 65)) | (1L << (K_FIRST - 65)) | (1L << (K_LAST - 65)) | (1L << (K_ROWTYPE - 65)) | (1L << (K_VARIABLE_CONFLICT - 65)) | (1L << (K_PG_EXCEPTION_HINT - 65)) | (1L << (K_OPTION - 65)) | (1L << (K_NOTICE - 65)) | (1L << (K_WARNING - 65)) | (1L << (K_REVERSE - 65)) | (1L << (ABORT_P - 65)) | (1L << (ABSOLUTE_P - 65)) | (1L << (ACCESS - 65)) | (1L << (ACTION - 65)) | (1L << (ADD_P - 65)) | (1L << (ADMIN - 65)) | (1L << (AFTER - 65)) | (1L << (AGGREGATE - 65)) | (1L << (ALSO - 65)) | (1L << (ALTER - 65)) | (1L << (ALWAYS - 65)) | (1L << (ARRAY - 65)) | (1L << (ASSERTION - 65)) | (1L << (ASSIGNMENT - 65)) | (1L << (AT - 65)) | (1L << (ATTRIBUTE - 65)) | (1L << (AUTHORIZATION - 65)) | (1L << (BACKWARD - 65)) | (1L << (BEFORE - 65)) | (1L << (BEGIN_P - 65)) | (1L << (BETWEEN - 65)) | (1L << (BIGINT - 65)) | (1L << (BINARY - 65)) | (1L << (BIT - 65)) | (1L << (BOOLEAN_P - 65)) | (1L << (BY - 65)) | (1L << (CACHE - 65)) | (1L << (CALLED - 65)) | (1L << (CASCADE - 65)) | (1L << (CASCADED - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (CATALOG_P - 65)) | (1L << (CHAIN - 65)) | (1L << (CHAR_P - 65)) | (1L << (CHARACTER - 65)) | (1L << (CHARACTERISTICS - 65)) | (1L << (CHECKPOINT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (CLASS - 129)) | (1L << (CLOSE - 129)) | (1L << (CLUSTER - 129)) | (1L << (COALESCE - 129)) | (1L << (COLLATION - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMENTS - 129)) | (1L << (COMMIT - 129)) | (1L << (COMMITTED - 129)) | (1L << (CONCURRENTLY - 129)) | (1L << (CONFIGURATION - 129)) | (1L << (CONNECTION - 129)) | (1L << (CONSTRAINTS - 129)) | (1L << (CONTENT_P - 129)) | (1L << (CONTINUE_P - 129)) | (1L << (CONVERSION_P - 129)) | (1L << (COPY - 129)) | (1L << (COST - 129)) | (1L << (CROSS - 129)) | (1L << (CSV - 129)) | (1L << (CURRENT_P - 129)) | (1L << (CURRENT_CATALOG - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_ROLE - 129)) | (1L << (CURRENT_SCHEMA - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (CURSOR - 129)) | (1L << (CYCLE - 129)) | (1L << (DATA_P - 129)) | (1L << (DATABASE - 129)) | (1L << (DAY_P - 129)) | (1L << (DEALLOCATE - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL_P - 129)) | (1L << (DECLARE - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE_P - 129)) | (1L << (DELIMITER - 129)) | (1L << (DELIMITERS - 129)) | (1L << (DICTIONARY - 129)) | (1L << (DISABLE_P - 129)) | (1L << (DISCARD - 129)) | (1L << (DOCUMENT_P - 129)) | (1L << (DOMAIN_P - 129)) | (1L << (DOUBLE_P - 129)) | (1L << (DROP - 129)) | (1L << (EACH - 129)) | (1L << (ENABLE_P - 129)) | (1L << (ENCODING - 129)) | (1L << (ENCRYPTED - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ENUM_P - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXCLUSIVE - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXISTS - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FALSE_P - 194)) | (1L << (FAMILY - 194)) | (1L << (FIRST_P - 194)) | (1L << (FLOAT_P - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (FORWARD - 194)) | (1L << (FREEZE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (FUNCTIONS - 194)) | (1L << (GLOBAL - 194)) | (1L << (GRANTED - 194)) | (1L << (GREATEST - 194)) | (1L << (HANDLER - 194)) | (1L << (HEADER_P - 194)) | (1L << (HOLD - 194)) | (1L << (HOUR_P - 194)) | (1L << (IDENTITY_P - 194)) | (1L << (IF_P - 194)) | (1L << (ILIKE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (IMMUTABLE - 194)) | (1L << (IMPLICIT_P - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDEX - 194)) | (1L << (INDEXES - 194)) | (1L << (INHERIT - 194)) | (1L << (INHERITS - 194)) | (1L << (INLINE_P - 194)) | (1L << (INNER_P - 194)) | (1L << (INOUT - 194)) | (1L << (INPUT_P - 194)) | (1L << (INSENSITIVE - 194)) | (1L << (INSERT - 194)) | (1L << (INSTEAD - 194)) | (1L << (INT_P - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INVOKER - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IS - 258)) | (1L << (ISNULL - 258)) | (1L << (ISOLATION - 258)) | (1L << (JOIN - 258)) | (1L << (KEY - 258)) | (1L << (LABEL - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE_P - 258)) | (1L << (LAST_P - 258)) | (1L << (LC_COLLATE_P - 258)) | (1L << (LC_CTYPE_P - 258)) | (1L << (LEAKPROOF - 258)) | (1L << (LEAST - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIKE - 258)) | (1L << (LISTEN - 258)) | (1L << (LOAD - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCALTIME - 258)) | (1L << (LOCALTIMESTAMP - 258)) | (1L << (LOCATION - 258)) | (1L << (LOCK_P - 258)) | (1L << (MAPPING - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINUTE_P - 258)) | (1L << (MINVALUE - 258)) | (1L << (MODE - 258)) | (1L << (MONTH_P - 258)) | (1L << (MOVE - 258)) | (1L << (NAME_P - 258)) | (1L << (NAMES - 258)) | (1L << (NATIONAL - 258)) | (1L << (NATURAL - 258)) | (1L << (NCHAR - 258)) | (1L << (NEXT - 258)) | (1L << (NO - 258)) | (1L << (NONE - 258)) | (1L << (NOT - 258)) | (1L << (NOTHING - 258)) | (1L << (NOTIFY - 258)) | (1L << (NOTNULL - 258)) | (1L << (NOWAIT - 258)) | (1L << (NULL_P - 258)) | (1L << (NULLIF - 258)) | (1L << (NULLS_P - 258)) | (1L << (NUMERIC - 258)) | (1L << (OBJECT_P - 258)) | (1L << (OF - 258)) | (1L << (OFF - 258)) | (1L << (OIDS - 258)) | (1L << (OPERATOR - 258)) | (1L << (OPTION - 258)) | (1L << (OPTIONS - 258)) | (1L << (OUT_P - 258)) | (1L << (OUTER_P - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (OVER - 322)) | (1L << (OVERLAPS - 322)) | (1L << (OVERLAY - 322)) | (1L << (OWNED - 322)) | (1L << (OWNER - 322)) | (1L << (PARSER - 322)) | (1L << (PARTIAL - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PASSWORD - 322)) | (1L << (PLANS - 322)) | (1L << (POSITION - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PREPARE - 322)) | (1L << (PREPARED - 322)) | (1L << (PRESERVE - 322)) | (1L << (PRIOR - 322)) | (1L << (PRIVILEGES - 322)) | (1L << (PROCEDURAL - 322)) | (1L << (PROCEDURE - 322)) | (1L << (QUOTE - 322)) | (1L << (RANGE - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (REASSIGN - 322)) | (1L << (RECHECK - 322)) | (1L << (RECURSIVE - 322)) | (1L << (REF - 322)) | (1L << (REINDEX - 322)) | (1L << (RELATIVE_P - 322)) | (1L << (RELEASE - 322)) | (1L << (RENAME - 322)) | (1L << (REPEATABLE - 322)) | (1L << (REPLACE - 322)) | (1L << (REPLICA - 322)) | (1L << (RESET - 322)) | (1L << (RESTART - 322)) | (1L << (RESTRICT - 322)) | (1L << (RETURNS - 322)) | (1L << (REVOKE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLE - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCROLL - 322)) | (1L << (SEARCH - 322)) | (1L << (SECOND_P - 322)) | (1L << (SECURITY - 322)) | (1L << (SEQUENCE - 322)) | (1L << (SEQUENCES - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERVER - 322)) | (1L << (SESSION - 322)) | (1L << (SESSION_USER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SET - 386)) | (1L << (SETOF - 386)) | (1L << (SHARE - 386)) | (1L << (SHOW - 386)) | (1L << (SIMILAR - 386)) | (1L << (SIMPLE - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (STABLE - 386)) | (1L << (STANDALONE_P - 386)) | (1L << (START - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATISTICS - 386)) | (1L << (STDIN - 386)) | (1L << (STDOUT - 386)) | (1L << (STORAGE - 386)) | (1L << (STRICT_P - 386)) | (1L << (STRIP_P - 386)) | (1L << (SUBSTRING - 386)) | (1L << (SYSID - 386)) | (1L << (SYSTEM_P - 386)) | (1L << (TABLES - 386)) | (1L << (TABLESPACE - 386)) | (1L << (TEMP - 386)) | (1L << (TEMPLATE - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TEXT_P - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE_P - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TRUSTED - 386)) | (1L << (TYPE_P - 386)) | (1L << (TYPES_P - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNCOMMITTED - 386)) | (1L << (UNENCRYPTED - 386)) | (1L << (UNIQUE - 386)) | (1L << (UNKNOWN - 386)) | (1L << (UNLISTEN - 386)) | (1L << (UNLOGGED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATE - 386)) | (1L << (USER - 386)) | (1L << (VACUUM - 386)) | (1L << (VALID - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALIDATOR - 386)) | (1L << (VALUE_P - 386)) | (1L << (VALUES - 386)) | (1L << (VARCHAR - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (VARYING - 450)) | (1L << (VERBOSE - 450)) | (1L << (VERSION_P - 450)) | (1L << (VIEW - 450)) | (1L << (VOLATILE - 450)) | (1L << (WHITESPACE_P - 450)) | (1L << (WITHOUT - 450)) | (1L << (WORK - 450)) | (1L << (WRAPPER - 450)) | (1L << (WRITE - 450)) | (1L << (XML_P - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCONCAT - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (YEAR_P - 450)) | (1L << (YES_P - 450)) | (1L << (ZONE - 450)) | (1L << (SCONST - 450)) | (1L << (BCONST - 450)) | (1L << (XCONST - 450)) | (1L << (IDENT - 450)) | (1L << (PARAM - 450)) | (1L << (FCONST - 450)) | (1L << (ICONST - 450)) | (1L << (Op - 450)))) != 0)) {
					{
					{
					setState(1598);
					a_expr(0);
					setState(1599);
					match(T__4);
					}
					}
					setState(1605);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1606);
				match(K_LOOP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1608);
				for_variable();
				setState(1609);
				match(IN_P);
				setState(1610);
				a_expr(0);
				setState(1611);
				match(K_LOOP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1613);
				for_variable();
				setState(1614);
				match(IN_P);
				setState(1615);
				a_expr(0);
				setState(1616);
				match(DOT_DOT);
				setState(1617);
				a_expr(0);
				setState(1618);
				match(K_LOOP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1620);
				for_variable();
				setState(1621);
				match(IN_P);
				setState(1622);
				match(K_REVERSE);
				setState(1623);
				a_expr(0);
				setState(1624);
				match(DOT_DOT);
				setState(1625);
				a_expr(0);
				setState(1626);
				match(K_LOOP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1628);
				for_variable();
				setState(1629);
				match(IN_P);
				setState(1630);
				select_clause();
				setState(1631);
				match(K_LOOP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_variableContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_for_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public TerminalNode K_FOREACH() { return getToken(PlPgSqlParser.K_FOREACH, 0); }
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			opt_block_label();
			setState(1638);
			match(K_FOREACH);
			setState(1639);
			for_variable();
			setState(1640);
			foreach_slice();
			setState(1641);
			match(IN_P);
			setState(1642);
			match(ARRAY);
			setState(1643);
			expr_until_loop();
			setState(1644);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode K_SLICE() { return getToken(PlPgSqlParser.K_SLICE, 0); }
		public TerminalNode ICONST() { return getToken(PlPgSqlParser.ICONST, 0); }
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_foreach_slice);
		try {
			setState(1649);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1647);
				match(K_SLICE);
				setState(1648);
				match(ICONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_exitContext extends ParserRuleContext {
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1651);
			exit_type();
			setState(1652);
			opt_label();
			setState(1653);
			opt_exitcond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode K_EXIT() { return getToken(PlPgSqlParser.K_EXIT, 0); }
		public TerminalNode K_CONTINUE() { return getToken(PlPgSqlParser.K_CONTINUE, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655);
			_la = _input.LA(1);
			if ( !(_la==K_CONTINUE || _la==K_EXIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode K_RETURN() { return getToken(PlPgSqlParser.K_RETURN, 0); }
		public TerminalNode K_QUERY() { return getToken(PlPgSqlParser.K_QUERY, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode K_NEXT() { return getToken(PlPgSqlParser.K_NEXT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_stmt_return);
		int _la;
		try {
			setState(1672);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1657);
				match(K_RETURN);
				setState(1658);
				match(K_QUERY);
				setState(1659);
				select_clause();
				setState(1660);
				match(T__1);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1662);
				match(K_RETURN);
				setState(1663);
				match(K_NEXT);
				setState(1664);
				a_expr(0);
				setState(1665);
				match(T__1);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1667);
				match(K_RETURN);
				setState(1669);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << T__11) | (1L << T__14) | (1L << K_MESSAGE) | (1L << K_NEXT) | (1L << K_MESSAGE_TEXT) | (1L << K_STACKED) | (1L << K_PG_EXCEPTION_CONTEXT) | (1L << K_USE_COLUMN) | (1L << K_DUMP) | (1L << K_SLICE) | (1L << K_RESULT_OID) | (1L << K_ERROR) | (1L << K_FORWARD) | (1L << K_RETURNED_SQLSTATE) | (1L << K_BACKWARD) | (1L << K_HINT) | (1L << K_CURRENT) | (1L << K_DETAIL) | (1L << K_SCROLL) | (1L << K_USE_VARIABLE) | (1L << K_ALIAS) | (1L << K_INFO) | (1L << K_NO) | (1L << K_RELATIVE) | (1L << K_LOG) | (1L << K_QUERY) | (1L << K_ROW_COUNT) | (1L << K_DEBUG) | (1L << K_CONSTANT) | (1L << K_CURSOR) | (1L << K_PG_EXCEPTION_DETAIL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (K_PRIOR - 65)) | (1L << (K_FIRST - 65)) | (1L << (K_LAST - 65)) | (1L << (K_ROWTYPE - 65)) | (1L << (K_VARIABLE_CONFLICT - 65)) | (1L << (K_PG_EXCEPTION_HINT - 65)) | (1L << (K_OPTION - 65)) | (1L << (K_NOTICE - 65)) | (1L << (K_WARNING - 65)) | (1L << (K_REVERSE - 65)) | (1L << (ABORT_P - 65)) | (1L << (ABSOLUTE_P - 65)) | (1L << (ACCESS - 65)) | (1L << (ACTION - 65)) | (1L << (ADD_P - 65)) | (1L << (ADMIN - 65)) | (1L << (AFTER - 65)) | (1L << (AGGREGATE - 65)) | (1L << (ALSO - 65)) | (1L << (ALTER - 65)) | (1L << (ALWAYS - 65)) | (1L << (ARRAY - 65)) | (1L << (ASSERTION - 65)) | (1L << (ASSIGNMENT - 65)) | (1L << (AT - 65)) | (1L << (ATTRIBUTE - 65)) | (1L << (AUTHORIZATION - 65)) | (1L << (BACKWARD - 65)) | (1L << (BEFORE - 65)) | (1L << (BEGIN_P - 65)) | (1L << (BETWEEN - 65)) | (1L << (BIGINT - 65)) | (1L << (BINARY - 65)) | (1L << (BIT - 65)) | (1L << (BOOLEAN_P - 65)) | (1L << (BY - 65)) | (1L << (CACHE - 65)) | (1L << (CALLED - 65)) | (1L << (CASCADE - 65)) | (1L << (CASCADED - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (CATALOG_P - 65)) | (1L << (CHAIN - 65)) | (1L << (CHAR_P - 65)) | (1L << (CHARACTER - 65)) | (1L << (CHARACTERISTICS - 65)) | (1L << (CHECKPOINT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (CLASS - 129)) | (1L << (CLOSE - 129)) | (1L << (CLUSTER - 129)) | (1L << (COALESCE - 129)) | (1L << (COLLATION - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMENTS - 129)) | (1L << (COMMIT - 129)) | (1L << (COMMITTED - 129)) | (1L << (CONCURRENTLY - 129)) | (1L << (CONFIGURATION - 129)) | (1L << (CONNECTION - 129)) | (1L << (CONSTRAINTS - 129)) | (1L << (CONTENT_P - 129)) | (1L << (CONTINUE_P - 129)) | (1L << (CONVERSION_P - 129)) | (1L << (COPY - 129)) | (1L << (COST - 129)) | (1L << (CROSS - 129)) | (1L << (CSV - 129)) | (1L << (CURRENT_P - 129)) | (1L << (CURRENT_CATALOG - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_ROLE - 129)) | (1L << (CURRENT_SCHEMA - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (CURSOR - 129)) | (1L << (CYCLE - 129)) | (1L << (DATA_P - 129)) | (1L << (DATABASE - 129)) | (1L << (DAY_P - 129)) | (1L << (DEALLOCATE - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL_P - 129)) | (1L << (DECLARE - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE_P - 129)) | (1L << (DELIMITER - 129)) | (1L << (DELIMITERS - 129)) | (1L << (DICTIONARY - 129)) | (1L << (DISABLE_P - 129)) | (1L << (DISCARD - 129)) | (1L << (DOCUMENT_P - 129)) | (1L << (DOMAIN_P - 129)) | (1L << (DOUBLE_P - 129)) | (1L << (DROP - 129)) | (1L << (EACH - 129)) | (1L << (ENABLE_P - 129)) | (1L << (ENCODING - 129)) | (1L << (ENCRYPTED - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ENUM_P - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXCLUSIVE - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXISTS - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FALSE_P - 194)) | (1L << (FAMILY - 194)) | (1L << (FIRST_P - 194)) | (1L << (FLOAT_P - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (FORWARD - 194)) | (1L << (FREEZE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (FUNCTIONS - 194)) | (1L << (GLOBAL - 194)) | (1L << (GRANTED - 194)) | (1L << (GREATEST - 194)) | (1L << (HANDLER - 194)) | (1L << (HEADER_P - 194)) | (1L << (HOLD - 194)) | (1L << (HOUR_P - 194)) | (1L << (IDENTITY_P - 194)) | (1L << (IF_P - 194)) | (1L << (ILIKE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (IMMUTABLE - 194)) | (1L << (IMPLICIT_P - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDEX - 194)) | (1L << (INDEXES - 194)) | (1L << (INHERIT - 194)) | (1L << (INHERITS - 194)) | (1L << (INLINE_P - 194)) | (1L << (INNER_P - 194)) | (1L << (INOUT - 194)) | (1L << (INPUT_P - 194)) | (1L << (INSENSITIVE - 194)) | (1L << (INSERT - 194)) | (1L << (INSTEAD - 194)) | (1L << (INT_P - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INVOKER - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IS - 258)) | (1L << (ISNULL - 258)) | (1L << (ISOLATION - 258)) | (1L << (JOIN - 258)) | (1L << (KEY - 258)) | (1L << (LABEL - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE_P - 258)) | (1L << (LAST_P - 258)) | (1L << (LC_COLLATE_P - 258)) | (1L << (LC_CTYPE_P - 258)) | (1L << (LEAKPROOF - 258)) | (1L << (LEAST - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIKE - 258)) | (1L << (LISTEN - 258)) | (1L << (LOAD - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCALTIME - 258)) | (1L << (LOCALTIMESTAMP - 258)) | (1L << (LOCATION - 258)) | (1L << (LOCK_P - 258)) | (1L << (MAPPING - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINUTE_P - 258)) | (1L << (MINVALUE - 258)) | (1L << (MODE - 258)) | (1L << (MONTH_P - 258)) | (1L << (MOVE - 258)) | (1L << (NAME_P - 258)) | (1L << (NAMES - 258)) | (1L << (NATIONAL - 258)) | (1L << (NATURAL - 258)) | (1L << (NCHAR - 258)) | (1L << (NEXT - 258)) | (1L << (NO - 258)) | (1L << (NONE - 258)) | (1L << (NOT - 258)) | (1L << (NOTHING - 258)) | (1L << (NOTIFY - 258)) | (1L << (NOTNULL - 258)) | (1L << (NOWAIT - 258)) | (1L << (NULL_P - 258)) | (1L << (NULLIF - 258)) | (1L << (NULLS_P - 258)) | (1L << (NUMERIC - 258)) | (1L << (OBJECT_P - 258)) | (1L << (OF - 258)) | (1L << (OFF - 258)) | (1L << (OIDS - 258)) | (1L << (OPERATOR - 258)) | (1L << (OPTION - 258)) | (1L << (OPTIONS - 258)) | (1L << (OUT_P - 258)) | (1L << (OUTER_P - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (OVER - 322)) | (1L << (OVERLAPS - 322)) | (1L << (OVERLAY - 322)) | (1L << (OWNED - 322)) | (1L << (OWNER - 322)) | (1L << (PARSER - 322)) | (1L << (PARTIAL - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PASSWORD - 322)) | (1L << (PLANS - 322)) | (1L << (POSITION - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PREPARE - 322)) | (1L << (PREPARED - 322)) | (1L << (PRESERVE - 322)) | (1L << (PRIOR - 322)) | (1L << (PRIVILEGES - 322)) | (1L << (PROCEDURAL - 322)) | (1L << (PROCEDURE - 322)) | (1L << (QUOTE - 322)) | (1L << (RANGE - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (REASSIGN - 322)) | (1L << (RECHECK - 322)) | (1L << (RECURSIVE - 322)) | (1L << (REF - 322)) | (1L << (REINDEX - 322)) | (1L << (RELATIVE_P - 322)) | (1L << (RELEASE - 322)) | (1L << (RENAME - 322)) | (1L << (REPEATABLE - 322)) | (1L << (REPLACE - 322)) | (1L << (REPLICA - 322)) | (1L << (RESET - 322)) | (1L << (RESTART - 322)) | (1L << (RESTRICT - 322)) | (1L << (RETURNS - 322)) | (1L << (REVOKE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLE - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCROLL - 322)) | (1L << (SEARCH - 322)) | (1L << (SECOND_P - 322)) | (1L << (SECURITY - 322)) | (1L << (SEQUENCE - 322)) | (1L << (SEQUENCES - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERVER - 322)) | (1L << (SESSION - 322)) | (1L << (SESSION_USER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SET - 386)) | (1L << (SETOF - 386)) | (1L << (SHARE - 386)) | (1L << (SHOW - 386)) | (1L << (SIMILAR - 386)) | (1L << (SIMPLE - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (STABLE - 386)) | (1L << (STANDALONE_P - 386)) | (1L << (START - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATISTICS - 386)) | (1L << (STDIN - 386)) | (1L << (STDOUT - 386)) | (1L << (STORAGE - 386)) | (1L << (STRICT_P - 386)) | (1L << (STRIP_P - 386)) | (1L << (SUBSTRING - 386)) | (1L << (SYSID - 386)) | (1L << (SYSTEM_P - 386)) | (1L << (TABLES - 386)) | (1L << (TABLESPACE - 386)) | (1L << (TEMP - 386)) | (1L << (TEMPLATE - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TEXT_P - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE_P - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TRUSTED - 386)) | (1L << (TYPE_P - 386)) | (1L << (TYPES_P - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNCOMMITTED - 386)) | (1L << (UNENCRYPTED - 386)) | (1L << (UNIQUE - 386)) | (1L << (UNKNOWN - 386)) | (1L << (UNLISTEN - 386)) | (1L << (UNLOGGED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATE - 386)) | (1L << (USER - 386)) | (1L << (VACUUM - 386)) | (1L << (VALID - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALIDATOR - 386)) | (1L << (VALUE_P - 386)) | (1L << (VALUES - 386)) | (1L << (VARCHAR - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (VARYING - 450)) | (1L << (VERBOSE - 450)) | (1L << (VERSION_P - 450)) | (1L << (VIEW - 450)) | (1L << (VOLATILE - 450)) | (1L << (WHITESPACE_P - 450)) | (1L << (WITHOUT - 450)) | (1L << (WORK - 450)) | (1L << (WRAPPER - 450)) | (1L << (WRITE - 450)) | (1L << (XML_P - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCONCAT - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (YEAR_P - 450)) | (1L << (YES_P - 450)) | (1L << (ZONE - 450)) | (1L << (SCONST - 450)) | (1L << (BCONST - 450)) | (1L << (XCONST - 450)) | (1L << (IDENT - 450)) | (1L << (PARAM - 450)) | (1L << (FCONST - 450)) | (1L << (ICONST - 450)) | (1L << (Op - 450)))) != 0)) {
					{
					setState(1668);
					a_expr(0);
					}
				}

				setState(1671);
				match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_raiseContext extends ParserRuleContext {
		public Token format;
		public TerminalNode K_RAISE() { return getToken(PlPgSqlParser.K_RAISE, 0); }
		public RaiseLevelContext raiseLevel() {
			return getRuleContext(RaiseLevelContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public TerminalNode SCONST() { return getToken(PlPgSqlParser.SCONST, 0); }
		public List<Raise_exprContext> raise_expr() {
			return getRuleContexts(Raise_exprContext.class);
		}
		public Raise_exprContext raise_expr(int i) {
			return getRuleContext(Raise_exprContext.class,i);
		}
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_stmt_raise);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1674);
			match(K_RAISE);
			setState(1675);
			raiseLevel();
			setState(1684);
			_la = _input.LA(1);
			if (_la==SCONST) {
				{
				setState(1676);
				((Stmt_raiseContext)_localctx).format = match(SCONST);
				setState(1681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__4) {
					{
					{
					setState(1677);
					match(T__4);
					setState(1678);
					raise_expr();
					}
					}
					setState(1683);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1687);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1686);
				usingClause();
				}
			}

			setState(1689);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RaiseLevelContext extends ParserRuleContext {
		public TerminalNode K_EXCEPTION() { return getToken(PlPgSqlParser.K_EXCEPTION, 0); }
		public TerminalNode K_WARNING() { return getToken(PlPgSqlParser.K_WARNING, 0); }
		public TerminalNode K_NOTICE() { return getToken(PlPgSqlParser.K_NOTICE, 0); }
		public TerminalNode K_INFO() { return getToken(PlPgSqlParser.K_INFO, 0); }
		public TerminalNode K_LOG() { return getToken(PlPgSqlParser.K_LOG, 0); }
		public TerminalNode K_DEBUG() { return getToken(PlPgSqlParser.K_DEBUG, 0); }
		public RaiseLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRaiseLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RaiseLevelContext raiseLevel() throws RecognitionException {
		RaiseLevelContext _localctx = new RaiseLevelContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_raiseLevel);
		try {
			setState(1698);
			switch (_input.LA(1)) {
			case T__1:
			case USING:
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1692);
				match(K_EXCEPTION);
				}
				break;
			case K_WARNING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1693);
				match(K_WARNING);
				}
				break;
			case K_NOTICE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1694);
				match(K_NOTICE);
				}
				break;
			case K_INFO:
				enterOuterAlt(_localctx, 5);
				{
				setState(1695);
				match(K_INFO);
				}
				break;
			case K_LOG:
				enterOuterAlt(_localctx, 6);
				{
				setState(1696);
				match(K_LOG);
				}
				break;
			case K_DEBUG:
				enterOuterAlt(_localctx, 7);
				{
				setState(1697);
				match(K_DEBUG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Raise_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRaise_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_exprContext raise_expr() throws RecognitionException {
		Raise_exprContext _localctx = new Raise_exprContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_raise_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1700);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_bodyContext extends ParserRuleContext {
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1702);
			proc_sect();
			setState(1703);
			match(END_P);
			setState(1704);
			match(K_LOOP);
			setState(1705);
			opt_label();
			setState(1706);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_execsqlContext extends ParserRuleContext {
		public AlterDatabaseStmtContext alterDatabaseStmt() {
			return getRuleContext(AlterDatabaseStmtContext.class,0);
		}
		public AlterDatabaseSetStmtContext alterDatabaseSetStmt() {
			return getRuleContext(AlterDatabaseSetStmtContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() {
			return getRuleContext(AlterDefaultPrivilegesStmtContext.class,0);
		}
		public AlterDomainStmtContext alterDomainStmt() {
			return getRuleContext(AlterDomainStmtContext.class,0);
		}
		public AlterEnumStmtContext alterEnumStmt() {
			return getRuleContext(AlterEnumStmtContext.class,0);
		}
		public AlterExtensionStmtContext alterExtensionStmt() {
			return getRuleContext(AlterExtensionStmtContext.class,0);
		}
		public AlterExtensionContentsStmtContext alterExtensionContentsStmt() {
			return getRuleContext(AlterExtensionContentsStmtContext.class,0);
		}
		public AlterFdwStmtContext alterFdwStmt() {
			return getRuleContext(AlterFdwStmtContext.class,0);
		}
		public AlterForeignServerStmtContext alterForeignServerStmt() {
			return getRuleContext(AlterForeignServerStmtContext.class,0);
		}
		public AlterForeignTableStmtContext alterForeignTableStmt() {
			return getRuleContext(AlterForeignTableStmtContext.class,0);
		}
		public AlterFunctionStmtContext alterFunctionStmt() {
			return getRuleContext(AlterFunctionStmtContext.class,0);
		}
		public AlterGroupStmtContext alterGroupStmt() {
			return getRuleContext(AlterGroupStmtContext.class,0);
		}
		public AlterObjectSchemaStmtContext alterObjectSchemaStmt() {
			return getRuleContext(AlterObjectSchemaStmtContext.class,0);
		}
		public AlterOwnerStmtContext alterOwnerStmt() {
			return getRuleContext(AlterOwnerStmtContext.class,0);
		}
		public AlterSeqStmtContext alterSeqStmt() {
			return getRuleContext(AlterSeqStmtContext.class,0);
		}
		public AlterTableStmtContext alterTableStmt() {
			return getRuleContext(AlterTableStmtContext.class,0);
		}
		public AlterCompositeTypeStmtContext alterCompositeTypeStmt() {
			return getRuleContext(AlterCompositeTypeStmtContext.class,0);
		}
		public AlterRoleSetStmtContext alterRoleSetStmt() {
			return getRuleContext(AlterRoleSetStmtContext.class,0);
		}
		public AlterRoleStmtContext alterRoleStmt() {
			return getRuleContext(AlterRoleStmtContext.class,0);
		}
		public AlterTSConfigurationStmtContext alterTSConfigurationStmt() {
			return getRuleContext(AlterTSConfigurationStmtContext.class,0);
		}
		public AlterTSDictionaryStmtContext alterTSDictionaryStmt() {
			return getRuleContext(AlterTSDictionaryStmtContext.class,0);
		}
		public AlterUserMappingStmtContext alterUserMappingStmt() {
			return getRuleContext(AlterUserMappingStmtContext.class,0);
		}
		public AlterUserSetStmtContext alterUserSetStmt() {
			return getRuleContext(AlterUserSetStmtContext.class,0);
		}
		public AlterUserStmtContext alterUserStmt() {
			return getRuleContext(AlterUserStmtContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public CheckPointStmtContext checkPointStmt() {
			return getRuleContext(CheckPointStmtContext.class,0);
		}
		public ClosePortalStmtContext closePortalStmt() {
			return getRuleContext(ClosePortalStmtContext.class,0);
		}
		public ClusterStmtContext clusterStmt() {
			return getRuleContext(ClusterStmtContext.class,0);
		}
		public CommentStmtContext commentStmt() {
			return getRuleContext(CommentStmtContext.class,0);
		}
		public ConstraintsSetStmtContext constraintsSetStmt() {
			return getRuleContext(ConstraintsSetStmtContext.class,0);
		}
		public CopyStmtContext copyStmt() {
			return getRuleContext(CopyStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public CreateAssertStmtContext createAssertStmt() {
			return getRuleContext(CreateAssertStmtContext.class,0);
		}
		public CreateCastStmtContext createCastStmt() {
			return getRuleContext(CreateCastStmtContext.class,0);
		}
		public CreateConversionStmtContext createConversionStmt() {
			return getRuleContext(CreateConversionStmtContext.class,0);
		}
		public CreateDomainStmtContext createDomainStmt() {
			return getRuleContext(CreateDomainStmtContext.class,0);
		}
		public CreateExtensionStmtContext createExtensionStmt() {
			return getRuleContext(CreateExtensionStmtContext.class,0);
		}
		public CreateFdwStmtContext createFdwStmt() {
			return getRuleContext(CreateFdwStmtContext.class,0);
		}
		public CreateForeignServerStmtContext createForeignServerStmt() {
			return getRuleContext(CreateForeignServerStmtContext.class,0);
		}
		public CreateForeignTableStmtContext createForeignTableStmt() {
			return getRuleContext(CreateForeignTableStmtContext.class,0);
		}
		public CreateFunctionStmtContext createFunctionStmt() {
			return getRuleContext(CreateFunctionStmtContext.class,0);
		}
		public CreateGroupStmtContext createGroupStmt() {
			return getRuleContext(CreateGroupStmtContext.class,0);
		}
		public CreateOpClassStmtContext createOpClassStmt() {
			return getRuleContext(CreateOpClassStmtContext.class,0);
		}
		public CreateOpFamilyStmtContext createOpFamilyStmt() {
			return getRuleContext(CreateOpFamilyStmtContext.class,0);
		}
		public AlterOpFamilyStmtContext alterOpFamilyStmt() {
			return getRuleContext(AlterOpFamilyStmtContext.class,0);
		}
		public CreatePLangStmtContext createPLangStmt() {
			return getRuleContext(CreatePLangStmtContext.class,0);
		}
		public CreateSchemaStmtContext createSchemaStmt() {
			return getRuleContext(CreateSchemaStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public CreateTableSpaceStmtContext createTableSpaceStmt() {
			return getRuleContext(CreateTableSpaceStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public CreateRoleStmtContext createRoleStmt() {
			return getRuleContext(CreateRoleStmtContext.class,0);
		}
		public CreateUserStmtContext createUserStmt() {
			return getRuleContext(CreateUserStmtContext.class,0);
		}
		public CreateUserMappingStmtContext createUserMappingStmt() {
			return getRuleContext(CreateUserMappingStmtContext.class,0);
		}
		public CreatedbStmtContext createdbStmt() {
			return getRuleContext(CreatedbStmtContext.class,0);
		}
		public DeallocateStmtContext deallocateStmt() {
			return getRuleContext(DeallocateStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public DefineStmtContext defineStmt() {
			return getRuleContext(DefineStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public DiscardStmtContext discardStmt() {
			return getRuleContext(DiscardStmtContext.class,0);
		}
		public DoStmtContext doStmt() {
			return getRuleContext(DoStmtContext.class,0);
		}
		public DropAssertStmtContext dropAssertStmt() {
			return getRuleContext(DropAssertStmtContext.class,0);
		}
		public DropCastStmtContext dropCastStmt() {
			return getRuleContext(DropCastStmtContext.class,0);
		}
		public DropFdwStmtContext dropFdwStmt() {
			return getRuleContext(DropFdwStmtContext.class,0);
		}
		public DropForeignServerStmtContext dropForeignServerStmt() {
			return getRuleContext(DropForeignServerStmtContext.class,0);
		}
		public DropGroupStmtContext dropGroupStmt() {
			return getRuleContext(DropGroupStmtContext.class,0);
		}
		public DropOpClassStmtContext dropOpClassStmt() {
			return getRuleContext(DropOpClassStmtContext.class,0);
		}
		public DropOpFamilyStmtContext dropOpFamilyStmt() {
			return getRuleContext(DropOpFamilyStmtContext.class,0);
		}
		public DropOwnedStmtContext dropOwnedStmt() {
			return getRuleContext(DropOwnedStmtContext.class,0);
		}
		public DropPLangStmtContext dropPLangStmt() {
			return getRuleContext(DropPLangStmtContext.class,0);
		}
		public DropRuleStmtContext dropRuleStmt() {
			return getRuleContext(DropRuleStmtContext.class,0);
		}
		public DropStmtContext dropStmt() {
			return getRuleContext(DropStmtContext.class,0);
		}
		public DropTableSpaceStmtContext dropTableSpaceStmt() {
			return getRuleContext(DropTableSpaceStmtContext.class,0);
		}
		public DropTrigStmtContext dropTrigStmt() {
			return getRuleContext(DropTrigStmtContext.class,0);
		}
		public DropRoleStmtContext dropRoleStmt() {
			return getRuleContext(DropRoleStmtContext.class,0);
		}
		public DropUserStmtContext dropUserStmt() {
			return getRuleContext(DropUserStmtContext.class,0);
		}
		public DropUserMappingStmtContext dropUserMappingStmt() {
			return getRuleContext(DropUserMappingStmtContext.class,0);
		}
		public DropdbStmtContext dropdbStmt() {
			return getRuleContext(DropdbStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainStmtContext explainStmt() {
			return getRuleContext(ExplainStmtContext.class,0);
		}
		public FetchStmtContext fetchStmt() {
			return getRuleContext(FetchStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public GrantRoleStmtContext grantRoleStmt() {
			return getRuleContext(GrantRoleStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public ListenStmtContext listenStmt() {
			return getRuleContext(ListenStmtContext.class,0);
		}
		public LoadStmtContext loadStmt() {
			return getRuleContext(LoadStmtContext.class,0);
		}
		public LockStmtContext lockStmt() {
			return getRuleContext(LockStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public PrepareStmtContext prepareStmt() {
			return getRuleContext(PrepareStmtContext.class,0);
		}
		public ReassignOwnedStmtContext reassignOwnedStmt() {
			return getRuleContext(ReassignOwnedStmtContext.class,0);
		}
		public ReindexStmtContext reindexStmt() {
			return getRuleContext(ReindexStmtContext.class,0);
		}
		public RemoveAggrStmtContext removeAggrStmt() {
			return getRuleContext(RemoveAggrStmtContext.class,0);
		}
		public RemoveFuncStmtContext removeFuncStmt() {
			return getRuleContext(RemoveFuncStmtContext.class,0);
		}
		public RemoveOperStmtContext removeOperStmt() {
			return getRuleContext(RemoveOperStmtContext.class,0);
		}
		public RenameStmtContext renameStmt() {
			return getRuleContext(RenameStmtContext.class,0);
		}
		public RevokeStmtContext revokeStmt() {
			return getRuleContext(RevokeStmtContext.class,0);
		}
		public RevokeRoleStmtContext revokeRoleStmt() {
			return getRuleContext(RevokeRoleStmtContext.class,0);
		}
		public RuleStmtContext ruleStmt() {
			return getRuleContext(RuleStmtContext.class,0);
		}
		public SecLabelStmtContext secLabelStmt() {
			return getRuleContext(SecLabelStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TransactionStmtContext transactionStmt() {
			return getRuleContext(TransactionStmtContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public UnlistenStmtContext unlistenStmt() {
			return getRuleContext(UnlistenStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public VacuumStmtContext vacuumStmt() {
			return getRuleContext(VacuumStmtContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public VariableSetStmtContext variableSetStmt() {
			return getRuleContext(VariableSetStmtContext.class,0);
		}
		public VariableShowStmtContext variableShowStmt() {
			return getRuleContext(VariableShowStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_stmt_execsql);
		try {
			setState(1818);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1708);
				alterDatabaseStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1709);
				alterDatabaseSetStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1710);
				alterDefaultPrivilegesStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1711);
				alterDomainStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1712);
				alterEnumStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1713);
				alterExtensionStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1714);
				alterExtensionContentsStmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1715);
				alterFdwStmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1716);
				alterForeignServerStmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1717);
				alterForeignTableStmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1718);
				alterFunctionStmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1719);
				alterGroupStmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1720);
				alterObjectSchemaStmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1721);
				alterOwnerStmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1722);
				alterSeqStmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1723);
				alterTableStmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1724);
				alterCompositeTypeStmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1725);
				alterRoleSetStmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1726);
				alterRoleStmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1727);
				alterTSConfigurationStmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1728);
				alterTSDictionaryStmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1729);
				alterUserMappingStmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1730);
				alterUserSetStmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1731);
				alterUserStmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1732);
				analyzeStmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1733);
				checkPointStmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1734);
				closePortalStmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1735);
				clusterStmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1736);
				commentStmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1737);
				constraintsSetStmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1738);
				copyStmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1739);
				createAsStmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1740);
				createAssertStmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1741);
				createCastStmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1742);
				createConversionStmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1743);
				createDomainStmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1744);
				createExtensionStmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1745);
				createFdwStmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1746);
				createForeignServerStmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1747);
				createForeignTableStmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1748);
				createFunctionStmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1749);
				createGroupStmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1750);
				createOpClassStmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1751);
				createOpFamilyStmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1752);
				alterOpFamilyStmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1753);
				createPLangStmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1754);
				createSchemaStmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1755);
				createSeqStmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1756);
				createStmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1757);
				createTableSpaceStmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1758);
				createTrigStmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1759);
				createRoleStmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1760);
				createUserStmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1761);
				createUserMappingStmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1762);
				createdbStmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1763);
				deallocateStmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1764);
				declareCursorStmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1765);
				defineStmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1766);
				deleteStmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1767);
				discardStmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1768);
				doStmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1769);
				dropAssertStmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1770);
				dropCastStmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1771);
				dropFdwStmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1772);
				dropForeignServerStmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1773);
				dropGroupStmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1774);
				dropOpClassStmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1775);
				dropOpFamilyStmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1776);
				dropOwnedStmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1777);
				dropPLangStmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1778);
				dropRuleStmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1779);
				dropStmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1780);
				dropTableSpaceStmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1781);
				dropTrigStmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1782);
				dropRoleStmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1783);
				dropUserStmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1784);
				dropUserMappingStmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1785);
				dropdbStmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1786);
				executeStmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1787);
				explainStmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1788);
				fetchStmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1789);
				grantStmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1790);
				grantRoleStmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1791);
				indexStmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1792);
				insertStmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1793);
				listenStmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1794);
				loadStmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1795);
				lockStmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1796);
				notifyStmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1797);
				prepareStmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1798);
				reassignOwnedStmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1799);
				reindexStmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1800);
				removeAggrStmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1801);
				removeFuncStmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1802);
				removeOperStmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1803);
				renameStmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1804);
				revokeStmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1805);
				revokeRoleStmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1806);
				ruleStmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1807);
				secLabelStmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1808);
				selectStmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1809);
				transactionStmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1810);
				truncateStmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1811);
				unlistenStmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1812);
				updateStmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1813);
				vacuumStmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1814);
				variableResetStmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1815);
				variableSetStmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1816);
				variableShowStmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1817);
				viewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public Token target;
		public TerminalNode K_EXECUTE() { return getToken(PlPgSqlParser.K_EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_stmt_dynexecute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1820);
			match(K_EXECUTE);
			setState(1821);
			a_expr(0);
			setState(1823);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1822);
				usingClause();
				}
			}

			setState(1827);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1825);
				match(INTO);
				setState(1826);
				((Stmt_dynexecuteContext)_localctx).target = match(IDENT);
				}
			}

			setState(1829);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public UsingClauseArgumentsListContext usingClauseArgumentsList() {
			return getRuleContext(UsingClauseArgumentsListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_usingClause);
		try {
			setState(1838);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1831);
				match(USING);
				setState(1832);
				match(T__2);
				setState(1833);
				usingClauseArgumentsList();
				setState(1834);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1836);
				match(USING);
				setState(1837);
				usingClauseArgumentsList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseArgumentsListContext extends ParserRuleContext {
		public List<UsingClauseArgumentContext> usingClauseArgument() {
			return getRuleContexts(UsingClauseArgumentContext.class);
		}
		public UsingClauseArgumentContext usingClauseArgument(int i) {
			return getRuleContext(UsingClauseArgumentContext.class,i);
		}
		public UsingClauseArgumentsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClauseArgumentsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUsingClauseArgumentsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseArgumentsListContext usingClauseArgumentsList() throws RecognitionException {
		UsingClauseArgumentsListContext _localctx = new UsingClauseArgumentsListContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_usingClauseArgumentsList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1840);
			usingClauseArgument();
			setState(1845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1841);
					match(T__4);
					setState(1842);
					usingClauseArgument();
					}
					} 
				}
				setState(1847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseArgumentContext extends ParserRuleContext {
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public UsingClauseArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClauseArgument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUsingClauseArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseArgumentContext usingClauseArgument() throws RecognitionException {
		UsingClauseArgumentContext _localctx = new UsingClauseArgumentContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_usingClauseArgument);
		try {
			setState(1850);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1848);
				stmt_assign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1849);
				any_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_openContext extends ParserRuleContext {
		public Token queryString;
		public TerminalNode K_OPEN() { return getToken(PlPgSqlParser.K_OPEN, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode K_SCROLL() { return getToken(PlPgSqlParser.K_SCROLL, 0); }
		public TerminalNode K_NO() { return getToken(PlPgSqlParser.K_NO, 0); }
		public TerminalNode K_EXECUTE() { return getToken(PlPgSqlParser.K_EXECUTE, 0); }
		public TerminalNode SCONST() { return getToken(PlPgSqlParser.SCONST, 0); }
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public CursorArgumentsListContext cursorArgumentsList() {
			return getRuleContext(CursorArgumentsListContext.class,0);
		}
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_stmt_open);
		int _la;
		try {
			setState(1885);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1852);
				match(K_OPEN);
				setState(1853);
				cursor_variable();
				setState(1858);
				_la = _input.LA(1);
				if (_la==K_SCROLL || _la==K_NO) {
					{
					setState(1855);
					_la = _input.LA(1);
					if (_la==K_NO) {
						{
						setState(1854);
						match(K_NO);
						}
					}

					setState(1857);
					match(K_SCROLL);
					}
				}

				setState(1860);
				match(FOR);
				setState(1861);
				select_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1863);
				match(K_OPEN);
				setState(1864);
				cursor_variable();
				setState(1869);
				_la = _input.LA(1);
				if (_la==K_SCROLL || _la==K_NO) {
					{
					setState(1866);
					_la = _input.LA(1);
					if (_la==K_NO) {
						{
						setState(1865);
						match(K_NO);
						}
					}

					setState(1868);
					match(K_SCROLL);
					}
				}

				setState(1871);
				match(FOR);
				setState(1872);
				match(K_EXECUTE);
				setState(1873);
				((Stmt_openContext)_localctx).queryString = match(SCONST);
				setState(1875);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1874);
					usingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1877);
				match(K_OPEN);
				setState(1878);
				cursor_variable();
				setState(1879);
				match(T__2);
				setState(1880);
				cursorArgumentsList();
				setState(1881);
				match(T__3);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1883);
				match(K_OPEN);
				setState(1884);
				cursor_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorArgumentsListContext extends ParserRuleContext {
		public List<CursorArgumentContext> cursorArgument() {
			return getRuleContexts(CursorArgumentContext.class);
		}
		public CursorArgumentContext cursorArgument(int i) {
			return getRuleContext(CursorArgumentContext.class,i);
		}
		public CursorArgumentsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorArgumentsList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursorArgumentsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorArgumentsListContext cursorArgumentsList() throws RecognitionException {
		CursorArgumentsListContext _localctx = new CursorArgumentsListContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_cursorArgumentsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			cursorArgument();
			setState(1892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__4) {
				{
				{
				setState(1888);
				match(T__4);
				setState(1889);
				cursorArgument();
				}
				}
				setState(1894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorArgumentContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public CursorArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorArgument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursorArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorArgumentContext cursorArgument() throws RecognitionException {
		CursorArgumentContext _localctx = new CursorArgumentContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_cursorArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_fetchContext extends ParserRuleContext {
		public Token target;
		public TerminalNode K_FETCH() { return getToken(PlPgSqlParser.K_FETCH, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			match(K_FETCH);
			setState(1898);
			opt_fetch_direction();
			setState(1899);
			cursor_variable();
			setState(1900);
			match(INTO);
			setState(1901);
			((Stmt_fetchContext)_localctx).target = match(IDENT);
			setState(1902);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_moveContext extends ParserRuleContext {
		public TerminalNode K_MOVE() { return getToken(PlPgSqlParser.K_MOVE, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1904);
			match(K_MOVE);
			setState(1905);
			opt_fetch_direction();
			setState(1906);
			cursor_variable();
			setState(1907);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public TerminalNode K_FORWARD() { return getToken(PlPgSqlParser.K_FORWARD, 0); }
		public TerminalNode K_BACKWARD() { return getToken(PlPgSqlParser.K_BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_opt_fetch_direction);
		try {
			setState(1912);
			switch (_input.LA(1)) {
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case K_FORWARD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1910);
				match(K_FORWARD);
				}
				break;
			case K_BACKWARD:
				enterOuterAlt(_localctx, 3);
				{
				setState(1911);
				match(K_BACKWARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode K_CLOSE() { return getToken(PlPgSqlParser.K_CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(K_CLOSE);
			setState(1915);
			cursor_variable();
			setState(1916);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918);
			match(NULL_P);
			setState(1919);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_variableContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_cursor_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1921);
			match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_sectContext extends ParserRuleContext {
		public TerminalNode K_EXCEPTION() { return getToken(PlPgSqlParser.K_EXCEPTION, 0); }
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_exception_sect);
		try {
			setState(1930);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1923);
				match(K_EXCEPTION);
				setState(1924);
				proc_exceptions(0);
				setState(1925);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1927);
				match(K_EXCEPTION);
				setState(1928);
				proc_exceptions(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionsContext extends ParserRuleContext {
		public Proc_exceptionContext proc_exception() {
			return getRuleContext(Proc_exceptionContext.class,0);
		}
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		return proc_exceptions(0);
	}

	private Proc_exceptionsContext proc_exceptions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, _parentState);
		Proc_exceptionsContext _prevctx = _localctx;
		int _startState = 148;
		enterRecursionRule(_localctx, 148, RULE_proc_exceptions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1933);
			proc_exception();
			}
			_ctx.stop = _input.LT(-1);
			setState(1939);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_exceptionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_exceptions);
					setState(1935);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1936);
					proc_exception();
					}
					} 
				}
				setState(1941);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1942);
			match(WHEN);
			setState(1943);
			proc_conditions(0);
			setState(1944);
			match(THEN);
			setState(1945);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionsContext extends ParserRuleContext {
		public Proc_conditionContext proc_condition() {
			return getRuleContext(Proc_conditionContext.class,0);
		}
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		return proc_conditions(0);
	}

	private Proc_conditionsContext proc_conditions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, _parentState);
		Proc_conditionsContext _prevctx = _localctx;
		int _startState = 152;
		enterRecursionRule(_localctx, 152, RULE_proc_conditions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1948);
			proc_condition();
			}
			_ctx.stop = _input.LT(-1);
			setState(1955);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Proc_conditionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_proc_conditions);
					setState(1950);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1951);
					match(OR);
					setState(1952);
					proc_condition();
					}
					} 
				}
				setState(1957);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Token sqlState;
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public TerminalNode SCONST() { return getToken(PlPgSqlParser.SCONST, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_proc_condition);
		try {
			setState(1961);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1958);
				match(IDENT);
				setState(1959);
				((Proc_conditionContext)_localctx).sqlState = match(SCONST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1960);
				any_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_semiContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_distinctContext opt_distinct() {
			return getRuleContext(Opt_distinctContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_expr_until_semi);
		try {
			setState(1973);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1963);
				any_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1964);
				a_expr(0);
				setState(1965);
				match(T__1);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1967);
				opt_distinct();
				setState(1968);
				target_list(0);
				setState(1969);
				from_clause();
				setState(1970);
				where_clause();
				setState(1971);
				match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			a_expr(0);
			setState(1976);
			match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_thenContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			a_expr(0);
			setState(1979);
			match(THEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_loopContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode K_LOOP() { return getToken(PlPgSqlParser.K_LOOP, 0); }
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1981);
			a_expr(0);
			setState(1982);
			match(K_LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_block_labelContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PlPgSqlParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PlPgSqlParser.GREATER_GREATER, 0); }
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_opt_block_label);
		try {
			setState(1989);
			switch (_input.LA(1)) {
			case LESS_LESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1984);
				match(LESS_LESS);
				setState(1985);
				any_identifier();
				setState(1986);
				match(GREATER_GREATER);
				}
				break;
			case K_LOOP:
			case K_WHILE:
			case K_FOREACH:
			case BEGIN_P:
			case DECLARE:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_opt_label);
		try {
			setState(1993);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1991);
				any_identifier();
				}
				break;
			case EOF:
			case T__1:
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_opt_exitcond);
		try {
			setState(1998);
			switch (_input.LA(1)) {
			case T__1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1995);
				match(T__1);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1996);
				match(WHEN);
				setState(1997);
				expr_until_semi();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_identifierContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_any_identifier);
		try {
			setState(2003);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2000);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2001);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2002);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2005);
			stmtmulti(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		return stmtmulti(0);
	}

	private StmtmultiContext stmtmulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, _parentState);
		StmtmultiContext _prevctx = _localctx;
		int _startState = 174;
		enterRecursionRule(_localctx, 174, RULE_stmtmulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2008);
			stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(2015);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StmtmultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmtmulti);
					setState(2010);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2011);
					match(T__1);
					setState(2012);
					stmt();
					}
					} 
				}
				setState(2017);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public AlterDatabaseStmtContext alterDatabaseStmt() {
			return getRuleContext(AlterDatabaseStmtContext.class,0);
		}
		public AlterDatabaseSetStmtContext alterDatabaseSetStmt() {
			return getRuleContext(AlterDatabaseSetStmtContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() {
			return getRuleContext(AlterDefaultPrivilegesStmtContext.class,0);
		}
		public AlterDomainStmtContext alterDomainStmt() {
			return getRuleContext(AlterDomainStmtContext.class,0);
		}
		public AlterEnumStmtContext alterEnumStmt() {
			return getRuleContext(AlterEnumStmtContext.class,0);
		}
		public AlterExtensionStmtContext alterExtensionStmt() {
			return getRuleContext(AlterExtensionStmtContext.class,0);
		}
		public AlterExtensionContentsStmtContext alterExtensionContentsStmt() {
			return getRuleContext(AlterExtensionContentsStmtContext.class,0);
		}
		public AlterFdwStmtContext alterFdwStmt() {
			return getRuleContext(AlterFdwStmtContext.class,0);
		}
		public AlterForeignServerStmtContext alterForeignServerStmt() {
			return getRuleContext(AlterForeignServerStmtContext.class,0);
		}
		public AlterForeignTableStmtContext alterForeignTableStmt() {
			return getRuleContext(AlterForeignTableStmtContext.class,0);
		}
		public AlterFunctionStmtContext alterFunctionStmt() {
			return getRuleContext(AlterFunctionStmtContext.class,0);
		}
		public AlterGroupStmtContext alterGroupStmt() {
			return getRuleContext(AlterGroupStmtContext.class,0);
		}
		public AlterObjectSchemaStmtContext alterObjectSchemaStmt() {
			return getRuleContext(AlterObjectSchemaStmtContext.class,0);
		}
		public AlterOwnerStmtContext alterOwnerStmt() {
			return getRuleContext(AlterOwnerStmtContext.class,0);
		}
		public AlterSeqStmtContext alterSeqStmt() {
			return getRuleContext(AlterSeqStmtContext.class,0);
		}
		public AlterTableStmtContext alterTableStmt() {
			return getRuleContext(AlterTableStmtContext.class,0);
		}
		public AlterCompositeTypeStmtContext alterCompositeTypeStmt() {
			return getRuleContext(AlterCompositeTypeStmtContext.class,0);
		}
		public AlterRoleSetStmtContext alterRoleSetStmt() {
			return getRuleContext(AlterRoleSetStmtContext.class,0);
		}
		public AlterRoleStmtContext alterRoleStmt() {
			return getRuleContext(AlterRoleStmtContext.class,0);
		}
		public AlterTSConfigurationStmtContext alterTSConfigurationStmt() {
			return getRuleContext(AlterTSConfigurationStmtContext.class,0);
		}
		public AlterTSDictionaryStmtContext alterTSDictionaryStmt() {
			return getRuleContext(AlterTSDictionaryStmtContext.class,0);
		}
		public AlterUserMappingStmtContext alterUserMappingStmt() {
			return getRuleContext(AlterUserMappingStmtContext.class,0);
		}
		public AlterUserSetStmtContext alterUserSetStmt() {
			return getRuleContext(AlterUserSetStmtContext.class,0);
		}
		public AlterUserStmtContext alterUserStmt() {
			return getRuleContext(AlterUserStmtContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public CheckPointStmtContext checkPointStmt() {
			return getRuleContext(CheckPointStmtContext.class,0);
		}
		public ClosePortalStmtContext closePortalStmt() {
			return getRuleContext(ClosePortalStmtContext.class,0);
		}
		public ClusterStmtContext clusterStmt() {
			return getRuleContext(ClusterStmtContext.class,0);
		}
		public CommentStmtContext commentStmt() {
			return getRuleContext(CommentStmtContext.class,0);
		}
		public ConstraintsSetStmtContext constraintsSetStmt() {
			return getRuleContext(ConstraintsSetStmtContext.class,0);
		}
		public CopyStmtContext copyStmt() {
			return getRuleContext(CopyStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public CreateAssertStmtContext createAssertStmt() {
			return getRuleContext(CreateAssertStmtContext.class,0);
		}
		public CreateCastStmtContext createCastStmt() {
			return getRuleContext(CreateCastStmtContext.class,0);
		}
		public CreateConversionStmtContext createConversionStmt() {
			return getRuleContext(CreateConversionStmtContext.class,0);
		}
		public CreateDomainStmtContext createDomainStmt() {
			return getRuleContext(CreateDomainStmtContext.class,0);
		}
		public CreateExtensionStmtContext createExtensionStmt() {
			return getRuleContext(CreateExtensionStmtContext.class,0);
		}
		public CreateFdwStmtContext createFdwStmt() {
			return getRuleContext(CreateFdwStmtContext.class,0);
		}
		public CreateForeignServerStmtContext createForeignServerStmt() {
			return getRuleContext(CreateForeignServerStmtContext.class,0);
		}
		public CreateForeignTableStmtContext createForeignTableStmt() {
			return getRuleContext(CreateForeignTableStmtContext.class,0);
		}
		public CreateFunctionStmtContext createFunctionStmt() {
			return getRuleContext(CreateFunctionStmtContext.class,0);
		}
		public CreateGroupStmtContext createGroupStmt() {
			return getRuleContext(CreateGroupStmtContext.class,0);
		}
		public CreateOpClassStmtContext createOpClassStmt() {
			return getRuleContext(CreateOpClassStmtContext.class,0);
		}
		public CreateOpFamilyStmtContext createOpFamilyStmt() {
			return getRuleContext(CreateOpFamilyStmtContext.class,0);
		}
		public AlterOpFamilyStmtContext alterOpFamilyStmt() {
			return getRuleContext(AlterOpFamilyStmtContext.class,0);
		}
		public CreatePLangStmtContext createPLangStmt() {
			return getRuleContext(CreatePLangStmtContext.class,0);
		}
		public CreateSchemaStmtContext createSchemaStmt() {
			return getRuleContext(CreateSchemaStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public CreateTableSpaceStmtContext createTableSpaceStmt() {
			return getRuleContext(CreateTableSpaceStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public CreateRoleStmtContext createRoleStmt() {
			return getRuleContext(CreateRoleStmtContext.class,0);
		}
		public CreateUserStmtContext createUserStmt() {
			return getRuleContext(CreateUserStmtContext.class,0);
		}
		public CreateUserMappingStmtContext createUserMappingStmt() {
			return getRuleContext(CreateUserMappingStmtContext.class,0);
		}
		public CreatedbStmtContext createdbStmt() {
			return getRuleContext(CreatedbStmtContext.class,0);
		}
		public DeallocateStmtContext deallocateStmt() {
			return getRuleContext(DeallocateStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public DefineStmtContext defineStmt() {
			return getRuleContext(DefineStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public DiscardStmtContext discardStmt() {
			return getRuleContext(DiscardStmtContext.class,0);
		}
		public DoStmtContext doStmt() {
			return getRuleContext(DoStmtContext.class,0);
		}
		public DropAssertStmtContext dropAssertStmt() {
			return getRuleContext(DropAssertStmtContext.class,0);
		}
		public DropCastStmtContext dropCastStmt() {
			return getRuleContext(DropCastStmtContext.class,0);
		}
		public DropFdwStmtContext dropFdwStmt() {
			return getRuleContext(DropFdwStmtContext.class,0);
		}
		public DropForeignServerStmtContext dropForeignServerStmt() {
			return getRuleContext(DropForeignServerStmtContext.class,0);
		}
		public DropGroupStmtContext dropGroupStmt() {
			return getRuleContext(DropGroupStmtContext.class,0);
		}
		public DropOpClassStmtContext dropOpClassStmt() {
			return getRuleContext(DropOpClassStmtContext.class,0);
		}
		public DropOpFamilyStmtContext dropOpFamilyStmt() {
			return getRuleContext(DropOpFamilyStmtContext.class,0);
		}
		public DropOwnedStmtContext dropOwnedStmt() {
			return getRuleContext(DropOwnedStmtContext.class,0);
		}
		public DropPLangStmtContext dropPLangStmt() {
			return getRuleContext(DropPLangStmtContext.class,0);
		}
		public DropRuleStmtContext dropRuleStmt() {
			return getRuleContext(DropRuleStmtContext.class,0);
		}
		public DropStmtContext dropStmt() {
			return getRuleContext(DropStmtContext.class,0);
		}
		public DropTableSpaceStmtContext dropTableSpaceStmt() {
			return getRuleContext(DropTableSpaceStmtContext.class,0);
		}
		public DropTrigStmtContext dropTrigStmt() {
			return getRuleContext(DropTrigStmtContext.class,0);
		}
		public DropRoleStmtContext dropRoleStmt() {
			return getRuleContext(DropRoleStmtContext.class,0);
		}
		public DropUserStmtContext dropUserStmt() {
			return getRuleContext(DropUserStmtContext.class,0);
		}
		public DropUserMappingStmtContext dropUserMappingStmt() {
			return getRuleContext(DropUserMappingStmtContext.class,0);
		}
		public DropdbStmtContext dropdbStmt() {
			return getRuleContext(DropdbStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainStmtContext explainStmt() {
			return getRuleContext(ExplainStmtContext.class,0);
		}
		public FetchStmtContext fetchStmt() {
			return getRuleContext(FetchStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public GrantRoleStmtContext grantRoleStmt() {
			return getRuleContext(GrantRoleStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public ListenStmtContext listenStmt() {
			return getRuleContext(ListenStmtContext.class,0);
		}
		public LoadStmtContext loadStmt() {
			return getRuleContext(LoadStmtContext.class,0);
		}
		public LockStmtContext lockStmt() {
			return getRuleContext(LockStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public PrepareStmtContext prepareStmt() {
			return getRuleContext(PrepareStmtContext.class,0);
		}
		public ReassignOwnedStmtContext reassignOwnedStmt() {
			return getRuleContext(ReassignOwnedStmtContext.class,0);
		}
		public ReindexStmtContext reindexStmt() {
			return getRuleContext(ReindexStmtContext.class,0);
		}
		public RemoveAggrStmtContext removeAggrStmt() {
			return getRuleContext(RemoveAggrStmtContext.class,0);
		}
		public RemoveFuncStmtContext removeFuncStmt() {
			return getRuleContext(RemoveFuncStmtContext.class,0);
		}
		public RemoveOperStmtContext removeOperStmt() {
			return getRuleContext(RemoveOperStmtContext.class,0);
		}
		public RenameStmtContext renameStmt() {
			return getRuleContext(RenameStmtContext.class,0);
		}
		public RevokeStmtContext revokeStmt() {
			return getRuleContext(RevokeStmtContext.class,0);
		}
		public RevokeRoleStmtContext revokeRoleStmt() {
			return getRuleContext(RevokeRoleStmtContext.class,0);
		}
		public RuleStmtContext ruleStmt() {
			return getRuleContext(RuleStmtContext.class,0);
		}
		public SecLabelStmtContext secLabelStmt() {
			return getRuleContext(SecLabelStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TransactionStmtContext transactionStmt() {
			return getRuleContext(TransactionStmtContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public UnlistenStmtContext unlistenStmt() {
			return getRuleContext(UnlistenStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public VacuumStmtContext vacuumStmt() {
			return getRuleContext(VacuumStmtContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public VariableSetStmtContext variableSetStmt() {
			return getRuleContext(VariableSetStmtContext.class,0);
		}
		public VariableShowStmtContext variableShowStmt() {
			return getRuleContext(VariableShowStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_stmt);
		try {
			setState(2129);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2018);
				alterDatabaseStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2019);
				alterDatabaseSetStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2020);
				alterDefaultPrivilegesStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2021);
				alterDomainStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2022);
				alterEnumStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2023);
				alterExtensionStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2024);
				alterExtensionContentsStmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2025);
				alterFdwStmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2026);
				alterForeignServerStmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2027);
				alterForeignTableStmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2028);
				alterFunctionStmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2029);
				alterGroupStmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2030);
				alterObjectSchemaStmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2031);
				alterOwnerStmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2032);
				alterSeqStmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2033);
				alterTableStmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2034);
				alterCompositeTypeStmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2035);
				alterRoleSetStmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2036);
				alterRoleStmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2037);
				alterTSConfigurationStmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2038);
				alterTSDictionaryStmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2039);
				alterUserMappingStmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2040);
				alterUserSetStmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2041);
				alterUserStmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2042);
				analyzeStmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2043);
				checkPointStmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2044);
				closePortalStmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2045);
				clusterStmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2046);
				commentStmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2047);
				constraintsSetStmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2048);
				copyStmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2049);
				createAsStmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2050);
				createAssertStmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2051);
				createCastStmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2052);
				createConversionStmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2053);
				createDomainStmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2054);
				createExtensionStmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2055);
				createFdwStmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2056);
				createForeignServerStmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2057);
				createForeignTableStmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2058);
				createFunctionStmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2059);
				createGroupStmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2060);
				createOpClassStmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2061);
				createOpFamilyStmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2062);
				alterOpFamilyStmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2063);
				createPLangStmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2064);
				createSchemaStmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2065);
				createSeqStmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2066);
				createStmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2067);
				createTableSpaceStmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2068);
				createTrigStmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2069);
				createRoleStmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2070);
				createUserStmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2071);
				createUserMappingStmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2072);
				createdbStmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2073);
				deallocateStmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2074);
				declareCursorStmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2075);
				defineStmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(2076);
				deleteStmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(2077);
				discardStmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(2078);
				doStmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(2079);
				dropAssertStmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(2080);
				dropCastStmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(2081);
				dropFdwStmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(2082);
				dropForeignServerStmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(2083);
				dropGroupStmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(2084);
				dropOpClassStmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(2085);
				dropOpFamilyStmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(2086);
				dropOwnedStmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(2087);
				dropPLangStmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(2088);
				dropRuleStmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(2089);
				dropStmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(2090);
				dropTableSpaceStmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(2091);
				dropTrigStmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(2092);
				dropRoleStmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(2093);
				dropUserStmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(2094);
				dropUserMappingStmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(2095);
				dropdbStmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(2096);
				executeStmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(2097);
				explainStmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(2098);
				fetchStmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(2099);
				grantStmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(2100);
				grantRoleStmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(2101);
				indexStmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(2102);
				insertStmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(2103);
				listenStmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(2104);
				loadStmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(2105);
				lockStmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(2106);
				notifyStmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(2107);
				prepareStmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(2108);
				reassignOwnedStmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(2109);
				reindexStmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(2110);
				removeAggrStmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(2111);
				removeFuncStmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(2112);
				removeOperStmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(2113);
				renameStmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(2114);
				revokeStmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(2115);
				revokeRoleStmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(2116);
				ruleStmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(2117);
				secLabelStmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(2118);
				selectStmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(2119);
				transactionStmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(2120);
				truncateStmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(2121);
				unlistenStmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(2122);
				updateStmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(2123);
				vacuumStmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(2124);
				variableResetStmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(2125);
				variableSetStmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(2126);
				variableShowStmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(2127);
				viewStmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStmtContext createRoleStmt() throws RecognitionException {
		CreateRoleStmtContext _localctx = new CreateRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_createRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			match(CREATE);
			setState(2132);
			match(ROLE);
			setState(2133);
			roleId();
			setState(2134);
			opt_with();
			setState(2135);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_opt_with);
		try {
			setState(2139);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2137);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptRoleListContext extends ParserRuleContext {
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateOptRoleElemContext createOptRoleElem() {
			return getRuleContext(CreateOptRoleElemContext.class,0);
		}
		public OptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optRoleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptRoleListContext optRoleList() throws RecognitionException {
		return optRoleList(0);
	}

	private OptRoleListContext optRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptRoleListContext _localctx = new OptRoleListContext(_ctx, _parentState);
		OptRoleListContext _prevctx = _localctx;
		int _startState = 182;
		enterRecursionRule(_localctx, 182, RULE_optRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2146);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optRoleList);
					setState(2142);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2143);
					createOptRoleElem();
					}
					} 
				}
				setState(2148);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleListContext extends ParserRuleContext {
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public AlterOptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleListContext alterOptRoleList() throws RecognitionException {
		return alterOptRoleList(0);
	}

	private AlterOptRoleListContext alterOptRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AlterOptRoleListContext _localctx = new AlterOptRoleListContext(_ctx, _parentState);
		AlterOptRoleListContext _prevctx = _localctx;
		int _startState = 184;
		enterRecursionRule(_localctx, 184, RULE_alterOptRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2154);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlterOptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterOptRoleList);
					setState(2150);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2151);
					alterOptRoleElem();
					}
					} 
				}
				setState(2156);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PlPgSqlParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode ENCRYPTED() { return getToken(PlPgSqlParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PlPgSqlParser.UNENCRYPTED, 0); }
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PlPgSqlParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PlPgSqlParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alterOptRoleElem);
		try {
			setState(2177);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2157);
				match(PASSWORD);
				setState(2158);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2159);
				match(ENCRYPTED);
				setState(2160);
				match(PASSWORD);
				setState(2161);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2162);
				match(UNENCRYPTED);
				setState(2163);
				match(PASSWORD);
				setState(2164);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2165);
				match(CONNECTION);
				setState(2166);
				match(LIMIT);
				setState(2167);
				signedIconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2168);
				match(VALID);
				setState(2169);
				match(UNTIL);
				setState(2170);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2171);
				match(USER);
				setState(2172);
				name_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2173);
				match(PASSWORD);
				setState(2174);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2175);
				match(INHERIT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2176);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PlPgSqlParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_createOptRoleElem);
		try {
			setState(2192);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2179);
				alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2180);
				match(SYSID);
				setState(2181);
				iconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2182);
				match(ADMIN);
				setState(2183);
				name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2184);
				match(ROLE);
				setState(2185);
				name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2186);
				match(IN_P);
				setState(2187);
				match(ROLE);
				setState(2188);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2189);
				match(IN_P);
				setState(2190);
				match(GROUP_P);
				setState(2191);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStmtContext createUserStmt() throws RecognitionException {
		CreateUserStmtContext _localctx = new CreateUserStmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_createUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			match(CREATE);
			setState(2195);
			match(USER);
			setState(2196);
			roleId();
			setState(2197);
			opt_with();
			setState(2198);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleStmtContext alterRoleStmt() throws RecognitionException {
		AlterRoleStmtContext _localctx = new AlterRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alterRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200);
			match(ALTER);
			setState(2201);
			match(ROLE);
			setState(2202);
			roleId();
			setState(2203);
			opt_with();
			setState(2204);
			alterOptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_opt_in_database);
		try {
			setState(2210);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2206);
				match(IN_P);
				setState(2207);
				match(DATABASE);
				setState(2208);
				database_name();
				}
				break;
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterRoleSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterRoleSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleSetStmtContext alterRoleSetStmt() throws RecognitionException {
		AlterRoleSetStmtContext _localctx = new AlterRoleSetStmtContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alterRoleSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2212);
			match(ALTER);
			setState(2213);
			match(ROLE);
			setState(2214);
			roleId();
			setState(2215);
			opt_in_database();
			setState(2216);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStmtContext alterUserStmt() throws RecognitionException {
		AlterUserStmtContext _localctx = new AlterUserStmtContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alterUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2218);
			match(ALTER);
			setState(2219);
			match(USER);
			setState(2220);
			roleId();
			setState(2221);
			opt_with();
			setState(2222);
			alterOptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterUserSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserSetStmtContext alterUserSetStmt() throws RecognitionException {
		AlterUserSetStmtContext _localctx = new AlterUserSetStmtContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alterUserSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			match(ALTER);
			setState(2225);
			match(USER);
			setState(2226);
			roleId();
			setState(2227);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleStmtContext dropRoleStmt() throws RecognitionException {
		DropRoleStmtContext _localctx = new DropRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_dropRoleStmt);
		try {
			setState(2237);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2229);
				match(DROP);
				setState(2230);
				match(ROLE);
				setState(2231);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2232);
				match(DROP);
				setState(2233);
				match(ROLE);
				setState(2234);
				match(IF_P);
				setState(2235);
				match(EXISTS);
				setState(2236);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStmtContext dropUserStmt() throws RecognitionException {
		DropUserStmtContext _localctx = new DropUserStmtContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropUserStmt);
		try {
			setState(2247);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2239);
				match(DROP);
				setState(2240);
				match(USER);
				setState(2241);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2242);
				match(DROP);
				setState(2243);
				match(USER);
				setState(2244);
				match(IF_P);
				setState(2245);
				match(EXISTS);
				setState(2246);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupStmtContext createGroupStmt() throws RecognitionException {
		CreateGroupStmtContext _localctx = new CreateGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_createGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			match(CREATE);
			setState(2250);
			match(GROUP_P);
			setState(2251);
			roleId();
			setState(2252);
			opt_with();
			setState(2253);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public AlterGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupStmtContext alterGroupStmt() throws RecognitionException {
		AlterGroupStmtContext _localctx = new AlterGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alterGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(ALTER);
			setState(2256);
			match(GROUP_P);
			setState(2257);
			roleId();
			setState(2258);
			add_drop();
			setState(2259);
			match(USER);
			setState(2260);
			name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2262);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropGroupStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropGroupStmtContext dropGroupStmt() throws RecognitionException {
		DropGroupStmtContext _localctx = new DropGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_dropGroupStmt);
		try {
			setState(2272);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2264);
				match(DROP);
				setState(2265);
				match(GROUP_P);
				setState(2266);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2267);
				match(DROP);
				setState(2268);
				match(GROUP_P);
				setState(2269);
				match(IF_P);
				setState(2270);
				match(EXISTS);
				setState(2271);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public OptSchemaNameContext optSchemaName() {
			return getRuleContext(OptSchemaNameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CreateSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStmtContext createSchemaStmt() throws RecognitionException {
		CreateSchemaStmtContext _localctx = new CreateSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_createSchemaStmt);
		try {
			setState(2286);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2274);
				match(CREATE);
				setState(2275);
				match(SCHEMA);
				setState(2276);
				optSchemaName();
				setState(2277);
				match(AUTHORIZATION);
				setState(2278);
				roleId();
				setState(2279);
				optSchemaEltList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2281);
				match(CREATE);
				setState(2282);
				match(SCHEMA);
				setState(2283);
				colId();
				setState(2284);
				optSchemaEltList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaNameContext optSchemaName() throws RecognitionException {
		OptSchemaNameContext _localctx = new OptSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_optSchemaName);
		try {
			setState(2290);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2288);
				colId();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaEltListContext extends ParserRuleContext {
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public Schema_stmtContext schema_stmt() {
			return getRuleContext(Schema_stmtContext.class,0);
		}
		public OptSchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaEltList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaEltListContext optSchemaEltList() throws RecognitionException {
		return optSchemaEltList(0);
	}

	private OptSchemaEltListContext optSchemaEltList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptSchemaEltListContext _localctx = new OptSchemaEltListContext(_ctx, _parentState);
		OptSchemaEltListContext _prevctx = _localctx;
		int _startState = 218;
		enterRecursionRule(_localctx, 218, RULE_optSchemaEltList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2297);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptSchemaEltListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optSchemaEltList);
					setState(2293);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2294);
					schema_stmt();
					}
					} 
				}
				setState(2299);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_schema_stmt);
		try {
			setState(2306);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2300);
				createStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2301);
				indexStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2302);
				createSeqStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2303);
				createTrigStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2304);
				grantStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2305);
				viewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public VariableSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableSetStmtContext variableSetStmt() throws RecognitionException {
		VariableSetStmtContext _localctx = new VariableSetStmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_variableSetStmt);
		try {
			setState(2316);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2308);
				match(SET);
				setState(2309);
				set_rest();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2310);
				match(SET);
				setState(2311);
				match(LOCAL);
				setState(2312);
				set_rest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2313);
				match(SET);
				setState(2314);
				match(SESSION);
				setState(2315);
				set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PlPgSqlParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_set_rest);
		try {
			setState(2326);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2318);
				match(TRANSACTION);
				setState(2319);
				transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2320);
				match(SESSION);
				setState(2321);
				match(CHARACTERISTICS);
				setState(2322);
				match(AS);
				setState(2323);
				match(TRANSACTION);
				setState(2324);
				transaction_mode_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2325);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG_P() { return getToken(PlPgSqlParser.CATALOG_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PlPgSqlParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(PlPgSqlParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlPgSqlParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_set_rest_more);
		try {
			setState(2371);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2328);
				var_name(0);
				setState(2329);
				match(T__6);
				setState(2330);
				var_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2332);
				var_name(0);
				setState(2333);
				match(T__6);
				setState(2334);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2336);
				var_name(0);
				setState(2337);
				match(TO);
				setState(2338);
				var_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2340);
				var_name(0);
				setState(2341);
				match(TO);
				setState(2342);
				match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2344);
				var_name(0);
				setState(2345);
				match(FROM);
				setState(2346);
				match(CURRENT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2348);
				match(TIME);
				setState(2349);
				match(ZONE);
				setState(2350);
				zone_value();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2351);
				match(CATALOG_P);
				setState(2352);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2353);
				match(SCHEMA);
				setState(2354);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2355);
				match(NAMES);
				setState(2356);
				opt_encoding();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2357);
				match(ROLE);
				setState(2358);
				colId_or_Sconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2359);
				match(SESSION);
				setState(2360);
				match(AUTHORIZATION);
				setState(2361);
				colId_or_Sconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2362);
				match(XML_P);
				setState(2363);
				match(OPTION);
				setState(2364);
				document_or_content();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2365);
				match(TRANSACTION);
				setState(2366);
				match(SNAPSHOT);
				setState(2367);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2368);
				match(SESSION);
				setState(2369);
				match(AUTHORIZATION);
				setState(2370);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_nameContext _localctx = new Var_nameContext(_ctx, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 228;
		enterRecursionRule(_localctx, 228, RULE_var_name, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2374);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(2381);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_name);
					setState(2376);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2377);
					match(T__9);
					setState(2378);
					colId();
					}
					} 
				}
				setState(2383);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public Var_valueContext var_value() {
			return getRuleContext(Var_valueContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_listContext _localctx = new Var_listContext(_ctx, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 230;
		enterRecursionRule(_localctx, 230, RULE_var_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2385);
			var_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(2392);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_list);
					setState(2387);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2388);
					match(T__4);
					setState(2389);
					var_value();
					}
					} 
				}
				setState(2394);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_var_value);
		try {
			setState(2397);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2395);
				opt_boolean_or_string();
				}
				break;
			case T__11:
			case T__14:
			case FCONST:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2396);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PlPgSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PlPgSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PlPgSqlParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlPgSqlParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_iso_level);
		try {
			setState(2406);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2399);
				match(READ);
				setState(2400);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2401);
				match(READ);
				setState(2402);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2403);
				match(REPEATABLE);
				setState(2404);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2405);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_opt_boolean_or_string);
		try {
			setState(2412);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2408);
				colId_or_Sconst();
				}
				break;
			case TRUE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2409);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(2410);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 4);
				{
				setState(2411);
				match(ON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_zone_value);
		try {
			setState(2430);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2414);
				constInterval();
				setState(2415);
				match(T__2);
				setState(2416);
				iconst();
				setState(2417);
				match(T__3);
				setState(2418);
				sconst();
				setState(2419);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2421);
				constInterval();
				setState(2422);
				sconst();
				setState(2423);
				opt_interval();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2425);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2426);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2427);
				match(IDENT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2428);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2429);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_opt_encoding);
		try {
			setState(2435);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2432);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2433);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColId_or_SconstContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public ColId_or_SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId_or_Sconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColId_or_Sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColId_or_SconstContext colId_or_Sconst() throws RecognitionException {
		ColId_or_SconstContext _localctx = new ColId_or_SconstContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_colId_or_Sconst);
		try {
			setState(2439);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2437);
				colId();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2438);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_variableResetStmt);
		try {
			setState(2455);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2441);
				match(RESET);
				setState(2442);
				var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2443);
				match(RESET);
				setState(2444);
				match(TIME);
				setState(2445);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2446);
				match(RESET);
				setState(2447);
				match(TRANSACTION);
				setState(2448);
				match(ISOLATION);
				setState(2449);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2450);
				match(RESET);
				setState(2451);
				match(SESSION);
				setState(2452);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2453);
				match(RESET);
				setState(2454);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_setResetClause);
		try {
			setState(2460);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2457);
				match(SET);
				setState(2458);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2459);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_functionSetResetClause);
		try {
			setState(2465);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2462);
				match(SET);
				setState(2463);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2464);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableShowStmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PlPgSqlParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public VariableShowStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableShowStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVariableShowStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableShowStmtContext variableShowStmt() throws RecognitionException {
		VariableShowStmtContext _localctx = new VariableShowStmtContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_variableShowStmt);
		try {
			setState(2481);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2467);
				match(SHOW);
				setState(2468);
				var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2469);
				match(SHOW);
				setState(2470);
				match(TIME);
				setState(2471);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2472);
				match(SHOW);
				setState(2473);
				match(TRANSACTION);
				setState(2474);
				match(ISOLATION);
				setState(2475);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2476);
				match(SHOW);
				setState(2477);
				match(SESSION);
				setState(2478);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2479);
				match(SHOW);
				setState(2480);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlPgSqlParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintsSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintsSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetStmtContext constraintsSetStmt() throws RecognitionException {
		ConstraintsSetStmtContext _localctx = new ConstraintsSetStmtContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_constraintsSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			match(SET);
			setState(2484);
			match(CONSTRAINTS);
			setState(2485);
			constraints_set_list();
			setState(2486);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_constraints_set_list);
		try {
			setState(2490);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2488);
				qualified_name_list(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2489);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckPointStmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PlPgSqlParser.CHECKPOINT, 0); }
		public CheckPointStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkPointStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCheckPointStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckPointStmtContext checkPointStmt() throws RecognitionException {
		CheckPointStmtContext _localctx = new CheckPointStmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_checkPointStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2494);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardStmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PlPgSqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PlPgSqlParser.PLANS, 0); }
		public DiscardStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDiscardStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardStmtContext discardStmt() throws RecognitionException {
		DiscardStmtContext _localctx = new DiscardStmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_discardStmt);
		try {
			setState(2504);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2496);
				match(DISCARD);
				setState(2497);
				match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2498);
				match(DISCARD);
				setState(2499);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2500);
				match(DISCARD);
				setState(2501);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2502);
				match(DISCARD);
				setState(2503);
				match(PLANS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public AlterTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStmtContext alterTableStmt() throws RecognitionException {
		AlterTableStmtContext _localctx = new AlterTableStmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterTableStmt);
		try {
			setState(2554);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2506);
				match(ALTER);
				setState(2507);
				match(TABLE);
				setState(2508);
				relation_expr();
				setState(2509);
				alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2511);
				match(ALTER);
				setState(2512);
				match(TABLE);
				setState(2513);
				match(IF_P);
				setState(2514);
				match(EXISTS);
				setState(2515);
				relation_expr();
				setState(2516);
				alter_table_cmds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2518);
				match(ALTER);
				setState(2519);
				match(INDEX);
				setState(2520);
				qualified_name();
				setState(2521);
				alter_table_cmds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2523);
				match(ALTER);
				setState(2524);
				match(INDEX);
				setState(2525);
				match(IF_P);
				setState(2526);
				match(EXISTS);
				setState(2527);
				qualified_name();
				setState(2528);
				alter_table_cmds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2530);
				match(ALTER);
				setState(2531);
				match(SEQUENCE);
				setState(2532);
				qualified_name();
				setState(2533);
				alter_table_cmds(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2535);
				match(ALTER);
				setState(2536);
				match(SEQUENCE);
				setState(2537);
				match(IF_P);
				setState(2538);
				match(EXISTS);
				setState(2539);
				qualified_name();
				setState(2540);
				alter_table_cmds(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2542);
				match(ALTER);
				setState(2543);
				match(VIEW);
				setState(2544);
				qualified_name();
				setState(2545);
				alter_table_cmds(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2547);
				match(ALTER);
				setState(2548);
				match(VIEW);
				setState(2549);
				match(IF_P);
				setState(2550);
				match(EXISTS);
				setState(2551);
				qualified_name();
				setState(2552);
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public Alter_table_cmdContext alter_table_cmd() {
			return getRuleContext(Alter_table_cmdContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 264;
		enterRecursionRule(_localctx, 264, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2557);
			alter_table_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2564);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					setState(2559);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2560);
					match(T__4);
					setState(2561);
					alter_table_cmd();
					}
					} 
				}
				setState(2566);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(PlPgSqlParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PlPgSqlParser.VALIDATE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlPgSqlParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode ENABLE_P() { return getToken(PlPgSqlParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PlPgSqlParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PlPgSqlParser.REPLICA, 0); }
		public TerminalNode DISABLE_P() { return getToken(PlPgSqlParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_alter_table_cmd);
		try {
			setState(2732);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2567);
				match(ALTER);
				setState(2568);
				opt_column();
				setState(2569);
				colId();
				setState(2570);
				opt_set_data();
				setState(2571);
				match(TYPE_P);
				setState(2572);
				typename();
				setState(2573);
				opt_collate_clause();
				setState(2574);
				alter_using();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2576);
				match(ALTER);
				setState(2577);
				opt_column();
				setState(2578);
				colId();
				setState(2579);
				alter_column_default();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2581);
				match(ALTER);
				setState(2582);
				opt_column();
				setState(2583);
				colId();
				setState(2584);
				match(SET);
				setState(2585);
				match(STATISTICS);
				setState(2586);
				signedIconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2588);
				match(ALTER);
				setState(2589);
				opt_column();
				setState(2590);
				colId();
				setState(2591);
				match(SET);
				setState(2592);
				reloptions();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2594);
				match(ALTER);
				setState(2595);
				opt_column();
				setState(2596);
				colId();
				setState(2597);
				match(RESET);
				setState(2598);
				reloptions();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2600);
				match(ALTER);
				setState(2601);
				opt_column();
				setState(2602);
				colId();
				setState(2603);
				match(SET);
				setState(2604);
				match(STORAGE);
				setState(2605);
				colId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2607);
				match(DROP);
				setState(2608);
				opt_column();
				setState(2609);
				match(IF_P);
				setState(2610);
				match(EXISTS);
				setState(2611);
				colId();
				setState(2612);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2614);
				match(DROP);
				setState(2615);
				opt_column();
				setState(2616);
				colId();
				setState(2617);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2619);
				match(ALTER);
				setState(2620);
				opt_column();
				setState(2621);
				colId();
				setState(2622);
				alter_generic_options();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2624);
				match(ALTER);
				setState(2625);
				opt_column();
				setState(2626);
				colId();
				setState(2627);
				match(DROP);
				setState(2628);
				match(NOT);
				setState(2629);
				match(NULL_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2631);
				match(ALTER);
				setState(2632);
				opt_column();
				setState(2633);
				colId();
				setState(2634);
				match(SET);
				setState(2635);
				match(NOT);
				setState(2636);
				match(NULL_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2638);
				match(DROP);
				setState(2639);
				match(CONSTRAINT);
				setState(2640);
				match(IF_P);
				setState(2641);
				match(EXISTS);
				setState(2642);
				name();
				setState(2643);
				opt_drop_behavior();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2645);
				match(DROP);
				setState(2646);
				match(CONSTRAINT);
				setState(2647);
				name();
				setState(2648);
				opt_drop_behavior();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2650);
				match(ADD_P);
				setState(2651);
				columnDef();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2652);
				match(ADD_P);
				setState(2653);
				match(COLUMN);
				setState(2654);
				columnDef();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2655);
				match(ADD_P);
				setState(2656);
				tableConstraint();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2657);
				match(VALIDATE);
				setState(2658);
				match(CONSTRAINT);
				setState(2659);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2660);
				match(CLUSTER);
				setState(2661);
				match(ON);
				setState(2662);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2663);
				match(ENABLE_P);
				setState(2664);
				match(TRIGGER);
				setState(2665);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2666);
				match(ENABLE_P);
				setState(2667);
				match(ALWAYS);
				setState(2668);
				match(TRIGGER);
				setState(2669);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2670);
				match(ENABLE_P);
				setState(2671);
				match(REPLICA);
				setState(2672);
				match(TRIGGER);
				setState(2673);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2674);
				match(DISABLE_P);
				setState(2675);
				match(TRIGGER);
				setState(2676);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2677);
				match(ENABLE_P);
				setState(2678);
				match(RULE);
				setState(2679);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2680);
				match(ENABLE_P);
				setState(2681);
				match(ALWAYS);
				setState(2682);
				match(RULE);
				setState(2683);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2684);
				match(ENABLE_P);
				setState(2685);
				match(REPLICA);
				setState(2686);
				match(RULE);
				setState(2687);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2688);
				match(DISABLE_P);
				setState(2689);
				match(RULE);
				setState(2690);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2691);
				match(INHERIT);
				setState(2692);
				qualified_name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2693);
				match(NO);
				setState(2694);
				match(INHERIT);
				setState(2695);
				qualified_name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2696);
				match(OF);
				setState(2697);
				any_name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2698);
				match(OWNER);
				setState(2699);
				match(TO);
				setState(2700);
				roleId();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2701);
				match(SET);
				setState(2702);
				match(TABLESPACE);
				setState(2703);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2704);
				match(SET);
				setState(2705);
				reloptions();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2706);
				match(RESET);
				setState(2707);
				reloptions();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2708);
				alter_generic_options();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2709);
				match(SET);
				setState(2710);
				match(WITH);
				setState(2711);
				match(OIDS);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2712);
				match(SET);
				setState(2713);
				match(WITHOUT);
				setState(2714);
				match(OIDS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2715);
				match(SET);
				setState(2716);
				match(WITHOUT);
				setState(2717);
				match(CLUSTER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2718);
				match(ENABLE_P);
				setState(2719);
				match(TRIGGER);
				setState(2720);
				match(ALL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2721);
				match(ENABLE_P);
				setState(2722);
				match(TRIGGER);
				setState(2723);
				match(USER);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2724);
				match(DISABLE_P);
				setState(2725);
				match(TRIGGER);
				setState(2726);
				match(ALL);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2727);
				match(DISABLE_P);
				setState(2728);
				match(TRIGGER);
				setState(2729);
				match(USER);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2730);
				match(NOT);
				setState(2731);
				match(OF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_alter_column_default);
		try {
			setState(2739);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2734);
				match(SET);
				setState(2735);
				match(DEFAULT);
				setState(2736);
				a_expr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2737);
				match(DROP);
				setState(2738);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PlPgSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_opt_drop_behavior);
		try {
			setState(2744);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2741);
				match(CASCADE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2742);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_opt_collate_clause);
		try {
			setState(2749);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2746);
				match(COLLATE);
				setState(2747);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_alter_using);
		try {
			setState(2754);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2751);
				match(USING);
				setState(2752);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			match(T__2);
			setState(2757);
			reloption_list(0);
			setState(2758);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_opt_reloptions);
		try {
			setState(2763);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2760);
				match(WITH);
				setState(2761);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public Reloption_elemContext reloption_elem() {
			return getRuleContext(Reloption_elemContext.class,0);
		}
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 280;
		enterRecursionRule(_localctx, 280, RULE_reloption_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2766);
			reloption_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2773);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					setState(2768);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2769);
					match(T__4);
					setState(2770);
					reloption_elem();
					}
					} 
				}
				setState(2775);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_reloption_elem);
		try {
			setState(2791);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2776);
				colLabel();
				setState(2777);
				match(T__9);
				setState(2778);
				colLabel();
				setState(2779);
				match(T__6);
				setState(2780);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2782);
				colLabel();
				setState(2783);
				match(T__9);
				setState(2784);
				colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2786);
				colLabel();
				setState(2787);
				match(T__6);
				setState(2788);
				def_arg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2790);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCompositeTypeStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AlterCompositeTypeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCompositeTypeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterCompositeTypeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCompositeTypeStmtContext alterCompositeTypeStmt() throws RecognitionException {
		AlterCompositeTypeStmtContext _localctx = new AlterCompositeTypeStmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_alterCompositeTypeStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2793);
			match(ALTER);
			setState(2794);
			match(TYPE_P);
			setState(2795);
			any_name();
			setState(2796);
			alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public Alter_type_cmdContext alter_type_cmd() {
			return getRuleContext(Alter_type_cmdContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 286;
		enterRecursionRule(_localctx, 286, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2799);
			alter_type_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(2806);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					setState(2801);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2802);
					match(T__4);
					setState(2803);
					alter_type_cmd();
					}
					} 
				}
				setState(2808);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlPgSqlParser.ATTRIBUTE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_alter_type_cmd);
		try {
			setState(2835);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2809);
				match(ALTER);
				setState(2810);
				match(ATTRIBUTE);
				setState(2811);
				colId();
				setState(2812);
				opt_set_data();
				setState(2813);
				match(TYPE_P);
				setState(2814);
				typename();
				setState(2815);
				opt_collate_clause();
				setState(2816);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2818);
				match(ADD_P);
				setState(2819);
				match(ATTRIBUTE);
				setState(2820);
				tableFuncElement();
				setState(2821);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2823);
				match(DROP);
				setState(2824);
				match(ATTRIBUTE);
				setState(2825);
				match(IF_P);
				setState(2826);
				match(EXISTS);
				setState(2827);
				colId();
				setState(2828);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2830);
				match(DROP);
				setState(2831);
				match(ATTRIBUTE);
				setState(2832);
				colId();
				setState(2833);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClosePortalStmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlPgSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public ClosePortalStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closePortalStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitClosePortalStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClosePortalStmtContext closePortalStmt() throws RecognitionException {
		ClosePortalStmtContext _localctx = new ClosePortalStmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_closePortalStmt);
		try {
			setState(2841);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2837);
				match(CLOSE);
				setState(2838);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2839);
				match(CLOSE);
				setState(2840);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyStmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PlPgSqlParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_oidsContext opt_oids() {
			return getRuleContext(Opt_oidsContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public CopyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyStmtContext copyStmt() throws RecognitionException {
		CopyStmtContext _localctx = new CopyStmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_copyStmt);
		try {
			setState(2861);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2843);
				match(COPY);
				setState(2844);
				opt_binary();
				setState(2845);
				qualified_name();
				setState(2846);
				opt_column_list();
				setState(2847);
				opt_oids();
				setState(2848);
				copy_from();
				setState(2849);
				copy_file_name();
				setState(2850);
				copy_delimiter();
				setState(2851);
				opt_with();
				setState(2852);
				copy_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2854);
				match(COPY);
				setState(2855);
				select_with_parens(0);
				setState(2856);
				match(TO);
				setState(2857);
				copy_file_name();
				setState(2858);
				opt_with();
				setState(2859);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PlPgSqlParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PlPgSqlParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_copy_file_name);
		try {
			setState(2868);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(2865);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2866);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2867);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_copy_options);
		try {
			setState(2875);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2870);
				match(T__2);
				setState(2871);
				copy_generic_opt_list(0);
				setState(2872);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2874);
				copy_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_opt_itemContext copy_opt_item() {
			return getRuleContext(Copy_opt_itemContext.class,0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 300;
		enterRecursionRule(_localctx, 300, RULE_copy_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2882);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					setState(2878);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2879);
					copy_opt_item();
					}
					} 
				}
				setState(2884);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PlPgSqlParser.FORCE, 0); }
		public TerminalNode QUOTE() { return getToken(PlPgSqlParser.QUOTE, 0); }
		public TerminalNode DELIMITER() { return getToken(PlPgSqlParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PlPgSqlParser.ESCAPE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PlPgSqlParser.ENCODING, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode CSV() { return getToken(PlPgSqlParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PlPgSqlParser.HEADER_P, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_copy_opt_item);
		try {
			setState(2917);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2885);
				match(FORCE);
				setState(2886);
				match(QUOTE);
				setState(2887);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2888);
				match(DELIMITER);
				setState(2889);
				opt_as();
				setState(2890);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2892);
				match(NULL_P);
				setState(2893);
				opt_as();
				setState(2894);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2896);
				match(QUOTE);
				setState(2897);
				opt_as();
				setState(2898);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2900);
				match(ESCAPE);
				setState(2901);
				opt_as();
				setState(2902);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2904);
				match(FORCE);
				setState(2905);
				match(QUOTE);
				setState(2906);
				columnList(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2907);
				match(FORCE);
				setState(2908);
				match(NOT);
				setState(2909);
				match(NULL_P);
				setState(2910);
				columnList(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2911);
				match(ENCODING);
				setState(2912);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2913);
				match(BINARY);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2914);
				match(OIDS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2915);
				match(CSV);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2916);
				match(HEADER_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_opt_binary);
		try {
			setState(2921);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2919);
				match(BINARY);
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_oidsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public Opt_oidsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_oids; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_oids(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_oidsContext opt_oids() throws RecognitionException {
		Opt_oidsContext _localctx = new Opt_oidsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_opt_oids);
		try {
			setState(2926);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2923);
				match(WITH);
				setState(2924);
				match(OIDS);
				}
				break;
			case FROM:
			case TO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(PlPgSqlParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_copy_delimiter);
		try {
			setState(2933);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2928);
				opt_using();
				setState(2929);
				match(DELIMITERS);
				setState(2930);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_opt_using);
		try {
			setState(2937);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2935);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return getRuleContext(Copy_generic_opt_elemContext.class,0);
		}
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 312;
		enterRecursionRule(_localctx, 312, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2940);
			copy_generic_opt_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2947);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					setState(2942);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2943);
					match(T__4);
					setState(2944);
					copy_generic_opt_elem();
					}
					} 
				}
				setState(2949);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2950);
			colLabel();
			setState(2951);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_copy_generic_opt_arg);
		try {
			setState(2961);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2953);
				match(T__2);
				setState(2954);
				copy_generic_opt_arg_list(0);
				setState(2955);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2957);
				match(T__10);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2958);
				opt_boolean_or_string();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2959);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 318;
		enterRecursionRule(_localctx, 318, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2964);
			copy_generic_opt_arg_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(2971);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,115,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					setState(2966);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2967);
					match(T__4);
					setState(2968);
					copy_generic_opt_arg_list_item();
					}
					} 
				}
				setState(2973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,115,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2974);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptTableElementListContext optTableElementList() {
			return getRuleContext(OptTableElementListContext.class,0);
		}
		public OptInheritContext optInherit() {
			return getRuleContext(OptInheritContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OptTypedTableElementListContext optTypedTableElementList() {
			return getRuleContext(OptTypedTableElementListContext.class,0);
		}
		public CreateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStmtContext createStmt() throws RecognitionException {
		CreateStmtContext _localctx = new CreateStmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_createStmt);
		try {
			setState(3028);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2976);
				match(CREATE);
				setState(2977);
				optTemp();
				setState(2978);
				match(TABLE);
				setState(2979);
				qualified_name();
				setState(2980);
				match(T__2);
				setState(2981);
				optTableElementList();
				setState(2982);
				match(T__3);
				setState(2983);
				optInherit();
				setState(2984);
				optWith();
				setState(2985);
				onCommitOption();
				setState(2986);
				optTableSpace();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2988);
				match(CREATE);
				setState(2989);
				optTemp();
				setState(2990);
				match(TABLE);
				setState(2991);
				match(IF_P);
				setState(2992);
				match(NOT);
				setState(2993);
				match(EXISTS);
				setState(2994);
				qualified_name();
				setState(2995);
				match(T__2);
				setState(2996);
				optTableElementList();
				setState(2997);
				match(T__3);
				setState(2998);
				optInherit();
				setState(2999);
				optWith();
				setState(3000);
				onCommitOption();
				setState(3001);
				optTableSpace();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3003);
				match(CREATE);
				setState(3004);
				optTemp();
				setState(3005);
				match(TABLE);
				setState(3006);
				qualified_name();
				setState(3007);
				match(OF);
				setState(3008);
				any_name();
				setState(3009);
				optTypedTableElementList();
				setState(3010);
				optWith();
				setState(3011);
				onCommitOption();
				setState(3012);
				optTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3014);
				match(CREATE);
				setState(3015);
				optTemp();
				setState(3016);
				match(TABLE);
				setState(3017);
				match(IF_P);
				setState(3018);
				match(NOT);
				setState(3019);
				match(EXISTS);
				setState(3020);
				qualified_name();
				setState(3021);
				match(OF);
				setState(3022);
				any_name();
				setState(3023);
				optTypedTableElementList();
				setState(3024);
				optWith();
				setState(3025);
				onCommitOption();
				setState(3026);
				optTableSpace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PlPgSqlParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PlPgSqlParser.UNLOGGED, 0); }
		public OptTempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTemp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempContext optTemp() throws RecognitionException {
		OptTempContext _localctx = new OptTempContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_optTemp);
		try {
			setState(3042);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3030);
				match(TEMPORARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3031);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3032);
				match(LOCAL);
				setState(3033);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3034);
				match(LOCAL);
				setState(3035);
				match(TEMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3036);
				match(GLOBAL);
				setState(3037);
				match(TEMPORARY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3038);
				match(GLOBAL);
				setState(3039);
				match(TEMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3040);
				match(UNLOGGED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public OptTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableElementListContext optTableElementList() throws RecognitionException {
		OptTableElementListContext _localctx = new OptTableElementListContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_optTableElementList);
		try {
			setState(3046);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3044);
				tableElementList(0);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTypedTableElementListContext extends ParserRuleContext {
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public OptTypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTypedTableElementListContext optTypedTableElementList() throws RecognitionException {
		OptTypedTableElementListContext _localctx = new OptTypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_optTypedTableElementList);
		try {
			setState(3053);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3048);
				match(T__2);
				setState(3049);
				typedTableElementList(0);
				setState(3050);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public TableElementContext tableElement() {
			return getRuleContext(TableElementContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		return tableElementList(0);
	}

	private TableElementListContext tableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableElementListContext _localctx = new TableElementListContext(_ctx, _parentState);
		TableElementListContext _prevctx = _localctx;
		int _startState = 330;
		enterRecursionRule(_localctx, 330, RULE_tableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3056);
			tableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3063);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableElementList);
					setState(3058);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3059);
					match(T__4);
					setState(3060);
					tableElement();
					}
					} 
				}
				setState(3065);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypedTableElementListContext extends ParserRuleContext {
		public TypedTableElementContext typedTableElement() {
			return getRuleContext(TypedTableElementContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		return typedTableElementList(0);
	}

	private TypedTableElementListContext typedTableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, _parentState);
		TypedTableElementListContext _prevctx = _localctx;
		int _startState = 332;
		enterRecursionRule(_localctx, 332, RULE_typedTableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3067);
			typedTableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3074);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedTableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typedTableElementList);
					setState(3069);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3070);
					match(T__4);
					setState(3071);
					typedTableElement();
					}
					} 
				}
				setState(3076);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_tableElement);
		try {
			setState(3080);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3077);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3078);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3079);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_typedTableElement);
		try {
			setState(3084);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3082);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3083);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			colId();
			setState(3087);
			typename();
			setState(3088);
			create_generic_options();
			setState(3089);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_columnOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3091);
			colId();
			setState(3092);
			match(WITH);
			setState(3093);
			match(OPTIONS);
			setState(3094);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColConstraintContext colConstraint() {
			return getRuleContext(ColConstraintContext.class,0);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		return colQualList(0);
	}

	private ColQualListContext colQualList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColQualListContext _localctx = new ColQualListContext(_ctx, _parentState);
		ColQualListContext _prevctx = _localctx;
		int _startState = 342;
		enterRecursionRule(_localctx, 342, RULE_colQualList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3101);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColQualListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_colQualList);
					setState(3097);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3098);
					colConstraint();
					}
					} 
				}
				setState(3103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_colConstraint);
		try {
			setState(3112);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3104);
				match(CONSTRAINT);
				setState(3105);
				name();
				setState(3106);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3108);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3109);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3110);
				match(COLLATE);
				setState(3111);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlPgSqlParser.KEY, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_colConstraintElem);
		try {
			setState(3140);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3114);
				match(CHECK);
				setState(3115);
				match(T__2);
				setState(3116);
				a_expr(0);
				setState(3117);
				match(T__3);
				setState(3118);
				opt_no_inherit();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(3120);
				match(REFERENCES);
				setState(3121);
				qualified_name();
				setState(3122);
				opt_column_list();
				setState(3123);
				key_match();
				setState(3124);
				key_actions();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3126);
				match(UNIQUE);
				setState(3127);
				opt_definition();
				setState(3128);
				optConsTableSpace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(3130);
				match(PRIMARY);
				setState(3131);
				match(KEY);
				setState(3132);
				opt_definition();
				setState(3133);
				optConsTableSpace();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3135);
				match(DEFAULT);
				setState(3136);
				b_expr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3137);
				match(NOT);
				setState(3138);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(3139);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_constraintAttr);
		try {
			setState(3149);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3142);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3143);
				match(NOT);
				setState(3144);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3145);
				match(INITIALLY);
				setState(3146);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3147);
				match(INITIALLY);
				setState(3148);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3151);
			match(LIKE);
			setState(3152);
			qualified_name();
			setState(3153);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(PlPgSqlParser.INCLUDING, 0); }
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode EXCLUDING() { return getToken(PlPgSqlParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 352;
		enterRecursionRule(_localctx, 352, RULE_tableLikeOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3164);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3162);
					switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
					case 1:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(3156);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3157);
						match(INCLUDING);
						setState(3158);
						tableLikeOption();
						}
						break;
					case 2:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(3159);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3160);
						match(EXCLUDING);
						setState(3161);
						tableLikeOption();
						}
						break;
					}
					} 
				}
				setState(3166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULTS() { return getToken(PlPgSqlParser.DEFAULTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlPgSqlParser.CONSTRAINTS, 0); }
		public TerminalNode INDEXES() { return getToken(PlPgSqlParser.INDEXES, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TerminalNode COMMENTS() { return getToken(PlPgSqlParser.COMMENTS, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			_la = _input.LA(1);
			if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (ALL - 89)) | (1L << (COMMENTS - 89)) | (1L << (CONSTRAINTS - 89)))) != 0) || _la==DEFAULTS || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintElemContext constraintElem() {
			return getRuleContext(ConstraintElemContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_tableConstraint);
		try {
			setState(3174);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3169);
				match(CONSTRAINT);
				setState(3170);
				name();
				setState(3171);
				constraintElem();
				}
				break;
			case CHECK:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3173);
				constraintElem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintElemContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlPgSqlParser.KEY, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(PlPgSqlParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public ExistingIndexContext existingIndex() {
			return getRuleContext(ExistingIndexContext.class,0);
		}
		public ConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintElemContext constraintElem() throws RecognitionException {
		ConstraintElemContext _localctx = new ConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_constraintElem);
		try {
			setState(3230);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3176);
				match(FOREIGN);
				setState(3177);
				match(KEY);
				setState(3178);
				match(T__2);
				setState(3179);
				columnList(0);
				setState(3180);
				match(T__3);
				setState(3181);
				match(REFERENCES);
				setState(3182);
				qualified_name();
				setState(3183);
				opt_column_list();
				setState(3184);
				key_match();
				setState(3185);
				key_actions();
				setState(3186);
				constraintAttributeSpec(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3188);
				match(UNIQUE);
				setState(3189);
				match(T__2);
				setState(3190);
				columnList(0);
				setState(3191);
				match(T__3);
				setState(3192);
				opt_definition();
				setState(3193);
				optConsTableSpace();
				setState(3194);
				constraintAttributeSpec(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3196);
				match(PRIMARY);
				setState(3197);
				match(KEY);
				setState(3198);
				match(T__2);
				setState(3199);
				columnList(0);
				setState(3200);
				match(T__3);
				setState(3201);
				opt_definition();
				setState(3202);
				optConsTableSpace();
				setState(3203);
				constraintAttributeSpec(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3205);
				match(CHECK);
				setState(3206);
				match(T__2);
				setState(3207);
				a_expr(0);
				setState(3208);
				match(T__3);
				setState(3209);
				constraintAttributeSpec(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3211);
				match(EXCLUDE);
				setState(3212);
				access_method_clause();
				setState(3213);
				match(T__2);
				setState(3214);
				exclusionConstraintList(0);
				setState(3215);
				match(T__3);
				setState(3216);
				opt_definition();
				setState(3217);
				optConsTableSpace();
				setState(3218);
				exclusionWhereClause();
				setState(3219);
				constraintAttributeSpec(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3221);
				match(UNIQUE);
				setState(3222);
				existingIndex();
				setState(3223);
				constraintAttributeSpec(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3225);
				match(PRIMARY);
				setState(3226);
				match(KEY);
				setState(3227);
				existingIndex();
				setState(3228);
				constraintAttributeSpec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_opt_no_inherit);
		try {
			setState(3235);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3232);
				match(NO);
				setState(3233);
				match(INHERIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_opt_column_list);
		try {
			setState(3242);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3237);
				match(T__2);
				setState(3238);
				columnList(0);
				setState(3239);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public ColumnElemContext columnElem() {
			return getRuleContext(ColumnElemContext.class,0);
		}
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		return columnList(0);
	}

	private ColumnListContext columnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColumnListContext _localctx = new ColumnListContext(_ctx, _parentState);
		ColumnListContext _prevctx = _localctx;
		int _startState = 364;
		enterRecursionRule(_localctx, 364, RULE_columnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3245);
			columnElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3252);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_columnList);
					setState(3247);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3248);
					match(T__4);
					setState(3249);
					columnElem();
					}
					} 
				}
				setState(3254);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3255);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PlPgSqlParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PlPgSqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PlPgSqlParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_key_match);
		try {
			setState(3264);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3257);
				match(MATCH);
				setState(3258);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3259);
				match(MATCH);
				setState(3260);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3261);
				match(MATCH);
				setState(3262);
				match(SIMPLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public ExclusionConstraintElemContext exclusionConstraintElem() {
			return getRuleContext(ExclusionConstraintElemContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		return exclusionConstraintList(0);
	}

	private ExclusionConstraintListContext exclusionConstraintList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, _parentState);
		ExclusionConstraintListContext _prevctx = _localctx;
		int _startState = 370;
		enterRecursionRule(_localctx, 370, RULE_exclusionConstraintList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3267);
			exclusionConstraintElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3274);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionConstraintListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exclusionConstraintList);
					setState(3269);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3270);
					match(T__4);
					setState(3271);
					exclusionConstraintElem();
					}
					} 
				}
				setState(3276);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,136,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_exclusionConstraintElem);
		try {
			setState(3288);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3277);
				index_elem();
				setState(3278);
				match(WITH);
				setState(3279);
				match(OPERATOR);
				setState(3280);
				match(T__2);
				setState(3281);
				any_operator();
				setState(3282);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3284);
				index_elem();
				setState(3285);
				match(WITH);
				setState(3286);
				any_operator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_exclusionWhereClause);
		try {
			setState(3296);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3290);
				match(WHERE);
				setState(3291);
				match(T__2);
				setState(3292);
				a_expr(0);
				setState(3293);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_key_actions);
		try {
			setState(3307);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3298);
				key_update();
				setState(3299);
				key_delete();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3301);
				key_delete();
				setState(3302);
				key_update();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3304);
				key_update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3305);
				key_delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3309);
			match(ON);
			setState(3310);
			match(UPDATE);
			setState(3311);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			match(ON);
			setState(3314);
			match(DELETE_P);
			setState(3315);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PlPgSqlParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PlPgSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_key_action);
		try {
			setState(3325);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3317);
				match(NO);
				setState(3318);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3319);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3320);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3321);
				match(SET);
				setState(3322);
				match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3323);
				match(SET);
				setState(3324);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PlPgSqlParser.INHERITS, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public OptInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInherit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptInheritContext optInherit() throws RecognitionException {
		OptInheritContext _localctx = new OptInheritContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_optInherit);
		try {
			setState(3333);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				match(INHERITS);
				setState(3328);
				match(T__2);
				setState(3329);
				qualified_name_list(0);
				setState(3330);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public OptWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWith; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWithContext optWith() throws RecognitionException {
		OptWithContext _localctx = new OptWithContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_optWith);
		try {
			setState(3342);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3335);
				match(WITH);
				setState(3336);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3337);
				match(WITH);
				setState(3338);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3339);
				match(WITHOUT);
				setState(3340);
				match(OIDS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlPgSqlParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PlPgSqlParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_onCommitOption);
		try {
			setState(3356);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3344);
				match(ON);
				setState(3345);
				match(COMMIT);
				setState(3346);
				match(DROP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3347);
				match(ON);
				setState(3348);
				match(COMMIT);
				setState(3349);
				match(DELETE_P);
				setState(3350);
				match(ROWS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3351);
				match(ON);
				setState(3352);
				match(COMMIT);
				setState(3353);
				match(PRESERVE);
				setState(3354);
				match(ROWS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceContext optTableSpace() throws RecognitionException {
		OptTableSpaceContext _localctx = new OptTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_optTableSpace);
		try {
			setState(3361);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3358);
				match(TABLESPACE);
				setState(3359);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConsTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConsTableSpaceContext optConsTableSpace() throws RecognitionException {
		OptConsTableSpaceContext _localctx = new OptConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_optConsTableSpace);
		try {
			setState(3368);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3363);
				match(USING);
				setState(3364);
				match(INDEX);
				setState(3365);
				match(TABLESPACE);
				setState(3366);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public ExistingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExistingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingIndexContext existingIndex() throws RecognitionException {
		ExistingIndexContext _localctx = new ExistingIndexContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_existingIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3370);
			match(USING);
			setState(3371);
			match(INDEX);
			setState(3372);
			index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAsStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public CreateAsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAsStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateAsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAsStmtContext createAsStmt() throws RecognitionException {
		CreateAsStmtContext _localctx = new CreateAsStmtContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_createAsStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			match(CREATE);
			setState(3375);
			optTemp();
			setState(3376);
			match(TABLE);
			setState(3377);
			create_as_target();
			setState(3378);
			match(AS);
			setState(3379);
			selectStmt();
			setState(3380);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			qualified_name();
			setState(3383);
			opt_column_list();
			setState(3384);
			optWith();
			setState(3385);
			onCommitOption();
			setState(3386);
			optTableSpace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_opt_with_data);
		try {
			setState(3394);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3388);
				match(WITH);
				setState(3389);
				match(DATA_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3390);
				match(WITH);
				setState(3391);
				match(NO);
				setState(3392);
				match(DATA_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSeqStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptSeqOptListContext optSeqOptList() {
			return getRuleContext(OptSeqOptListContext.class,0);
		}
		public CreateSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSeqStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSeqStmtContext createSeqStmt() throws RecognitionException {
		CreateSeqStmtContext _localctx = new CreateSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_createSeqStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			match(CREATE);
			setState(3397);
			optTemp();
			setState(3398);
			match(SEQUENCE);
			setState(3399);
			qualified_name();
			setState(3400);
			optSeqOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSeqStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public AlterSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSeqStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSeqStmtContext alterSeqStmt() throws RecognitionException {
		AlterSeqStmtContext _localctx = new AlterSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alterSeqStmt);
		try {
			setState(3414);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3402);
				match(ALTER);
				setState(3403);
				match(SEQUENCE);
				setState(3404);
				qualified_name();
				setState(3405);
				seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3407);
				match(ALTER);
				setState(3408);
				match(SEQUENCE);
				setState(3409);
				match(IF_P);
				setState(3410);
				match(EXISTS);
				setState(3411);
				qualified_name();
				setState(3412);
				seqOptList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSeqOptListContext extends ParserRuleContext {
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public OptSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSeqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSeqOptListContext optSeqOptList() throws RecognitionException {
		OptSeqOptListContext _localctx = new OptSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_optSeqOptList);
		try {
			setState(3418);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3416);
				seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		return seqOptList(0);
	}

	private SeqOptListContext seqOptList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, _parentState);
		SeqOptListContext _prevctx = _localctx;
		int _startState = 408;
		enterRecursionRule(_localctx, 408, RULE_seqOptList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3421);
			seqOptElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3427);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqOptListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_seqOptList);
					setState(3423);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3424);
					seqOptElem();
					}
					} 
				}
				setState(3429);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlPgSqlParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode START() { return getToken(PlPgSqlParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PlPgSqlParser.RESTART, 0); }
		public TerminalNode CACHE() { return getToken(PlPgSqlParser.CACHE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlPgSqlParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlPgSqlParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PlPgSqlParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_seqOptElem);
		try {
			setState(3459);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3430);
				match(INCREMENT);
				setState(3431);
				opt_by();
				setState(3432);
				numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3434);
				match(START);
				setState(3435);
				opt_with();
				setState(3436);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3438);
				match(RESTART);
				setState(3439);
				opt_with();
				setState(3440);
				numericOnly();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3442);
				match(CACHE);
				setState(3443);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3444);
				match(MAXVALUE);
				setState(3445);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3446);
				match(MINVALUE);
				setState(3447);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3448);
				match(OWNED);
				setState(3449);
				match(BY);
				setState(3450);
				any_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3451);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3452);
				match(NO);
				setState(3453);
				match(CYCLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3454);
				match(NO);
				setState(3455);
				match(MAXVALUE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3456);
				match(NO);
				setState(3457);
				match(MINVALUE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3458);
				match(RESTART);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_opt_by);
		try {
			setState(3463);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3461);
				match(BY);
				}
				break;
			case T__11:
			case T__14:
			case FCONST:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_numericOnly);
		try {
			setState(3469);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3465);
				match(T__11);
				setState(3466);
				match(FCONST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3467);
				signedIconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3468);
				match(FCONST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnly_listContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public NumericOnly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumericOnly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnly_listContext numericOnly_list() throws RecognitionException {
		return numericOnly_list(0);
	}

	private NumericOnly_listContext numericOnly_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NumericOnly_listContext _localctx = new NumericOnly_listContext(_ctx, _parentState);
		NumericOnly_listContext _prevctx = _localctx;
		int _startState = 416;
		enterRecursionRule(_localctx, 416, RULE_numericOnly_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3472);
			numericOnly();
			}
			_ctx.stop = _input.LT(-1);
			setState(3479);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NumericOnly_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numericOnly_list);
					setState(3474);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3475);
					match(T__4);
					setState(3476);
					numericOnly();
					}
					} 
				}
				setState(3481);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CreatePLangStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PlPgSqlParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreatePLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPLangStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatePLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePLangStmtContext createPLangStmt() throws RecognitionException {
		CreatePLangStmtContext _localctx = new CreatePLangStmtContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_createPLangStmt);
		try {
			setState(3500);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3482);
				match(CREATE);
				setState(3483);
				opt_or_replace();
				setState(3484);
				opt_trusted();
				setState(3485);
				opt_procedural();
				setState(3486);
				match(LANGUAGE);
				setState(3487);
				colId_or_Sconst();
				setState(3488);
				match(HANDLER);
				setState(3489);
				handler_name();
				setState(3490);
				opt_inline_handler();
				setState(3491);
				opt_validator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3493);
				match(CREATE);
				setState(3494);
				opt_or_replace();
				setState(3495);
				opt_trusted();
				setState(3496);
				opt_procedural();
				setState(3497);
				match(LANGUAGE);
				setState(3498);
				colId_or_Sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PlPgSqlParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_opt_trusted);
		try {
			setState(3504);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3502);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_handler_name);
		try {
			setState(3510);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3506);
				name();
				setState(3507);
				attrs(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3509);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PlPgSqlParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_opt_inline_handler);
		try {
			setState(3515);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3512);
				match(INLINE_P);
				setState(3513);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PlPgSqlParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_validator_clause);
		try {
			setState(3521);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3517);
				match(VALIDATOR);
				setState(3518);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3519);
				match(NO);
				setState(3520);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_opt_validator);
		try {
			setState(3525);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3523);
				validator_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPLangStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropPLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPLangStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropPLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPLangStmtContext dropPLangStmt() throws RecognitionException {
		DropPLangStmtContext _localctx = new DropPLangStmtContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_dropPLangStmt);
		try {
			setState(3541);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3527);
				match(DROP);
				setState(3528);
				opt_procedural();
				setState(3529);
				match(LANGUAGE);
				setState(3530);
				colId_or_Sconst();
				setState(3531);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3533);
				match(DROP);
				setState(3534);
				opt_procedural();
				setState(3535);
				match(LANGUAGE);
				setState(3536);
				match(IF_P);
				setState(3537);
				match(EXISTS);
				setState(3538);
				colId_or_Sconst();
				setState(3539);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PlPgSqlParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_opt_procedural);
		try {
			setState(3545);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3543);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext optTableSpaceOwner() {
			return getRuleContext(OptTableSpaceOwnerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PlPgSqlParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CreateTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpaceStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpaceStmtContext createTableSpaceStmt() throws RecognitionException {
		CreateTableSpaceStmtContext _localctx = new CreateTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_createTableSpaceStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547);
			match(CREATE);
			setState(3548);
			match(TABLESPACE);
			setState(3549);
			name();
			setState(3550);
			optTableSpaceOwner();
			setState(3551);
			match(LOCATION);
			setState(3552);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceOwnerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpaceOwner; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableSpaceOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceOwnerContext optTableSpaceOwner() throws RecognitionException {
		OptTableSpaceOwnerContext _localctx = new OptTableSpaceOwnerContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_optTableSpaceOwner);
		try {
			setState(3557);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3554);
				match(OWNER);
				setState(3555);
				name();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpaceStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceStmtContext dropTableSpaceStmt() throws RecognitionException {
		DropTableSpaceStmtContext _localctx = new DropTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_dropTableSpaceStmt);
		try {
			setState(3567);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3559);
				match(DROP);
				setState(3560);
				match(TABLESPACE);
				setState(3561);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3562);
				match(DROP);
				setState(3563);
				match(TABLESPACE);
				setState(3564);
				match(IF_P);
				setState(3565);
				match(EXISTS);
				setState(3566);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public CreateExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionStmtContext createExtensionStmt() throws RecognitionException {
		CreateExtensionStmtContext _localctx = new CreateExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_createExtensionStmt);
		try {
			setState(3584);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				match(CREATE);
				setState(3570);
				match(EXTENSION);
				setState(3571);
				name();
				setState(3572);
				opt_with();
				setState(3573);
				create_extension_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3575);
				match(CREATE);
				setState(3576);
				match(EXTENSION);
				setState(3577);
				match(IF_P);
				setState(3578);
				match(NOT);
				setState(3579);
				match(EXISTS);
				setState(3580);
				name();
				setState(3581);
				opt_with();
				setState(3582);
				create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public Create_extension_opt_itemContext create_extension_opt_item() {
			return getRuleContext(Create_extension_opt_itemContext.class,0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 442;
		enterRecursionRule(_localctx, 442, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3591);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					setState(3587);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3588);
					create_extension_opt_item();
					}
					} 
				}
				setState(3593);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_create_extension_opt_item);
		try {
			setState(3600);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3594);
				match(SCHEMA);
				setState(3595);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3596);
				match(VERSION_P);
				setState(3597);
				colId_or_Sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3598);
				match(FROM);
				setState(3599);
				colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionStmtContext alterExtensionStmt() throws RecognitionException {
		AlterExtensionStmtContext _localctx = new AlterExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_alterExtensionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3602);
			match(ALTER);
			setState(3603);
			match(EXTENSION);
			setState(3604);
			name();
			setState(3605);
			match(UPDATE);
			setState(3606);
			alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return getRuleContext(Alter_extension_opt_itemContext.class,0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 448;
		enterRecursionRule(_localctx, 448, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3613);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					setState(3609);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3610);
					alter_extension_opt_item();
					}
					} 
				}
				setState(3615);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			match(TO);
			setState(3617);
			colId_or_Sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContentsStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public AlterExtensionContentsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionContentsStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterExtensionContentsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContentsStmtContext alterExtensionContentsStmt() throws RecognitionException {
		AlterExtensionContentsStmtContext _localctx = new AlterExtensionContentsStmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_alterExtensionContentsStmt);
		try {
			setState(3797);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3619);
				match(ALTER);
				setState(3620);
				match(EXTENSION);
				setState(3621);
				name();
				setState(3622);
				add_drop();
				setState(3623);
				match(CAST);
				setState(3624);
				match(T__2);
				setState(3625);
				typename();
				setState(3626);
				match(AS);
				setState(3627);
				typename();
				setState(3628);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3630);
				match(ALTER);
				setState(3631);
				match(EXTENSION);
				setState(3632);
				name();
				setState(3633);
				add_drop();
				setState(3634);
				match(AGGREGATE);
				setState(3635);
				func_name();
				setState(3636);
				aggr_args();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3638);
				match(ALTER);
				setState(3639);
				match(EXTENSION);
				setState(3640);
				name();
				setState(3641);
				add_drop();
				setState(3642);
				opt_procedural();
				setState(3643);
				match(LANGUAGE);
				setState(3644);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3646);
				match(ALTER);
				setState(3647);
				match(EXTENSION);
				setState(3648);
				name();
				setState(3649);
				add_drop();
				setState(3650);
				match(OPERATOR);
				setState(3651);
				any_operator();
				setState(3652);
				oper_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3654);
				match(ALTER);
				setState(3655);
				match(EXTENSION);
				setState(3656);
				name();
				setState(3657);
				add_drop();
				setState(3658);
				match(OPERATOR);
				setState(3659);
				match(CLASS);
				setState(3660);
				any_name();
				setState(3661);
				match(USING);
				setState(3662);
				access_method();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3664);
				match(ALTER);
				setState(3665);
				match(EXTENSION);
				setState(3666);
				name();
				setState(3667);
				add_drop();
				setState(3668);
				match(OPERATOR);
				setState(3669);
				match(FAMILY);
				setState(3670);
				any_name();
				setState(3671);
				match(USING);
				setState(3672);
				access_method();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3674);
				match(ALTER);
				setState(3675);
				match(EXTENSION);
				setState(3676);
				name();
				setState(3677);
				add_drop();
				setState(3678);
				match(COLLATION);
				setState(3679);
				any_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3681);
				match(ALTER);
				setState(3682);
				match(EXTENSION);
				setState(3683);
				name();
				setState(3684);
				add_drop();
				setState(3685);
				match(CONVERSION_P);
				setState(3686);
				any_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3688);
				match(ALTER);
				setState(3689);
				match(EXTENSION);
				setState(3690);
				name();
				setState(3691);
				add_drop();
				setState(3692);
				match(DOMAIN_P);
				setState(3693);
				any_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3695);
				match(ALTER);
				setState(3696);
				match(EXTENSION);
				setState(3697);
				name();
				setState(3698);
				add_drop();
				setState(3699);
				match(FUNCTION);
				setState(3700);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3702);
				match(ALTER);
				setState(3703);
				match(EXTENSION);
				setState(3704);
				name();
				setState(3705);
				add_drop();
				setState(3706);
				match(SCHEMA);
				setState(3707);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3709);
				match(ALTER);
				setState(3710);
				match(EXTENSION);
				setState(3711);
				name();
				setState(3712);
				add_drop();
				setState(3713);
				match(TABLE);
				setState(3714);
				any_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3716);
				match(ALTER);
				setState(3717);
				match(EXTENSION);
				setState(3718);
				name();
				setState(3719);
				add_drop();
				setState(3720);
				match(TEXT_P);
				setState(3721);
				match(SEARCH);
				setState(3722);
				match(PARSER);
				setState(3723);
				any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3725);
				match(ALTER);
				setState(3726);
				match(EXTENSION);
				setState(3727);
				name();
				setState(3728);
				add_drop();
				setState(3729);
				match(TEXT_P);
				setState(3730);
				match(SEARCH);
				setState(3731);
				match(DICTIONARY);
				setState(3732);
				any_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3734);
				match(ALTER);
				setState(3735);
				match(EXTENSION);
				setState(3736);
				name();
				setState(3737);
				add_drop();
				setState(3738);
				match(TEXT_P);
				setState(3739);
				match(SEARCH);
				setState(3740);
				match(TEMPLATE);
				setState(3741);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3743);
				match(ALTER);
				setState(3744);
				match(EXTENSION);
				setState(3745);
				name();
				setState(3746);
				add_drop();
				setState(3747);
				match(TEXT_P);
				setState(3748);
				match(SEARCH);
				setState(3749);
				match(CONFIGURATION);
				setState(3750);
				any_name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3752);
				match(ALTER);
				setState(3753);
				match(EXTENSION);
				setState(3754);
				name();
				setState(3755);
				add_drop();
				setState(3756);
				match(SEQUENCE);
				setState(3757);
				any_name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3759);
				match(ALTER);
				setState(3760);
				match(EXTENSION);
				setState(3761);
				name();
				setState(3762);
				add_drop();
				setState(3763);
				match(VIEW);
				setState(3764);
				any_name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3766);
				match(ALTER);
				setState(3767);
				match(EXTENSION);
				setState(3768);
				name();
				setState(3769);
				add_drop();
				setState(3770);
				match(FOREIGN);
				setState(3771);
				match(TABLE);
				setState(3772);
				any_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3774);
				match(ALTER);
				setState(3775);
				match(EXTENSION);
				setState(3776);
				name();
				setState(3777);
				add_drop();
				setState(3778);
				match(FOREIGN);
				setState(3779);
				match(DATA_P);
				setState(3780);
				match(WRAPPER);
				setState(3781);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3783);
				match(ALTER);
				setState(3784);
				match(EXTENSION);
				setState(3785);
				name();
				setState(3786);
				add_drop();
				setState(3787);
				match(SERVER);
				setState(3788);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3790);
				match(ALTER);
				setState(3791);
				match(EXTENSION);
				setState(3792);
				name();
				setState(3793);
				add_drop();
				setState(3794);
				match(TYPE_P);
				setState(3795);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFdwStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFdwStmtContext createFdwStmt() throws RecognitionException {
		CreateFdwStmtContext _localctx = new CreateFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_createFdwStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(CREATE);
			setState(3800);
			match(FOREIGN);
			setState(3801);
			match(DATA_P);
			setState(3802);
			match(WRAPPER);
			setState(3803);
			name();
			setState(3804);
			opt_fdw_options();
			setState(3805);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PlPgSqlParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode VALIDATOR() { return getToken(PlPgSqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_fdw_option);
		try {
			setState(3815);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3807);
				match(HANDLER);
				setState(3808);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3809);
				match(VALIDATOR);
				setState(3810);
				handler_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3811);
				match(NO);
				setState(3812);
				match(HANDLER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3813);
				match(NO);
				setState(3814);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionContext fdw_option() {
			return getRuleContext(Fdw_optionContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 458;
		enterRecursionRule(_localctx, 458, RULE_fdw_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3818);
			fdw_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(3824);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					setState(3820);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3821);
					fdw_option();
					}
					} 
				}
				setState(3826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_opt_fdw_options);
		try {
			setState(3829);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3827);
				fdw_options(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFdwStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFdwStmtContext dropFdwStmt() throws RecognitionException {
		DropFdwStmtContext _localctx = new DropFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_dropFdwStmt);
		try {
			setState(3847);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3831);
				match(DROP);
				setState(3832);
				match(FOREIGN);
				setState(3833);
				match(DATA_P);
				setState(3834);
				match(WRAPPER);
				setState(3835);
				name();
				setState(3836);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3838);
				match(DROP);
				setState(3839);
				match(FOREIGN);
				setState(3840);
				match(DATA_P);
				setState(3841);
				match(WRAPPER);
				setState(3842);
				match(IF_P);
				setState(3843);
				match(EXISTS);
				setState(3844);
				name();
				setState(3845);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFdwStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFdwStmtContext alterFdwStmt() throws RecognitionException {
		AlterFdwStmtContext _localctx = new AlterFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_alterFdwStmt);
		try {
			setState(3864);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3849);
				match(ALTER);
				setState(3850);
				match(FOREIGN);
				setState(3851);
				match(DATA_P);
				setState(3852);
				match(WRAPPER);
				setState(3853);
				name();
				setState(3854);
				opt_fdw_options();
				setState(3855);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3857);
				match(ALTER);
				setState(3858);
				match(FOREIGN);
				setState(3859);
				match(DATA_P);
				setState(3860);
				match(WRAPPER);
				setState(3861);
				name();
				setState(3862);
				fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_create_generic_options);
		try {
			setState(3872);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3866);
				match(OPTIONS);
				setState(3867);
				match(T__2);
				setState(3868);
				generic_option_list(0);
				setState(3869);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 468;
		enterRecursionRule(_localctx, 468, RULE_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3875);
			generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3882);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					setState(3877);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3878);
					match(T__4);
					setState(3879);
					generic_option_elem();
					}
					} 
				}
				setState(3884);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(OPTIONS);
			setState(3886);
			match(T__2);
			setState(3887);
			alter_generic_option_list(0);
			setState(3888);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public Alter_generic_option_elemContext alter_generic_option_elem() {
			return getRuleContext(Alter_generic_option_elemContext.class,0);
		}
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 472;
		enterRecursionRule(_localctx, 472, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3891);
			alter_generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3898);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					setState(3893);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3894);
					match(T__4);
					setState(3895);
					alter_generic_option_elem();
					}
					} 
				}
				setState(3900);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_alter_generic_option_elem);
		try {
			setState(3908);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3901);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3902);
				match(SET);
				setState(3903);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3904);
				match(ADD_P);
				setState(3905);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3906);
				match(DROP);
				setState(3907);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			generic_option_name();
			setState(3911);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignServerStmtContext createForeignServerStmt() throws RecognitionException {
		CreateForeignServerStmtContext _localctx = new CreateForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_createForeignServerStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3917);
			match(CREATE);
			setState(3918);
			match(SERVER);
			setState(3919);
			name();
			setState(3920);
			opt_type();
			setState(3921);
			opt_foreign_server_version();
			setState(3922);
			match(FOREIGN);
			setState(3923);
			match(DATA_P);
			setState(3924);
			match(WRAPPER);
			setState(3925);
			name();
			setState(3926);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_opt_type);
		try {
			setState(3931);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3928);
				match(TYPE_P);
				setState(3929);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_foreign_server_version);
		try {
			setState(3937);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3933);
				match(VERSION_P);
				setState(3934);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3935);
				match(VERSION_P);
				setState(3936);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_foreign_server_version);
		try {
			setState(3941);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3939);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignServerStmtContext dropForeignServerStmt() throws RecognitionException {
		DropForeignServerStmtContext _localctx = new DropForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_dropForeignServerStmt);
		try {
			setState(3955);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3943);
				match(DROP);
				setState(3944);
				match(SERVER);
				setState(3945);
				name();
				setState(3946);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3948);
				match(DROP);
				setState(3949);
				match(SERVER);
				setState(3950);
				match(IF_P);
				setState(3951);
				match(EXISTS);
				setState(3952);
				name();
				setState(3953);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignServerStmtContext alterForeignServerStmt() throws RecognitionException {
		AlterForeignServerStmtContext _localctx = new AlterForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_alterForeignServerStmt);
		try {
			setState(3973);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3957);
				match(ALTER);
				setState(3958);
				match(SERVER);
				setState(3959);
				name();
				setState(3960);
				foreign_server_version();
				setState(3961);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3963);
				match(ALTER);
				setState(3964);
				match(SERVER);
				setState(3965);
				name();
				setState(3966);
				foreign_server_version();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3968);
				match(ALTER);
				setState(3969);
				match(SERVER);
				setState(3970);
				name();
				setState(3971);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptForeignTableElementListContext optForeignTableElementList() {
			return getRuleContext(OptForeignTableElementListContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public CreateForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableStmtContext createForeignTableStmt() throws RecognitionException {
		CreateForeignTableStmtContext _localctx = new CreateForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_createForeignTableStmt);
		try {
			setState(3996);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3975);
				match(CREATE);
				setState(3976);
				match(FOREIGN);
				setState(3977);
				match(TABLE);
				setState(3978);
				qualified_name();
				setState(3979);
				optForeignTableElementList();
				setState(3980);
				match(SERVER);
				setState(3981);
				name();
				setState(3982);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3984);
				match(CREATE);
				setState(3985);
				match(FOREIGN);
				setState(3986);
				match(TABLE);
				setState(3987);
				match(IF_P);
				setState(3988);
				match(NOT);
				setState(3989);
				match(EXISTS);
				setState(3990);
				qualified_name();
				setState(3991);
				optForeignTableElementList();
				setState(3992);
				match(SERVER);
				setState(3993);
				name();
				setState(3994);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptForeignTableElementListContext extends ParserRuleContext {
		public ForeignTableElementListContext foreignTableElementList() {
			return getRuleContext(ForeignTableElementListContext.class,0);
		}
		public OptForeignTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optForeignTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptForeignTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptForeignTableElementListContext optForeignTableElementList() throws RecognitionException {
		OptForeignTableElementListContext _localctx = new OptForeignTableElementListContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_optForeignTableElementList);
		try {
			setState(4004);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3998);
				match(T__2);
				setState(3999);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4000);
				match(T__2);
				setState(4001);
				foreignTableElementList(0);
				setState(4002);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignTableElementListContext extends ParserRuleContext {
		public ForeignTableElementContext foreignTableElement() {
			return getRuleContext(ForeignTableElementContext.class,0);
		}
		public ForeignTableElementListContext foreignTableElementList() {
			return getRuleContext(ForeignTableElementListContext.class,0);
		}
		public ForeignTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeignTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignTableElementListContext foreignTableElementList() throws RecognitionException {
		return foreignTableElementList(0);
	}

	private ForeignTableElementListContext foreignTableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForeignTableElementListContext _localctx = new ForeignTableElementListContext(_ctx, _parentState);
		ForeignTableElementListContext _prevctx = _localctx;
		int _startState = 498;
		enterRecursionRule(_localctx, 498, RULE_foreignTableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4007);
			foreignTableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(4014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForeignTableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_foreignTableElementList);
					setState(4009);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4010);
					match(T__4);
					setState(4011);
					foreignTableElement();
					}
					} 
				}
				setState(4016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForeignTableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public ForeignTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitForeignTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignTableElementContext foreignTableElement() throws RecognitionException {
		ForeignTableElementContext _localctx = new ForeignTableElementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_foreignTableElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			columnDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public AlterForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableStmtContext alterForeignTableStmt() throws RecognitionException {
		AlterForeignTableStmtContext _localctx = new AlterForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_alterForeignTableStmt);
		try {
			setState(4033);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4019);
				match(ALTER);
				setState(4020);
				match(FOREIGN);
				setState(4021);
				match(TABLE);
				setState(4022);
				relation_expr();
				setState(4023);
				alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				match(ALTER);
				setState(4026);
				match(FOREIGN);
				setState(4027);
				match(TABLE);
				setState(4028);
				match(IF_P);
				setState(4029);
				match(EXISTS);
				setState(4030);
				relation_expr();
				setState(4031);
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingStmtContext createUserMappingStmt() throws RecognitionException {
		CreateUserMappingStmtContext _localctx = new CreateUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_createUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4035);
			match(CREATE);
			setState(4036);
			match(USER);
			setState(4037);
			match(MAPPING);
			setState(4038);
			match(FOR);
			setState(4039);
			auth_ident();
			setState(4040);
			match(SERVER);
			setState(4041);
			name();
			setState(4042);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_auth_ident);
		try {
			setState(4047);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				roleId();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4045);
				match(CURRENT_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4046);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingStmtContext dropUserMappingStmt() throws RecognitionException {
		DropUserMappingStmtContext _localctx = new DropUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dropUserMappingStmt);
		try {
			setState(4067);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4049);
				match(DROP);
				setState(4050);
				match(USER);
				setState(4051);
				match(MAPPING);
				setState(4052);
				match(FOR);
				setState(4053);
				auth_ident();
				setState(4054);
				match(SERVER);
				setState(4055);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4057);
				match(DROP);
				setState(4058);
				match(USER);
				setState(4059);
				match(MAPPING);
				setState(4060);
				match(IF_P);
				setState(4061);
				match(EXISTS);
				setState(4062);
				match(FOR);
				setState(4063);
				auth_ident();
				setState(4064);
				match(SERVER);
				setState(4065);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingStmtContext alterUserMappingStmt() throws RecognitionException {
		AlterUserMappingStmtContext _localctx = new AlterUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_alterUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			match(ALTER);
			setState(4070);
			match(USER);
			setState(4071);
			match(MAPPING);
			setState(4072);
			match(FOR);
			setState(4073);
			auth_ident();
			setState(4074);
			match(SERVER);
			setState(4075);
			name();
			setState(4076);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTrigStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PlPgSqlParser.EXECUTE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlPgSqlParser.PROCEDURE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public OptConstrFromTableContext optConstrFromTable() {
			return getRuleContext(OptConstrFromTableContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlPgSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public CreateTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTrigStmtContext createTrigStmt() throws RecognitionException {
		CreateTrigStmtContext _localctx = new CreateTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_createTrigStmt);
		try {
			setState(4115);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4078);
				match(CREATE);
				setState(4079);
				match(TRIGGER);
				setState(4080);
				name();
				setState(4081);
				triggerActionTime();
				setState(4082);
				triggerEvents(0);
				setState(4083);
				match(ON);
				setState(4084);
				qualified_name();
				setState(4085);
				triggerForSpec();
				setState(4086);
				triggerWhen();
				setState(4087);
				match(EXECUTE);
				setState(4088);
				match(PROCEDURE);
				setState(4089);
				func_name();
				setState(4090);
				match(T__2);
				setState(4091);
				triggerFuncArgs(0);
				setState(4092);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4094);
				match(CREATE);
				setState(4095);
				match(CONSTRAINT);
				setState(4096);
				match(TRIGGER);
				setState(4097);
				name();
				setState(4098);
				match(AFTER);
				setState(4099);
				triggerEvents(0);
				setState(4100);
				match(ON);
				setState(4101);
				qualified_name();
				setState(4102);
				optConstrFromTable();
				setState(4103);
				constraintAttributeSpec(0);
				setState(4104);
				match(FOR);
				setState(4105);
				match(EACH);
				setState(4106);
				match(ROW);
				setState(4107);
				triggerWhen();
				setState(4108);
				match(EXECUTE);
				setState(4109);
				match(PROCEDURE);
				setState(4110);
				func_name();
				setState(4111);
				match(T__2);
				setState(4112);
				triggerFuncArgs(0);
				setState(4113);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PlPgSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlPgSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_triggerActionTime);
		try {
			setState(4121);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4117);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4118);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4119);
				match(INSTEAD);
				setState(4120);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public TriggerOneEventContext triggerOneEvent() {
			return getRuleContext(TriggerOneEventContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		return triggerEvents(0);
	}

	private TriggerEventsContext triggerEvents(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, _parentState);
		TriggerEventsContext _prevctx = _localctx;
		int _startState = 516;
		enterRecursionRule(_localctx, 516, RULE_triggerEvents, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4124);
			triggerOneEvent();
			}
			_ctx.stop = _input.LT(-1);
			setState(4131);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerEventsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerEvents);
					setState(4126);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4127);
					match(OR);
					setState(4128);
					triggerOneEvent();
					}
					} 
				}
				setState(4133);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlPgSqlParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_triggerOneEvent);
		try {
			setState(4141);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4134);
				match(UPDATE);
				setState(4135);
				match(OF);
				setState(4136);
				columnList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4137);
				match(INSERT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4138);
				match(DELETE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4139);
				match(UPDATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4140);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TriggerForOptEachContext triggerForOptEach() {
			return getRuleContext(TriggerForOptEachContext.class,0);
		}
		public TriggerForTypeContext triggerForType() {
			return getRuleContext(TriggerForTypeContext.class,0);
		}
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_triggerForSpec);
		try {
			setState(4148);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4143);
				match(FOR);
				setState(4144);
				triggerForOptEach();
				setState(4145);
				triggerForType();
				}
				break;
			case EXECUTE:
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForOptEachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PlPgSqlParser.EACH, 0); }
		public TriggerForOptEachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForOptEach; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForOptEach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForOptEachContext triggerForOptEach() throws RecognitionException {
		TriggerForOptEachContext _localctx = new TriggerForOptEachContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_triggerForOptEach);
		try {
			setState(4152);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4150);
				match(EACH);
				}
				break;
			case ROW:
			case STATEMENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForTypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PlPgSqlParser.STATEMENT, 0); }
		public TriggerForTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerForType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForTypeContext triggerForType() throws RecognitionException {
		TriggerForTypeContext _localctx = new TriggerForTypeContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_triggerForType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_triggerWhen);
		try {
			setState(4162);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4156);
				match(WHEN);
				setState(4157);
				match(T__2);
				setState(4158);
				a_expr(0);
				setState(4159);
				match(T__3);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public TriggerFuncArgContext triggerFuncArg() {
			return getRuleContext(TriggerFuncArgContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		return triggerFuncArgs(0);
	}

	private TriggerFuncArgsContext triggerFuncArgs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, _parentState);
		TriggerFuncArgsContext _prevctx = _localctx;
		int _startState = 528;
		enterRecursionRule(_localctx, 528, RULE_triggerFuncArgs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4167);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(4165);
				triggerFuncArg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4174);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerFuncArgsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerFuncArgs);
					setState(4169);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(4170);
					match(T__4);
					setState(4171);
					triggerFuncArg();
					}
					} 
				}
				setState(4176);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_triggerFuncArg);
		try {
			setState(4181);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4177);
				iconst();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(4178);
				sconst();
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALL:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERTION:
			case ASSIGNMENT:
			case ASYMMETRIC:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BOTH:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATE:
			case COLLATION:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CREATE:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DESC:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ELSE:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case END_P:
			case ENUM_P:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FETCH:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FOR:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FREEZE:
			case FROM:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANT:
			case GRANTED:
			case GREATEST:
			case GROUP_P:
			case HANDLER:
			case HAVING:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case IN_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEADING:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OFFSET:
			case OIDS:
			case ON:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OR:
			case ORDER:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLACING:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCES:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNING:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SELECT:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYMMETRIC:
			case SYSID:
			case SYSTEM_P:
			case TABLE:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case USING:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARIADIC:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case WHITESPACE_P:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4179);
				colLabel();
				}
				break;
			case FCONST:
				enterOuterAlt(_localctx, 4);
				{
				setState(4180);
				match(FCONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConstrFromTableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptConstrFromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConstrFromTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptConstrFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConstrFromTableContext optConstrFromTable() throws RecognitionException {
		OptConstrFromTableContext _localctx = new OptConstrFromTableContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_optConstrFromTable);
		try {
			setState(4186);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4183);
				match(FROM);
				setState(4184);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public ConstraintAttributeElemContext constraintAttributeElem() {
			return getRuleContext(ConstraintAttributeElemContext.class,0);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		return constraintAttributeSpec(0);
	}

	private ConstraintAttributeSpecContext constraintAttributeSpec(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, _parentState);
		ConstraintAttributeSpecContext _prevctx = _localctx;
		int _startState = 534;
		enterRecursionRule(_localctx, 534, RULE_constraintAttributeSpec, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4193);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintAttributeSpecContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_constraintAttributeSpec);
					setState(4189);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4190);
					constraintAttributeElem();
					}
					} 
				}
				setState(4195);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PlPgSqlParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_constraintAttributeElem);
		try {
			setState(4207);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4196);
				match(NOT);
				setState(4197);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4198);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4199);
				match(INITIALLY);
				setState(4200);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4201);
				match(INITIALLY);
				setState(4202);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4203);
				match(NOT);
				setState(4204);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4205);
				match(NO);
				setState(4206);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTrigStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTrigStmtContext dropTrigStmt() throws RecognitionException {
		DropTrigStmtContext _localctx = new DropTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_dropTrigStmt);
		try {
			setState(4225);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4209);
				match(DROP);
				setState(4210);
				match(TRIGGER);
				setState(4211);
				name();
				setState(4212);
				match(ON);
				setState(4213);
				any_name();
				setState(4214);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4216);
				match(DROP);
				setState(4217);
				match(TRIGGER);
				setState(4218);
				match(IF_P);
				setState(4219);
				match(EXISTS);
				setState(4220);
				name();
				setState(4221);
				match(ON);
				setState(4222);
				any_name();
				setState(4223);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAssertStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PlPgSqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public CreateAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAssertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAssertStmtContext createAssertStmt() throws RecognitionException {
		CreateAssertStmtContext _localctx = new CreateAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_createAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			match(CREATE);
			setState(4228);
			match(ASSERTION);
			setState(4229);
			name();
			setState(4230);
			match(CHECK);
			setState(4231);
			match(T__2);
			setState(4232);
			a_expr(0);
			setState(4233);
			match(T__3);
			setState(4234);
			constraintAttributeSpec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAssertStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode ASSERTION() { return getToken(PlPgSqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAssertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAssertStmtContext dropAssertStmt() throws RecognitionException {
		DropAssertStmtContext _localctx = new DropAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_dropAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4236);
			match(DROP);
			setState(4237);
			match(ASSERTION);
			setState(4238);
			name();
			setState(4239);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public OptTableFuncElementListContext optTableFuncElementList() {
			return getRuleContext(OptTableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM_P() { return getToken(PlPgSqlParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlPgSqlParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public DefineStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefineStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineStmtContext defineStmt() throws RecognitionException {
		DefineStmtContext _localctx = new DefineStmtContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_defineStmt);
		try {
			setState(4328);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4241);
				match(CREATE);
				setState(4242);
				match(TYPE_P);
				setState(4243);
				any_name();
				setState(4244);
				match(AS);
				setState(4245);
				match(T__2);
				setState(4246);
				optTableFuncElementList();
				setState(4247);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4249);
				match(CREATE);
				setState(4250);
				match(TYPE_P);
				setState(4251);
				any_name();
				setState(4252);
				match(AS);
				setState(4253);
				match(ENUM_P);
				setState(4254);
				match(T__2);
				setState(4255);
				opt_enum_val_list();
				setState(4256);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4258);
				match(CREATE);
				setState(4259);
				match(AGGREGATE);
				setState(4260);
				func_name();
				setState(4261);
				aggr_args();
				setState(4262);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4264);
				match(CREATE);
				setState(4265);
				match(AGGREGATE);
				setState(4266);
				func_name();
				setState(4267);
				old_aggr_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4269);
				match(CREATE);
				setState(4270);
				match(OPERATOR);
				setState(4271);
				any_operator();
				setState(4272);
				definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4274);
				match(CREATE);
				setState(4275);
				match(TYPE_P);
				setState(4276);
				any_name();
				setState(4277);
				definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4279);
				match(CREATE);
				setState(4280);
				match(TYPE_P);
				setState(4281);
				any_name();
				setState(4282);
				match(AS);
				setState(4283);
				match(RANGE);
				setState(4284);
				definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4286);
				match(CREATE);
				setState(4287);
				match(TEXT_P);
				setState(4288);
				match(SEARCH);
				setState(4289);
				match(PARSER);
				setState(4290);
				any_name();
				setState(4291);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4293);
				match(CREATE);
				setState(4294);
				match(TEXT_P);
				setState(4295);
				match(SEARCH);
				setState(4296);
				match(DICTIONARY);
				setState(4297);
				any_name();
				setState(4298);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4300);
				match(CREATE);
				setState(4301);
				match(TEXT_P);
				setState(4302);
				match(SEARCH);
				setState(4303);
				match(TEMPLATE);
				setState(4304);
				any_name();
				setState(4305);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4307);
				match(CREATE);
				setState(4308);
				match(TEXT_P);
				setState(4309);
				match(SEARCH);
				setState(4310);
				match(CONFIGURATION);
				setState(4311);
				any_name();
				setState(4312);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4314);
				match(CREATE);
				setState(4315);
				match(COLLATION);
				setState(4316);
				any_name();
				setState(4317);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4319);
				match(CREATE);
				setState(4320);
				match(COLLATION);
				setState(4321);
				any_name();
				setState(4322);
				match(FROM);
				setState(4323);
				any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4325);
				match(CREATE);
				setState(4326);
				match(TYPE_P);
				setState(4327);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			match(T__2);
			setState(4331);
			def_list(0);
			setState(4332);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public Def_elemContext def_elem() {
			return getRuleContext(Def_elemContext.class,0);
		}
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Def_listContext _localctx = new Def_listContext(_ctx, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 548;
		enterRecursionRule(_localctx, 548, RULE_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4335);
			def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4342);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_def_list);
					setState(4337);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4338);
					match(T__4);
					setState(4339);
					def_elem();
					}
					} 
				}
				setState(4344);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_def_elem);
		try {
			setState(4350);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4345);
				colLabel();
				setState(4346);
				match(T__6);
				setState(4347);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4349);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_def_arg);
		try {
			setState(4357);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4352);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4353);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4354);
				qual_all_Op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4355);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4356);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_aggr_args);
		try {
			setState(4366);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4359);
				match(T__2);
				setState(4360);
				match(T__10);
				setState(4361);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4362);
				match(T__2);
				setState(4363);
				type_list(0);
				setState(4364);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(T__2);
			setState(4369);
			old_aggr_list(0);
			setState(4370);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public Old_aggr_elemContext old_aggr_elem() {
			return getRuleContext(Old_aggr_elemContext.class,0);
		}
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 558;
		enterRecursionRule(_localctx, 558, RULE_old_aggr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4373);
			old_aggr_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4380);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					setState(4375);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4376);
					match(T__4);
					setState(4377);
					old_aggr_elem();
					}
					} 
				}
				setState(4382);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			match(IDENT);
			setState(4384);
			match(T__6);
			setState(4385);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_opt_enum_val_list);
		try {
			setState(4389);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4387);
				enum_val_list(0);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 564;
		enterRecursionRule(_localctx, 564, RULE_enum_val_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4392);
			sconst();
			}
			_ctx.stop = _input.LT(-1);
			setState(4399);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					setState(4394);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4395);
					match(T__4);
					setState(4396);
					sconst();
					}
					} 
				}
				setState(4401);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterEnumStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(PlPgSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public AlterEnumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEnumStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterEnumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEnumStmtContext alterEnumStmt() throws RecognitionException {
		AlterEnumStmtContext _localctx = new AlterEnumStmtContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_alterEnumStmt);
		try {
			setState(4427);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4402);
				match(ALTER);
				setState(4403);
				match(TYPE_P);
				setState(4404);
				any_name();
				setState(4405);
				match(ADD_P);
				setState(4406);
				match(VALUE_P);
				setState(4407);
				sconst();
				setState(4408);
				match(BEFORE);
				setState(4409);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4411);
				match(ALTER);
				setState(4412);
				match(TYPE_P);
				setState(4413);
				any_name();
				setState(4414);
				match(ADD_P);
				setState(4415);
				match(VALUE_P);
				setState(4416);
				sconst();
				setState(4417);
				match(AFTER);
				setState(4418);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4420);
				match(ALTER);
				setState(4421);
				match(TYPE_P);
				setState(4422);
				any_name();
				setState(4423);
				match(ADD_P);
				setState(4424);
				match(VALUE_P);
				setState(4425);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpClassStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpClassStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpClassStmtContext createOpClassStmt() throws RecognitionException {
		CreateOpClassStmtContext _localctx = new CreateOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_createOpClassStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4429);
			match(CREATE);
			setState(4430);
			match(OPERATOR);
			setState(4431);
			match(CLASS);
			setState(4432);
			any_name();
			setState(4433);
			opt_default();
			setState(4434);
			match(FOR);
			setState(4435);
			match(TYPE_P);
			setState(4436);
			typename();
			setState(4437);
			match(USING);
			setState(4438);
			access_method();
			setState(4439);
			opt_opfamily();
			setState(4440);
			match(AS);
			setState(4441);
			opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public Opclass_itemContext opclass_item() {
			return getRuleContext(Opclass_itemContext.class,0);
		}
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 570;
		enterRecursionRule(_localctx, 570, RULE_opclass_item_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4444);
			opclass_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4451);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					setState(4446);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4447);
					match(T__4);
					setState(4448);
					opclass_item();
					}
					} 
				}
				setState(4453);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_opclass_item);
		try {
			setState(4482);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4454);
				match(FUNCTION);
				setState(4455);
				iconst();
				setState(4456);
				match(T__2);
				setState(4457);
				type_list(0);
				setState(4458);
				match(T__3);
				setState(4459);
				func_name();
				setState(4460);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4462);
				match(OPERATOR);
				setState(4463);
				iconst();
				setState(4464);
				any_operator();
				setState(4465);
				oper_argtypes();
				setState(4466);
				opclass_purpose();
				setState(4467);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4469);
				match(OPERATOR);
				setState(4470);
				iconst();
				setState(4471);
				any_operator();
				setState(4472);
				opclass_purpose();
				setState(4473);
				opt_recheck();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4475);
				match(FUNCTION);
				setState(4476);
				iconst();
				setState(4477);
				func_name();
				setState(4478);
				func_args();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4480);
				match(STORAGE);
				setState(4481);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_opt_default);
		try {
			setState(4486);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4484);
				match(DEFAULT);
				}
				break;
			case CONVERSION_P:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_opt_opfamily);
		try {
			setState(4491);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4488);
				match(FAMILY);
				setState(4489);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_opclass_purpose);
		try {
			setState(4500);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4493);
				match(FOR);
				setState(4494);
				match(ORDER);
				setState(4495);
				match(BY);
				setState(4496);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4497);
				match(FOR);
				setState(4498);
				match(SEARCH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PlPgSqlParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_opt_recheck);
		try {
			setState(4504);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4502);
				match(RECHECK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public CreateOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpFamilyStmtContext createOpFamilyStmt() throws RecognitionException {
		CreateOpFamilyStmtContext _localctx = new CreateOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_createOpFamilyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4506);
			match(CREATE);
			setState(4507);
			match(OPERATOR);
			setState(4508);
			match(FAMILY);
			setState(4509);
			any_name();
			setState(4510);
			match(USING);
			setState(4511);
			access_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlterOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOpFamilyStmtContext alterOpFamilyStmt() throws RecognitionException {
		AlterOpFamilyStmtContext _localctx = new AlterOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_alterOpFamilyStmt);
		try {
			setState(4531);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4513);
				match(ALTER);
				setState(4514);
				match(OPERATOR);
				setState(4515);
				match(FAMILY);
				setState(4516);
				any_name();
				setState(4517);
				match(USING);
				setState(4518);
				access_method();
				setState(4519);
				match(ADD_P);
				setState(4520);
				opclass_item_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4522);
				match(ALTER);
				setState(4523);
				match(OPERATOR);
				setState(4524);
				match(FAMILY);
				setState(4525);
				any_name();
				setState(4526);
				match(USING);
				setState(4527);
				access_method();
				setState(4528);
				match(DROP);
				setState(4529);
				opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public Opclass_dropContext opclass_drop() {
			return getRuleContext(Opclass_dropContext.class,0);
		}
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 586;
		enterRecursionRule(_localctx, 586, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4534);
			opclass_drop();
			}
			_ctx.stop = _input.LT(-1);
			setState(4541);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					setState(4536);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4537);
					match(T__4);
					setState(4538);
					opclass_drop();
					}
					} 
				}
				setState(4543);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_opclass_drop);
		try {
			setState(4556);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4544);
				match(OPERATOR);
				setState(4545);
				iconst();
				setState(4546);
				match(T__2);
				setState(4547);
				type_list(0);
				setState(4548);
				match(T__3);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4550);
				match(FUNCTION);
				setState(4551);
				iconst();
				setState(4552);
				match(T__2);
				setState(4553);
				type_list(0);
				setState(4554);
				match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpClassStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpClassStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpClassStmtContext dropOpClassStmt() throws RecognitionException {
		DropOpClassStmtContext _localctx = new DropOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_dropOpClassStmt);
		try {
			setState(4576);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4558);
				match(DROP);
				setState(4559);
				match(OPERATOR);
				setState(4560);
				match(CLASS);
				setState(4561);
				any_name();
				setState(4562);
				match(USING);
				setState(4563);
				access_method();
				setState(4564);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4566);
				match(DROP);
				setState(4567);
				match(OPERATOR);
				setState(4568);
				match(CLASS);
				setState(4569);
				match(IF_P);
				setState(4570);
				match(EXISTS);
				setState(4571);
				any_name();
				setState(4572);
				match(USING);
				setState(4573);
				access_method();
				setState(4574);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpFamilyStmtContext dropOpFamilyStmt() throws RecognitionException {
		DropOpFamilyStmtContext _localctx = new DropOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_dropOpFamilyStmt);
		try {
			setState(4596);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4578);
				match(DROP);
				setState(4579);
				match(OPERATOR);
				setState(4580);
				match(FAMILY);
				setState(4581);
				any_name();
				setState(4582);
				match(USING);
				setState(4583);
				access_method();
				setState(4584);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4586);
				match(DROP);
				setState(4587);
				match(OPERATOR);
				setState(4588);
				match(FAMILY);
				setState(4589);
				match(IF_P);
				setState(4590);
				match(EXISTS);
				setState(4591);
				any_name();
				setState(4592);
				match(USING);
				setState(4593);
				access_method();
				setState(4594);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwnedStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedStmtContext dropOwnedStmt() throws RecognitionException {
		DropOwnedStmtContext _localctx = new DropOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_dropOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4598);
			match(DROP);
			setState(4599);
			match(OWNED);
			setState(4600);
			match(BY);
			setState(4601);
			name_list(0);
			setState(4602);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignOwnedStmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PlPgSqlParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReassignOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwnedStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReassignOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedStmtContext reassignOwnedStmt() throws RecognitionException {
		ReassignOwnedStmtContext _localctx = new ReassignOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_reassignOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4604);
			match(REASSIGN);
			setState(4605);
			match(OWNED);
			setState(4606);
			match(BY);
			setState(4607);
			name_list(0);
			setState(4608);
			match(TO);
			setState(4609);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public DropStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStmtContext dropStmt() throws RecognitionException {
		DropStmtContext _localctx = new DropStmtContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_dropStmt);
		try {
			setState(4637);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4611);
				match(DROP);
				setState(4612);
				drop_type();
				setState(4613);
				match(IF_P);
				setState(4614);
				match(EXISTS);
				setState(4615);
				any_name_list(0);
				setState(4616);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4618);
				match(DROP);
				setState(4619);
				drop_type();
				setState(4620);
				any_name_list(0);
				setState(4621);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4623);
				match(DROP);
				setState(4624);
				match(INDEX);
				setState(4625);
				match(CONCURRENTLY);
				setState(4626);
				any_name_list(0);
				setState(4627);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4629);
				match(DROP);
				setState(4630);
				match(INDEX);
				setState(4631);
				match(CONCURRENTLY);
				setState(4632);
				match(IF_P);
				setState(4633);
				match(EXISTS);
				setState(4634);
				any_name_list(0);
				setState(4635);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_drop_type);
		try {
			setState(4663);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4639);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4640);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4641);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4642);
				match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4643);
				match(FOREIGN);
				setState(4644);
				match(TABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4645);
				match(TYPE_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4646);
				match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4647);
				match(COLLATION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4648);
				match(CONVERSION_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4649);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4650);
				match(EXTENSION);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4651);
				match(TEXT_P);
				setState(4652);
				match(SEARCH);
				setState(4653);
				match(PARSER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4654);
				match(TEXT_P);
				setState(4655);
				match(SEARCH);
				setState(4656);
				match(DICTIONARY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4657);
				match(TEXT_P);
				setState(4658);
				match(SEARCH);
				setState(4659);
				match(TEMPLATE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4660);
				match(TEXT_P);
				setState(4661);
				match(SEARCH);
				setState(4662);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_any_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4666);
			any_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4673);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					setState(4668);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4669);
					match(T__4);
					setState(4670);
					any_name();
					}
					} 
				}
				setState(4675);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_any_name);
		try {
			setState(4680);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4676);
				colId();
				setState(4677);
				attrs(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4679);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 606;
		enterRecursionRule(_localctx, 606, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4683);
			match(T__9);
			setState(4684);
			attr_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(4691);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(4686);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4687);
					match(T__9);
					setState(4688);
					attr_name();
					}
					} 
				}
				setState(4693);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TruncateStmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PlPgSqlParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTruncateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateStmtContext truncateStmt() throws RecognitionException {
		TruncateStmtContext _localctx = new TruncateStmtContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_truncateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4694);
			match(TRUNCATE);
			setState(4695);
			opt_table();
			setState(4696);
			relation_expr_list(0);
			setState(4697);
			opt_restart_seqs();
			setState(4698);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PlPgSqlParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PlPgSqlParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PlPgSqlParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_opt_restart_seqs);
		try {
			setState(4705);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4700);
				match(CONTINUE_P);
				setState(4701);
				match(IDENTITY_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4702);
				match(RESTART);
				setState(4703);
				match(IDENTITY_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlPgSqlParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PlPgSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PlPgSqlParser.ON, i);
		}
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public Comment_typeContext comment_type() {
			return getRuleContext(Comment_typeContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public CommentStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommentStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStmtContext commentStmt() throws RecognitionException {
		CommentStmtContext _localctx = new CommentStmtContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_commentStmt);
		try {
			setState(4855);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4707);
				match(COMMENT);
				setState(4708);
				match(ON);
				setState(4709);
				match(CAST);
				setState(4710);
				match(T__2);
				setState(4711);
				typename();
				setState(4712);
				match(AS);
				setState(4713);
				typename();
				setState(4714);
				match(T__3);
				setState(4715);
				match(IS);
				setState(4716);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				match(COMMENT);
				setState(4719);
				match(ON);
				setState(4720);
				comment_type();
				setState(4721);
				any_name();
				setState(4722);
				match(IS);
				setState(4723);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4725);
				match(COMMENT);
				setState(4726);
				match(ON);
				setState(4727);
				match(AGGREGATE);
				setState(4728);
				func_name();
				setState(4729);
				aggr_args();
				setState(4730);
				match(IS);
				setState(4731);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4733);
				match(COMMENT);
				setState(4734);
				match(ON);
				setState(4735);
				match(FUNCTION);
				setState(4736);
				func_name();
				setState(4737);
				func_args();
				setState(4738);
				match(IS);
				setState(4739);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4741);
				match(COMMENT);
				setState(4742);
				match(ON);
				setState(4743);
				match(OPERATOR);
				setState(4744);
				any_operator();
				setState(4745);
				oper_argtypes();
				setState(4746);
				match(IS);
				setState(4747);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4749);
				match(COMMENT);
				setState(4750);
				match(ON);
				setState(4751);
				match(CONSTRAINT);
				setState(4752);
				name();
				setState(4753);
				match(ON);
				setState(4754);
				any_name();
				setState(4755);
				match(IS);
				setState(4756);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4758);
				match(COMMENT);
				setState(4759);
				match(ON);
				setState(4760);
				match(RULE);
				setState(4761);
				name();
				setState(4762);
				match(ON);
				setState(4763);
				any_name();
				setState(4764);
				match(IS);
				setState(4765);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4767);
				match(COMMENT);
				setState(4768);
				match(ON);
				setState(4769);
				match(TRIGGER);
				setState(4770);
				name();
				setState(4771);
				match(ON);
				setState(4772);
				any_name();
				setState(4773);
				match(IS);
				setState(4774);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4776);
				match(COMMENT);
				setState(4777);
				match(ON);
				setState(4778);
				match(OPERATOR);
				setState(4779);
				match(CLASS);
				setState(4780);
				any_name();
				setState(4781);
				match(USING);
				setState(4782);
				access_method();
				setState(4783);
				match(IS);
				setState(4784);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4786);
				match(COMMENT);
				setState(4787);
				match(ON);
				setState(4788);
				match(OPERATOR);
				setState(4789);
				match(FAMILY);
				setState(4790);
				any_name();
				setState(4791);
				match(USING);
				setState(4792);
				access_method();
				setState(4793);
				match(IS);
				setState(4794);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4796);
				match(COMMENT);
				setState(4797);
				match(ON);
				setState(4798);
				opt_procedural();
				setState(4799);
				match(LANGUAGE);
				setState(4800);
				any_name();
				setState(4801);
				match(IS);
				setState(4802);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4804);
				match(COMMENT);
				setState(4805);
				match(ON);
				setState(4806);
				match(RULE);
				setState(4807);
				name();
				setState(4808);
				match(IS);
				setState(4809);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4811);
				match(COMMENT);
				setState(4812);
				match(ON);
				setState(4813);
				match(LARGE_P);
				setState(4814);
				match(OBJECT_P);
				setState(4815);
				numericOnly();
				setState(4816);
				match(IS);
				setState(4817);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4819);
				match(COMMENT);
				setState(4820);
				match(ON);
				setState(4821);
				match(TEXT_P);
				setState(4822);
				match(SEARCH);
				setState(4823);
				match(PARSER);
				setState(4824);
				any_name();
				setState(4825);
				match(IS);
				setState(4826);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4828);
				match(COMMENT);
				setState(4829);
				match(ON);
				setState(4830);
				match(TEXT_P);
				setState(4831);
				match(SEARCH);
				setState(4832);
				match(DICTIONARY);
				setState(4833);
				any_name();
				setState(4834);
				match(IS);
				setState(4835);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4837);
				match(COMMENT);
				setState(4838);
				match(ON);
				setState(4839);
				match(TEXT_P);
				setState(4840);
				match(SEARCH);
				setState(4841);
				match(TEMPLATE);
				setState(4842);
				any_name();
				setState(4843);
				match(IS);
				setState(4844);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4846);
				match(COMMENT);
				setState(4847);
				match(ON);
				setState(4848);
				match(TEXT_P);
				setState(4849);
				match(SEARCH);
				setState(4850);
				match(CONFIGURATION);
				setState(4851);
				any_name();
				setState(4852);
				match(IS);
				setState(4853);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_typeContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public Comment_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComment_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_typeContext comment_type() throws RecognitionException {
		Comment_typeContext _localctx = new Comment_typeContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_comment_type);
		try {
			setState(4877);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4857);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4858);
				match(DATABASE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4859);
				match(SCHEMA);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4860);
				match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4861);
				match(SEQUENCE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4862);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4863);
				match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4864);
				match(TYPE_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4865);
				match(VIEW);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4866);
				match(COLLATION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4867);
				match(CONVERSION_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4868);
				match(TABLESPACE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4869);
				match(EXTENSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4870);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4871);
				match(FOREIGN);
				setState(4872);
				match(TABLE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4873);
				match(SERVER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4874);
				match(FOREIGN);
				setState(4875);
				match(DATA_P);
				setState(4876);
				match(WRAPPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_comment_text);
		try {
			setState(4881);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4879);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4880);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PlPgSqlParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PlPgSqlParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Security_label_typeContext security_label_type() {
			return getRuleContext(Security_label_typeContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public SecLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_secLabelStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecLabelStmtContext secLabelStmt() throws RecognitionException {
		SecLabelStmtContext _localctx = new SecLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_secLabelStmt);
		try {
			setState(4932);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4883);
				match(SECURITY);
				setState(4884);
				match(LABEL);
				setState(4885);
				opt_provider();
				setState(4886);
				match(ON);
				setState(4887);
				security_label_type();
				setState(4888);
				any_name();
				setState(4889);
				match(IS);
				setState(4890);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4892);
				match(SECURITY);
				setState(4893);
				match(LABEL);
				setState(4894);
				opt_provider();
				setState(4895);
				match(ON);
				setState(4896);
				match(AGGREGATE);
				setState(4897);
				func_name();
				setState(4898);
				aggr_args();
				setState(4899);
				match(IS);
				setState(4900);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4902);
				match(SECURITY);
				setState(4903);
				match(LABEL);
				setState(4904);
				opt_provider();
				setState(4905);
				match(ON);
				setState(4906);
				match(FUNCTION);
				setState(4907);
				func_name();
				setState(4908);
				func_args();
				setState(4909);
				match(IS);
				setState(4910);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4912);
				match(SECURITY);
				setState(4913);
				match(LABEL);
				setState(4914);
				opt_provider();
				setState(4915);
				match(ON);
				setState(4916);
				opt_procedural();
				setState(4917);
				match(LANGUAGE);
				setState(4918);
				any_name();
				setState(4919);
				match(IS);
				setState(4920);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4922);
				match(SECURITY);
				setState(4923);
				match(LABEL);
				setState(4924);
				opt_provider();
				setState(4925);
				match(ON);
				setState(4926);
				match(LARGE_P);
				setState(4927);
				match(OBJECT_P);
				setState(4928);
				numericOnly();
				setState(4929);
				match(IS);
				setState(4930);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_opt_provider);
		try {
			setState(4937);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4934);
				match(FOR);
				setState(4935);
				colId_or_Sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_label_typeContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public Security_label_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecurity_label_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_typeContext security_label_type() throws RecognitionException {
		Security_label_typeContext _localctx = new Security_label_typeContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_security_label_type);
		try {
			setState(4951);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4939);
				match(COLUMN);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4940);
				match(DATABASE);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4941);
				match(FOREIGN);
				setState(4942);
				match(TABLE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 4);
				{
				setState(4943);
				match(SCHEMA);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4944);
				match(SEQUENCE);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4945);
				match(TABLE);
				}
				break;
			case DOMAIN_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(4946);
				match(DOMAIN_P);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4947);
				match(ROLE);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4948);
				match(TABLESPACE);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(4949);
				match(TYPE_P);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 11);
				{
				setState(4950);
				match(VIEW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_security_label);
		try {
			setState(4955);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4953);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4954);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchStmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PlPgSqlParser.MOVE, 0); }
		public FetchStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFetchStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchStmtContext fetchStmt() throws RecognitionException {
		FetchStmtContext _localctx = new FetchStmtContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_fetchStmt);
		try {
			setState(4961);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4957);
				match(FETCH);
				setState(4958);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4959);
				match(MOVE);
				setState(4960);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(PlPgSqlParser.ABSOLUTE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PlPgSqlParser.RELATIVE_P, 0); }
		public TerminalNode FORWARD() { return getToken(PlPgSqlParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PlPgSqlParser.BACKWARD, 0); }
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PlPgSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PlPgSqlParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PlPgSqlParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PlPgSqlParser.LAST_P, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_fetch_args);
		try {
			setState(5029);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4963);
				match(ABSOLUTE_P);
				setState(4964);
				signedIconst();
				setState(4965);
				opt_from_in();
				setState(4966);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4968);
				match(RELATIVE_P);
				setState(4969);
				signedIconst();
				setState(4970);
				opt_from_in();
				setState(4971);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4973);
				signedIconst();
				setState(4974);
				opt_from_in();
				setState(4975);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4977);
				match(FORWARD);
				setState(4978);
				signedIconst();
				setState(4979);
				opt_from_in();
				setState(4980);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4982);
				match(BACKWARD);
				setState(4983);
				signedIconst();
				setState(4984);
				opt_from_in();
				setState(4985);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4987);
				from_in();
				setState(4988);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4990);
				match(NEXT);
				setState(4991);
				opt_from_in();
				setState(4992);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4994);
				match(PRIOR);
				setState(4995);
				opt_from_in();
				setState(4996);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4998);
				match(FIRST_P);
				setState(4999);
				opt_from_in();
				setState(5000);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5002);
				match(LAST_P);
				setState(5003);
				opt_from_in();
				setState(5004);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5006);
				match(ALL);
				setState(5007);
				opt_from_in();
				setState(5008);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5010);
				match(FORWARD);
				setState(5011);
				opt_from_in();
				setState(5012);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5014);
				match(FORWARD);
				setState(5015);
				match(ALL);
				setState(5016);
				opt_from_in();
				setState(5017);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5019);
				match(BACKWARD);
				setState(5020);
				opt_from_in();
				setState(5021);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5023);
				match(BACKWARD);
				setState(5024);
				match(ALL);
				setState(5025);
				opt_from_in();
				setState(5026);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5028);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5031);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_opt_from_in);
		try {
			setState(5035);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5033);
				from_in();
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStmtContext grantStmt() throws RecognitionException {
		GrantStmtContext _localctx = new GrantStmtContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_grantStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			match(GRANT);
			setState(5038);
			privileges();
			setState(5039);
			match(ON);
			setState(5040);
			privilege_target();
			setState(5041);
			match(TO);
			setState(5042);
			grantee_list(0);
			setState(5043);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public RevokeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRevokeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStmtContext revokeStmt() throws RecognitionException {
		RevokeStmtContext _localctx = new RevokeStmtContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_revokeStmt);
		try {
			setState(5064);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5045);
				match(REVOKE);
				setState(5046);
				privileges();
				setState(5047);
				match(ON);
				setState(5048);
				privilege_target();
				setState(5049);
				match(FROM);
				setState(5050);
				grantee_list(0);
				setState(5051);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5053);
				match(REVOKE);
				setState(5054);
				match(GRANT);
				setState(5055);
				match(OPTION);
				setState(5056);
				match(FOR);
				setState(5057);
				privileges();
				setState(5058);
				match(ON);
				setState(5059);
				privilege_target();
				setState(5060);
				match(FROM);
				setState(5061);
				grantee_list(0);
				setState(5062);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(PlPgSqlParser.PRIVILEGES, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_privileges);
		try {
			setState(5081);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5066);
				match(ALL);
				setState(5067);
				match(T__2);
				setState(5068);
				columnList(0);
				setState(5069);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5071);
				match(ALL);
				setState(5072);
				match(PRIVILEGES);
				setState(5073);
				match(T__2);
				setState(5074);
				columnList(0);
				setState(5075);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5077);
				privilege_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5078);
				match(ALL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5079);
				match(ALL);
				setState(5080);
				match(PRIVILEGES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 640;
		enterRecursionRule(_localctx, 640, RULE_privilege_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5084);
			privilege();
			}
			_ctx.stop = _input.LT(-1);
			setState(5091);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					setState(5086);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5087);
					match(T__4);
					setState(5088);
					privilege();
					}
					} 
				}
				setState(5093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_privilege);
		try {
			setState(5103);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5094);
				colId();
				setState(5095);
				opt_column_list();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5097);
				match(SELECT);
				setState(5098);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5099);
				match(REFERENCES);
				setState(5100);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5101);
				match(CREATE);
				setState(5102);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PlPgSqlParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PlPgSqlParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlPgSqlParser.FUNCTIONS, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_privilege_target);
		try {
			setState(5149);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5105);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5106);
				match(TABLE);
				setState(5107);
				qualified_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5108);
				match(SEQUENCE);
				setState(5109);
				qualified_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5110);
				match(FOREIGN);
				setState(5111);
				match(DATA_P);
				setState(5112);
				match(WRAPPER);
				setState(5113);
				name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5114);
				match(FOREIGN);
				setState(5115);
				match(SERVER);
				setState(5116);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5117);
				match(FUNCTION);
				setState(5118);
				function_with_argtypes_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5119);
				match(DATABASE);
				setState(5120);
				name_list(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5121);
				match(DOMAIN_P);
				setState(5122);
				any_name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5123);
				match(LANGUAGE);
				setState(5124);
				name_list(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5125);
				match(LARGE_P);
				setState(5126);
				match(OBJECT_P);
				setState(5127);
				numericOnly_list(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5128);
				match(SCHEMA);
				setState(5129);
				name_list(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5130);
				match(TABLESPACE);
				setState(5131);
				name_list(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5132);
				match(TYPE_P);
				setState(5133);
				any_name_list(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5134);
				match(ALL);
				setState(5135);
				match(TABLES);
				setState(5136);
				match(IN_P);
				setState(5137);
				match(SCHEMA);
				setState(5138);
				name_list(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5139);
				match(ALL);
				setState(5140);
				match(SEQUENCES);
				setState(5141);
				match(IN_P);
				setState(5142);
				match(SCHEMA);
				setState(5143);
				name_list(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5144);
				match(ALL);
				setState(5145);
				match(FUNCTIONS);
				setState(5146);
				match(IN_P);
				setState(5147);
				match(SCHEMA);
				setState(5148);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public GranteeContext grantee() {
			return getRuleContext(GranteeContext.class,0);
		}
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 646;
		enterRecursionRule(_localctx, 646, RULE_grantee_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5152);
			grantee();
			}
			_ctx.stop = _input.LT(-1);
			setState(5159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					setState(5154);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5155);
					match(T__4);
					setState(5156);
					grantee();
					}
					} 
				}
				setState(5161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_grantee);
		try {
			setState(5165);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5162);
				roleId();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5163);
				match(GROUP_P);
				setState(5164);
				roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_opt_grant_grant_option);
		try {
			setState(5171);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5167);
				match(WITH);
				setState(5168);
				match(GRANT);
				setState(5169);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 652;
		enterRecursionRule(_localctx, 652, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5174);
			function_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(5181);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					setState(5176);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5177);
					match(T__4);
					setState(5178);
					function_with_argtypes();
					}
					} 
				}
				setState(5183);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_function_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5184);
			func_name();
			setState(5185);
			func_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantRoleStmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGrantRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantRoleStmtContext grantRoleStmt() throws RecognitionException {
		GrantRoleStmtContext _localctx = new GrantRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_grantRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			match(GRANT);
			setState(5188);
			privilege_list(0);
			setState(5189);
			match(TO);
			setState(5190);
			name_list(0);
			setState(5191);
			opt_grant_admin_option();
			setState(5192);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeRoleStmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public RevokeRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRevokeRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeRoleStmtContext revokeRoleStmt() throws RecognitionException {
		RevokeRoleStmtContext _localctx = new RevokeRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_revokeRoleStmt);
		try {
			setState(5211);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5194);
				match(REVOKE);
				setState(5195);
				privilege_list(0);
				setState(5196);
				match(FROM);
				setState(5197);
				name_list(0);
				setState(5198);
				opt_granted_by();
				setState(5199);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5201);
				match(REVOKE);
				setState(5202);
				match(ADMIN);
				setState(5203);
				match(OPTION);
				setState(5204);
				match(FOR);
				setState(5205);
				privilege_list(0);
				setState(5206);
				match(FROM);
				setState(5207);
				name_list(0);
				setState(5208);
				opt_granted_by();
				setState(5209);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_opt_grant_admin_option);
		try {
			setState(5217);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5213);
				match(WITH);
				setState(5214);
				match(ADMIN);
				setState(5215);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PlPgSqlParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_opt_granted_by);
		try {
			setState(5223);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5219);
				match(GRANTED);
				setState(5220);
				match(BY);
				setState(5221);
				roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlPgSqlParser.PRIVILEGES, 0); }
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivilegesStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDefaultPrivilegesStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() throws RecognitionException {
		AlterDefaultPrivilegesStmtContext _localctx = new AlterDefaultPrivilegesStmtContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_alterDefaultPrivilegesStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5225);
			match(ALTER);
			setState(5226);
			match(DEFAULT);
			setState(5227);
			match(PRIVILEGES);
			setState(5228);
			defACLOptionList(0);
			setState(5229);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLOptionContext defACLOption() {
			return getRuleContext(DefACLOptionContext.class,0);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		return defACLOptionList(0);
	}

	private DefACLOptionListContext defACLOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, _parentState);
		DefACLOptionListContext _prevctx = _localctx;
		int _startState = 666;
		enterRecursionRule(_localctx, 666, RULE_defACLOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5236);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefACLOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_defACLOptionList);
					setState(5232);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5233);
					defACLOption();
					}
					} 
				}
				setState(5238);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_defACLOption);
		try {
			setState(5248);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5239);
				match(IN_P);
				setState(5240);
				match(SCHEMA);
				setState(5241);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5242);
				match(FOR);
				setState(5243);
				match(ROLE);
				setState(5244);
				name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5245);
				match(FOR);
				setState(5246);
				match(USER);
				setState(5247);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_defACLAction);
		try {
			setState(5277);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5250);
				match(GRANT);
				setState(5251);
				privileges();
				setState(5252);
				match(ON);
				setState(5253);
				defacl_privilege_target();
				setState(5254);
				match(TO);
				setState(5255);
				grantee_list(0);
				setState(5256);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5258);
				match(REVOKE);
				setState(5259);
				privileges();
				setState(5260);
				match(ON);
				setState(5261);
				defacl_privilege_target();
				setState(5262);
				match(FROM);
				setState(5263);
				grantee_list(0);
				setState(5264);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5266);
				match(REVOKE);
				setState(5267);
				match(GRANT);
				setState(5268);
				match(OPTION);
				setState(5269);
				match(FOR);
				setState(5270);
				privileges();
				setState(5271);
				match(ON);
				setState(5272);
				defacl_privilege_target();
				setState(5273);
				match(FROM);
				setState(5274);
				grantee_list(0);
				setState(5275);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PlPgSqlParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlPgSqlParser.FUNCTIONS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PlPgSqlParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PlPgSqlParser.TYPES_P, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & ((1L << (SEQUENCES - 381)) | (1L << (TABLES - 381)) | (1L << (TYPES_P - 381)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public IndexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexStmtContext indexStmt() throws RecognitionException {
		IndexStmtContext _localctx = new IndexStmtContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_indexStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5281);
			match(CREATE);
			setState(5282);
			opt_unique();
			setState(5283);
			match(INDEX);
			setState(5284);
			opt_concurrently();
			setState(5285);
			opt_index_name();
			setState(5286);
			match(ON);
			setState(5287);
			qualified_name();
			setState(5288);
			access_method_clause();
			setState(5289);
			match(T__2);
			setState(5290);
			index_params(0);
			setState(5291);
			match(T__3);
			setState(5292);
			opt_reloptions();
			setState(5293);
			optTableSpace();
			setState(5294);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_opt_unique);
		try {
			setState(5298);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5296);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_opt_concurrently);
		try {
			setState(5302);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5300);
				match(CONCURRENTLY);
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_opt_index_name);
		try {
			setState(5306);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5304);
				index_name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_access_method_clause);
		try {
			setState(5311);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5308);
				match(USING);
				setState(5309);
				access_method();
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 684;
		enterRecursionRule(_localctx, 684, RULE_index_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5314);
			index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(5321);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_params);
					setState(5316);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5317);
					match(T__4);
					setState(5318);
					index_elem();
					}
					} 
				}
				setState(5323);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_index_elem);
		try {
			setState(5344);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5324);
				match(T__2);
				setState(5325);
				a_expr(0);
				setState(5326);
				match(T__3);
				setState(5327);
				opt_collate();
				setState(5328);
				opt_class();
				setState(5329);
				opt_asc_desc();
				setState(5330);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5332);
				colId();
				setState(5333);
				opt_collate();
				setState(5334);
				opt_class();
				setState(5335);
				opt_asc_desc();
				setState(5336);
				opt_nulls_order();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5338);
				func_expr();
				setState(5339);
				opt_collate();
				setState(5340);
				opt_class();
				setState(5341);
				opt_asc_desc();
				setState(5342);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_opt_collate);
		try {
			setState(5349);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5346);
				match(COLLATE);
				setState(5347);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_opt_class);
		try {
			setState(5355);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5351);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5352);
				match(USING);
				setState(5353);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PlPgSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlPgSqlParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_opt_asc_desc);
		try {
			setState(5360);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5357);
				match(ASC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5358);
				match(DESC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_FIRST() { return getToken(PlPgSqlParser.NULLS_FIRST, 0); }
		public TerminalNode NULLS_LAST() { return getToken(PlPgSqlParser.NULLS_LAST, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_opt_nulls_order);
		try {
			setState(5365);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5362);
				match(NULLS_FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5363);
				match(NULLS_LAST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(PlPgSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public CreateFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStmtContext createFunctionStmt() throws RecognitionException {
		CreateFunctionStmtContext _localctx = new CreateFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_createFunctionStmt);
		try {
			setState(5398);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5367);
				match(CREATE);
				setState(5368);
				opt_or_replace();
				setState(5369);
				match(FUNCTION);
				setState(5370);
				func_name();
				setState(5371);
				func_args_with_defaults();
				setState(5372);
				match(RETURNS);
				setState(5373);
				match(TABLE);
				setState(5374);
				match(T__2);
				setState(5375);
				table_func_column_list(0);
				setState(5376);
				match(T__3);
				setState(5377);
				createfunc_opt_list(0);
				setState(5378);
				opt_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5380);
				match(CREATE);
				setState(5381);
				opt_or_replace();
				setState(5382);
				match(FUNCTION);
				setState(5383);
				func_name();
				setState(5384);
				func_args_with_defaults();
				setState(5385);
				match(RETURNS);
				setState(5386);
				func_return();
				setState(5387);
				createfunc_opt_list(0);
				setState(5388);
				opt_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5390);
				match(CREATE);
				setState(5391);
				opt_or_replace();
				setState(5392);
				match(FUNCTION);
				setState(5393);
				func_name();
				setState(5394);
				func_args_with_defaults();
				setState(5395);
				createfunc_opt_list(0);
				setState(5396);
				opt_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_opt_or_replace);
		try {
			setState(5403);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5400);
				match(OR);
				setState(5401);
				match(REPLACE);
				}
				break;
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case RULE:
			case TRUSTED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_func_args);
		try {
			setState(5411);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5405);
				match(T__2);
				setState(5406);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5407);
				match(T__2);
				setState(5408);
				func_args_list(0);
				setState(5409);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 702;
		enterRecursionRule(_localctx, 702, RULE_func_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5414);
			func_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(5421);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					setState(5416);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5417);
					match(T__4);
					setState(5418);
					func_arg();
					}
					} 
				}
				setState(5423);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_func_args_with_defaults);
		try {
			setState(5430);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5424);
				match(T__2);
				setState(5425);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5426);
				match(T__2);
				setState(5427);
				func_args_with_defaults_list(0);
				setState(5428);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public Func_arg_with_defaultContext func_arg_with_default() {
			return getRuleContext(Func_arg_with_defaultContext.class,0);
		}
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 706;
		enterRecursionRule(_localctx, 706, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5433);
			func_arg_with_default();
			}
			_ctx.stop = _input.LT(-1);
			setState(5440);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					setState(5435);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5436);
					match(T__4);
					setState(5437);
					func_arg_with_default();
					}
					} 
				}
				setState(5442);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_func_arg);
		try {
			setState(5458);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5443);
				arg_class();
				setState(5444);
				param_name();
				setState(5445);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5447);
				param_name();
				setState(5448);
				arg_class();
				setState(5449);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5451);
				param_name();
				setState(5452);
				func_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5454);
				arg_class();
				setState(5455);
				func_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5457);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PlPgSqlParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_arg_class);
		try {
			setState(5466);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5460);
				match(IN_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5461);
				match(OUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5462);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5463);
				match(IN_P);
				setState(5464);
				match(OUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5465);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5468);
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_func_type);
		try {
			setState(5484);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5472);
				type_function_name();
				setState(5473);
				attrs(0);
				setState(5474);
				match(T__5);
				setState(5475);
				match(TYPE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5477);
				match(SETOF);
				setState(5478);
				type_function_name();
				setState(5479);
				attrs(0);
				setState(5480);
				match(T__5);
				setState(5481);
				match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5483);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_func_arg_with_default);
		try {
			setState(5495);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5486);
				func_arg();
				setState(5487);
				match(T__6);
				setState(5488);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5490);
				func_arg();
				setState(5491);
				match(DEFAULT);
				setState(5492);
				a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5494);
				func_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public Createfunc_opt_itemContext createfunc_opt_item() {
			return getRuleContext(Createfunc_opt_itemContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		return createfunc_opt_list(0);
	}

	private Createfunc_opt_listContext createfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, _parentState);
		Createfunc_opt_listContext _prevctx = _localctx;
		int _startState = 720;
		enterRecursionRule(_localctx, 720, RULE_createfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5498);
			createfunc_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5504);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createfunc_opt_list);
					setState(5500);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5501);
					createfunc_opt_item();
					}
					} 
				}
				setState(5506);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlPgSqlParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(PlPgSqlParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PlPgSqlParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PlPgSqlParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PlPgSqlParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PlPgSqlParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PlPgSqlParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PlPgSqlParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PlPgSqlParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PlPgSqlParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlPgSqlParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PlPgSqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PlPgSqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PlPgSqlParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PlPgSqlParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_common_func_opt_item);
		try {
			setState(5538);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5507);
				match(COST);
				setState(5508);
				numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5509);
				match(ROWS);
				setState(5510);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5511);
				functionSetResetClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5512);
				match(CALLED);
				setState(5513);
				match(ON);
				setState(5514);
				match(NULL_P);
				setState(5515);
				match(INPUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5516);
				match(RETURNS);
				setState(5517);
				match(NULL_P);
				setState(5518);
				match(ON);
				setState(5519);
				match(NULL_P);
				setState(5520);
				match(INPUT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5521);
				match(STRICT_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5522);
				match(IMMUTABLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5523);
				match(STABLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5524);
				match(VOLATILE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5525);
				match(EXTERNAL);
				setState(5526);
				match(SECURITY);
				setState(5527);
				match(DEFINER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5528);
				match(EXTERNAL);
				setState(5529);
				match(SECURITY);
				setState(5530);
				match(INVOKER);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5531);
				match(SECURITY);
				setState(5532);
				match(DEFINER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5533);
				match(SECURITY);
				setState(5534);
				match(INVOKER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5535);
				match(LEAKPROOF);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5536);
				match(NOT);
				setState(5537);
				match(LEAKPROOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_createfunc_opt_item);
		try {
			setState(5546);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5540);
				match(AS);
				setState(5541);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5542);
				match(LANGUAGE);
				setState(5543);
				colId_or_Sconst();
				}
				break;
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case NOT:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5544);
				common_func_opt_item();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5545);
				match(WINDOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_func_as);
		try {
			setState(5553);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				sconst();
				setState(5549);
				match(T__4);
				setState(5550);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5552);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_opt_definition);
		try {
			setState(5558);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5555);
				match(WITH);
				setState(5556);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5560);
			param_name();
			setState(5561);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public Table_func_columnContext table_func_column() {
			return getRuleContext(Table_func_columnContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 732;
		enterRecursionRule(_localctx, 732, RULE_table_func_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5564);
			table_func_column();
			}
			_ctx.stop = _input.LT(-1);
			setState(5571);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					setState(5566);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5567);
					match(T__4);
					setState(5568);
					table_func_column();
					}
					} 
				}
				setState(5573);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterFunctionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public AlterFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStmtContext alterFunctionStmt() throws RecognitionException {
		AlterFunctionStmtContext _localctx = new AlterFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_alterFunctionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5574);
			match(ALTER);
			setState(5575);
			match(FUNCTION);
			setState(5576);
			function_with_argtypes();
			setState(5577);
			alterfunc_opt_list(0);
			setState(5578);
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 736;
		enterRecursionRule(_localctx, 736, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5581);
			common_func_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5587);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					setState(5583);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5584);
					common_func_opt_item();
					}
					} 
				}
				setState(5589);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_opt_restrict);
		try {
			setState(5592);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5590);
				match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveFuncStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public RemoveFuncStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeFuncStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveFuncStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveFuncStmtContext removeFuncStmt() throws RecognitionException {
		RemoveFuncStmtContext _localctx = new RemoveFuncStmtContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_removeFuncStmt);
		try {
			setState(5608);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5594);
				match(DROP);
				setState(5595);
				match(FUNCTION);
				setState(5596);
				func_name();
				setState(5597);
				func_args();
				setState(5598);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5600);
				match(DROP);
				setState(5601);
				match(FUNCTION);
				setState(5602);
				match(IF_P);
				setState(5603);
				match(EXISTS);
				setState(5604);
				func_name();
				setState(5605);
				func_args();
				setState(5606);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveAggrStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public RemoveAggrStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeAggrStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveAggrStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveAggrStmtContext removeAggrStmt() throws RecognitionException {
		RemoveAggrStmtContext _localctx = new RemoveAggrStmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_removeAggrStmt);
		try {
			setState(5624);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5610);
				match(DROP);
				setState(5611);
				match(AGGREGATE);
				setState(5612);
				func_name();
				setState(5613);
				aggr_args();
				setState(5614);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5616);
				match(DROP);
				setState(5617);
				match(AGGREGATE);
				setState(5618);
				match(IF_P);
				setState(5619);
				match(EXISTS);
				setState(5620);
				func_name();
				setState(5621);
				aggr_args();
				setState(5622);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveOperStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public RemoveOperStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeOperStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRemoveOperStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveOperStmtContext removeOperStmt() throws RecognitionException {
		RemoveOperStmtContext _localctx = new RemoveOperStmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_removeOperStmt);
		try {
			setState(5640);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5626);
				match(DROP);
				setState(5627);
				match(OPERATOR);
				setState(5628);
				any_operator();
				setState(5629);
				oper_argtypes();
				setState(5630);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5632);
				match(DROP);
				setState(5633);
				match(OPERATOR);
				setState(5634);
				match(IF_P);
				setState(5635);
				match(EXISTS);
				setState(5636);
				any_operator();
				setState(5637);
				oper_argtypes();
				setState(5638);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode NONE() { return getToken(PlPgSqlParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_oper_argtypes);
		try {
			setState(5664);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5642);
				match(T__2);
				setState(5643);
				typename();
				setState(5644);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5646);
				match(T__2);
				setState(5647);
				match(NONE);
				setState(5648);
				match(T__4);
				setState(5649);
				typename();
				setState(5650);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5652);
				match(T__2);
				setState(5653);
				typename();
				setState(5654);
				match(T__4);
				setState(5655);
				match(NONE);
				setState(5656);
				match(T__3);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5658);
				match(T__2);
				setState(5659);
				typename();
				setState(5660);
				match(T__4);
				setState(5661);
				typename();
				setState(5662);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_any_operator);
		try {
			setState(5671);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5666);
				colId();
				setState(5667);
				match(T__9);
				setState(5668);
				any_operator();
				}
				break;
			case T__5:
			case T__6:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(5670);
				all_Op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DoStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDoStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStmtContext doStmt() throws RecognitionException {
		DoStmtContext _localctx = new DoStmtContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_doStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5673);
			match(DO);
			setState(5674);
			dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public Dostmt_opt_itemContext dostmt_opt_item() {
			return getRuleContext(Dostmt_opt_itemContext.class,0);
		}
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 752;
		enterRecursionRule(_localctx, 752, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5677);
			dostmt_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5683);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					setState(5679);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5680);
					dostmt_opt_item();
					}
					} 
				}
				setState(5685);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_dostmt_opt_item);
		try {
			setState(5689);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(5686);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5687);
				match(LANGUAGE);
				setState(5688);
				colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public CreateCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCastStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastStmtContext createCastStmt() throws RecognitionException {
		CreateCastStmtContext _localctx = new CreateCastStmtContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_createCastStmt);
		try {
			setState(5725);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5691);
				match(CREATE);
				setState(5692);
				match(CAST);
				setState(5693);
				match(T__2);
				setState(5694);
				typename();
				setState(5695);
				match(AS);
				setState(5696);
				typename();
				setState(5697);
				match(T__3);
				setState(5698);
				match(WITH);
				setState(5699);
				match(FUNCTION);
				setState(5700);
				function_with_argtypes();
				setState(5701);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5703);
				match(CREATE);
				setState(5704);
				match(CAST);
				setState(5705);
				match(T__2);
				setState(5706);
				typename();
				setState(5707);
				match(AS);
				setState(5708);
				typename();
				setState(5709);
				match(T__3);
				setState(5710);
				match(WITHOUT);
				setState(5711);
				match(FUNCTION);
				setState(5712);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5714);
				match(CREATE);
				setState(5715);
				match(CAST);
				setState(5716);
				match(T__2);
				setState(5717);
				typename();
				setState(5718);
				match(AS);
				setState(5719);
				typename();
				setState(5720);
				match(T__3);
				setState(5721);
				match(WITH);
				setState(5722);
				match(INOUT);
				setState(5723);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PlPgSqlParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PlPgSqlParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_cast_context);
		try {
			setState(5732);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5727);
				match(AS);
				setState(5728);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5729);
				match(AS);
				setState(5730);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCastStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastStmtContext dropCastStmt() throws RecognitionException {
		DropCastStmtContext _localctx = new DropCastStmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_dropCastStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5734);
			match(DROP);
			setState(5735);
			match(CAST);
			setState(5736);
			opt_if_exists();
			setState(5737);
			match(T__2);
			setState(5738);
			typename();
			setState(5739);
			match(AS);
			setState(5740);
			typename();
			setState(5741);
			match(T__3);
			setState(5742);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_opt_if_exists);
		try {
			setState(5747);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5744);
				match(IF_P);
				setState(5745);
				match(EXISTS);
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexStmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PlPgSqlParser.REINDEX, 0); }
		public Reindex_typeContext reindex_type() {
			return getRuleContext(Reindex_typeContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_forceContext opt_force() {
			return getRuleContext(Opt_forceContext.class,0);
		}
		public TerminalNode SYSTEM_P() { return getToken(PlPgSqlParser.SYSTEM_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public ReindexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReindexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexStmtContext reindexStmt() throws RecognitionException {
		ReindexStmtContext _localctx = new ReindexStmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_reindexStmt);
		try {
			setState(5764);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5749);
				match(REINDEX);
				setState(5750);
				reindex_type();
				setState(5751);
				qualified_name();
				setState(5752);
				opt_force();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5754);
				match(REINDEX);
				setState(5755);
				match(SYSTEM_P);
				setState(5756);
				name();
				setState(5757);
				opt_force();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5759);
				match(REINDEX);
				setState(5760);
				match(DATABASE);
				setState(5761);
				name();
				setState(5762);
				opt_force();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Reindex_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReindex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_typeContext reindex_type() throws RecognitionException {
		Reindex_typeContext _localctx = new Reindex_typeContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_reindex_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5766);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_forceContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PlPgSqlParser.FORCE, 0); }
		public Opt_forceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_force; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_force(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_forceContext opt_force() throws RecognitionException {
		Opt_forceContext _localctx = new Opt_forceContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_opt_force);
		try {
			setState(5770);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5768);
				match(FORCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PlPgSqlParser.RENAME, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ATTRIBUTE() { return getToken(PlPgSqlParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public List<Database_nameContext> database_name() {
			return getRuleContexts(Database_nameContext.class);
		}
		public Database_nameContext database_name(int i) {
			return getRuleContext(Database_nameContext.class,i);
		}
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public List<RoleIdContext> roleId() {
			return getRuleContexts(RoleIdContext.class);
		}
		public RoleIdContext roleId(int i) {
			return getRuleContext(RoleIdContext.class,i);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public RenameStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRenameStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameStmtContext renameStmt() throws RecognitionException {
		RenameStmtContext _localctx = new RenameStmtContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_renameStmt);
		try {
			setState(6110);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				match(ALTER);
				setState(5773);
				match(TABLE);
				setState(5774);
				relation_expr();
				setState(5775);
				match(RENAME);
				setState(5776);
				opt_column();
				setState(5777);
				name();
				setState(5778);
				match(TO);
				setState(5779);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5781);
				match(ALTER);
				setState(5782);
				match(TABLE);
				setState(5783);
				match(IF_P);
				setState(5784);
				match(EXISTS);
				setState(5785);
				relation_expr();
				setState(5786);
				match(RENAME);
				setState(5787);
				opt_column();
				setState(5788);
				name();
				setState(5789);
				match(TO);
				setState(5790);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5792);
				match(ALTER);
				setState(5793);
				match(FOREIGN);
				setState(5794);
				match(TABLE);
				setState(5795);
				relation_expr();
				setState(5796);
				match(RENAME);
				setState(5797);
				opt_column();
				setState(5798);
				name();
				setState(5799);
				match(TO);
				setState(5800);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5802);
				match(ALTER);
				setState(5803);
				match(FOREIGN);
				setState(5804);
				match(TABLE);
				setState(5805);
				match(IF_P);
				setState(5806);
				match(EXISTS);
				setState(5807);
				relation_expr();
				setState(5808);
				match(RENAME);
				setState(5809);
				opt_column();
				setState(5810);
				name();
				setState(5811);
				match(TO);
				setState(5812);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5814);
				match(ALTER);
				setState(5815);
				match(TYPE_P);
				setState(5816);
				any_name();
				setState(5817);
				match(RENAME);
				setState(5818);
				match(ATTRIBUTE);
				setState(5819);
				name();
				setState(5820);
				match(TO);
				setState(5821);
				name();
				setState(5822);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5824);
				match(ALTER);
				setState(5825);
				match(AGGREGATE);
				setState(5826);
				func_name();
				setState(5827);
				aggr_args();
				setState(5828);
				match(RENAME);
				setState(5829);
				match(TO);
				setState(5830);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5832);
				match(ALTER);
				setState(5833);
				match(DOMAIN_P);
				setState(5834);
				any_name();
				setState(5835);
				match(RENAME);
				setState(5836);
				match(CONSTRAINT);
				setState(5837);
				name();
				setState(5838);
				match(TO);
				setState(5839);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5841);
				match(ALTER);
				setState(5842);
				opt_procedural();
				setState(5843);
				match(LANGUAGE);
				setState(5844);
				name();
				setState(5845);
				match(RENAME);
				setState(5846);
				match(TO);
				setState(5847);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5849);
				match(ALTER);
				setState(5850);
				match(OPERATOR);
				setState(5851);
				match(CLASS);
				setState(5852);
				any_name();
				setState(5853);
				match(USING);
				setState(5854);
				access_method();
				setState(5855);
				match(RENAME);
				setState(5856);
				match(TO);
				setState(5857);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5859);
				match(ALTER);
				setState(5860);
				match(OPERATOR);
				setState(5861);
				match(FAMILY);
				setState(5862);
				any_name();
				setState(5863);
				match(USING);
				setState(5864);
				access_method();
				setState(5865);
				match(RENAME);
				setState(5866);
				match(TO);
				setState(5867);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5869);
				match(ALTER);
				setState(5870);
				match(TABLE);
				setState(5871);
				relation_expr();
				setState(5872);
				match(RENAME);
				setState(5873);
				match(CONSTRAINT);
				setState(5874);
				name();
				setState(5875);
				match(TO);
				setState(5876);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5878);
				match(ALTER);
				setState(5879);
				match(TRIGGER);
				setState(5880);
				name();
				setState(5881);
				match(ON);
				setState(5882);
				qualified_name();
				setState(5883);
				match(RENAME);
				setState(5884);
				match(TO);
				setState(5885);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5887);
				match(ALTER);
				setState(5888);
				match(COLLATION);
				setState(5889);
				any_name();
				setState(5890);
				match(RENAME);
				setState(5891);
				match(TO);
				setState(5892);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5894);
				match(ALTER);
				setState(5895);
				match(CONVERSION_P);
				setState(5896);
				any_name();
				setState(5897);
				match(RENAME);
				setState(5898);
				match(TO);
				setState(5899);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5901);
				match(ALTER);
				setState(5902);
				match(DATABASE);
				setState(5903);
				database_name();
				setState(5904);
				match(RENAME);
				setState(5905);
				match(TO);
				setState(5906);
				database_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5908);
				match(ALTER);
				setState(5909);
				match(DOMAIN_P);
				setState(5910);
				any_name();
				setState(5911);
				match(RENAME);
				setState(5912);
				match(TO);
				setState(5913);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5915);
				match(ALTER);
				setState(5916);
				match(FOREIGN);
				setState(5917);
				match(DATA_P);
				setState(5918);
				match(WRAPPER);
				setState(5919);
				name();
				setState(5920);
				match(RENAME);
				setState(5921);
				match(TO);
				setState(5922);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5924);
				match(ALTER);
				setState(5925);
				match(FUNCTION);
				setState(5926);
				function_with_argtypes();
				setState(5927);
				match(RENAME);
				setState(5928);
				match(TO);
				setState(5929);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5931);
				match(ALTER);
				setState(5932);
				match(GROUP_P);
				setState(5933);
				roleId();
				setState(5934);
				match(RENAME);
				setState(5935);
				match(TO);
				setState(5936);
				roleId();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5938);
				match(ALTER);
				setState(5939);
				match(SCHEMA);
				setState(5940);
				name();
				setState(5941);
				match(RENAME);
				setState(5942);
				match(TO);
				setState(5943);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5945);
				match(ALTER);
				setState(5946);
				match(SERVER);
				setState(5947);
				name();
				setState(5948);
				match(RENAME);
				setState(5949);
				match(TO);
				setState(5950);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5952);
				match(ALTER);
				setState(5953);
				match(TABLE);
				setState(5954);
				relation_expr();
				setState(5955);
				match(RENAME);
				setState(5956);
				match(TO);
				setState(5957);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5959);
				match(ALTER);
				setState(5960);
				match(TABLE);
				setState(5961);
				match(IF_P);
				setState(5962);
				match(EXISTS);
				setState(5963);
				relation_expr();
				setState(5964);
				match(RENAME);
				setState(5965);
				match(TO);
				setState(5966);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5968);
				match(ALTER);
				setState(5969);
				match(SEQUENCE);
				setState(5970);
				qualified_name();
				setState(5971);
				match(RENAME);
				setState(5972);
				match(TO);
				setState(5973);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5975);
				match(ALTER);
				setState(5976);
				match(SEQUENCE);
				setState(5977);
				match(IF_P);
				setState(5978);
				match(EXISTS);
				setState(5979);
				qualified_name();
				setState(5980);
				match(RENAME);
				setState(5981);
				match(TO);
				setState(5982);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5984);
				match(ALTER);
				setState(5985);
				match(VIEW);
				setState(5986);
				qualified_name();
				setState(5987);
				match(RENAME);
				setState(5988);
				match(TO);
				setState(5989);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5991);
				match(ALTER);
				setState(5992);
				match(VIEW);
				setState(5993);
				match(IF_P);
				setState(5994);
				match(EXISTS);
				setState(5995);
				qualified_name();
				setState(5996);
				match(RENAME);
				setState(5997);
				match(TO);
				setState(5998);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6000);
				match(ALTER);
				setState(6001);
				match(INDEX);
				setState(6002);
				qualified_name();
				setState(6003);
				match(RENAME);
				setState(6004);
				match(TO);
				setState(6005);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6007);
				match(ALTER);
				setState(6008);
				match(INDEX);
				setState(6009);
				match(IF_P);
				setState(6010);
				match(EXISTS);
				setState(6011);
				qualified_name();
				setState(6012);
				match(RENAME);
				setState(6013);
				match(TO);
				setState(6014);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6016);
				match(ALTER);
				setState(6017);
				match(FOREIGN);
				setState(6018);
				match(TABLE);
				setState(6019);
				relation_expr();
				setState(6020);
				match(RENAME);
				setState(6021);
				match(TO);
				setState(6022);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6024);
				match(ALTER);
				setState(6025);
				match(FOREIGN);
				setState(6026);
				match(TABLE);
				setState(6027);
				match(IF_P);
				setState(6028);
				match(EXISTS);
				setState(6029);
				relation_expr();
				setState(6030);
				match(RENAME);
				setState(6031);
				match(TO);
				setState(6032);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6034);
				match(ALTER);
				setState(6035);
				match(ROLE);
				setState(6036);
				roleId();
				setState(6037);
				match(RENAME);
				setState(6038);
				match(TO);
				setState(6039);
				roleId();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6041);
				match(ALTER);
				setState(6042);
				match(USER);
				setState(6043);
				roleId();
				setState(6044);
				match(RENAME);
				setState(6045);
				match(TO);
				setState(6046);
				roleId();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6048);
				match(ALTER);
				setState(6049);
				match(TABLESPACE);
				setState(6050);
				name();
				setState(6051);
				match(RENAME);
				setState(6052);
				match(TO);
				setState(6053);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6055);
				match(ALTER);
				setState(6056);
				match(TABLESPACE);
				setState(6057);
				name();
				setState(6058);
				match(SET);
				setState(6059);
				reloptions();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6061);
				match(ALTER);
				setState(6062);
				match(TABLESPACE);
				setState(6063);
				name();
				setState(6064);
				match(RESET);
				setState(6065);
				reloptions();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6067);
				match(ALTER);
				setState(6068);
				match(TEXT_P);
				setState(6069);
				match(SEARCH);
				setState(6070);
				match(PARSER);
				setState(6071);
				any_name();
				setState(6072);
				match(RENAME);
				setState(6073);
				match(TO);
				setState(6074);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6076);
				match(ALTER);
				setState(6077);
				match(TEXT_P);
				setState(6078);
				match(SEARCH);
				setState(6079);
				match(DICTIONARY);
				setState(6080);
				any_name();
				setState(6081);
				match(RENAME);
				setState(6082);
				match(TO);
				setState(6083);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6085);
				match(ALTER);
				setState(6086);
				match(TEXT_P);
				setState(6087);
				match(SEARCH);
				setState(6088);
				match(TEMPLATE);
				setState(6089);
				any_name();
				setState(6090);
				match(RENAME);
				setState(6091);
				match(TO);
				setState(6092);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6094);
				match(ALTER);
				setState(6095);
				match(TEXT_P);
				setState(6096);
				match(SEARCH);
				setState(6097);
				match(CONFIGURATION);
				setState(6098);
				any_name();
				setState(6099);
				match(RENAME);
				setState(6100);
				match(TO);
				setState(6101);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6103);
				match(ALTER);
				setState(6104);
				match(TYPE_P);
				setState(6105);
				any_name();
				setState(6106);
				match(RENAME);
				setState(6107);
				match(TO);
				setState(6108);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_opt_column);
		try {
			setState(6114);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6112);
				match(COLUMN);
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_opt_set_data);
		try {
			setState(6119);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6116);
				match(SET);
				setState(6117);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterObjectSchemaStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public AlterObjectSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterObjectSchemaStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterObjectSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterObjectSchemaStmtContext alterObjectSchemaStmt() throws RecognitionException {
		AlterObjectSchemaStmtContext _localctx = new AlterObjectSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_alterObjectSchemaStmt);
		try {
			setState(6301);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6121);
				match(ALTER);
				setState(6122);
				match(AGGREGATE);
				setState(6123);
				func_name();
				setState(6124);
				aggr_args();
				setState(6125);
				match(SET);
				setState(6126);
				match(SCHEMA);
				setState(6127);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6129);
				match(ALTER);
				setState(6130);
				match(OPERATOR);
				setState(6131);
				any_operator();
				setState(6132);
				oper_argtypes();
				setState(6133);
				match(SET);
				setState(6134);
				match(SCHEMA);
				setState(6135);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6137);
				match(ALTER);
				setState(6138);
				match(OPERATOR);
				setState(6139);
				match(CLASS);
				setState(6140);
				any_name();
				setState(6141);
				match(USING);
				setState(6142);
				access_method();
				setState(6143);
				match(SET);
				setState(6144);
				match(SCHEMA);
				setState(6145);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6147);
				match(ALTER);
				setState(6148);
				match(OPERATOR);
				setState(6149);
				match(FAMILY);
				setState(6150);
				any_name();
				setState(6151);
				match(USING);
				setState(6152);
				access_method();
				setState(6153);
				match(SET);
				setState(6154);
				match(SCHEMA);
				setState(6155);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6157);
				match(ALTER);
				setState(6158);
				match(COLLATION);
				setState(6159);
				any_name();
				setState(6160);
				match(SET);
				setState(6161);
				match(SCHEMA);
				setState(6162);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6164);
				match(ALTER);
				setState(6165);
				match(CONVERSION_P);
				setState(6166);
				any_name();
				setState(6167);
				match(SET);
				setState(6168);
				match(SCHEMA);
				setState(6169);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6171);
				match(ALTER);
				setState(6172);
				match(DOMAIN_P);
				setState(6173);
				any_name();
				setState(6174);
				match(SET);
				setState(6175);
				match(SCHEMA);
				setState(6176);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6178);
				match(ALTER);
				setState(6179);
				match(EXTENSION);
				setState(6180);
				any_name();
				setState(6181);
				match(SET);
				setState(6182);
				match(SCHEMA);
				setState(6183);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6185);
				match(ALTER);
				setState(6186);
				match(FUNCTION);
				setState(6187);
				function_with_argtypes();
				setState(6188);
				match(SET);
				setState(6189);
				match(SCHEMA);
				setState(6190);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6192);
				match(ALTER);
				setState(6193);
				match(TABLE);
				setState(6194);
				relation_expr();
				setState(6195);
				match(SET);
				setState(6196);
				match(SCHEMA);
				setState(6197);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6199);
				match(ALTER);
				setState(6200);
				match(TABLE);
				setState(6201);
				match(IF_P);
				setState(6202);
				match(EXISTS);
				setState(6203);
				relation_expr();
				setState(6204);
				match(SET);
				setState(6205);
				match(SCHEMA);
				setState(6206);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6208);
				match(ALTER);
				setState(6209);
				match(TEXT_P);
				setState(6210);
				match(SEARCH);
				setState(6211);
				match(PARSER);
				setState(6212);
				any_name();
				setState(6213);
				match(SET);
				setState(6214);
				match(SCHEMA);
				setState(6215);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6217);
				match(ALTER);
				setState(6218);
				match(TEXT_P);
				setState(6219);
				match(SEARCH);
				setState(6220);
				match(DICTIONARY);
				setState(6221);
				any_name();
				setState(6222);
				match(SET);
				setState(6223);
				match(SCHEMA);
				setState(6224);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6226);
				match(ALTER);
				setState(6227);
				match(TEXT_P);
				setState(6228);
				match(SEARCH);
				setState(6229);
				match(TEMPLATE);
				setState(6230);
				any_name();
				setState(6231);
				match(SET);
				setState(6232);
				match(SCHEMA);
				setState(6233);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6235);
				match(ALTER);
				setState(6236);
				match(TEXT_P);
				setState(6237);
				match(SEARCH);
				setState(6238);
				match(CONFIGURATION);
				setState(6239);
				any_name();
				setState(6240);
				match(SET);
				setState(6241);
				match(SCHEMA);
				setState(6242);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6244);
				match(ALTER);
				setState(6245);
				match(SEQUENCE);
				setState(6246);
				qualified_name();
				setState(6247);
				match(SET);
				setState(6248);
				match(SCHEMA);
				setState(6249);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6251);
				match(ALTER);
				setState(6252);
				match(SEQUENCE);
				setState(6253);
				match(IF_P);
				setState(6254);
				match(EXISTS);
				setState(6255);
				qualified_name();
				setState(6256);
				match(SET);
				setState(6257);
				match(SCHEMA);
				setState(6258);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6260);
				match(ALTER);
				setState(6261);
				match(VIEW);
				setState(6262);
				qualified_name();
				setState(6263);
				match(SET);
				setState(6264);
				match(SCHEMA);
				setState(6265);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6267);
				match(ALTER);
				setState(6268);
				match(VIEW);
				setState(6269);
				match(IF_P);
				setState(6270);
				match(EXISTS);
				setState(6271);
				qualified_name();
				setState(6272);
				match(SET);
				setState(6273);
				match(SCHEMA);
				setState(6274);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6276);
				match(ALTER);
				setState(6277);
				match(FOREIGN);
				setState(6278);
				match(TABLE);
				setState(6279);
				relation_expr();
				setState(6280);
				match(SET);
				setState(6281);
				match(SCHEMA);
				setState(6282);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6284);
				match(ALTER);
				setState(6285);
				match(FOREIGN);
				setState(6286);
				match(TABLE);
				setState(6287);
				match(IF_P);
				setState(6288);
				match(EXISTS);
				setState(6289);
				relation_expr();
				setState(6290);
				match(SET);
				setState(6291);
				match(SCHEMA);
				setState(6292);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6294);
				match(ALTER);
				setState(6295);
				match(TYPE_P);
				setState(6296);
				any_name();
				setState(6297);
				match(SET);
				setState(6298);
				match(SCHEMA);
				setState(6299);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOwnerStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PlPgSqlParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public AlterOwnerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOwnerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterOwnerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOwnerStmtContext alterOwnerStmt() throws RecognitionException {
		AlterOwnerStmtContext _localctx = new AlterOwnerStmtContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_alterOwnerStmt);
		try {
			setState(6445);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6303);
				match(ALTER);
				setState(6304);
				match(AGGREGATE);
				setState(6305);
				func_name();
				setState(6306);
				aggr_args();
				setState(6307);
				match(OWNER);
				setState(6308);
				match(TO);
				setState(6309);
				roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6311);
				match(ALTER);
				setState(6312);
				opt_procedural();
				setState(6313);
				match(LANGUAGE);
				setState(6314);
				name();
				setState(6315);
				match(OWNER);
				setState(6316);
				match(TO);
				setState(6317);
				roleId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6319);
				match(ALTER);
				setState(6320);
				match(OPERATOR);
				setState(6321);
				any_operator();
				setState(6322);
				oper_argtypes();
				setState(6323);
				match(OWNER);
				setState(6324);
				match(TO);
				setState(6325);
				roleId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6327);
				match(ALTER);
				setState(6328);
				match(OPERATOR);
				setState(6329);
				match(CLASS);
				setState(6330);
				any_name();
				setState(6331);
				match(USING);
				setState(6332);
				access_method();
				setState(6333);
				match(OWNER);
				setState(6334);
				match(TO);
				setState(6335);
				roleId();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6337);
				match(ALTER);
				setState(6338);
				match(OPERATOR);
				setState(6339);
				match(FAMILY);
				setState(6340);
				any_name();
				setState(6341);
				match(USING);
				setState(6342);
				access_method();
				setState(6343);
				match(OWNER);
				setState(6344);
				match(TO);
				setState(6345);
				roleId();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6347);
				match(ALTER);
				setState(6348);
				match(COLLATION);
				setState(6349);
				any_name();
				setState(6350);
				match(OWNER);
				setState(6351);
				match(TO);
				setState(6352);
				roleId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6354);
				match(ALTER);
				setState(6355);
				match(CONVERSION_P);
				setState(6356);
				any_name();
				setState(6357);
				match(OWNER);
				setState(6358);
				match(TO);
				setState(6359);
				roleId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6361);
				match(ALTER);
				setState(6362);
				match(DATABASE);
				setState(6363);
				database_name();
				setState(6364);
				match(OWNER);
				setState(6365);
				match(TO);
				setState(6366);
				roleId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6368);
				match(ALTER);
				setState(6369);
				match(DOMAIN_P);
				setState(6370);
				any_name();
				setState(6371);
				match(OWNER);
				setState(6372);
				match(TO);
				setState(6373);
				roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6375);
				match(ALTER);
				setState(6376);
				match(FUNCTION);
				setState(6377);
				function_with_argtypes();
				setState(6378);
				match(OWNER);
				setState(6379);
				match(TO);
				setState(6380);
				roleId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6382);
				match(ALTER);
				setState(6383);
				match(LARGE_P);
				setState(6384);
				match(OBJECT_P);
				setState(6385);
				numericOnly();
				setState(6386);
				match(OWNER);
				setState(6387);
				match(TO);
				setState(6388);
				roleId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6390);
				match(ALTER);
				setState(6391);
				match(SCHEMA);
				setState(6392);
				name();
				setState(6393);
				match(OWNER);
				setState(6394);
				match(TO);
				setState(6395);
				roleId();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6397);
				match(ALTER);
				setState(6398);
				match(TYPE_P);
				setState(6399);
				any_name();
				setState(6400);
				match(OWNER);
				setState(6401);
				match(TO);
				setState(6402);
				roleId();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6404);
				match(ALTER);
				setState(6405);
				match(TABLESPACE);
				setState(6406);
				name();
				setState(6407);
				match(OWNER);
				setState(6408);
				match(TO);
				setState(6409);
				roleId();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6411);
				match(ALTER);
				setState(6412);
				match(TEXT_P);
				setState(6413);
				match(SEARCH);
				setState(6414);
				match(DICTIONARY);
				setState(6415);
				any_name();
				setState(6416);
				match(OWNER);
				setState(6417);
				match(TO);
				setState(6418);
				roleId();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6420);
				match(ALTER);
				setState(6421);
				match(TEXT_P);
				setState(6422);
				match(SEARCH);
				setState(6423);
				match(CONFIGURATION);
				setState(6424);
				any_name();
				setState(6425);
				match(OWNER);
				setState(6426);
				match(TO);
				setState(6427);
				roleId();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6429);
				match(ALTER);
				setState(6430);
				match(FOREIGN);
				setState(6431);
				match(DATA_P);
				setState(6432);
				match(WRAPPER);
				setState(6433);
				name();
				setState(6434);
				match(OWNER);
				setState(6435);
				match(TO);
				setState(6436);
				roleId();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6438);
				match(ALTER);
				setState(6439);
				match(SERVER);
				setState(6440);
				name();
				setState(6441);
				match(OWNER);
				setState(6442);
				match(TO);
				setState(6443);
				roleId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleStmtContext ruleStmt() throws RecognitionException {
		RuleStmtContext _localctx = new RuleStmtContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_ruleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6447);
			match(CREATE);
			setState(6448);
			opt_or_replace();
			setState(6449);
			match(RULE);
			setState(6450);
			name();
			setState(6451);
			match(AS);
			setState(6452);
			match(ON);
			setState(6453);
			event();
			setState(6454);
			match(TO);
			setState(6455);
			qualified_name();
			setState(6456);
			where_clause();
			setState(6457);
			match(DO);
			setState(6458);
			opt_instead();
			setState(6459);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PlPgSqlParser.NOTHING, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_ruleActionList);
		try {
			setState(6467);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6461);
				match(T__2);
				setState(6462);
				ruleActionMulti(0);
				setState(6463);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6465);
				ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6466);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() {
			return getRuleContext(RuleActionStmtOrEmptyContext.class,0);
		}
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		return ruleActionMulti(0);
	}

	private RuleActionMultiContext ruleActionMulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, _parentState);
		RuleActionMultiContext _prevctx = _localctx;
		int _startState = 784;
		enterRecursionRule(_localctx, 784, RULE_ruleActionMulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6470);
			ruleActionStmtOrEmpty();
			}
			_ctx.stop = _input.LT(-1);
			setState(6477);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleActionMultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ruleActionMulti);
					setState(6472);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6473);
					match(T__1);
					setState(6474);
					ruleActionStmtOrEmpty();
					}
					} 
				}
				setState(6479);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_ruleActionStmt);
		try {
			setState(6485);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6480);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6481);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6482);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6483);
				deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6484);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtOrEmptyContext extends ParserRuleContext {
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public RuleActionStmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmtOrEmpty; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRuleActionStmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() throws RecognitionException {
		RuleActionStmtOrEmptyContext _localctx = new RuleActionStmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_ruleActionStmtOrEmpty);
		try {
			setState(6489);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6487);
				ruleActionStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6491);
			_la = _input.LA(1);
			if ( !(_la==DELETE_P || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PlPgSqlParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PlPgSqlParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_opt_instead);
		try {
			setState(6496);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6493);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(6494);
				match(ALSO);
				}
				break;
			case T__2:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case SELECT:
			case TABLE:
			case UPDATE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropRuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRuleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleStmtContext dropRuleStmt() throws RecognitionException {
		DropRuleStmtContext _localctx = new DropRuleStmtContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_dropRuleStmt);
		try {
			setState(6514);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6498);
				match(DROP);
				setState(6499);
				match(RULE);
				setState(6500);
				name();
				setState(6501);
				match(ON);
				setState(6502);
				any_name();
				setState(6503);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6505);
				match(DROP);
				setState(6506);
				match(RULE);
				setState(6507);
				match(IF_P);
				setState(6508);
				match(EXISTS);
				setState(6509);
				name();
				setState(6510);
				match(ON);
				setState(6511);
				any_name();
				setState(6512);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PlPgSqlParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_notifyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6516);
			match(NOTIFY);
			setState(6517);
			colId();
			setState(6518);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_notify_payload);
		try {
			setState(6523);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6520);
				match(T__4);
				setState(6521);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenStmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PlPgSqlParser.LISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ListenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitListenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenStmtContext listenStmt() throws RecognitionException {
		ListenStmtContext _localctx = new ListenStmtContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_listenStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6525);
			match(LISTEN);
			setState(6526);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenStmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PlPgSqlParser.UNLISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public UnlistenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUnlistenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenStmtContext unlistenStmt() throws RecognitionException {
		UnlistenStmtContext _localctx = new UnlistenStmtContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_unlistenStmt);
		try {
			setState(6532);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6528);
				match(UNLISTEN);
				setState(6529);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6530);
				match(UNLISTEN);
				setState(6531);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStmtContext extends ParserRuleContext {
		public TerminalNode BEGIN_P() { return getToken(PlPgSqlParser.BEGIN_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode ROLLBACK() { return getToken(PlPgSqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlPgSqlParser.SAVEPOINT, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ABORT_P() { return getToken(PlPgSqlParser.ABORT_P, 0); }
		public TerminalNode START() { return getToken(PlPgSqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PlPgSqlParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public TerminalNode RELEASE() { return getToken(PlPgSqlParser.RELEASE, 0); }
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PlPgSqlParser.PREPARED, 0); }
		public TransactionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransactionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStmtContext transactionStmt() throws RecognitionException {
		TransactionStmtContext _localctx = new TransactionStmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_transactionStmt);
		try {
			setState(6576);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6534);
				match(BEGIN_P);
				setState(6535);
				opt_transaction();
				setState(6536);
				transaction_mode_list_or_empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6538);
				match(ROLLBACK);
				setState(6539);
				opt_transaction();
				setState(6540);
				match(TO);
				setState(6541);
				match(SAVEPOINT);
				setState(6542);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6544);
				match(ROLLBACK);
				setState(6545);
				opt_transaction();
				setState(6546);
				match(TO);
				setState(6547);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6549);
				match(ABORT_P);
				setState(6550);
				opt_transaction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6551);
				match(START);
				setState(6552);
				match(TRANSACTION);
				setState(6553);
				transaction_mode_list_or_empty();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6554);
				match(COMMIT);
				setState(6555);
				opt_transaction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6556);
				match(END_P);
				setState(6557);
				opt_transaction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6558);
				match(ROLLBACK);
				setState(6559);
				opt_transaction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6560);
				match(SAVEPOINT);
				setState(6561);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6562);
				match(RELEASE);
				setState(6563);
				match(SAVEPOINT);
				setState(6564);
				colId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6565);
				match(RELEASE);
				setState(6566);
				colId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6567);
				match(PREPARE);
				setState(6568);
				match(TRANSACTION);
				setState(6569);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6570);
				match(COMMIT);
				setState(6571);
				match(PREPARED);
				setState(6572);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6573);
				match(ROLLBACK);
				setState(6574);
				match(PREPARED);
				setState(6575);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PlPgSqlParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_opt_transaction);
		try {
			setState(6581);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6578);
				match(WORK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6579);
				match(TRANSACTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlPgSqlParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_transaction_mode_item);
		try {
			setState(6593);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6583);
				match(ISOLATION);
				setState(6584);
				match(LEVEL);
				setState(6585);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6586);
				match(READ);
				setState(6587);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6588);
				match(READ);
				setState(6589);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6590);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6591);
				match(NOT);
				setState(6592);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public Transaction_mode_itemContext transaction_mode_item() {
			return getRuleContext(Transaction_mode_itemContext.class,0);
		}
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 810;
		enterRecursionRule(_localctx, 810, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6596);
			transaction_mode_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6605);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6603);
					switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(6598);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6599);
						match(T__4);
						setState(6600);
						transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(6601);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6602);
						transaction_mode_item();
						}
						break;
					}
					} 
				}
				setState(6607);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_transaction_mode_list_or_empty);
		try {
			setState(6610);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6608);
				transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public ViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewStmtContext viewStmt() throws RecognitionException {
		ViewStmtContext _localctx = new ViewStmtContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_viewStmt);
		try {
			setState(6634);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6612);
				match(CREATE);
				setState(6613);
				optTemp();
				setState(6614);
				match(VIEW);
				setState(6615);
				qualified_name();
				setState(6616);
				opt_column_list();
				setState(6617);
				opt_reloptions();
				setState(6618);
				match(AS);
				setState(6619);
				selectStmt();
				setState(6620);
				opt_check_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6622);
				match(CREATE);
				setState(6623);
				match(OR);
				setState(6624);
				match(REPLACE);
				setState(6625);
				optTemp();
				setState(6626);
				match(VIEW);
				setState(6627);
				qualified_name();
				setState(6628);
				opt_column_list();
				setState(6629);
				opt_reloptions();
				setState(6630);
				match(AS);
				setState(6631);
				selectStmt();
				setState(6632);
				opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PlPgSqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_opt_check_option);
		try {
			setState(6648);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6636);
				match(WITH);
				setState(6637);
				match(CHECK);
				setState(6638);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6639);
				match(WITH);
				setState(6640);
				match(CASCADED);
				setState(6641);
				match(CHECK);
				setState(6642);
				match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6643);
				match(WITH);
				setState(6644);
				match(LOCAL);
				setState(6645);
				match(CHECK);
				setState(6646);
				match(OPTION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PlPgSqlParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLoadStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStmtContext loadStmt() throws RecognitionException {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_loadStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6650);
			match(LOAD);
			setState(6651);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbStmtContext createdbStmt() throws RecognitionException {
		CreatedbStmtContext _localctx = new CreatedbStmtContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_createdbStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6653);
			match(CREATE);
			setState(6654);
			match(DATABASE);
			setState(6655);
			database_name();
			setState(6656);
			opt_with();
			setState(6657);
			createdb_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public Createdb_opt_itemContext createdb_opt_item() {
			return getRuleContext(Createdb_opt_itemContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		return createdb_opt_list(0);
	}

	private Createdb_opt_listContext createdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, _parentState);
		Createdb_opt_listContext _prevctx = _localctx;
		int _startState = 822;
		enterRecursionRule(_localctx, 822, RULE_createdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6664);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_list);
					setState(6660);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6661);
					createdb_opt_item();
					}
					} 
				}
				setState(6666);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PlPgSqlParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(PlPgSqlParser.ENCODING, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode LC_COLLATE_P() { return getToken(PlPgSqlParser.LC_COLLATE_P, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(PlPgSqlParser.LC_CTYPE_P, 0); }
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_createdb_opt_item);
		try {
			setState(6732);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6667);
				match(TABLESPACE);
				setState(6668);
				opt_equal();
				setState(6669);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6671);
				match(LOCATION);
				setState(6672);
				opt_equal();
				setState(6673);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6675);
				match(TEMPLATE);
				setState(6676);
				opt_equal();
				setState(6677);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6679);
				match(ENCODING);
				setState(6680);
				opt_equal();
				setState(6681);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6683);
				match(ENCODING);
				setState(6684);
				opt_equal();
				setState(6685);
				iconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6687);
				match(LC_COLLATE_P);
				setState(6688);
				opt_equal();
				setState(6689);
				sconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6691);
				match(LC_CTYPE_P);
				setState(6692);
				opt_equal();
				setState(6693);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6695);
				match(CONNECTION);
				setState(6696);
				match(LIMIT);
				setState(6697);
				opt_equal();
				setState(6698);
				signedIconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6700);
				match(OWNER);
				setState(6701);
				opt_equal();
				setState(6702);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6704);
				match(TABLESPACE);
				setState(6705);
				opt_equal();
				setState(6706);
				match(DEFAULT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6708);
				match(LOCATION);
				setState(6709);
				opt_equal();
				setState(6710);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6712);
				match(TEMPLATE);
				setState(6713);
				opt_equal();
				setState(6714);
				match(DEFAULT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6716);
				match(ENCODING);
				setState(6717);
				opt_equal();
				setState(6718);
				match(DEFAULT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6720);
				match(LC_COLLATE_P);
				setState(6721);
				opt_equal();
				setState(6722);
				match(DEFAULT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6724);
				match(LC_CTYPE_P);
				setState(6725);
				opt_equal();
				setState(6726);
				match(DEFAULT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6728);
				match(OWNER);
				setState(6729);
				opt_equal();
				setState(6730);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_opt_equal);
		try {
			setState(6736);
			switch (_input.LA(1)) {
			case T__6:
				enterOuterAlt(_localctx, 1);
				{
				setState(6734);
				match(T__6);
				}
				break;
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterDatabaseStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDatabaseStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStmtContext alterDatabaseStmt() throws RecognitionException {
		AlterDatabaseStmtContext _localctx = new AlterDatabaseStmtContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_alterDatabaseStmt);
		try {
			setState(6751);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6738);
				match(ALTER);
				setState(6739);
				match(DATABASE);
				setState(6740);
				database_name();
				setState(6741);
				opt_with();
				setState(6742);
				alterdb_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6744);
				match(ALTER);
				setState(6745);
				match(DATABASE);
				setState(6746);
				database_name();
				setState(6747);
				match(SET);
				setState(6748);
				match(TABLESPACE);
				setState(6749);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDatabaseSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSetStmtContext alterDatabaseSetStmt() throws RecognitionException {
		AlterDatabaseSetStmtContext _localctx = new AlterDatabaseSetStmtContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_alterDatabaseSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6753);
			match(ALTER);
			setState(6754);
			match(DATABASE);
			setState(6755);
			database_name();
			setState(6756);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterdb_opt_listContext extends ParserRuleContext {
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public Alterdb_opt_itemContext alterdb_opt_item() {
			return getRuleContext(Alterdb_opt_itemContext.class,0);
		}
		public Alterdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterdb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_listContext alterdb_opt_list() throws RecognitionException {
		return alterdb_opt_list(0);
	}

	private Alterdb_opt_listContext alterdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterdb_opt_listContext _localctx = new Alterdb_opt_listContext(_ctx, _parentState);
		Alterdb_opt_listContext _prevctx = _localctx;
		int _startState = 832;
		enterRecursionRule(_localctx, 832, RULE_alterdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6763);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterdb_opt_list);
					setState(6759);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6760);
					alterdb_opt_item();
					}
					} 
				}
				setState(6765);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alterdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Alterdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterdb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_itemContext alterdb_opt_item() throws RecognitionException {
		Alterdb_opt_itemContext _localctx = new Alterdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_alterdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6766);
			match(CONNECTION);
			setState(6767);
			match(LIMIT);
			setState(6768);
			opt_equal();
			setState(6769);
			signedIconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public DropdbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDropdbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbStmtContext dropdbStmt() throws RecognitionException {
		DropdbStmtContext _localctx = new DropdbStmtContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_dropdbStmt);
		try {
			setState(6779);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6771);
				match(DROP);
				setState(6772);
				match(DATABASE);
				setState(6773);
				database_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6774);
				match(DROP);
				setState(6775);
				match(DATABASE);
				setState(6776);
				match(IF_P);
				setState(6777);
				match(EXISTS);
				setState(6778);
				database_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainStmtContext createDomainStmt() throws RecognitionException {
		CreateDomainStmtContext _localctx = new CreateDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_createDomainStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			match(CREATE);
			setState(6782);
			match(DOMAIN_P);
			setState(6783);
			any_name();
			setState(6784);
			opt_as();
			setState(6785);
			typename();
			setState(6786);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PlPgSqlParser.VALIDATE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public AlterDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainStmtContext alterDomainStmt() throws RecognitionException {
		AlterDomainStmtContext _localctx = new AlterDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_alterDomainStmt);
		try {
			setState(6838);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6788);
				match(ALTER);
				setState(6789);
				match(DOMAIN_P);
				setState(6790);
				any_name();
				setState(6791);
				match(DROP);
				setState(6792);
				match(CONSTRAINT);
				setState(6793);
				name();
				setState(6794);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6796);
				match(ALTER);
				setState(6797);
				match(DOMAIN_P);
				setState(6798);
				any_name();
				setState(6799);
				match(DROP);
				setState(6800);
				match(CONSTRAINT);
				setState(6801);
				match(IF_P);
				setState(6802);
				match(EXISTS);
				setState(6803);
				name();
				setState(6804);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6806);
				match(ALTER);
				setState(6807);
				match(DOMAIN_P);
				setState(6808);
				any_name();
				setState(6809);
				alter_column_default();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6811);
				match(ALTER);
				setState(6812);
				match(DOMAIN_P);
				setState(6813);
				any_name();
				setState(6814);
				match(ADD_P);
				setState(6815);
				tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6817);
				match(ALTER);
				setState(6818);
				match(DOMAIN_P);
				setState(6819);
				any_name();
				setState(6820);
				match(VALIDATE);
				setState(6821);
				match(CONSTRAINT);
				setState(6822);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6824);
				match(ALTER);
				setState(6825);
				match(DOMAIN_P);
				setState(6826);
				any_name();
				setState(6827);
				match(DROP);
				setState(6828);
				match(NOT);
				setState(6829);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6831);
				match(ALTER);
				setState(6832);
				match(DOMAIN_P);
				setState(6833);
				any_name();
				setState(6834);
				match(SET);
				setState(6835);
				match(NOT);
				setState(6836);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_opt_as);
		try {
			setState(6842);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6840);
				match(AS);
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_SCHEMA:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSDictionaryStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTSDictionaryStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSDictionaryStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTSDictionaryStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSDictionaryStmtContext alterTSDictionaryStmt() throws RecognitionException {
		AlterTSDictionaryStmtContext _localctx = new AlterTSDictionaryStmtContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_alterTSDictionaryStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6844);
			match(ALTER);
			setState(6845);
			match(TEXT_P);
			setState(6846);
			match(SEARCH);
			setState(6847);
			match(DICTIONARY);
			setState(6848);
			any_name();
			setState(6849);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSConfigurationStmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PlPgSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PlPgSqlParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public AlterTSConfigurationStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSConfigurationStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlterTSConfigurationStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSConfigurationStmtContext alterTSConfigurationStmt() throws RecognitionException {
		AlterTSConfigurationStmtContext _localctx = new AlterTSConfigurationStmtContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_alterTSConfigurationStmt);
		try {
			setState(6923);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6851);
				match(ALTER);
				setState(6852);
				match(TEXT_P);
				setState(6853);
				match(SEARCH);
				setState(6854);
				match(CONFIGURATION);
				setState(6855);
				any_name();
				setState(6856);
				match(ALTER);
				setState(6857);
				match(MAPPING);
				setState(6858);
				match(FOR);
				setState(6859);
				name_list(0);
				setState(6860);
				match(REPLACE);
				setState(6861);
				any_name();
				setState(6862);
				match(WITH);
				setState(6863);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6865);
				match(ALTER);
				setState(6866);
				match(TEXT_P);
				setState(6867);
				match(SEARCH);
				setState(6868);
				match(CONFIGURATION);
				setState(6869);
				any_name();
				setState(6870);
				match(ADD_P);
				setState(6871);
				match(MAPPING);
				setState(6872);
				match(FOR);
				setState(6873);
				name_list(0);
				setState(6874);
				match(WITH);
				setState(6875);
				any_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6877);
				match(ALTER);
				setState(6878);
				match(TEXT_P);
				setState(6879);
				match(SEARCH);
				setState(6880);
				match(CONFIGURATION);
				setState(6881);
				any_name();
				setState(6882);
				match(ALTER);
				setState(6883);
				match(MAPPING);
				setState(6884);
				match(FOR);
				setState(6885);
				name_list(0);
				setState(6886);
				match(WITH);
				setState(6887);
				any_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6889);
				match(ALTER);
				setState(6890);
				match(TEXT_P);
				setState(6891);
				match(SEARCH);
				setState(6892);
				match(CONFIGURATION);
				setState(6893);
				any_name();
				setState(6894);
				match(ALTER);
				setState(6895);
				match(MAPPING);
				setState(6896);
				match(REPLACE);
				setState(6897);
				any_name();
				setState(6898);
				match(WITH);
				setState(6899);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6901);
				match(ALTER);
				setState(6902);
				match(TEXT_P);
				setState(6903);
				match(SEARCH);
				setState(6904);
				match(CONFIGURATION);
				setState(6905);
				any_name();
				setState(6906);
				match(DROP);
				setState(6907);
				match(MAPPING);
				setState(6908);
				match(FOR);
				setState(6909);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6911);
				match(ALTER);
				setState(6912);
				match(TEXT_P);
				setState(6913);
				match(SEARCH);
				setState(6914);
				match(CONFIGURATION);
				setState(6915);
				any_name();
				setState(6916);
				match(DROP);
				setState(6917);
				match(MAPPING);
				setState(6918);
				match(IF_P);
				setState(6919);
				match(EXISTS);
				setState(6920);
				match(FOR);
				setState(6921);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public CreateConversionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCreateConversionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionStmtContext createConversionStmt() throws RecognitionException {
		CreateConversionStmtContext _localctx = new CreateConversionStmtContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_createConversionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6925);
			match(CREATE);
			setState(6926);
			opt_default();
			setState(6927);
			match(CONVERSION_P);
			setState(6928);
			any_name();
			setState(6929);
			match(FOR);
			setState(6930);
			sconst();
			setState(6931);
			match(TO);
			setState(6932);
			sconst();
			setState(6933);
			match(FROM);
			setState(6934);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterStmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PlPgSqlParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public ClusterStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitClusterStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterStmtContext clusterStmt() throws RecognitionException {
		ClusterStmtContext _localctx = new ClusterStmtContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_clusterStmt);
		try {
			setState(6949);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6936);
				match(CLUSTER);
				setState(6937);
				opt_verbose();
				setState(6938);
				qualified_name();
				setState(6939);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6941);
				match(CLUSTER);
				setState(6942);
				opt_verbose();
				setState(6943);
				index_name();
				setState(6944);
				match(ON);
				setState(6945);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6947);
				match(CLUSTER);
				setState(6948);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_cluster_index_specification);
		try {
			setState(6954);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6951);
				match(USING);
				setState(6952);
				index_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumStmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PlPgSqlParser.VACUUM, 0); }
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public VacuumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumStmtContext vacuumStmt() throws RecognitionException {
		VacuumStmtContext _localctx = new VacuumStmtContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_vacuumStmt);
		try {
			setState(6985);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6956);
				match(VACUUM);
				setState(6957);
				match(T__2);
				setState(6958);
				vacuum_option_list(0);
				setState(6959);
				match(T__3);
				setState(6960);
				qualified_name();
				setState(6961);
				opt_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6963);
				match(VACUUM);
				setState(6964);
				match(T__2);
				setState(6965);
				vacuum_option_list(0);
				setState(6966);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6968);
				match(VACUUM);
				setState(6969);
				opt_full();
				setState(6970);
				opt_freeze();
				setState(6971);
				opt_verbose();
				setState(6972);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6974);
				match(VACUUM);
				setState(6975);
				opt_full();
				setState(6976);
				opt_freeze();
				setState(6977);
				opt_verbose();
				setState(6978);
				analyzeStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6980);
				match(VACUUM);
				setState(6981);
				opt_full();
				setState(6982);
				opt_freeze();
				setState(6983);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_option_listContext extends ParserRuleContext {
		public Vacuum_option_elemContext vacuum_option_elem() {
			return getRuleContext(Vacuum_option_elemContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Vacuum_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuum_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_listContext vacuum_option_list() throws RecognitionException {
		return vacuum_option_list(0);
	}

	private Vacuum_option_listContext vacuum_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vacuum_option_listContext _localctx = new Vacuum_option_listContext(_ctx, _parentState);
		Vacuum_option_listContext _prevctx = _localctx;
		int _startState = 856;
		enterRecursionRule(_localctx, 856, RULE_vacuum_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6988);
			vacuum_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6995);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vacuum_option_list);
					setState(6990);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6991);
					match(T__4);
					setState(6992);
					vacuum_option_elem();
					}
					} 
				}
				setState(6997);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Vacuum_option_elemContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public Vacuum_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitVacuum_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_elemContext vacuum_option_elem() throws RecognitionException {
		Vacuum_option_elemContext _localctx = new Vacuum_option_elemContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_vacuum_option_elem);
		try {
			setState(7002);
			switch (_input.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6998);
				analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6999);
				match(VERBOSE);
				}
				break;
			case FREEZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7000);
				match(FREEZE);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7001);
				match(FULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeStmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public AnalyzeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAnalyzeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeStmtContext analyzeStmt() throws RecognitionException {
		AnalyzeStmtContext _localctx = new AnalyzeStmtContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_analyzeStmt);
		try {
			setState(7012);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7004);
				analyze_keyword();
				setState(7005);
				opt_verbose();
				setState(7006);
				qualified_name();
				setState(7007);
				opt_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7009);
				analyze_keyword();
				setState(7010);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PlPgSqlParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PlPgSqlParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7014);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_opt_verbose);
		try {
			setState(7018);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7016);
				match(VERBOSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_opt_full);
		try {
			setState(7022);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7020);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_opt_freeze);
		try {
			setState(7026);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7024);
				match(FREEZE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_opt_name_list);
		try {
			setState(7033);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7028);
				match(T__2);
				setState(7029);
				name_list(0);
				setState(7030);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlPgSqlParser.EXPLAIN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public ExplainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStmtContext explainStmt() throws RecognitionException {
		ExplainStmtContext _localctx = new ExplainStmtContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_explainStmt);
		try {
			setState(7051);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7035);
				match(EXPLAIN);
				setState(7036);
				match(T__2);
				setState(7037);
				explain_option_list(0);
				setState(7038);
				match(T__3);
				setState(7039);
				explainableStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7041);
				match(EXPLAIN);
				setState(7042);
				analyze_keyword();
				setState(7043);
				opt_verbose();
				setState(7044);
				explainableStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7046);
				match(EXPLAIN);
				setState(7047);
				explainableStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7048);
				match(EXPLAIN);
				setState(7049);
				match(VERBOSE);
				setState(7050);
				explainableStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_explainableStmt);
		try {
			setState(7060);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7053);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7054);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7055);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7056);
				deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7057);
				declareCursorStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7058);
				createAsStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7059);
				executeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public Explain_option_elemContext explain_option_elem() {
			return getRuleContext(Explain_option_elemContext.class,0);
		}
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 876;
		enterRecursionRule(_localctx, 876, RULE_explain_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7063);
			explain_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(7070);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					setState(7065);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7066);
					match(T__4);
					setState(7067);
					explain_option_elem();
					}
					} 
				}
				setState(7072);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7073);
			explain_option_name();
			setState(7074);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_explain_option_name);
		try {
			setState(7079);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7076);
				colId();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7077);
				analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7078);
				match(VERBOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_explain_option_arg);
		try {
			setState(7084);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7081);
				opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7082);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepareStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrepareStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStmtContext prepareStmt() throws RecognitionException {
		PrepareStmtContext _localctx = new PrepareStmtContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_prepareStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7086);
			match(PREPARE);
			setState(7087);
			name();
			setState(7088);
			prep_type_clause();
			setState(7089);
			match(AS);
			setState(7090);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_prep_type_clause);
		try {
			setState(7097);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(7092);
				match(T__2);
				setState(7093);
				type_list(0);
				setState(7094);
				match(T__3);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_preparableStmt);
		try {
			setState(7103);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7099);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7100);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7101);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7102);
				deleteStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode EXECUTE() { return getToken(PlPgSqlParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_executeStmt);
		try {
			setState(7119);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7105);
				match(CREATE);
				setState(7106);
				optTemp();
				setState(7107);
				match(TABLE);
				setState(7108);
				create_as_target();
				setState(7109);
				match(AS);
				setState(7110);
				match(EXECUTE);
				setState(7111);
				name();
				setState(7112);
				execute_param_clause();
				setState(7113);
				opt_with_data();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7115);
				match(EXECUTE);
				setState(7116);
				name();
				setState(7117);
				execute_param_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_execute_param_clause);
		try {
			setState(7126);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7121);
				match(T__2);
				setState(7122);
				expr_list(0);
				setState(7123);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateStmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PlPgSqlParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public DeallocateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeallocateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateStmtContext deallocateStmt() throws RecognitionException {
		DeallocateStmtContext _localctx = new DeallocateStmtContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_deallocateStmt);
		try {
			setState(7138);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7128);
				match(DEALLOCATE);
				setState(7129);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7130);
				match(DEALLOCATE);
				setState(7131);
				match(PREPARE);
				setState(7132);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7133);
				match(DEALLOCATE);
				setState(7134);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7135);
				match(DEALLOCATE);
				setState(7136);
				match(PREPARE);
				setState(7137);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmtContext insertStmt() throws RecognitionException {
		InsertStmtContext _localctx = new InsertStmtContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_insertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7140);
			opt_with_clause();
			setState(7141);
			match(INSERT);
			setState(7142);
			match(INTO);
			setState(7143);
			qualified_name();
			setState(7144);
			insert_rest();
			setState(7145);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_insert_rest);
		try {
			setState(7155);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7147);
				match(T__2);
				setState(7148);
				insert_column_list(0);
				setState(7149);
				match(T__3);
				setState(7150);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7152);
				selectStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7153);
				match(DEFAULT);
				setState(7154);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Insert_column_itemContext insert_column_item() {
			return getRuleContext(Insert_column_itemContext.class,0);
		}
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 900;
		enterRecursionRule(_localctx, 900, RULE_insert_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7158);
			insert_column_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7165);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					setState(7160);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7161);
					match(T__4);
					setState(7162);
					insert_column_item();
					}
					} 
				}
				setState(7167);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7168);
			colId();
			setState(7169);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PlPgSqlParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_returning_clause);
		try {
			setState(7176);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7171);
				match(RETURNING);
				setState(7172);
				target_list(0);
				setState(7173);
				into_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public DeleteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeleteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStmtContext deleteStmt() throws RecognitionException {
		DeleteStmtContext _localctx = new DeleteStmtContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_deleteStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			opt_with_clause();
			setState(7179);
			match(DELETE_P);
			setState(7180);
			match(FROM);
			setState(7181);
			relation_expr_opt_alias();
			setState(7182);
			using_clause();
			setState(7183);
			where_or_current_clause();
			setState(7184);
			returning_clause();
			setState(7185);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_using_clause);
		try {
			setState(7190);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7187);
				match(USING);
				setState(7188);
				from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PlPgSqlParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLockStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStmtContext lockStmt() throws RecognitionException {
		LockStmtContext _localctx = new LockStmtContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_lockStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7192);
			match(LOCK_P);
			setState(7193);
			opt_table();
			setState(7194);
			relation_expr_list(0);
			setState(7195);
			opt_lock();
			setState(7196);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlPgSqlParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_opt_lock);
		try {
			setState(7203);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7198);
				match(IN_P);
				setState(7199);
				lock_type();
				setState(7200);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PlPgSqlParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PlPgSqlParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlPgSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_lock_type);
		try {
			setState(7221);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7205);
				match(ACCESS);
				setState(7206);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7207);
				match(ROW);
				setState(7208);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7209);
				match(ROW);
				setState(7210);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7211);
				match(SHARE);
				setState(7212);
				match(UPDATE);
				setState(7213);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7214);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7215);
				match(SHARE);
				setState(7216);
				match(ROW);
				setState(7217);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7218);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7219);
				match(ACCESS);
				setState(7220);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PlPgSqlParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_nowait);
		try {
			setState(7225);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7223);
				match(NOWAIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public UpdateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUpdateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStmtContext updateStmt() throws RecognitionException {
		UpdateStmtContext _localctx = new UpdateStmtContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_updateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7227);
			opt_with_clause();
			setState(7228);
			match(UPDATE);
			setState(7229);
			relation_expr_opt_alias();
			setState(7230);
			match(SET);
			setState(7231);
			set_clause_list(0);
			setState(7232);
			from_clause();
			setState(7233);
			where_or_current_clause();
			setState(7234);
			returning_clause();
			setState(7235);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 920;
		enterRecursionRule(_localctx, 920, RULE_set_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7238);
			set_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(7245);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					setState(7240);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7241);
					match(T__4);
					setState(7242);
					set_clause();
					}
					} 
				}
				setState(7247);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Single_set_clauseContext single_set_clause() {
			return getRuleContext(Single_set_clauseContext.class,0);
		}
		public Multiple_set_clauseContext multiple_set_clause() {
			return getRuleContext(Multiple_set_clauseContext.class,0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_set_clause);
		try {
			setState(7250);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7248);
				single_set_clause();
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7249);
				multiple_set_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Single_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSingle_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_set_clauseContext single_set_clause() throws RecognitionException {
		Single_set_clauseContext _localctx = new Single_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_single_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7252);
			set_target();
			setState(7253);
			match(T__6);
			setState(7254);
			ctext_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_set_clauseContext extends ParserRuleContext {
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Multiple_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitMultiple_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_set_clauseContext multiple_set_clause() throws RecognitionException {
		Multiple_set_clauseContext _localctx = new Multiple_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_multiple_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7256);
			match(T__2);
			setState(7257);
			set_target_list(0);
			setState(7258);
			match(T__3);
			setState(7259);
			match(T__6);
			setState(7260);
			ctext_row();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7262);
			colId();
			setState(7263);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 930;
		enterRecursionRule(_localctx, 930, RULE_set_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7266);
			set_target();
			}
			_ctx.stop = _input.LT(-1);
			setState(7273);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					setState(7268);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7269);
					match(T__4);
					setState(7270);
					set_target();
					}
					} 
				}
				setState(7275);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DeclareCursorStmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PlPgSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PlPgSqlParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public DeclareCursorStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDeclareCursorStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStmtContext declareCursorStmt() throws RecognitionException {
		DeclareCursorStmtContext _localctx = new DeclareCursorStmtContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_declareCursorStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7276);
			match(DECLARE);
			setState(7277);
			cursor_name();
			setState(7278);
			cursor_options(0);
			setState(7279);
			match(CURSOR);
			setState(7280);
			opt_hold();
			setState(7281);
			match(FOR);
			setState(7282);
			selectStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7284);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PlPgSqlParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PlPgSqlParser.INSENSITIVE, 0); }
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 936;
		enterRecursionRule(_localctx, 936, RULE_cursor_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7298);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7296);
					switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(7287);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7288);
						match(NO);
						setState(7289);
						match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(7290);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7291);
						match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(7292);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7293);
						match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(7294);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7295);
						match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				setState(7300);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PlPgSqlParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opt_hold);
		try {
			setState(7306);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7302);
				match(WITH);
				setState(7303);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7304);
				match(WITHOUT);
				setState(7305);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelectStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtContext selectStmt() throws RecognitionException {
		SelectStmtContext _localctx = new SelectStmtContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_selectStmt);
		try {
			setState(7310);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7308);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7309);
				select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		return select_with_parens(0);
	}

	private Select_with_parensContext select_with_parens(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, _parentState);
		Select_with_parensContext _prevctx = _localctx;
		int _startState = 942;
		enterRecursionRule(_localctx, 942, RULE_select_with_parens, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7321);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(7313);
				match(T__2);
				setState(7314);
				select_no_parens();
				setState(7315);
				match(T__3);
				}
				break;
			case 2:
				{
				setState(7317);
				match(T__2);
				setState(7318);
				select_with_parens(0);
				setState(7319);
				match(T__3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7340);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7338);
					switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
					case 1:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7323);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7324);
						match(UNION);
						setState(7325);
						opt_all();
						setState(7326);
						select_clause();
						}
						break;
					case 2:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7328);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7329);
						match(INTERSECT);
						setState(7330);
						opt_all();
						setState(7331);
						select_clause();
						}
						break;
					case 3:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(7333);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7334);
						match(EXCEPT);
						setState(7335);
						opt_all();
						setState(7336);
						select_clause();
						}
						break;
					}
					} 
				}
				setState(7342);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_select_no_parens);
		try {
			setState(7379);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7343);
				with_clause();
				setState(7344);
				select_clause();
				setState(7345);
				opt_sort_clause();
				setState(7346);
				for_locking_clause();
				setState(7347);
				opt_select_limit();
				setState(7348);
				into_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7350);
				with_clause();
				setState(7351);
				select_clause();
				setState(7352);
				opt_sort_clause();
				setState(7353);
				select_limit();
				setState(7354);
				opt_for_locking_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7356);
				select_clause();
				setState(7357);
				opt_sort_clause();
				setState(7358);
				for_locking_clause();
				setState(7359);
				opt_select_limit();
				setState(7360);
				into_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7362);
				select_clause();
				setState(7363);
				opt_sort_clause();
				setState(7364);
				select_limit();
				setState(7365);
				into_clause();
				setState(7366);
				opt_for_locking_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7368);
				with_clause();
				setState(7369);
				select_clause();
				setState(7370);
				sort_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7372);
				select_clause();
				setState(7373);
				sort_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7375);
				with_clause();
				setState(7376);
				select_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7378);
				simple_select(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_select_clause);
		try {
			setState(7383);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7381);
				simple_select(0);
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7382);
				select_with_parens(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public Opt_distinctContext opt_distinct() {
			return getRuleContext(Opt_distinctContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 948;
		enterRecursionRule(_localctx, 948, RULE_simple_select, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7419);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(7386);
				match(SELECT);
				setState(7387);
				opt_distinct();
				setState(7388);
				target_list(0);
				setState(7389);
				into_clause();
				setState(7390);
				from_clause();
				setState(7391);
				where_clause();
				setState(7392);
				group_clause();
				setState(7393);
				having_clause();
				setState(7394);
				window_clause();
				}
				break;
			case 2:
				{
				setState(7396);
				match(SELECT);
				setState(7397);
				opt_distinct();
				setState(7398);
				target_list(0);
				setState(7399);
				from_clause();
				setState(7400);
				into_clause();
				setState(7401);
				where_clause();
				setState(7402);
				group_clause();
				setState(7403);
				having_clause();
				setState(7404);
				window_clause();
				}
				break;
			case 3:
				{
				setState(7406);
				match(SELECT);
				setState(7407);
				opt_distinct();
				setState(7408);
				target_list(0);
				setState(7409);
				from_clause();
				setState(7410);
				where_clause();
				setState(7411);
				into_clause();
				setState(7412);
				group_clause();
				setState(7413);
				having_clause();
				setState(7414);
				window_clause();
				}
				break;
			case 4:
				{
				setState(7416);
				values_clause(0);
				}
				break;
			case 5:
				{
				setState(7417);
				match(TABLE);
				setState(7418);
				relation_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7438);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,365,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7436);
					switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7421);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7422);
						match(UNION);
						setState(7423);
						opt_all();
						setState(7424);
						select_clause();
						}
						break;
					case 2:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7426);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7427);
						match(INTERSECT);
						setState(7428);
						opt_all();
						setState(7429);
						select_clause();
						}
						break;
					case 3:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(7431);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7432);
						match(EXCEPT);
						setState(7433);
						opt_all();
						setState(7434);
						select_clause();
						}
						break;
					}
					} 
				}
				setState(7440);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,365,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PlPgSqlParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_with_clause);
		try {
			setState(7446);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7441);
				match(WITH);
				setState(7442);
				cte_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7443);
				match(WITH);
				setState(7444);
				match(RECURSIVE);
				setState(7445);
				cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public Common_table_exprContext common_table_expr() {
			return getRuleContext(Common_table_exprContext.class,0);
		}
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cte_listContext _localctx = new Cte_listContext(_ctx, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 952;
		enterRecursionRule(_localctx, 952, RULE_cte_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7449);
			common_table_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(7456);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					setState(7451);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7452);
					match(T__4);
					setState(7453);
					common_table_expr();
					}
					} 
				}
				setState(7458);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7459);
			name();
			setState(7460);
			opt_name_list();
			setState(7461);
			match(AS);
			setState(7462);
			match(T__2);
			setState(7463);
			preparableStmt();
			setState(7464);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_opt_with_clause);
		try {
			setState(7468);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(7466);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public TerminalNode STRICT_P() { return getToken(PlPgSqlParser.STRICT_P, 0); }
		public Into_clause_argumentsContext into_clause_arguments() {
			return getRuleContext(Into_clause_argumentsContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_into_clause);
		try {
			setState(7481);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7470);
				match(INTO);
				setState(7472);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(7471);
					match(STRICT_P);
					}
					break;
				}
				setState(7474);
				optTempTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7475);
				match(INTO);
				setState(7477);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(7476);
					match(STRICT_P);
					}
					break;
				}
				setState(7479);
				into_clause_arguments();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_argumentsContext extends ParserRuleContext {
		public List<Into_clause_argumentContext> into_clause_argument() {
			return getRuleContexts(Into_clause_argumentContext.class);
		}
		public Into_clause_argumentContext into_clause_argument(int i) {
			return getRuleContext(Into_clause_argumentContext.class,i);
		}
		public Into_clause_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_arguments; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInto_clause_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_argumentsContext into_clause_arguments() throws RecognitionException {
		Into_clause_argumentsContext _localctx = new Into_clause_argumentsContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_into_clause_arguments);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7483);
			into_clause_argument();
			setState(7488);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7484);
					match(T__4);
					setState(7485);
					into_clause_argument();
					}
					} 
				}
				setState(7490);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_argumentContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Into_clause_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_argument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInto_clause_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_argumentContext into_clause_argument() throws RecognitionException {
		Into_clause_argumentContext _localctx = new Into_clause_argumentContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_into_clause_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7491);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PlPgSqlParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PlPgSqlParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_optTempTableName);
		try {
			setState(7528);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7493);
				match(TEMPORARY);
				setState(7494);
				opt_table();
				setState(7495);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7497);
				match(TEMP);
				setState(7498);
				opt_table();
				setState(7499);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7501);
				match(LOCAL);
				setState(7502);
				match(TEMPORARY);
				setState(7503);
				opt_table();
				setState(7504);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7506);
				match(LOCAL);
				setState(7507);
				match(TEMP);
				setState(7508);
				opt_table();
				setState(7509);
				qualified_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7511);
				match(GLOBAL);
				setState(7512);
				match(TEMPORARY);
				setState(7513);
				opt_table();
				setState(7514);
				qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7516);
				match(GLOBAL);
				setState(7517);
				match(TEMP);
				setState(7518);
				opt_table();
				setState(7519);
				qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7521);
				match(UNLOGGED);
				setState(7522);
				opt_table();
				setState(7523);
				qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7525);
				match(TABLE);
				setState(7526);
				qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7527);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_opt_table);
		try {
			setState(7532);
			switch (_input.LA(1)) {
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7530);
				match(TABLE);
				}
				break;
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public Opt_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_all(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_allContext opt_all() throws RecognitionException {
		Opt_allContext _localctx = new Opt_allContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_opt_all);
		try {
			setState(7537);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7534);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7535);
				match(DISTINCT);
				}
				break;
			case T__2:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_distinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Opt_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_distinct; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_distinctContext opt_distinct() throws RecognitionException {
		Opt_distinctContext _localctx = new Opt_distinctContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_opt_distinct);
		try {
			setState(7548);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7539);
				match(DISTINCT);
				setState(7540);
				match(ON);
				setState(7541);
				match(T__2);
				setState(7542);
				expr_list(0);
				setState(7543);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7545);
				match(DISTINCT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7546);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_opt_sort_clause);
		try {
			setState(7552);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7550);
				sort_clause();
				}
				break;
			case T__3:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7554);
			match(ORDER);
			setState(7555);
			match(BY);
			setState(7556);
			sortby_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public SortbyContext sortby() {
			return getRuleContext(SortbyContext.class,0);
		}
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		return sortby_list(0);
	}

	private Sortby_listContext sortby_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, _parentState);
		Sortby_listContext _prevctx = _localctx;
		int _startState = 976;
		enterRecursionRule(_localctx, 976, RULE_sortby_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7559);
			sortby();
			}
			_ctx.stop = _input.LT(-1);
			setState(7566);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sortby_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_sortby_list);
					setState(7561);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7562);
					match(T__4);
					setState(7563);
					sortby();
					}
					} 
				}
				setState(7568);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_sortby);
		try {
			setState(7578);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7569);
				a_expr(0);
				setState(7570);
				match(USING);
				setState(7571);
				qual_all_Op();
				setState(7572);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7574);
				a_expr(0);
				setState(7575);
				opt_asc_desc();
				setState(7576);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_select_limit);
		try {
			setState(7588);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7580);
				limit_clause();
				setState(7581);
				offset_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7583);
				offset_clause();
				setState(7584);
				limit_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7586);
				limit_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7587);
				offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_opt_select_limit);
		try {
			setState(7592);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7590);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Opt_select_fetch_first_valueContext opt_select_fetch_first_value() {
			return getRuleContext(Opt_select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_limit_clause);
		try {
			setState(7607);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7594);
				match(LIMIT);
				setState(7595);
				select_limit_value();
				setState(7596);
				match(T__4);
				setState(7597);
				select_offset_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7599);
				match(FETCH);
				setState(7600);
				first_or_next();
				setState(7601);
				opt_select_fetch_first_value();
				setState(7602);
				row_or_rows();
				setState(7603);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7605);
				match(LIMIT);
				setState(7606);
				select_limit_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PlPgSqlParser.OFFSET, 0); }
		public Select_offset_value2Context select_offset_value2() {
			return getRuleContext(Select_offset_value2Context.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_offset_clause);
		try {
			setState(7615);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7609);
				match(OFFSET);
				setState(7610);
				select_offset_value2();
				setState(7611);
				row_or_rows();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7613);
				match(OFFSET);
				setState(7614);
				select_offset_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_select_limit_value);
		try {
			setState(7619);
			switch (_input.LA(1)) {
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(7617);
				a_expr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7618);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7621);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_fetch_first_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_fetch_first_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_select_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_fetch_first_valueContext opt_select_fetch_first_value() throws RecognitionException {
		Opt_select_fetch_first_valueContext _localctx = new Opt_select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_opt_select_fetch_first_value);
		try {
			setState(7629);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(7623);
				match(T__2);
				setState(7624);
				a_expr(0);
				setState(7625);
				match(T__3);
				}
				break;
			case T__11:
			case T__14:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(7627);
				signedIconst();
				}
				break;
			case ROW:
			case ROWS:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_value2Context extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Select_offset_value2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value2; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSelect_offset_value2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_value2Context select_offset_value2() throws RecognitionException {
		Select_offset_value2Context _localctx = new Select_offset_value2Context(_ctx, getState());
		enterRule(_localctx, 994, RULE_select_offset_value2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7631);
			c_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7633);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PlPgSqlParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PlPgSqlParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7635);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_group_clause);
		try {
			setState(7641);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7637);
				match(GROUP_P);
				setState(7638);
				match(BY);
				setState(7639);
				expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlPgSqlParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_having_clause);
		try {
			setState(7646);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7643);
				match(HAVING);
				setState(7644);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_for_locking_clause);
		try {
			setState(7652);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7648);
				for_locking_items(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7649);
				match(FOR);
				setState(7650);
				match(READ);
				setState(7651);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_opt_for_locking_clause);
		try {
			setState(7656);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7654);
				for_locking_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public For_locking_itemContext for_locking_item() {
			return getRuleContext(For_locking_itemContext.class,0);
		}
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 1008;
		enterRecursionRule(_localctx, 1008, RULE_for_locking_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7659);
			for_locking_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7665);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,390,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					setState(7661);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7662);
					for_locking_item();
					}
					} 
				}
				setState(7667);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,390,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode SHARE() { return getToken(PlPgSqlParser.SHARE, 0); }
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_for_locking_item);
		try {
			setState(7678);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7668);
				match(FOR);
				setState(7669);
				match(UPDATE);
				setState(7670);
				locked_rels_list();
				setState(7671);
				opt_nowait();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7673);
				match(FOR);
				setState(7674);
				match(SHARE);
				setState(7675);
				locked_rels_list();
				setState(7676);
				opt_nowait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_locked_rels_list);
		try {
			setState(7683);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7680);
				match(OF);
				setState(7681);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 1014;
		enterRecursionRule(_localctx, 1014, RULE_values_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7686);
			match(VALUES);
			setState(7687);
			ctext_row();
			}
			_ctx.stop = _input.LT(-1);
			setState(7694);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,393,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					setState(7689);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7690);
					match(T__4);
					setState(7691);
					ctext_row();
					}
					} 
				}
				setState(7696);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,393,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_from_clause);
		try {
			setState(7700);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7697);
				match(FROM);
				setState(7698);
				from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		return from_list(0);
	}

	private From_listContext from_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_listContext _localctx = new From_listContext(_ctx, _parentState);
		From_listContext _prevctx = _localctx;
		int _startState = 1018;
		enterRecursionRule(_localctx, 1018, RULE_from_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7703);
			table_ref();
			}
			_ctx.stop = _input.LT(-1);
			setState(7710);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_list);
					setState(7705);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7706);
					match(T__4);
					setState(7707);
					table_ref();
					}
					} 
				}
				setState(7712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_table_ref);
		try {
			setState(7715);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7713);
				joined_table(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7714);
				table_ref2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref2Context extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Table_ref2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref2; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTable_ref2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref2Context table_ref2() throws RecognitionException {
		Table_ref2Context _localctx = new Table_ref2Context(_ctx, getState());
		enterRule(_localctx, 1022, RULE_table_ref2);
		try {
			setState(7748);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7717);
				relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7718);
				relation_expr();
				setState(7719);
				alias_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7721);
				func_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7722);
				func_table();
				setState(7723);
				alias_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7725);
				func_table();
				setState(7726);
				match(AS);
				setState(7727);
				match(T__2);
				setState(7728);
				tableFuncElementList(0);
				setState(7729);
				match(T__3);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7731);
				func_table();
				setState(7732);
				match(AS);
				setState(7733);
				colId();
				setState(7734);
				match(T__2);
				setState(7735);
				tableFuncElementList(0);
				setState(7736);
				match(T__3);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7738);
				func_table();
				setState(7739);
				colId();
				setState(7740);
				match(T__2);
				setState(7741);
				tableFuncElementList(0);
				setState(7742);
				match(T__3);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7744);
				select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7745);
				select_with_parens(0);
				setState(7746);
				alias_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public TerminalNode CROSS() { return getToken(PlPgSqlParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(PlPgSqlParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_qualContext join_qual() {
			return getRuleContext(Join_qualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PlPgSqlParser.NATURAL, 0); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 1024;
		enterRecursionRule(_localctx, 1024, RULE_joined_table, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7784);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(7751);
				match(T__2);
				setState(7752);
				table_ref();
				setState(7753);
				match(T__3);
				setState(7755);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(7754);
					alias_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7757);
				table_ref2();
				setState(7758);
				match(CROSS);
				setState(7759);
				match(JOIN);
				setState(7760);
				table_ref();
				}
				break;
			case 3:
				{
				setState(7762);
				table_ref2();
				setState(7763);
				join_type();
				setState(7764);
				match(JOIN);
				setState(7765);
				table_ref();
				setState(7766);
				join_qual();
				}
				break;
			case 4:
				{
				setState(7768);
				table_ref2();
				setState(7769);
				match(JOIN);
				setState(7770);
				table_ref();
				setState(7771);
				join_qual();
				}
				break;
			case 5:
				{
				setState(7773);
				table_ref2();
				setState(7774);
				match(NATURAL);
				setState(7775);
				join_type();
				setState(7776);
				match(JOIN);
				setState(7777);
				table_ref();
				}
				break;
			case 6:
				{
				setState(7779);
				table_ref2();
				setState(7780);
				match(NATURAL);
				setState(7781);
				match(JOIN);
				setState(7782);
				table_ref();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7813);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7811);
					switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7786);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7787);
						match(CROSS);
						setState(7788);
						match(JOIN);
						setState(7789);
						table_ref();
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7790);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7791);
						join_type();
						setState(7792);
						match(JOIN);
						setState(7793);
						table_ref();
						setState(7794);
						join_qual();
						}
						break;
					case 3:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7796);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7797);
						match(JOIN);
						setState(7798);
						table_ref();
						setState(7799);
						join_qual();
						}
						break;
					case 4:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7801);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7802);
						match(NATURAL);
						setState(7803);
						join_type();
						setState(7804);
						match(JOIN);
						setState(7805);
						table_ref();
						}
						break;
					case 5:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7807);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7808);
						match(NATURAL);
						setState(7809);
						match(JOIN);
						setState(7810);
						table_ref();
						}
						break;
					}
					} 
				}
				setState(7815);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_alias_clause);
		try {
			setState(7830);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7816);
				match(AS);
				setState(7817);
				colId();
				setState(7818);
				match(T__2);
				setState(7819);
				name_list(0);
				setState(7820);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7822);
				colId();
				setState(7823);
				match(T__2);
				setState(7824);
				name_list(0);
				setState(7825);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7827);
				match(AS);
				setState(7828);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7829);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public Join_outerContext join_outer() {
			return getRuleContext(Join_outerContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PlPgSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlPgSqlParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PlPgSqlParser.INNER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_join_type);
		try {
			setState(7839);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7832);
				match(FULL);
				setState(7833);
				join_outer();
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7834);
				match(LEFT);
				setState(7835);
				join_outer();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7836);
				match(RIGHT);
				setState(7837);
				join_outer();
				}
				break;
			case INNER_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(7838);
				match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_outerContext extends ParserRuleContext {
		public TerminalNode OUTER_P() { return getToken(PlPgSqlParser.OUTER_P, 0); }
		public Join_outerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_outer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoin_outer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_outerContext join_outer() throws RecognitionException {
		Join_outerContext _localctx = new Join_outerContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_join_outer);
		try {
			setState(7843);
			switch (_input.LA(1)) {
			case OUTER_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7841);
				match(OUTER_P);
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_join_qual);
		try {
			setState(7852);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7845);
				match(USING);
				setState(7846);
				match(T__2);
				setState(7847);
				name_list(0);
				setState(7848);
				match(T__3);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7850);
				match(ON);
				setState(7851);
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_relation_expr);
		try {
			setState(7865);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7854);
				match(ONLY);
				setState(7855);
				match(T__2);
				setState(7856);
				qualified_name();
				setState(7857);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7859);
				qualified_name();
				setState(7860);
				match(T__10);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7862);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7863);
				match(ONLY);
				setState(7864);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 1036;
		enterRecursionRule(_localctx, 1036, RULE_relation_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7868);
			relation_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(7875);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					setState(7870);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7871);
					match(T__4);
					setState(7872);
					relation_expr();
					}
					} 
				}
				setState(7877);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_relation_expr_opt_alias);
		try {
			setState(7886);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7878);
				relation_expr();
				setState(7879);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7881);
				relation_expr();
				setState(7882);
				match(AS);
				setState(7883);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7885);
				relation_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_func_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7888);
			func_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_where_clause);
		try {
			setState(7893);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7890);
				match(WHERE);
				setState(7891);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_where_or_current_clause);
		try {
			setState(7902);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7895);
				match(WHERE);
				setState(7896);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7897);
				match(WHERE);
				setState(7898);
				match(CURRENT_P);
				setState(7899);
				match(OF);
				setState(7900);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public OptTableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableFuncElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOptTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableFuncElementListContext optTableFuncElementList() throws RecognitionException {
		OptTableFuncElementListContext _localctx = new OptTableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_optTableFuncElementList);
		try {
			setState(7906);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7904);
				tableFuncElementList(0);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		return tableFuncElementList(0);
	}

	private TableFuncElementListContext tableFuncElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, _parentState);
		TableFuncElementListContext _prevctx = _localctx;
		int _startState = 1048;
		enterRecursionRule(_localctx, 1048, RULE_tableFuncElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7909);
			tableFuncElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(7916);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableFuncElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableFuncElementList);
					setState(7911);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7912);
					match(T__4);
					setState(7913);
					tableFuncElement();
					}
					} 
				}
				setState(7918);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_tableFuncElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7919);
			colId();
			setState(7920);
			typename();
			setState(7921);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public SimpleTypenameContext simpleTypename() {
			return getRuleContext(SimpleTypenameContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_typename);
		try {
			setState(7950);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7923);
				simpleTypename();
				setState(7924);
				match(ARRAY);
				setState(7925);
				match(T__7);
				setState(7926);
				iconst();
				setState(7927);
				match(T__8);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7929);
				match(SETOF);
				setState(7930);
				simpleTypename();
				setState(7931);
				match(ARRAY);
				setState(7932);
				match(T__7);
				setState(7933);
				iconst();
				setState(7934);
				match(T__8);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7936);
				simpleTypename();
				setState(7937);
				opt_array_bounds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7939);
				match(SETOF);
				setState(7940);
				simpleTypename();
				setState(7941);
				opt_array_bounds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7943);
				simpleTypename();
				setState(7944);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7946);
				match(SETOF);
				setState(7947);
				simpleTypename();
				setState(7948);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 1054;
		enterRecursionRule(_localctx, 1054, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7963);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7961);
					switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7953);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7954);
						match(T__7);
						setState(7955);
						match(T__8);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7956);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7957);
						match(T__7);
						setState(7958);
						iconst();
						setState(7959);
						match(T__8);
						}
						break;
					}
					} 
				}
				setState(7965);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleTypenameContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public Character_Context character_() {
			return getRuleContext(Character_Context.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public SimpleTypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSimpleTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypenameContext simpleTypename() throws RecognitionException {
		SimpleTypenameContext _localctx = new SimpleTypenameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_simpleTypename);
		try {
			setState(7980);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7966);
				constInterval();
				setState(7967);
				match(T__2);
				setState(7968);
				iconst();
				setState(7969);
				match(T__3);
				setState(7970);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7972);
				constInterval();
				setState(7973);
				opt_interval();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7975);
				genericType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7976);
				numeric();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7977);
				bit();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7978);
				character_();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7979);
				constDatetime();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstTypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstBitContext constBit() {
			return getRuleContext(ConstBitContext.class,0);
		}
		public ConstCharacterContext constCharacter() {
			return getRuleContext(ConstCharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstTypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constTypename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstTypenameContext constTypename() throws RecognitionException {
		ConstTypenameContext _localctx = new ConstTypenameContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_constTypename);
		try {
			setState(7986);
			switch (_input.LA(1)) {
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7982);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7983);
				constBit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7984);
				constCharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7985);
				constDatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_genericType);
		try {
			setState(7995);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7988);
				type_function_name();
				setState(7989);
				attrs(0);
				setState(7990);
				opt_type_modifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7992);
				type_function_name();
				setState(7993);
				opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_opt_type_modifiers);
		try {
			setState(8002);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7997);
				match(T__2);
				setState(7998);
				expr_list(0);
				setState(7999);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode FLOAT_P() { return getToken(PlPgSqlParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DECIMAL_P() { return getToken(PlPgSqlParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PlPgSqlParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PlPgSqlParser.NUMERIC, 0); }
		public TerminalNode INT_P() { return getToken(PlPgSqlParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PlPgSqlParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PlPgSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PlPgSqlParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PlPgSqlParser.REAL, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PlPgSqlParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PlPgSqlParser.PRECISION, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PlPgSqlParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_numeric);
		try {
			setState(8020);
			switch (_input.LA(1)) {
			case FLOAT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8004);
				match(FLOAT_P);
				setState(8005);
				opt_float();
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8006);
				match(DECIMAL_P);
				setState(8007);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8008);
				match(DEC);
				setState(8009);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(8010);
				match(NUMERIC);
				setState(8011);
				opt_type_modifiers();
				}
				break;
			case INT_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(8012);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 6);
				{
				setState(8013);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(8014);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8015);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 9);
				{
				setState(8016);
				match(REAL);
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(8017);
				match(DOUBLE_P);
				setState(8018);
				match(PRECISION);
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(8019);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_opt_float);
		try {
			setState(8027);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8022);
				match(T__2);
				setState(8023);
				iconst();
				setState(8024);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_bit);
		try {
			setState(8031);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8029);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8030);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstBitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public ConstBitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constBit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstBitContext constBit() throws RecognitionException {
		ConstBitContext _localctx = new ConstBitContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_constBit);
		try {
			setState(8035);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8033);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8034);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_bitWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8037);
			match(BIT);
			setState(8038);
			opt_varying();
			setState(8039);
			match(T__2);
			setState(8040);
			expr_list(0);
			setState(8041);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8043);
			match(BIT);
			setState(8044);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_Context extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public Character_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacter_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_Context character_() throws RecognitionException {
		Character_Context _localctx = new Character_Context(_ctx, getState());
		enterRule(_localctx, 1076, RULE_character_);
		try {
			setState(8048);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8046);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8047);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstCharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public ConstCharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constCharacter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstCharacterContext constCharacter() throws RecognitionException {
		ConstCharacterContext _localctx = new ConstCharacterContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_constCharacter);
		try {
			setState(8052);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8050);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8051);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8054);
			character();
			setState(8055);
			match(T__2);
			setState(8056);
			iconst();
			setState(8057);
			match(T__3);
			setState(8058);
			opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8060);
			character();
			setState(8061);
			opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHAR_P() { return getToken(PlPgSqlParser.CHAR_P, 0); }
		public TerminalNode NATIONAL() { return getToken(PlPgSqlParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlPgSqlParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PlPgSqlParser.VARCHAR, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_character);
		try {
			setState(8076);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8063);
				match(CHARACTER);
				setState(8064);
				opt_varying();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8065);
				match(CHAR_P);
				setState(8066);
				opt_varying();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8067);
				match(NATIONAL);
				setState(8068);
				match(CHARACTER);
				setState(8069);
				opt_varying();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8070);
				match(NATIONAL);
				setState(8071);
				match(CHAR_P);
				setState(8072);
				opt_varying();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8073);
				match(NCHAR);
				setState(8074);
				opt_varying();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8075);
				match(VARCHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PlPgSqlParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_opt_varying);
		try {
			setState(8080);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8078);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_charsetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_charsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_charset; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_charset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_charsetContext opt_charset() throws RecognitionException {
		Opt_charsetContext _localctx = new Opt_charsetContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_opt_charset);
		try {
			setState(8086);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8082);
				match(CHARACTER);
				setState(8083);
				match(SET);
				setState(8084);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlPgSqlParser.TIMESTAMP, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_constDatetime);
		try {
			setState(8104);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8088);
				match(TIMESTAMP);
				setState(8089);
				match(T__2);
				setState(8090);
				iconst();
				setState(8091);
				match(T__3);
				setState(8092);
				opt_timezone();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8094);
				match(TIME);
				setState(8095);
				match(T__2);
				setState(8096);
				iconst();
				setState(8097);
				match(T__3);
				setState(8098);
				opt_timezone();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8100);
				match(TIMESTAMP);
				setState(8101);
				opt_timezone();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8102);
				match(TIME);
				setState(8103);
				opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PlPgSqlParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8106);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH_TIME() { return getToken(PlPgSqlParser.WITH_TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_opt_timezone);
		try {
			setState(8114);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8108);
				match(WITH_TIME);
				setState(8109);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8110);
				match(WITHOUT);
				setState(8111);
				match(TIME);
				setState(8112);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(PlPgSqlParser.DAY_P, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode HOUR_P() { return getToken(PlPgSqlParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PlPgSqlParser.MINUTE_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PlPgSqlParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PlPgSqlParser.MONTH_P, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_opt_interval);
		try {
			setState(8144);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8116);
				interval_second();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8117);
				match(DAY_P);
				setState(8118);
				match(TO);
				setState(8119);
				interval_second();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8120);
				match(HOUR_P);
				setState(8121);
				match(TO);
				setState(8122);
				interval_second();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8123);
				match(MINUTE_P);
				setState(8124);
				match(TO);
				setState(8125);
				interval_second();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8126);
				match(YEAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8127);
				match(MONTH_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8128);
				match(DAY_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8129);
				match(HOUR_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8130);
				match(MINUTE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8131);
				match(YEAR_P);
				setState(8132);
				match(TO);
				setState(8133);
				match(MONTH_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8134);
				match(DAY_P);
				setState(8135);
				match(TO);
				setState(8136);
				match(HOUR_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8137);
				match(DAY_P);
				setState(8138);
				match(TO);
				setState(8139);
				match(MINUTE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8140);
				match(HOUR_P);
				setState(8141);
				match(TO);
				setState(8142);
				match(MINUTE_P);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PlPgSqlParser.SECOND_P, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_interval_second);
		try {
			setState(8152);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8146);
				match(SECOND_P);
				setState(8147);
				match(T__2);
				setState(8148);
				iconst();
				setState(8149);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8151);
				match(SECOND_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PlPgSqlParser.OVERLAPS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(PlPgSqlParser.ESCAPE, 0); }
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PlPgSqlParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode AT() { return getToken(PlPgSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode TYPECAST() { return getToken(PlPgSqlParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode ISNULL() { return getToken(PlPgSqlParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PlPgSqlParser.NOTNULL, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PlPgSqlParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public Opt_asymmetricContext opt_asymmetric() {
			return getRuleContext(Opt_asymmetricContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode SYMMETRIC() { return getToken(PlPgSqlParser.SYMMETRIC, 0); }
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		A_exprContext _localctx = new A_exprContext(_ctx, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 1100;
		enterRecursionRule(_localctx, 1100, RULE_a_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8171);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(8155);
				match(T__14);
				setState(8156);
				a_expr(31);
				}
				break;
			case 2:
				{
				setState(8157);
				match(T__11);
				setState(8158);
				a_expr(30);
				}
				break;
			case 3:
				{
				setState(8159);
				qual_Op();
				setState(8160);
				a_expr(28);
				}
				break;
			case 4:
				{
				setState(8162);
				match(NOT);
				setState(8163);
				a_expr(26);
				}
				break;
			case 5:
				{
				setState(8164);
				row();
				setState(8165);
				match(OVERLAPS);
				setState(8166);
				row();
				}
				break;
			case 6:
				{
				setState(8168);
				c_expr();
				}
				break;
			case 7:
				{
				setState(8169);
				match(UNIQUE);
				setState(8170);
				select_with_parens(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8406);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8404);
					switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8173);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(8174);
						match(T__12);
						setState(8175);
						a_expr(61);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8176);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(8177);
						match(T__10);
						setState(8178);
						a_expr(60);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8179);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(8180);
						match(T__13);
						setState(8181);
						a_expr(59);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8182);
						if (!(precpred(_ctx, 57))) throw new FailedPredicateException(this, "precpred(_ctx, 57)");
						setState(8183);
						match(T__5);
						setState(8184);
						a_expr(58);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8185);
						if (!(precpred(_ctx, 56))) throw new FailedPredicateException(this, "precpred(_ctx, 56)");
						setState(8186);
						match(T__14);
						setState(8187);
						a_expr(57);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8188);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(8189);
						match(T__11);
						setState(8190);
						a_expr(56);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8191);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(8192);
						match(T__6);
						setState(8193);
						a_expr(55);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8194);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(8195);
						match(T__15);
						setState(8196);
						a_expr(54);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8197);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(8198);
						match(T__16);
						setState(8199);
						a_expr(53);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8200);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(8201);
						match(T__17);
						setState(8202);
						a_expr(52);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8203);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(8204);
						match(LIKE);
						setState(8205);
						a_expr(0);
						setState(8206);
						match(ESCAPE);
						setState(8207);
						a_expr(51);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8209);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(8210);
						match(NOT);
						setState(8211);
						match(LIKE);
						setState(8212);
						a_expr(0);
						setState(8213);
						match(ESCAPE);
						setState(8214);
						a_expr(50);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8216);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(8217);
						match(ILIKE);
						setState(8218);
						a_expr(0);
						setState(8219);
						match(ESCAPE);
						setState(8220);
						a_expr(49);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8222);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(8223);
						match(NOT);
						setState(8224);
						match(ILIKE);
						setState(8225);
						a_expr(0);
						setState(8226);
						match(ESCAPE);
						setState(8227);
						a_expr(48);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8229);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(8230);
						match(SIMILAR);
						setState(8231);
						match(TO);
						setState(8232);
						a_expr(0);
						setState(8233);
						match(ESCAPE);
						setState(8234);
						a_expr(47);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8236);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(8237);
						match(NOT);
						setState(8238);
						match(SIMILAR);
						setState(8239);
						match(TO);
						setState(8240);
						a_expr(0);
						setState(8241);
						match(ESCAPE);
						setState(8242);
						a_expr(46);
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8244);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(8245);
						match(AND);
						setState(8246);
						a_expr(43);
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8247);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(8248);
						match(OR);
						setState(8249);
						a_expr(42);
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8250);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(8251);
						match(LIKE);
						setState(8252);
						a_expr(41);
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8253);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(8254);
						match(NOT);
						setState(8255);
						match(LIKE);
						setState(8256);
						a_expr(40);
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8257);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(8258);
						match(ILIKE);
						setState(8259);
						a_expr(39);
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8260);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(8261);
						match(NOT);
						setState(8262);
						match(ILIKE);
						setState(8263);
						a_expr(38);
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8264);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(8265);
						match(AT);
						setState(8266);
						match(TIME);
						setState(8267);
						match(ZONE);
						setState(8268);
						a_expr(33);
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8269);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(8270);
						qual_Op();
						setState(8271);
						a_expr(30);
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8273);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(8274);
						match(SIMILAR);
						setState(8275);
						match(TO);
						setState(8276);
						a_expr(26);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8277);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(8278);
						match(NOT);
						setState(8279);
						match(SIMILAR);
						setState(8280);
						match(TO);
						setState(8281);
						a_expr(25);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8282);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(8283);
						match(IS);
						setState(8284);
						match(DISTINCT);
						setState(8285);
						match(FROM);
						setState(8286);
						a_expr(14);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8287);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(8288);
						match(IS);
						setState(8289);
						match(NOT);
						setState(8290);
						match(DISTINCT);
						setState(8291);
						match(FROM);
						setState(8292);
						a_expr(13);
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8293);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(8294);
						match(TYPECAST);
						setState(8295);
						typename();
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8296);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(8297);
						match(COLLATE);
						setState(8298);
						any_name();
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8299);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(8300);
						match(IN_P);
						setState(8301);
						in_expr();
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8302);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(8303);
						match(NOT);
						setState(8304);
						match(IN_P);
						setState(8305);
						in_expr();
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8306);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(8307);
						qual_Op();
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8308);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(8309);
						match(IS);
						setState(8310);
						match(NULL_P);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8311);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(8312);
						match(ISNULL);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8313);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(8314);
						match(IS);
						setState(8315);
						match(NOT);
						setState(8316);
						match(NULL_P);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8317);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(8318);
						match(NOTNULL);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8319);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(8320);
						match(IS);
						setState(8321);
						match(TRUE_P);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8322);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(8323);
						match(IS);
						setState(8324);
						match(NOT);
						setState(8325);
						match(TRUE_P);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8326);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(8327);
						match(IS);
						setState(8328);
						match(FALSE_P);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8329);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(8330);
						match(IS);
						setState(8331);
						match(NOT);
						setState(8332);
						match(FALSE_P);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8333);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(8334);
						match(IS);
						setState(8335);
						match(UNKNOWN);
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8336);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(8337);
						match(IS);
						setState(8338);
						match(NOT);
						setState(8339);
						match(UNKNOWN);
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8340);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(8341);
						match(IS);
						setState(8342);
						match(OF);
						setState(8343);
						match(T__2);
						setState(8344);
						type_list(0);
						setState(8345);
						match(T__3);
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8347);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8348);
						match(IS);
						setState(8349);
						match(NOT);
						setState(8350);
						match(OF);
						setState(8351);
						match(T__2);
						setState(8352);
						type_list(0);
						setState(8353);
						match(T__3);
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8355);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(8356);
						match(BETWEEN);
						setState(8357);
						opt_asymmetric();
						setState(8358);
						b_expr(0);
						setState(8359);
						match(AND);
						setState(8360);
						b_expr(0);
						}
						break;
					case 47:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8362);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(8363);
						match(NOT);
						setState(8364);
						match(BETWEEN);
						setState(8365);
						opt_asymmetric();
						setState(8366);
						b_expr(0);
						setState(8367);
						match(AND);
						setState(8368);
						b_expr(0);
						}
						break;
					case 48:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8370);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8371);
						match(BETWEEN);
						setState(8372);
						match(SYMMETRIC);
						setState(8373);
						b_expr(0);
						setState(8374);
						match(AND);
						setState(8375);
						b_expr(0);
						}
						break;
					case 49:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8377);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8378);
						match(NOT);
						setState(8379);
						match(BETWEEN);
						setState(8380);
						match(SYMMETRIC);
						setState(8381);
						b_expr(0);
						setState(8382);
						match(AND);
						setState(8383);
						b_expr(0);
						}
						break;
					case 50:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8385);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8386);
						subquery_Op();
						setState(8387);
						sub_type();
						setState(8388);
						select_with_parens(0);
						}
						break;
					case 51:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8390);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8391);
						subquery_Op();
						setState(8392);
						sub_type();
						setState(8393);
						match(T__2);
						setState(8394);
						a_expr(0);
						setState(8395);
						match(T__3);
						}
						break;
					case 52:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8397);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8398);
						match(IS);
						setState(8399);
						match(DOCUMENT_P);
						}
						break;
					case 53:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(8400);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8401);
						match(IS);
						setState(8402);
						match(NOT);
						setState(8403);
						match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(8408);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,435,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode TYPECAST() { return getToken(PlPgSqlParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1102;
		enterRecursionRule(_localctx, 1102, RULE_b_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8418);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(8410);
				match(T__14);
				setState(8411);
				b_expr(11);
				}
				break;
			case 2:
				{
				setState(8412);
				match(T__11);
				setState(8413);
				b_expr(10);
				}
				break;
			case 3:
				{
				setState(8414);
				qual_Op();
				setState(8415);
				b_expr(8);
				}
				break;
			case 4:
				{
				setState(8417);
				c_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8491);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8489);
					switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8420);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(8421);
						match(T__12);
						setState(8422);
						b_expr(23);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8423);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(8424);
						match(T__10);
						setState(8425);
						b_expr(22);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8426);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(8427);
						match(T__13);
						setState(8428);
						b_expr(21);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8429);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(8430);
						match(T__5);
						setState(8431);
						b_expr(20);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8432);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(8433);
						match(T__14);
						setState(8434);
						b_expr(19);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8435);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(8436);
						match(T__11);
						setState(8437);
						b_expr(18);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8438);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(8439);
						match(T__6);
						setState(8440);
						b_expr(17);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8441);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(8442);
						match(T__15);
						setState(8443);
						b_expr(16);
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8444);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(8445);
						match(T__16);
						setState(8446);
						b_expr(15);
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8447);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(8448);
						qual_Op();
						setState(8449);
						b_expr(10);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8451);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8452);
						match(IS);
						setState(8453);
						match(DISTINCT);
						setState(8454);
						match(FROM);
						setState(8455);
						b_expr(7);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8456);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8457);
						match(IS);
						setState(8458);
						match(NOT);
						setState(8459);
						match(DISTINCT);
						setState(8460);
						match(FROM);
						setState(8461);
						b_expr(6);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8462);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(8463);
						match(TYPECAST);
						setState(8464);
						typename();
						}
						break;
					case 14:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8465);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8466);
						qual_Op();
						}
						break;
					case 15:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8467);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8468);
						match(IS);
						setState(8469);
						match(OF);
						setState(8470);
						match(T__2);
						setState(8471);
						type_list(0);
						setState(8472);
						match(T__3);
						}
						break;
					case 16:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8474);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8475);
						match(IS);
						setState(8476);
						match(NOT);
						setState(8477);
						match(OF);
						setState(8478);
						match(T__2);
						setState(8479);
						type_list(0);
						setState(8480);
						match(T__3);
						}
						break;
					case 17:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8482);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8483);
						match(IS);
						setState(8484);
						match(DOCUMENT_P);
						}
						break;
					case 18:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8485);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8486);
						match(IS);
						setState(8487);
						match(NOT);
						setState(8488);
						match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(8493);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PlPgSqlParser.PARAM, 0); }
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public RowContext row() {
			return getRuleContext(RowContext.class,0);
		}
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitC_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_c_expr);
		try {
			setState(8514);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8494);
				match(T__2);
				setState(8495);
				a_expr(0);
				setState(8496);
				match(T__3);
				setState(8497);
				opt_indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8499);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8500);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8501);
				match(PARAM);
				setState(8502);
				opt_indirection(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8503);
				case_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8504);
				func_expr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8505);
				select_with_parens(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8506);
				match(EXISTS);
				setState(8507);
				select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8508);
				match(ARRAY);
				setState(8509);
				select_with_parens(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8510);
				match(ARRAY);
				setState(8511);
				array_expr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8512);
				array_expr();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8513);
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CURRENT_TIME() { return getToken(PlPgSqlParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PlPgSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PlPgSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode EXTRACT() { return getToken(PlPgSqlParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PlPgSqlParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PlPgSqlParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PlPgSqlParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(PlPgSqlParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(PlPgSqlParser.BOTH, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(PlPgSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlPgSqlParser.TRAILING, 0); }
		public TerminalNode COALESCE() { return getToken(PlPgSqlParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PlPgSqlParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PlPgSqlParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PlPgSqlParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlPgSqlParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PlPgSqlParser.NAME_P, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PlPgSqlParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PlPgSqlParser.XMLPI, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PlPgSqlParser.TREAT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlPgSqlParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode NULLIF() { return getToken(PlPgSqlParser.NULLIF, 0); }
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlPgSqlParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlPgSqlParser.XMLSERIALIZE, 0); }
		public SimpleTypenameContext simpleTypename() {
			return getRuleContext(SimpleTypenameContext.class,0);
		}
		public TerminalNode XMLROOT() { return getToken(PlPgSqlParser.XMLROOT, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PlPgSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PlPgSqlParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PlPgSqlParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PlPgSqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PlPgSqlParser.CURRENT_SCHEMA, 0); }
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_func_expr);
		try {
			setState(8773);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8516);
				match(COLLATION);
				setState(8517);
				match(FOR);
				setState(8518);
				match(T__2);
				setState(8519);
				a_expr(0);
				setState(8520);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8522);
				match(CURRENT_TIME);
				setState(8523);
				match(T__2);
				setState(8524);
				iconst();
				setState(8525);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8527);
				match(CURRENT_TIMESTAMP);
				setState(8528);
				match(T__2);
				setState(8529);
				iconst();
				setState(8530);
				match(T__3);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8532);
				match(LOCALTIME);
				setState(8533);
				match(T__2);
				setState(8534);
				iconst();
				setState(8535);
				match(T__3);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8537);
				match(LOCALTIMESTAMP);
				setState(8538);
				match(T__2);
				setState(8539);
				iconst();
				setState(8540);
				match(T__3);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8542);
				match(EXTRACT);
				setState(8543);
				match(T__2);
				setState(8544);
				extract_list();
				setState(8545);
				match(T__3);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8547);
				match(OVERLAY);
				setState(8548);
				match(T__2);
				setState(8549);
				overlay_list();
				setState(8550);
				match(T__3);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8552);
				match(POSITION);
				setState(8553);
				match(T__2);
				setState(8554);
				position_list();
				setState(8555);
				match(T__3);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8557);
				match(SUBSTRING);
				setState(8558);
				match(T__2);
				setState(8559);
				substr_list();
				setState(8560);
				match(T__3);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8562);
				match(TRIM);
				setState(8563);
				match(T__2);
				setState(8564);
				match(BOTH);
				setState(8565);
				trim_list();
				setState(8566);
				match(T__3);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8568);
				match(TRIM);
				setState(8569);
				match(T__2);
				setState(8570);
				match(LEADING);
				setState(8571);
				trim_list();
				setState(8572);
				match(T__3);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8574);
				match(TRIM);
				setState(8575);
				match(T__2);
				setState(8576);
				match(TRAILING);
				setState(8577);
				trim_list();
				setState(8578);
				match(T__3);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8580);
				match(TRIM);
				setState(8581);
				match(T__2);
				setState(8582);
				trim_list();
				setState(8583);
				match(T__3);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8585);
				match(COALESCE);
				setState(8586);
				match(T__2);
				setState(8587);
				expr_list(0);
				setState(8588);
				match(T__3);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8590);
				match(GREATEST);
				setState(8591);
				match(T__2);
				setState(8592);
				expr_list(0);
				setState(8593);
				match(T__3);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8595);
				match(LEAST);
				setState(8596);
				match(T__2);
				setState(8597);
				expr_list(0);
				setState(8598);
				match(T__3);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8600);
				match(XMLCONCAT);
				setState(8601);
				match(T__2);
				setState(8602);
				expr_list(0);
				setState(8603);
				match(T__3);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8605);
				match(XMLELEMENT);
				setState(8606);
				match(T__2);
				setState(8607);
				match(NAME_P);
				setState(8608);
				colLabel();
				setState(8609);
				match(T__3);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8611);
				match(XMLFOREST);
				setState(8612);
				match(T__2);
				setState(8613);
				xml_attribute_list(0);
				setState(8614);
				match(T__3);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8616);
				match(XMLPI);
				setState(8617);
				match(T__2);
				setState(8618);
				match(NAME_P);
				setState(8619);
				colLabel();
				setState(8620);
				match(T__3);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8622);
				match(CAST);
				setState(8623);
				match(T__2);
				setState(8624);
				a_expr(0);
				setState(8625);
				match(AS);
				setState(8626);
				typename();
				setState(8627);
				match(T__3);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8629);
				match(TREAT);
				setState(8630);
				match(T__2);
				setState(8631);
				a_expr(0);
				setState(8632);
				match(AS);
				setState(8633);
				typename();
				setState(8634);
				match(T__3);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8636);
				match(XMLEXISTS);
				setState(8637);
				match(T__2);
				setState(8638);
				c_expr();
				setState(8639);
				xmlexists_argument();
				setState(8640);
				match(T__3);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8642);
				match(NULLIF);
				setState(8643);
				match(T__2);
				setState(8644);
				a_expr(0);
				setState(8645);
				match(T__4);
				setState(8646);
				a_expr(0);
				setState(8647);
				match(T__3);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8649);
				match(XMLELEMENT);
				setState(8650);
				match(T__2);
				setState(8651);
				match(NAME_P);
				setState(8652);
				colLabel();
				setState(8653);
				match(T__4);
				setState(8654);
				xml_attributes();
				setState(8655);
				match(T__3);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8657);
				match(XMLELEMENT);
				setState(8658);
				match(T__2);
				setState(8659);
				match(NAME_P);
				setState(8660);
				colLabel();
				setState(8661);
				match(T__4);
				setState(8662);
				expr_list(0);
				setState(8663);
				match(T__3);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8665);
				match(XMLPARSE);
				setState(8666);
				match(T__2);
				setState(8667);
				document_or_content();
				setState(8668);
				a_expr(0);
				setState(8669);
				xml_whitespace_option();
				setState(8670);
				match(T__3);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8672);
				match(XMLPI);
				setState(8673);
				match(T__2);
				setState(8674);
				match(NAME_P);
				setState(8675);
				colLabel();
				setState(8676);
				match(T__4);
				setState(8677);
				a_expr(0);
				setState(8678);
				match(T__3);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8680);
				match(XMLSERIALIZE);
				setState(8681);
				match(T__2);
				setState(8682);
				document_or_content();
				setState(8683);
				a_expr(0);
				setState(8684);
				match(AS);
				setState(8685);
				simpleTypename();
				setState(8686);
				match(T__3);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8688);
				match(XMLROOT);
				setState(8689);
				match(T__2);
				setState(8690);
				a_expr(0);
				setState(8691);
				match(T__4);
				setState(8692);
				xml_root_version();
				setState(8693);
				opt_xml_root_standalone();
				setState(8694);
				match(T__3);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(8696);
				match(XMLELEMENT);
				setState(8697);
				match(T__2);
				setState(8698);
				match(NAME_P);
				setState(8699);
				colLabel();
				setState(8700);
				match(T__4);
				setState(8701);
				xml_attributes();
				setState(8702);
				match(T__4);
				setState(8703);
				expr_list(0);
				setState(8704);
				match(T__3);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(8706);
				func_name();
				setState(8707);
				match(T__2);
				setState(8708);
				match(T__3);
				setState(8709);
				over_clause();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(8711);
				func_name();
				setState(8712);
				match(T__2);
				setState(8713);
				match(T__10);
				setState(8714);
				match(T__3);
				setState(8715);
				over_clause();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(8717);
				func_name();
				setState(8718);
				match(T__2);
				setState(8719);
				func_arg_list(0);
				setState(8720);
				match(T__3);
				setState(8721);
				over_clause();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(8723);
				func_name();
				setState(8724);
				match(T__2);
				setState(8725);
				match(VARIADIC);
				setState(8726);
				func_arg_expr();
				setState(8727);
				match(T__3);
				setState(8728);
				over_clause();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(8730);
				func_name();
				setState(8731);
				match(T__2);
				setState(8732);
				func_arg_list(0);
				setState(8733);
				sort_clause();
				setState(8734);
				match(T__3);
				setState(8735);
				over_clause();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(8737);
				func_name();
				setState(8738);
				match(T__2);
				setState(8739);
				match(ALL);
				setState(8740);
				func_arg_list(0);
				setState(8741);
				opt_sort_clause();
				setState(8742);
				match(T__3);
				setState(8743);
				over_clause();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(8745);
				func_name();
				setState(8746);
				match(T__2);
				setState(8747);
				match(DISTINCT);
				setState(8748);
				func_arg_list(0);
				setState(8749);
				opt_sort_clause();
				setState(8750);
				match(T__3);
				setState(8751);
				over_clause();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(8753);
				func_name();
				setState(8754);
				match(T__2);
				setState(8755);
				func_arg_list(0);
				setState(8756);
				match(T__4);
				setState(8757);
				match(VARIADIC);
				setState(8758);
				func_arg_expr();
				setState(8759);
				match(T__3);
				setState(8760);
				over_clause();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(8762);
				match(CURRENT_DATE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(8763);
				match(CURRENT_TIME);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(8764);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(8765);
				match(LOCALTIME);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(8766);
				match(LOCALTIMESTAMP);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(8767);
				match(CURRENT_ROLE);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(8768);
				match(CURRENT_USER);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(8769);
				match(SESSION_USER);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(8770);
				match(USER);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(8771);
				match(CURRENT_CATALOG);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(8772);
				match(CURRENT_SCHEMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xml_root_version);
		try {
			setState(8780);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8775);
				match(VERSION_P);
				setState(8776);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8777);
				match(VERSION_P);
				setState(8778);
				match(NO);
				setState(8779);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode STANDALONE_P() { return getToken(PlPgSqlParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PlPgSqlParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_opt_xml_root_standalone);
		try {
			setState(8793);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8782);
				match(T__4);
				setState(8783);
				match(STANDALONE_P);
				setState(8784);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8785);
				match(T__4);
				setState(8786);
				match(STANDALONE_P);
				setState(8787);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8788);
				match(T__4);
				setState(8789);
				match(STANDALONE_P);
				setState(8790);
				match(NO);
				setState(8791);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlPgSqlParser.XMLATTRIBUTES, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8795);
			match(XMLATTRIBUTES);
			setState(8796);
			match(T__2);
			setState(8797);
			xml_attribute_list(0);
			setState(8798);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public Xml_attribute_elContext xml_attribute_el() {
			return getRuleContext(Xml_attribute_elContext.class,0);
		}
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 1114;
		enterRecursionRule(_localctx, 1114, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8801);
			xml_attribute_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8808);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					setState(8803);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8804);
					match(T__4);
					setState(8805);
					xml_attribute_el();
					}
					} 
				}
				setState(8810);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_xml_attribute_el);
		try {
			setState(8816);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8811);
				a_expr(0);
				setState(8812);
				match(AS);
				setState(8813);
				colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8815);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PlPgSqlParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8818);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PlPgSqlParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PlPgSqlParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PlPgSqlParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_xml_whitespace_option);
		try {
			setState(8825);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8820);
				match(PRESERVE);
				setState(8821);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8822);
				match(STRIP_P);
				setState(8823);
				match(WHITESPACE_P);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlPgSqlParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(PlPgSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PlPgSqlParser.BY, i);
		}
		public List<TerminalNode> REF() { return getTokens(PlPgSqlParser.REF); }
		public TerminalNode REF(int i) {
			return getToken(PlPgSqlParser.REF, i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_xmlexists_argument);
		try {
			setState(8845);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8827);
				match(PASSING);
				setState(8828);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8829);
				match(PASSING);
				setState(8830);
				c_expr();
				setState(8831);
				match(BY);
				setState(8832);
				match(REF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8834);
				match(PASSING);
				setState(8835);
				match(BY);
				setState(8836);
				match(REF);
				setState(8837);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8838);
				match(PASSING);
				setState(8839);
				match(BY);
				setState(8840);
				match(REF);
				setState(8841);
				c_expr();
				setState(8842);
				match(BY);
				setState(8843);
				match(REF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_window_clause);
		try {
			setState(8850);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8847);
				match(WINDOW);
				setState(8848);
				window_definition_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 1126;
		enterRecursionRule(_localctx, 1126, RULE_window_definition_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8853);
			window_definition();
			}
			_ctx.stop = _input.LT(-1);
			setState(8860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					setState(8855);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8856);
					match(T__4);
					setState(8857);
					window_definition();
					}
					} 
				}
				setState(8862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8863);
			colId();
			setState(8864);
			match(AS);
			setState(8865);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlPgSqlParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_over_clause);
		try {
			setState(8872);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8867);
				match(OVER);
				setState(8868);
				window_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8869);
				match(OVER);
				setState(8870);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8874);
			match(T__2);
			setState(8875);
			opt_existing_window_name();
			setState(8876);
			opt_partition_clause();
			setState(8877);
			opt_sort_clause();
			setState(8878);
			opt_frame_clause();
			setState(8879);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_opt_existing_window_name);
		try {
			setState(8883);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8881);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlPgSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_opt_partition_clause);
		try {
			setState(8889);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(8885);
				match(PARTITION);
				setState(8886);
				match(BY);
				setState(8887);
				expr_list(0);
				}
				break;
			case T__3:
			case ORDER:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PlPgSqlParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_opt_frame_clause);
		try {
			setState(8896);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8891);
				match(RANGE);
				setState(8892);
				frame_extent();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8893);
				match(ROWS);
				setState(8894);
				frame_extent();
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_frame_extent);
		try {
			setState(8904);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8898);
				match(BETWEEN);
				setState(8899);
				frame_bound();
				setState(8900);
				match(AND);
				setState(8901);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8903);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode PRECEDING() { return getToken(PlPgSqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlPgSqlParser.FOLLOWING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlPgSqlParser.UNBOUNDED, 0); }
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_frame_bound);
		try {
			setState(8918);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8906);
				a_expr(0);
				setState(8907);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8909);
				a_expr(0);
				setState(8910);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8912);
				match(UNBOUNDED);
				setState(8913);
				match(PRECEDING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8914);
				match(UNBOUNDED);
				setState(8915);
				match(FOLLOWING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8916);
				match(CURRENT_P);
				setState(8917);
				match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_row);
		try {
			setState(8934);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8920);
				match(ROW);
				setState(8921);
				match(T__2);
				setState(8922);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8923);
				match(ROW);
				setState(8924);
				match(T__2);
				setState(8925);
				expr_list(0);
				setState(8926);
				match(T__3);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8928);
				match(T__2);
				setState(8929);
				expr_list(0);
				setState(8930);
				match(T__4);
				setState(8931);
				a_expr(0);
				setState(8932);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PlPgSqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PlPgSqlParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8936);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_OpContext extends ParserRuleContext {
		public TerminalNode Op() { return getToken(PlPgSqlParser.Op, 0); }
		public MathOpContext mathOp() {
			return getRuleContext(MathOpContext.class,0);
		}
		public All_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAll_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_OpContext all_Op() throws RecognitionException {
		All_OpContext _localctx = new All_OpContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_all_Op);
		try {
			setState(8940);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8938);
				match(Op);
				}
				break;
			case T__5:
			case T__6:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
				enterOuterAlt(_localctx, 2);
				{
				setState(8939);
				mathOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOpContext extends ParserRuleContext {
		public MathOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitMathOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOpContext mathOp() throws RecognitionException {
		MathOpContext _localctx = new MathOpContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_mathOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8942);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode Op() { return getToken(PlPgSqlParser.Op, 0); }
		public Qual_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQual_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_OpContext qual_Op() throws RecognitionException {
		Qual_OpContext _localctx = new Qual_OpContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_qual_Op);
		try {
			setState(8950);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8944);
				match(OPERATOR);
				setState(8945);
				match(T__2);
				setState(8946);
				any_operator();
				setState(8947);
				match(T__3);
				}
				break;
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(8949);
				match(Op);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Qual_all_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQual_all_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_OpContext qual_all_Op() throws RecognitionException {
		Qual_all_OpContext _localctx = new Qual_all_OpContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_qual_all_Op);
		try {
			setState(8958);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8952);
				match(OPERATOR);
				setState(8953);
				match(T__2);
				setState(8954);
				any_operator();
				setState(8955);
				match(T__3);
				}
				break;
			case T__5:
			case T__6:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(8957);
				all_Op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_subquery_Op);
		try {
			setState(8972);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8960);
				match(OPERATOR);
				setState(8961);
				match(T__2);
				setState(8962);
				any_operator();
				setState(8963);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8965);
				all_Op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8966);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8967);
				match(NOT);
				setState(8968);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8969);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8970);
				match(NOT);
				setState(8971);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr_listContext _localctx = new Expr_listContext(_ctx, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 1158;
		enterRecursionRule(_localctx, 1158, RULE_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8975);
			a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8982);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					setState(8977);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8978);
					match(T__4);
					setState(8979);
					a_expr(0);
					}
					} 
				}
				setState(8984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 1160;
		enterRecursionRule(_localctx, 1160, RULE_func_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8986);
			func_arg_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8993);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					setState(8988);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8989);
					match(T__4);
					setState(8990);
					func_arg_expr();
					}
					} 
				}
				setState(8995);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PlPgSqlParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_func_arg_expr);
		try {
			setState(9001);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8996);
				param_name();
				setState(8997);
				match(COLON_EQUALS);
				setState(8998);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9000);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_listContext _localctx = new Type_listContext(_ctx, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 1164;
		enterRecursionRule(_localctx, 1164, RULE_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9004);
			typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(9011);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_list);
					setState(9006);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9007);
					match(T__4);
					setState(9008);
					typename();
					}
					} 
				}
				setState(9013);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_array_expr);
		try {
			setState(9024);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9014);
				match(T__7);
				setState(9015);
				match(T__8);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9016);
				match(T__7);
				setState(9017);
				expr_list(0);
				setState(9018);
				match(T__8);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9020);
				match(T__7);
				setState(9021);
				array_expr_list(0);
				setState(9022);
				match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 1168;
		enterRecursionRule(_localctx, 1168, RULE_array_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9027);
			array_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(9034);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					setState(9029);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9030);
					match(T__4);
					setState(9031);
					array_expr();
					}
					} 
				}
				setState(9036);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_extract_list);
		try {
			setState(9042);
			switch (_input.LA(1)) {
			case DAY_P:
			case HOUR_P:
			case MINUTE_P:
			case MONTH_P:
			case SECOND_P:
			case YEAR_P:
			case SCONST:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9037);
				extract_arg();
				setState(9038);
				match(FROM);
				setState(9039);
				a_expr(0);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public TerminalNode YEAR_P() { return getToken(PlPgSqlParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PlPgSqlParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PlPgSqlParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PlPgSqlParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PlPgSqlParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PlPgSqlParser.SECOND_P, 0); }
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_extract_arg);
		try {
			setState(9052);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(9044);
				sconst();
				}
				break;
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9045);
				match(IDENT);
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(9046);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9047);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(9048);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9049);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9050);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(9051);
				match(SECOND_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext overlay_placing() {
			return getRuleContext(Overlay_placingContext.class,0);
		}
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_overlay_list);
		try {
			setState(9063);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9054);
				a_expr(0);
				setState(9055);
				overlay_placing();
				setState(9056);
				substr_from();
				setState(9057);
				substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9059);
				a_expr(0);
				setState(9060);
				overlay_placing();
				setState(9061);
				substr_from();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_placingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(PlPgSqlParser.PLACING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_placing; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOverlay_placing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_placingContext overlay_placing() throws RecognitionException {
		Overlay_placingContext _localctx = new Overlay_placingContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_overlay_placing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9065);
			match(PLACING);
			setState(9066);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_position_list);
		try {
			setState(9073);
			switch (_input.LA(1)) {
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(9068);
				b_expr(0);
				setState(9069);
				match(IN_P);
				setState(9070);
				b_expr(0);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_substr_list);
		try {
			setState(9091);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9075);
				a_expr(0);
				setState(9076);
				substr_from();
				setState(9077);
				substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9079);
				a_expr(0);
				setState(9080);
				substr_for();
				setState(9081);
				substr_from();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9083);
				a_expr(0);
				setState(9084);
				substr_from();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9086);
				a_expr(0);
				setState(9087);
				substr_for();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9089);
				expr_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_from; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_fromContext substr_from() throws RecognitionException {
		Substr_fromContext _localctx = new Substr_fromContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_substr_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9093);
			match(FROM);
			setState(9094);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_forContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_for; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSubstr_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_forContext substr_for() throws RecognitionException {
		Substr_forContext _localctx = new Substr_forContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_substr_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9096);
			match(FOR);
			setState(9097);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_trim_list);
		try {
			setState(9106);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9099);
				a_expr(0);
				setState(9100);
				match(FROM);
				setState(9101);
				expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9103);
				match(FROM);
				setState(9104);
				expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9105);
				expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIn_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_in_expr);
		try {
			setState(9113);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9108);
				match(T__2);
				setState(9109);
				expr_list(0);
				setState(9110);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9112);
				select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PlPgSqlParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9115);
			match(CASE);
			setState(9116);
			case_arg();
			setState(9117);
			when_clause_list(0);
			setState(9118);
			case_default();
			setState(9119);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public When_clauseContext when_clause() {
			return getRuleContext(When_clauseContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1192;
		enterRecursionRule(_localctx, 1192, RULE_when_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9122);
			when_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(9128);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					setState(9124);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9125);
					when_clause();
					}
					} 
				}
				setState(9130);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9131);
			match(WHEN);
			setState(9132);
			a_expr(0);
			setState(9133);
			match(THEN);
			setState(9134);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_case_default);
		try {
			setState(9139);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9136);
				match(ELSE);
				setState(9137);
				a_expr(0);
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_case_arg);
		try {
			setState(9143);
			switch (_input.LA(1)) {
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(9141);
				a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_columnref);
		try {
			setState(9149);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9145);
				colId();
				setState(9146);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9148);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_indirection_el);
		try {
			setState(9165);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9151);
				match(T__9);
				setState(9152);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9153);
				match(T__9);
				setState(9154);
				attr_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9155);
				match(T__7);
				setState(9156);
				a_expr(0);
				setState(9157);
				match(T__8);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9159);
				match(T__7);
				setState(9160);
				a_expr(0);
				setState(9161);
				match(T__18);
				setState(9162);
				a_expr(0);
				setState(9163);
				match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1204;
		enterRecursionRule(_localctx, 1204, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9168);
			indirection_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(9174);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(9170);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9171);
					indirection_el();
					}
					} 
				}
				setState(9176);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1206;
		enterRecursionRule(_localctx, 1206, RULE_opt_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(9182);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					setState(9178);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9179);
					indirection_el();
					}
					} 
				}
				setState(9184);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_asymmetricContext extends ParserRuleContext {
		public TerminalNode ASYMMETRIC() { return getToken(PlPgSqlParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asymmetric; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitOpt_asymmetric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asymmetricContext opt_asymmetric() throws RecognitionException {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_opt_asymmetric);
		try {
			setState(9187);
			switch (_input.LA(1)) {
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(9185);
				match(ASYMMETRIC);
				}
				break;
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public Ctext_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_exprContext ctext_expr() throws RecognitionException {
		Ctext_exprContext _localctx = new Ctext_exprContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_ctext_expr);
		try {
			setState(9191);
			switch (_input.LA(1)) {
			case T__2:
			case T__7:
			case T__11:
			case T__14:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(9189);
				a_expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9190);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_expr_listContext extends ParserRuleContext {
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_expr_listContext ctext_expr_list() throws RecognitionException {
		return ctext_expr_list(0);
	}

	private Ctext_expr_listContext ctext_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Ctext_expr_listContext _localctx = new Ctext_expr_listContext(_ctx, _parentState);
		Ctext_expr_listContext _prevctx = _localctx;
		int _startState = 1212;
		enterRecursionRule(_localctx, 1212, RULE_ctext_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9194);
			ctext_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(9201);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Ctext_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ctext_expr_list);
					setState(9196);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9197);
					match(T__4);
					setState(9198);
					ctext_expr();
					}
					} 
				}
				setState(9203);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Ctext_rowContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_row; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCtext_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_rowContext ctext_row() throws RecognitionException {
		Ctext_rowContext _localctx = new Ctext_rowContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_ctext_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9204);
			match(T__2);
			setState(9205);
			ctext_expr_list(0);
			setState(9206);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public Target_elContext target_el() {
			return getRuleContext(Target_elContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		return target_list(0);
	}

	private Target_listContext target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Target_listContext _localctx = new Target_listContext(_ctx, _parentState);
		Target_listContext _prevctx = _localctx;
		int _startState = 1216;
		enterRecursionRule(_localctx, 1216, RULE_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9209);
			target_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(9216);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_target_list);
					setState(9211);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9212);
					match(T__4);
					setState(9213);
					target_el();
					}
					} 
				}
				setState(9218);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitTarget_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_target_el);
		try {
			setState(9228);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9219);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9220);
				a_expr(0);
				setState(9221);
				match(AS);
				setState(9222);
				colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9224);
				a_expr(0);
				setState(9225);
				match(IDENT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9227);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1220;
		enterRecursionRule(_localctx, 1220, RULE_qualified_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9231);
			qualified_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(9238);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					setState(9233);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9234);
					match(T__4);
					setState(9235);
					qualified_name();
					}
					} 
				}
				setState(9240);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_qualified_name);
		try {
			setState(9245);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9241);
				colId();
				setState(9242);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9244);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1224;
		enterRecursionRule(_localctx, 1224, RULE_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9248);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(9255);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(9250);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(9251);
					match(T__4);
					setState(9252);
					name();
					}
					} 
				}
				setState(9257);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9258);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitDatabase_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_nameContext database_name() throws RecognitionException {
		Database_nameContext _localctx = new Database_nameContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_database_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9260);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_methodContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Access_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAccess_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_methodContext access_method() throws RecognitionException {
		Access_methodContext _localctx = new Access_methodContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_access_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9262);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9264);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9266);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9268);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_func_name);
		try {
			setState(9274);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9270);
				colId();
				setState(9271);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9273);
				type_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public ConstTypenameContext constTypename() {
			return getRuleContext(ConstTypenameContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(PlPgSqlParser.FCONST, 0); }
		public TerminalNode BCONST() { return getToken(PlPgSqlParser.BCONST, 0); }
		public TerminalNode XCONST() { return getToken(PlPgSqlParser.XCONST, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_aexprConst);
		try {
			setState(9307);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9276);
				constInterval();
				setState(9277);
				match(T__2);
				setState(9278);
				iconst();
				setState(9279);
				match(T__3);
				setState(9280);
				sconst();
				setState(9281);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9283);
				func_name();
				setState(9284);
				match(T__2);
				setState(9285);
				func_arg_list(0);
				setState(9286);
				match(T__3);
				setState(9287);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9289);
				constInterval();
				setState(9290);
				sconst();
				setState(9291);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9293);
				func_name();
				setState(9294);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9296);
				constTypename();
				setState(9297);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9299);
				iconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9300);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9301);
				match(FCONST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9302);
				match(BCONST);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9303);
				match(XCONST);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9304);
				match(TRUE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9305);
				match(FALSE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9306);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IconstContext extends ParserRuleContext {
		public TerminalNode ICONST() { return getToken(PlPgSqlParser.ICONST, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9309);
			match(ICONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SconstContext extends ParserRuleContext {
		public TerminalNode SCONST() { return getToken(PlPgSqlParser.SCONST, 0); }
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9311);
			match(SCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public RoleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitRoleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdContext roleId() throws RecognitionException {
		RoleIdContext _localctx = new RoleIdContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_roleId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9313);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_signedIconst);
		try {
			setState(9320);
			switch (_input.LA(1)) {
			case T__14:
				enterOuterAlt(_localctx, 1);
				{
				setState(9315);
				match(T__14);
				setState(9316);
				iconst();
				}
				break;
			case T__11:
				enterOuterAlt(_localctx, 2);
				{
				setState(9317);
				match(T__11);
				setState(9318);
				iconst();
				}
				break;
			case ICONST:
				enterOuterAlt(_localctx, 3);
				{
				setState(9319);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_colId);
		try {
			setState(9325);
			switch (_input.LA(1)) {
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9322);
				unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9323);
				col_name_keyword();
				}
				break;
			case IDENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9324);
				match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_type_function_name);
		try {
			setState(9330);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9327);
				unreserved_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9328);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9329);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(PlPgSqlParser.IDENT, 0); }
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_colLabel);
		try {
			setState(9337);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9332);
				unreserved_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9333);
				col_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9334);
				type_func_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9335);
				reserved_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9336);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PlPgSqlParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PlPgSqlParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PlPgSqlParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PlPgSqlParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PlPgSqlParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PlPgSqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PlPgSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlPgSqlParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PlPgSqlParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PlPgSqlParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PlPgSqlParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PlPgSqlParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PlPgSqlParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PlPgSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlPgSqlParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PlPgSqlParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PlPgSqlParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PlPgSqlParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(PlPgSqlParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PlPgSqlParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(PlPgSqlParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PlPgSqlParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PlPgSqlParser.CASCADED, 0); }
		public TerminalNode CATALOG_P() { return getToken(PlPgSqlParser.CATALOG_P, 0); }
		public TerminalNode CHAIN() { return getToken(PlPgSqlParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PlPgSqlParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PlPgSqlParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PlPgSqlParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PlPgSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlPgSqlParser.CLUSTER, 0); }
		public TerminalNode COMMENT() { return getToken(PlPgSqlParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PlPgSqlParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PlPgSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlPgSqlParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PlPgSqlParser.CONFIGURATION, 0); }
		public TerminalNode CONNECTION() { return getToken(PlPgSqlParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlPgSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PlPgSqlParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PlPgSqlParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PlPgSqlParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PlPgSqlParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PlPgSqlParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PlPgSqlParser.CSV, 0); }
		public TerminalNode CURRENT_P() { return getToken(PlPgSqlParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PlPgSqlParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PlPgSqlParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PlPgSqlParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PlPgSqlParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PlPgSqlParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PlPgSqlParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PlPgSqlParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlPgSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlPgSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlPgSqlParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PlPgSqlParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PlPgSqlParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PlPgSqlParser.DELIMITERS, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlPgSqlParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PlPgSqlParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PlPgSqlParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PlPgSqlParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PlPgSqlParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PlPgSqlParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PlPgSqlParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PlPgSqlParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(PlPgSqlParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PlPgSqlParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PlPgSqlParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PlPgSqlParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PlPgSqlParser.ESCAPE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlPgSqlParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PlPgSqlParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlPgSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlPgSqlParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlPgSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(PlPgSqlParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlPgSqlParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PlPgSqlParser.FAMILY, 0); }
		public TerminalNode FIRST_P() { return getToken(PlPgSqlParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlPgSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PlPgSqlParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PlPgSqlParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PlPgSqlParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PlPgSqlParser.FUNCTIONS, 0); }
		public TerminalNode GLOBAL() { return getToken(PlPgSqlParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PlPgSqlParser.GRANTED, 0); }
		public TerminalNode HANDLER() { return getToken(PlPgSqlParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PlPgSqlParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PlPgSqlParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PlPgSqlParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PlPgSqlParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PlPgSqlParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlPgSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PlPgSqlParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PlPgSqlParser.IMPLICIT_P, 0); }
		public TerminalNode INCLUDING() { return getToken(PlPgSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlPgSqlParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PlPgSqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PlPgSqlParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PlPgSqlParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PlPgSqlParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PlPgSqlParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PlPgSqlParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PlPgSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PlPgSqlParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PlPgSqlParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PlPgSqlParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PlPgSqlParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PlPgSqlParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PlPgSqlParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlPgSqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PlPgSqlParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PlPgSqlParser.LAST_P, 0); }
		public TerminalNode LC_COLLATE_P() { return getToken(PlPgSqlParser.LC_COLLATE_P, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(PlPgSqlParser.LC_CTYPE_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PlPgSqlParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PlPgSqlParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PlPgSqlParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PlPgSqlParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PlPgSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PlPgSqlParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PlPgSqlParser.LOCK_P, 0); }
		public TerminalNode MAPPING() { return getToken(PlPgSqlParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PlPgSqlParser.MATCH, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlPgSqlParser.MAXVALUE, 0); }
		public TerminalNode MINUTE_P() { return getToken(PlPgSqlParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PlPgSqlParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PlPgSqlParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PlPgSqlParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PlPgSqlParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PlPgSqlParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PlPgSqlParser.NAMES, 0); }
		public TerminalNode NEXT() { return getToken(PlPgSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PlPgSqlParser.NO, 0); }
		public TerminalNode NOTHING() { return getToken(PlPgSqlParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PlPgSqlParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PlPgSqlParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PlPgSqlParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PlPgSqlParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PlPgSqlParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PlPgSqlParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PlPgSqlParser.OIDS, 0); }
		public TerminalNode OPERATOR() { return getToken(PlPgSqlParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PlPgSqlParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PlPgSqlParser.OPTIONS, 0); }
		public TerminalNode OWNED() { return getToken(PlPgSqlParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PlPgSqlParser.OWNER, 0); }
		public TerminalNode PARSER() { return getToken(PlPgSqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PlPgSqlParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PlPgSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlPgSqlParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PlPgSqlParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PlPgSqlParser.PLANS, 0); }
		public TerminalNode PRECEDING() { return getToken(PlPgSqlParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PlPgSqlParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PlPgSqlParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PlPgSqlParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PlPgSqlParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlPgSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PlPgSqlParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlPgSqlParser.PROCEDURE, 0); }
		public TerminalNode QUOTE() { return getToken(PlPgSqlParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PlPgSqlParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PlPgSqlParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PlPgSqlParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PlPgSqlParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PlPgSqlParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PlPgSqlParser.REF, 0); }
		public TerminalNode REINDEX() { return getToken(PlPgSqlParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PlPgSqlParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PlPgSqlParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PlPgSqlParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PlPgSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PlPgSqlParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PlPgSqlParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PlPgSqlParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PlPgSqlParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PlPgSqlParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PlPgSqlParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PlPgSqlParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PlPgSqlParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlPgSqlParser.ROLLBACK, 0); }
		public TerminalNode ROWS() { return getToken(PlPgSqlParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PlPgSqlParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlPgSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlPgSqlParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PlPgSqlParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PlPgSqlParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PlPgSqlParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PlPgSqlParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlPgSqlParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PlPgSqlParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlPgSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PlPgSqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PlPgSqlParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PlPgSqlParser.SET, 0); }
		public TerminalNode SHARE() { return getToken(PlPgSqlParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PlPgSqlParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PlPgSqlParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlPgSqlParser.SNAPSHOT, 0); }
		public TerminalNode STABLE() { return getToken(PlPgSqlParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PlPgSqlParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PlPgSqlParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PlPgSqlParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PlPgSqlParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PlPgSqlParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PlPgSqlParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PlPgSqlParser.STORAGE, 0); }
		public TerminalNode STRICT_P() { return getToken(PlPgSqlParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PlPgSqlParser.STRIP_P, 0); }
		public TerminalNode SYSID() { return getToken(PlPgSqlParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PlPgSqlParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PlPgSqlParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlPgSqlParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PlPgSqlParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlPgSqlParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlPgSqlParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PlPgSqlParser.TEXT_P, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlPgSqlParser.TRANSACTION, 0); }
		public TerminalNode TRIGGER() { return getToken(PlPgSqlParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlPgSqlParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PlPgSqlParser.TRUSTED, 0); }
		public List<TerminalNode> TYPE_P() { return getTokens(PlPgSqlParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(PlPgSqlParser.TYPE_P, i);
		}
		public TerminalNode TYPES_P() { return getToken(PlPgSqlParser.TYPES_P, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlPgSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PlPgSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PlPgSqlParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PlPgSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PlPgSqlParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PlPgSqlParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PlPgSqlParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PlPgSqlParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PlPgSqlParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PlPgSqlParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PlPgSqlParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PlPgSqlParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PlPgSqlParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PlPgSqlParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PlPgSqlParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PlPgSqlParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(PlPgSqlParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PlPgSqlParser.WHITESPACE_P, 0); }
		public TerminalNode WITHOUT() { return getToken(PlPgSqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PlPgSqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PlPgSqlParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PlPgSqlParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PlPgSqlParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PlPgSqlParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PlPgSqlParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PlPgSqlParser.ZONE, 0); }
		public List<TerminalNode> K_QUERY() { return getTokens(PlPgSqlParser.K_QUERY); }
		public TerminalNode K_QUERY(int i) {
			return getToken(PlPgSqlParser.K_QUERY, i);
		}
		public TerminalNode K_ALIAS() { return getToken(PlPgSqlParser.K_ALIAS, 0); }
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public TerminalNode K_BACKWARD() { return getToken(PlPgSqlParser.K_BACKWARD, 0); }
		public TerminalNode K_CONSTANT() { return getToken(PlPgSqlParser.K_CONSTANT, 0); }
		public TerminalNode K_CURRENT() { return getToken(PlPgSqlParser.K_CURRENT, 0); }
		public TerminalNode K_CURSOR() { return getToken(PlPgSqlParser.K_CURSOR, 0); }
		public TerminalNode K_DEBUG() { return getToken(PlPgSqlParser.K_DEBUG, 0); }
		public TerminalNode K_DETAIL() { return getToken(PlPgSqlParser.K_DETAIL, 0); }
		public TerminalNode K_DUMP() { return getToken(PlPgSqlParser.K_DUMP, 0); }
		public TerminalNode K_ERROR() { return getToken(PlPgSqlParser.K_ERROR, 0); }
		public TerminalNode K_FIRST() { return getToken(PlPgSqlParser.K_FIRST, 0); }
		public TerminalNode K_FORWARD() { return getToken(PlPgSqlParser.K_FORWARD, 0); }
		public TerminalNode K_HINT() { return getToken(PlPgSqlParser.K_HINT, 0); }
		public TerminalNode K_INFO() { return getToken(PlPgSqlParser.K_INFO, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode K_LAST() { return getToken(PlPgSqlParser.K_LAST, 0); }
		public TerminalNode K_LOG() { return getToken(PlPgSqlParser.K_LOG, 0); }
		public TerminalNode K_MESSAGE() { return getToken(PlPgSqlParser.K_MESSAGE, 0); }
		public TerminalNode K_MESSAGE_TEXT() { return getToken(PlPgSqlParser.K_MESSAGE_TEXT, 0); }
		public TerminalNode K_NEXT() { return getToken(PlPgSqlParser.K_NEXT, 0); }
		public TerminalNode K_NO() { return getToken(PlPgSqlParser.K_NO, 0); }
		public TerminalNode K_NOTICE() { return getToken(PlPgSqlParser.K_NOTICE, 0); }
		public TerminalNode K_OPTION() { return getToken(PlPgSqlParser.K_OPTION, 0); }
		public TerminalNode K_PG_EXCEPTION_CONTEXT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_CONTEXT, 0); }
		public TerminalNode K_PG_EXCEPTION_DETAIL() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_DETAIL, 0); }
		public TerminalNode K_PG_EXCEPTION_HINT() { return getToken(PlPgSqlParser.K_PG_EXCEPTION_HINT, 0); }
		public TerminalNode K_PRIOR() { return getToken(PlPgSqlParser.K_PRIOR, 0); }
		public TerminalNode K_RELATIVE() { return getToken(PlPgSqlParser.K_RELATIVE, 0); }
		public TerminalNode K_RESULT_OID() { return getToken(PlPgSqlParser.K_RESULT_OID, 0); }
		public TerminalNode K_RETURNED_SQLSTATE() { return getToken(PlPgSqlParser.K_RETURNED_SQLSTATE, 0); }
		public TerminalNode K_REVERSE() { return getToken(PlPgSqlParser.K_REVERSE, 0); }
		public TerminalNode K_ROW_COUNT() { return getToken(PlPgSqlParser.K_ROW_COUNT, 0); }
		public TerminalNode K_ROWTYPE() { return getToken(PlPgSqlParser.K_ROWTYPE, 0); }
		public TerminalNode K_SCROLL() { return getToken(PlPgSqlParser.K_SCROLL, 0); }
		public TerminalNode K_SLICE() { return getToken(PlPgSqlParser.K_SLICE, 0); }
		public TerminalNode K_STACKED() { return getToken(PlPgSqlParser.K_STACKED, 0); }
		public TerminalNode K_USE_COLUMN() { return getToken(PlPgSqlParser.K_USE_COLUMN, 0); }
		public TerminalNode K_USE_VARIABLE() { return getToken(PlPgSqlParser.K_USE_VARIABLE, 0); }
		public TerminalNode K_VARIABLE_CONFLICT() { return getToken(PlPgSqlParser.K_VARIABLE_CONFLICT, 0); }
		public TerminalNode K_WARNING() { return getToken(PlPgSqlParser.K_WARNING, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9339);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_MESSAGE) | (1L << K_NEXT) | (1L << K_MESSAGE_TEXT) | (1L << K_STACKED) | (1L << K_PG_EXCEPTION_CONTEXT) | (1L << K_USE_COLUMN) | (1L << K_DUMP) | (1L << K_SLICE) | (1L << K_RESULT_OID) | (1L << K_ERROR) | (1L << K_FORWARD) | (1L << K_RETURNED_SQLSTATE) | (1L << K_BACKWARD) | (1L << K_HINT) | (1L << K_CURRENT) | (1L << K_DETAIL) | (1L << K_SCROLL) | (1L << K_USE_VARIABLE) | (1L << K_ALIAS) | (1L << K_INFO) | (1L << K_NO) | (1L << K_RELATIVE) | (1L << K_LOG) | (1L << K_QUERY) | (1L << K_ROW_COUNT) | (1L << K_DEBUG) | (1L << K_CONSTANT) | (1L << K_CURSOR) | (1L << K_PG_EXCEPTION_DETAIL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (K_PRIOR - 65)) | (1L << (K_FIRST - 65)) | (1L << (K_LAST - 65)) | (1L << (K_ROWTYPE - 65)) | (1L << (K_VARIABLE_CONFLICT - 65)) | (1L << (K_PG_EXCEPTION_HINT - 65)) | (1L << (K_OPTION - 65)) | (1L << (K_NOTICE - 65)) | (1L << (K_WARNING - 65)) | (1L << (K_REVERSE - 65)) | (1L << (ABORT_P - 65)) | (1L << (ABSOLUTE_P - 65)) | (1L << (ACCESS - 65)) | (1L << (ACTION - 65)) | (1L << (ADD_P - 65)) | (1L << (ADMIN - 65)) | (1L << (AFTER - 65)) | (1L << (AGGREGATE - 65)) | (1L << (ALSO - 65)) | (1L << (ALTER - 65)) | (1L << (ALWAYS - 65)) | (1L << (ARRAY - 65)) | (1L << (ASSERTION - 65)) | (1L << (ASSIGNMENT - 65)) | (1L << (AT - 65)) | (1L << (ATTRIBUTE - 65)) | (1L << (BACKWARD - 65)) | (1L << (BEFORE - 65)) | (1L << (BEGIN_P - 65)) | (1L << (BY - 65)) | (1L << (CACHE - 65)) | (1L << (CALLED - 65)) | (1L << (CASCADE - 65)) | (1L << (CASCADED - 65)) | (1L << (CATALOG_P - 65)) | (1L << (CHAIN - 65)) | (1L << (CHARACTERISTICS - 65)) | (1L << (CHECKPOINT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (CLASS - 129)) | (1L << (CLOSE - 129)) | (1L << (CLUSTER - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMENTS - 129)) | (1L << (COMMIT - 129)) | (1L << (COMMITTED - 129)) | (1L << (CONFIGURATION - 129)) | (1L << (CONNECTION - 129)) | (1L << (CONSTRAINTS - 129)) | (1L << (CONTENT_P - 129)) | (1L << (CONTINUE_P - 129)) | (1L << (CONVERSION_P - 129)) | (1L << (COPY - 129)) | (1L << (COST - 129)) | (1L << (CSV - 129)) | (1L << (CURRENT_P - 129)) | (1L << (CURSOR - 129)) | (1L << (CYCLE - 129)) | (1L << (DATA_P - 129)) | (1L << (DATABASE - 129)) | (1L << (DAY_P - 129)) | (1L << (DEALLOCATE - 129)) | (1L << (DECLARE - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE_P - 129)) | (1L << (DELIMITER - 129)) | (1L << (DELIMITERS - 129)) | (1L << (DICTIONARY - 129)) | (1L << (DISABLE_P - 129)) | (1L << (DISCARD - 129)) | (1L << (DOCUMENT_P - 129)) | (1L << (DOMAIN_P - 129)) | (1L << (DOUBLE_P - 129)) | (1L << (DROP - 129)) | (1L << (EACH - 129)) | (1L << (ENABLE_P - 129)) | (1L << (ENCODING - 129)) | (1L << (ENCRYPTED - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ENUM_P - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXCLUSIVE - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FAMILY - 194)) | (1L << (FIRST_P - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (FORWARD - 194)) | (1L << (FUNCTION - 194)) | (1L << (FUNCTIONS - 194)) | (1L << (GLOBAL - 194)) | (1L << (GRANTED - 194)) | (1L << (HANDLER - 194)) | (1L << (HEADER_P - 194)) | (1L << (HOLD - 194)) | (1L << (HOUR_P - 194)) | (1L << (IDENTITY_P - 194)) | (1L << (IF_P - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (IMMUTABLE - 194)) | (1L << (IMPLICIT_P - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDEX - 194)) | (1L << (INDEXES - 194)) | (1L << (INHERIT - 194)) | (1L << (INHERITS - 194)) | (1L << (INLINE_P - 194)) | (1L << (INPUT_P - 194)) | (1L << (INSENSITIVE - 194)) | (1L << (INSERT - 194)) | (1L << (INSTEAD - 194)) | (1L << (INVOKER - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IS - 258)) | (1L << (ISOLATION - 258)) | (1L << (KEY - 258)) | (1L << (LABEL - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE_P - 258)) | (1L << (LAST_P - 258)) | (1L << (LC_COLLATE_P - 258)) | (1L << (LC_CTYPE_P - 258)) | (1L << (LEAKPROOF - 258)) | (1L << (LEVEL - 258)) | (1L << (LISTEN - 258)) | (1L << (LOAD - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCATION - 258)) | (1L << (LOCK_P - 258)) | (1L << (MAPPING - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINUTE_P - 258)) | (1L << (MINVALUE - 258)) | (1L << (MODE - 258)) | (1L << (MONTH_P - 258)) | (1L << (MOVE - 258)) | (1L << (NAME_P - 258)) | (1L << (NAMES - 258)) | (1L << (NEXT - 258)) | (1L << (NO - 258)) | (1L << (NOTHING - 258)) | (1L << (NOTIFY - 258)) | (1L << (NOWAIT - 258)) | (1L << (NULLS_P - 258)) | (1L << (OBJECT_P - 258)) | (1L << (OF - 258)) | (1L << (OFF - 258)) | (1L << (OIDS - 258)) | (1L << (OPERATOR - 258)) | (1L << (OPTION - 258)) | (1L << (OPTIONS - 258)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (OWNED - 325)) | (1L << (OWNER - 325)) | (1L << (PARSER - 325)) | (1L << (PARTIAL - 325)) | (1L << (PARTITION - 325)) | (1L << (PASSING - 325)) | (1L << (PASSWORD - 325)) | (1L << (PLANS - 325)) | (1L << (PRECEDING - 325)) | (1L << (PREPARE - 325)) | (1L << (PREPARED - 325)) | (1L << (PRESERVE - 325)) | (1L << (PRIOR - 325)) | (1L << (PRIVILEGES - 325)) | (1L << (PROCEDURAL - 325)) | (1L << (PROCEDURE - 325)) | (1L << (QUOTE - 325)) | (1L << (RANGE - 325)) | (1L << (READ - 325)) | (1L << (REASSIGN - 325)) | (1L << (RECHECK - 325)) | (1L << (RECURSIVE - 325)) | (1L << (REF - 325)) | (1L << (REINDEX - 325)) | (1L << (RELATIVE_P - 325)) | (1L << (RELEASE - 325)) | (1L << (RENAME - 325)) | (1L << (REPEATABLE - 325)) | (1L << (REPLACE - 325)) | (1L << (REPLICA - 325)) | (1L << (RESET - 325)) | (1L << (RESTART - 325)) | (1L << (RESTRICT - 325)) | (1L << (RETURNS - 325)) | (1L << (REVOKE - 325)) | (1L << (ROLE - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROWS - 325)) | (1L << (RULE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCROLL - 325)) | (1L << (SEARCH - 325)) | (1L << (SECOND_P - 325)) | (1L << (SECURITY - 325)) | (1L << (SEQUENCE - 325)) | (1L << (SEQUENCES - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERVER - 325)) | (1L << (SESSION - 325)) | (1L << (SET - 325)) | (1L << (SHARE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SHOW - 389)) | (1L << (SIMPLE - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (STABLE - 389)) | (1L << (STANDALONE_P - 389)) | (1L << (START - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATISTICS - 389)) | (1L << (STDIN - 389)) | (1L << (STDOUT - 389)) | (1L << (STORAGE - 389)) | (1L << (STRICT_P - 389)) | (1L << (STRIP_P - 389)) | (1L << (SYSID - 389)) | (1L << (SYSTEM_P - 389)) | (1L << (TABLES - 389)) | (1L << (TABLESPACE - 389)) | (1L << (TEMP - 389)) | (1L << (TEMPLATE - 389)) | (1L << (TEMPORARY - 389)) | (1L << (TEXT_P - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TRUSTED - 389)) | (1L << (TYPE_P - 389)) | (1L << (TYPES_P - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNCOMMITTED - 389)) | (1L << (UNENCRYPTED - 389)) | (1L << (UNKNOWN - 389)) | (1L << (UNLISTEN - 389)) | (1L << (UNLOGGED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (VACUUM - 389)) | (1L << (VALID - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALIDATOR - 389)) | (1L << (VALUE_P - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION_P - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (VIEW - 453)) | (1L << (VOLATILE - 453)) | (1L << (WHITESPACE_P - 453)) | (1L << (WITHOUT - 453)) | (1L << (WORK - 453)) | (1L << (WRAPPER - 453)) | (1L << (WRITE - 453)) | (1L << (XML_P - 453)) | (1L << (YEAR_P - 453)) | (1L << (YES_P - 453)) | (1L << (ZONE - 453)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlPgSqlParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PlPgSqlParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PlPgSqlParser.BIT, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PlPgSqlParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PlPgSqlParser.CHAR_P, 0); }
		public TerminalNode CHARACTER() { return getToken(PlPgSqlParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(PlPgSqlParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PlPgSqlParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PlPgSqlParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PlPgSqlParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PlPgSqlParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PlPgSqlParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PlPgSqlParser.GREATEST, 0); }
		public TerminalNode INOUT() { return getToken(PlPgSqlParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PlPgSqlParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PlPgSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlPgSqlParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PlPgSqlParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PlPgSqlParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlPgSqlParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PlPgSqlParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(PlPgSqlParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(PlPgSqlParser.NUMERIC, 0); }
		public TerminalNode OUT_P() { return getToken(PlPgSqlParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PlPgSqlParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PlPgSqlParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PlPgSqlParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PlPgSqlParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PlPgSqlParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PlPgSqlParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PlPgSqlParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PlPgSqlParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PlPgSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlPgSqlParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PlPgSqlParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PlPgSqlParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PlPgSqlParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PlPgSqlParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlPgSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PlPgSqlParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlPgSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlPgSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlPgSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlPgSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlPgSqlParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PlPgSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlPgSqlParser.XMLSERIALIZE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_col_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9341);
			_la = _input.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (BETWEEN - 109)) | (1L << (BIGINT - 109)) | (1L << (BIT - 109)) | (1L << (BOOLEAN_P - 109)) | (1L << (CHAR_P - 109)) | (1L << (CHARACTER - 109)) | (1L << (COALESCE - 109)) | (1L << (DEC - 109)) | (1L << (DECIMAL_P - 109)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (EXISTS - 201)) | (1L << (EXTRACT - 201)) | (1L << (FLOAT_P - 201)) | (1L << (GREATEST - 201)) | (1L << (INOUT - 201)) | (1L << (INT_P - 201)) | (1L << (INTEGER - 201)) | (1L << (INTERVAL - 201)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (LEAST - 271)) | (1L << (NATIONAL - 271)) | (1L << (NCHAR - 271)) | (1L << (NONE - 271)) | (1L << (NULLIF - 271)) | (1L << (NUMERIC - 271)) | (1L << (OUT_P - 271)) | (1L << (OVERLAY - 271)) | (1L << (POSITION - 271)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (PRECISION - 336)) | (1L << (REAL - 336)) | (1L << (ROW - 336)) | (1L << (SETOF - 336)) | (1L << (SMALLINT - 336)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (SUBSTRING - 405)) | (1L << (TIME - 405)) | (1L << (TIMESTAMP - 405)) | (1L << (TREAT - 405)) | (1L << (TRIM - 405)) | (1L << (VALUES - 405)) | (1L << (VARCHAR - 405)) | (1L << (XMLATTRIBUTES - 405)) | (1L << (XMLCONCAT - 405)) | (1L << (XMLELEMENT - 405)) | (1L << (XMLEXISTS - 405)))) != 0) || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (XMLFOREST - 469)) | (1L << (XMLPARSE - 469)) | (1L << (XMLPI - 469)) | (1L << (XMLROOT - 469)) | (1L << (XMLSERIALIZE - 469)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PlPgSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PlPgSqlParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PlPgSqlParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PlPgSqlParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PlPgSqlParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PlPgSqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PlPgSqlParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PlPgSqlParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PlPgSqlParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PlPgSqlParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PlPgSqlParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PlPgSqlParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PlPgSqlParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PlPgSqlParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PlPgSqlParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PlPgSqlParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PlPgSqlParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PlPgSqlParser.OUTER_P, 0); }
		public TerminalNode OVER() { return getToken(PlPgSqlParser.OVER, 0); }
		public TerminalNode OVERLAPS() { return getToken(PlPgSqlParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PlPgSqlParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PlPgSqlParser.SIMILAR, 0); }
		public TerminalNode VERBOSE() { return getToken(PlPgSqlParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9343);
			_la = _input.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (AUTHORIZATION - 105)) | (1L << (BINARY - 105)) | (1L << (COLLATION - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CROSS - 105)) | (1L << (CURRENT_SCHEMA - 105)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (FREEZE - 216)) | (1L << (FULL - 216)) | (1L << (ILIKE - 216)) | (1L << (INNER_P - 216)) | (1L << (IS - 216)) | (1L << (ISNULL - 216)) | (1L << (JOIN - 216)) | (1L << (LEFT - 216)) | (1L << (LIKE - 216)))) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (NATURAL - 294)) | (1L << (NOTNULL - 294)) | (1L << (OUTER_P - 294)) | (1L << (OVER - 294)) | (1L << (OVERLAPS - 294)))) != 0) || _la==RIGHT || _la==SIMILAR || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlPgSqlParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PlPgSqlParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlPgSqlParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PlPgSqlParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PlPgSqlParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PlPgSqlParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PlPgSqlParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PlPgSqlParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PlPgSqlParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PlPgSqlParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PlPgSqlParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PlPgSqlParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PlPgSqlParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PlPgSqlParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PlPgSqlParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlPgSqlParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PlPgSqlParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PlPgSqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PlPgSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PlPgSqlParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PlPgSqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PlPgSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlPgSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PlPgSqlParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PlPgSqlParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PlPgSqlParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PlPgSqlParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PlPgSqlParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PlPgSqlParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PlPgSqlParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PlPgSqlParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PlPgSqlParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PlPgSqlParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PlPgSqlParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PlPgSqlParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PlPgSqlParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PlPgSqlParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PlPgSqlParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PlPgSqlParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PlPgSqlParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PlPgSqlParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PlPgSqlParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(PlPgSqlParser.INTO, 0); }
		public TerminalNode LEADING() { return getToken(PlPgSqlParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PlPgSqlParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PlPgSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PlPgSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PlPgSqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PlPgSqlParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PlPgSqlParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PlPgSqlParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PlPgSqlParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PlPgSqlParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PlPgSqlParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PlPgSqlParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PlPgSqlParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PlPgSqlParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PlPgSqlParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PlPgSqlParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PlPgSqlParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PlPgSqlParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PlPgSqlParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PlPgSqlParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PlPgSqlParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PlPgSqlParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PlPgSqlParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PlPgSqlParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PlPgSqlParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PlPgSqlParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PlPgSqlParser.USER, 0); }
		public TerminalNode USING() { return getToken(PlPgSqlParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PlPgSqlParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PlPgSqlParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PlPgSqlParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PlPgSqlParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PlPgSqlParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlPgSqlVisitor ) return ((PlPgSqlVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9345);
			_la = _input.LA(1);
			if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (ALL - 89)) | (1L << (ANALYSE - 89)) | (1L << (ANALYZE - 89)) | (1L << (AND - 89)) | (1L << (ANY - 89)) | (1L << (ARRAY - 89)) | (1L << (AS - 89)) | (1L << (ASC - 89)) | (1L << (ASYMMETRIC - 89)) | (1L << (BOTH - 89)) | (1L << (CASE - 89)) | (1L << (CAST - 89)) | (1L << (CHECK - 89)) | (1L << (COLLATE - 89)) | (1L << (COLUMN - 89)) | (1L << (CONSTRAINT - 89)) | (1L << (CREATE - 89)))) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (CURRENT_CATALOG - 154)) | (1L << (CURRENT_DATE - 154)) | (1L << (CURRENT_ROLE - 154)) | (1L << (CURRENT_TIME - 154)) | (1L << (CURRENT_TIMESTAMP - 154)) | (1L << (CURRENT_USER - 154)) | (1L << (DEFAULT - 154)) | (1L << (DEFERRABLE - 154)) | (1L << (DESC - 154)) | (1L << (DISTINCT - 154)) | (1L << (DO - 154)) | (1L << (ELSE - 154)) | (1L << (END_P - 154)) | (1L << (EXCEPT - 154)) | (1L << (FALSE_P - 154)) | (1L << (FETCH - 154)) | (1L << (FOR - 154)) | (1L << (FOREIGN - 154)) | (1L << (FROM - 154)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (GRANT - 222)) | (1L << (GROUP_P - 222)) | (1L << (HAVING - 222)) | (1L << (IN_P - 222)) | (1L << (INITIALLY - 222)) | (1L << (INTERSECT - 222)) | (1L << (INTO - 222)) | (1L << (LEADING - 222)) | (1L << (LIMIT - 222)) | (1L << (LOCALTIME - 222)) | (1L << (LOCALTIMESTAMP - 222)))) != 0) || ((((_la - 299)) & ~0x3f) == 0 && ((1L << (_la - 299)) & ((1L << (NOT - 299)) | (1L << (NULL_P - 299)) | (1L << (OFFSET - 299)) | (1L << (ON - 299)) | (1L << (ONLY - 299)) | (1L << (OR - 299)) | (1L << (ORDER - 299)) | (1L << (PLACING - 299)) | (1L << (PRIMARY - 299)) | (1L << (REFERENCES - 299)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (RETURNING - 364)) | (1L << (SELECT - 364)) | (1L << (SESSION_USER - 364)) | (1L << (SOME - 364)) | (1L << (SYMMETRIC - 364)) | (1L << (TABLE - 364)) | (1L << (THEN - 364)) | (1L << (TO - 364)) | (1L << (TRAILING - 364)) | (1L << (TRUE_P - 364)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (UNION - 433)) | (1L << (UNIQUE - 433)) | (1L << (USER - 433)) | (1L << (USING - 433)) | (1L << (VARIADIC - 433)) | (1L << (WHEN - 433)) | (1L << (WHERE - 433)) | (1L << (WINDOW - 433)) | (1L << (WITH - 433)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1:
			return comp_options_sempred((Comp_optionsContext)_localctx, predIndex);
		case 7:
			return decl_stmts_sempred((Decl_stmtsContext)_localctx, predIndex);
		case 13:
			return decl_cursor_arglist_sempred((Decl_cursor_arglistContext)_localctx, predIndex);
		case 26:
			return proc_stmts_sempred((Proc_stmtsContext)_localctx, predIndex);
		case 32:
			return getdiag_list_sempred((Getdiag_listContext)_localctx, predIndex);
		case 36:
			return assign_var_sempred((Assign_varContext)_localctx, predIndex);
		case 42:
			return case_when_list_sempred((Case_when_listContext)_localctx, predIndex);
		case 74:
			return proc_exceptions_sempred((Proc_exceptionsContext)_localctx, predIndex);
		case 76:
			return proc_conditions_sempred((Proc_conditionsContext)_localctx, predIndex);
		case 87:
			return stmtmulti_sempred((StmtmultiContext)_localctx, predIndex);
		case 91:
			return optRoleList_sempred((OptRoleListContext)_localctx, predIndex);
		case 92:
			return alterOptRoleList_sempred((AlterOptRoleListContext)_localctx, predIndex);
		case 109:
			return optSchemaEltList_sempred((OptSchemaEltListContext)_localctx, predIndex);
		case 114:
			return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 115:
			return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 132:
			return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 140:
			return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 143:
			return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 150:
			return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 156:
			return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 159:
			return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 165:
			return tableElementList_sempred((TableElementListContext)_localctx, predIndex);
		case 166:
			return typedTableElementList_sempred((TypedTableElementListContext)_localctx, predIndex);
		case 171:
			return colQualList_sempred((ColQualListContext)_localctx, predIndex);
		case 176:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 182:
			return columnList_sempred((ColumnListContext)_localctx, predIndex);
		case 185:
			return exclusionConstraintList_sempred((ExclusionConstraintListContext)_localctx, predIndex);
		case 204:
			return seqOptList_sempred((SeqOptListContext)_localctx, predIndex);
		case 208:
			return numericOnly_list_sempred((NumericOnly_listContext)_localctx, predIndex);
		case 221:
			return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 224:
			return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 229:
			return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 234:
			return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 236:
			return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 249:
			return foreignTableElementList_sempred((ForeignTableElementListContext)_localctx, predIndex);
		case 258:
			return triggerEvents_sempred((TriggerEventsContext)_localctx, predIndex);
		case 264:
			return triggerFuncArgs_sempred((TriggerFuncArgsContext)_localctx, predIndex);
		case 267:
			return constraintAttributeSpec_sempred((ConstraintAttributeSpecContext)_localctx, predIndex);
		case 274:
			return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 279:
			return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 282:
			return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 285:
			return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 293:
			return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 301:
			return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 303:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 320:
			return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 323:
			return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 326:
			return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 333:
			return defACLOptionList_sempred((DefACLOptionListContext)_localctx, predIndex);
		case 342:
			return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 351:
			return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 353:
			return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 360:
			return createfunc_opt_list_sempred((Createfunc_opt_listContext)_localctx, predIndex);
		case 366:
			return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 368:
			return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 376:
			return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 392:
			return ruleActionMulti_sempred((RuleActionMultiContext)_localctx, predIndex);
		case 405:
			return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 411:
			return createdb_opt_list_sempred((Createdb_opt_listContext)_localctx, predIndex);
		case 416:
			return alterdb_opt_list_sempred((Alterdb_opt_listContext)_localctx, predIndex);
		case 428:
			return vacuum_option_list_sempred((Vacuum_option_listContext)_localctx, predIndex);
		case 438:
			return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 450:
			return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 460:
			return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 465:
			return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 468:
			return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 471:
			return select_with_parens_sempred((Select_with_parensContext)_localctx, predIndex);
		case 474:
			return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 476:
			return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 488:
			return sortby_list_sempred((Sortby_listContext)_localctx, predIndex);
		case 504:
			return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 507:
			return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 509:
			return from_list_sempred((From_listContext)_localctx, predIndex);
		case 512:
			return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 518:
			return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 524:
			return tableFuncElementList_sempred((TableFuncElementListContext)_localctx, predIndex);
		case 527:
			return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 550:
			return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 551:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 557:
			return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 563:
			return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 579:
			return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 580:
			return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 582:
			return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 584:
			return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 596:
			return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 602:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 603:
			return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 606:
			return ctext_expr_list_sempred((Ctext_expr_listContext)_localctx, predIndex);
		case 608:
			return target_list_sempred((Target_listContext)_localctx, predIndex);
		case 610:
			return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 612:
			return name_list_sempred((Name_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean comp_options_sempred(Comp_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean decl_stmts_sempred(Decl_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean decl_cursor_arglist_sempred(Decl_cursor_arglistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean proc_stmts_sempred(Proc_stmtsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean getdiag_list_sempred(Getdiag_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean assign_var_sempred(Assign_varContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean case_when_list_sempred(Case_when_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean proc_exceptions_sempred(Proc_exceptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean proc_conditions_sempred(Proc_conditionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean stmtmulti_sempred(StmtmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean optRoleList_sempred(OptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterOptRoleList_sempred(AlterOptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean optSchemaEltList_sempred(OptSchemaEltListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableElementList_sempred(TableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean typedTableElementList_sempred(TypedTableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean colQualList_sempred(ColQualListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 3);
		case 25:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean columnList_sempred(ColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean exclusionConstraintList_sempred(ExclusionConstraintListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean seqOptList_sempred(SeqOptListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean numericOnly_list_sempred(NumericOnly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean foreignTableElementList_sempred(ForeignTableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean triggerEvents_sempred(TriggerEventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean triggerFuncArgs_sempred(TriggerFuncArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean constraintAttributeSpec_sempred(ConstraintAttributeSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean defACLOptionList_sempred(DefACLOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createfunc_opt_list_sempred(Createfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ruleActionMulti_sempred(RuleActionMultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return precpred(_ctx, 3);
		case 59:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createdb_opt_list_sempred(Createdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterdb_opt_list_sempred(Alterdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean vacuum_option_list_sempred(Vacuum_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 5);
		case 68:
			return precpred(_ctx, 4);
		case 69:
			return precpred(_ctx, 3);
		case 70:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean select_with_parens_sempred(Select_with_parensContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 3);
		case 72:
			return precpred(_ctx, 2);
		case 73:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return precpred(_ctx, 3);
		case 75:
			return precpred(_ctx, 2);
		case 76:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean sortby_list_sempred(Sortby_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean from_list_sempred(From_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return precpred(_ctx, 5);
		case 83:
			return precpred(_ctx, 4);
		case 84:
			return precpred(_ctx, 3);
		case 85:
			return precpred(_ctx, 2);
		case 86:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableFuncElementList_sempred(TableFuncElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return precpred(_ctx, 3);
		case 90:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return precpred(_ctx, 60);
		case 92:
			return precpred(_ctx, 59);
		case 93:
			return precpred(_ctx, 58);
		case 94:
			return precpred(_ctx, 57);
		case 95:
			return precpred(_ctx, 56);
		case 96:
			return precpred(_ctx, 55);
		case 97:
			return precpred(_ctx, 54);
		case 98:
			return precpred(_ctx, 53);
		case 99:
			return precpred(_ctx, 52);
		case 100:
			return precpred(_ctx, 51);
		case 101:
			return precpred(_ctx, 50);
		case 102:
			return precpred(_ctx, 49);
		case 103:
			return precpred(_ctx, 48);
		case 104:
			return precpred(_ctx, 47);
		case 105:
			return precpred(_ctx, 46);
		case 106:
			return precpred(_ctx, 45);
		case 107:
			return precpred(_ctx, 42);
		case 108:
			return precpred(_ctx, 41);
		case 109:
			return precpred(_ctx, 40);
		case 110:
			return precpred(_ctx, 39);
		case 111:
			return precpred(_ctx, 38);
		case 112:
			return precpred(_ctx, 37);
		case 113:
			return precpred(_ctx, 32);
		case 114:
			return precpred(_ctx, 29);
		case 115:
			return precpred(_ctx, 25);
		case 116:
			return precpred(_ctx, 24);
		case 117:
			return precpred(_ctx, 13);
		case 118:
			return precpred(_ctx, 12);
		case 119:
			return precpred(_ctx, 44);
		case 120:
			return precpred(_ctx, 43);
		case 121:
			return precpred(_ctx, 35);
		case 122:
			return precpred(_ctx, 34);
		case 123:
			return precpred(_ctx, 27);
		case 124:
			return precpred(_ctx, 23);
		case 125:
			return precpred(_ctx, 22);
		case 126:
			return precpred(_ctx, 21);
		case 127:
			return precpred(_ctx, 20);
		case 128:
			return precpred(_ctx, 19);
		case 129:
			return precpred(_ctx, 18);
		case 130:
			return precpred(_ctx, 17);
		case 131:
			return precpred(_ctx, 16);
		case 132:
			return precpred(_ctx, 15);
		case 133:
			return precpred(_ctx, 14);
		case 134:
			return precpred(_ctx, 11);
		case 135:
			return precpred(_ctx, 10);
		case 136:
			return precpred(_ctx, 9);
		case 137:
			return precpred(_ctx, 8);
		case 138:
			return precpred(_ctx, 7);
		case 139:
			return precpred(_ctx, 6);
		case 140:
			return precpred(_ctx, 5);
		case 141:
			return precpred(_ctx, 4);
		case 142:
			return precpred(_ctx, 2);
		case 143:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 144:
			return precpred(_ctx, 22);
		case 145:
			return precpred(_ctx, 21);
		case 146:
			return precpred(_ctx, 20);
		case 147:
			return precpred(_ctx, 19);
		case 148:
			return precpred(_ctx, 18);
		case 149:
			return precpred(_ctx, 17);
		case 150:
			return precpred(_ctx, 16);
		case 151:
			return precpred(_ctx, 15);
		case 152:
			return precpred(_ctx, 14);
		case 153:
			return precpred(_ctx, 9);
		case 154:
			return precpred(_ctx, 6);
		case 155:
			return precpred(_ctx, 5);
		case 156:
			return precpred(_ctx, 13);
		case 157:
			return precpred(_ctx, 7);
		case 158:
			return precpred(_ctx, 4);
		case 159:
			return precpred(_ctx, 3);
		case 160:
			return precpred(_ctx, 2);
		case 161:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 168:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ctext_expr_list_sempred(Ctext_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean target_list_sempred(Target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u01f5\u2486\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\3\2\3\2\3\2\3\2\3\3\3\3\3\3\7\3\u04fa\n\3\f\3\16\3\u04fd"+
		"\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u050b\n\4\3"+
		"\5\3\5\5\5\u050f\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\5\7\u0520\n\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\7\t\u0529\n\t\f\t"+
		"\16\t\u052c\13\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0534\n\n\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\5\13\u054b\n\13\3\f\3\f\3\f\3\f\5\f\u0551\n\f\3\r"+
		"\3\r\3\16\3\16\3\16\3\16\3\16\5\16\u055a\n\16\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\7\17\u0562\n\17\f\17\16\17\u0565\13\17\3\20\3\20\3\20\3\21\3\21"+
		"\3\22\3\22\3\23\3\23\3\24\3\24\5\24\u0572\n\24\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\5\25\u057d\n\25\3\26\3\26\3\26\5\26\u0582\n\26\3"+
		"\27\3\27\3\27\5\27\u0587\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\5\30\u0592\n\30\3\31\3\31\5\31\u0596\n\31\3\32\3\32\3\33\3\33\5"+
		"\33\u059c\n\33\3\34\3\34\3\34\3\34\3\34\7\34\u05a3\n\34\f\34\16\34\u05a6"+
		"\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u05c0\n\35"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\5!\u05d2"+
		"\n!\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u05da\n\"\f\"\16\"\u05dd\13\"\3#\3#\3"+
		"#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3&\7&\u05ed\n&\f&\16&\u05f0\13&\3\'\3"+
		"\'\3\'\3\'\7\'\u05f6\n\'\f\'\16\'\u05f9\13\'\3\'\5\'\u05fc\n\'\3\'\3\'"+
		"\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\5+\u0613\n"+
		"+\3,\3,\3,\3,\3,\7,\u061a\n,\f,\16,\u061d\13,\3-\3-\3-\3-\3.\3.\3.\5."+
		"\u0626\n.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\7\62\u0644\n\62\f\62\16\62\u0647\13\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0664\n\62\3\63\3\63\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\5\65\u0674\n\65\3\66"+
		"\3\66\3\66\3\66\3\67\3\67\38\38\38\38\38\38\38\38\38\38\38\38\58\u0688"+
		"\n8\38\58\u068b\n8\39\39\39\39\39\79\u0692\n9\f9\169\u0695\139\59\u0697"+
		"\n9\39\59\u069a\n9\39\39\3:\3:\3:\3:\3:\3:\3:\5:\u06a5\n:\3;\3;\3<\3<"+
		"\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3="+
		"\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5="+
		"\u071d\n=\3>\3>\3>\5>\u0722\n>\3>\3>\5>\u0726\n>\3>\3>\3?\3?\3?\3?\3?"+
		"\3?\3?\5?\u0731\n?\3@\3@\3@\7@\u0736\n@\f@\16@\u0739\13@\3A\3A\5A\u073d"+
		"\nA\3B\3B\3B\5B\u0742\nB\3B\5B\u0745\nB\3B\3B\3B\3B\3B\3B\5B\u074d\nB"+
		"\3B\5B\u0750\nB\3B\3B\3B\3B\5B\u0756\nB\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0760"+
		"\nB\3C\3C\3C\7C\u0765\nC\fC\16C\u0768\13C\3D\3D\3E\3E\3E\3E\3E\3E\3E\3"+
		"F\3F\3F\3F\3F\3G\3G\3G\5G\u077b\nG\3H\3H\3H\3H\3I\3I\3I\3J\3J\3K\3K\3"+
		"K\3K\3K\3K\3K\5K\u078d\nK\3L\3L\3L\3L\3L\7L\u0794\nL\fL\16L\u0797\13L"+
		"\3M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\7N\u07a4\nN\fN\16N\u07a7\13N\3O\3O\3"+
		"O\5O\u07ac\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u07b8\nP\3Q\3Q\3Q\3R\3"+
		"R\3R\3S\3S\3S\3T\3T\3T\3T\3T\5T\u07c8\nT\3U\3U\5U\u07cc\nU\3V\3V\3V\5"+
		"V\u07d1\nV\3W\3W\3W\5W\u07d6\nW\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\7Y\u07e0\nY\f"+
		"Y\16Y\u07e3\13Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\5Z\u0854\nZ\3[\3[\3[\3[\3[\3[\3\\\3\\\5\\\u085e\n\\\3]\3]\3]\7]\u0863"+
		"\n]\f]\16]\u0866\13]\3^\3^\3^\7^\u086b\n^\f^\16^\u086e\13^\3_\3_\3_\3"+
		"_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0884\n_\3`\3`\3"+
		"`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0893\n`\3a\3a\3a\3a\3a\3a\3b\3b\3"+
		"b\3b\3b\3b\3c\3c\3c\3c\5c\u08a5\nc\3d\3d\3d\3d\3d\3d\3e\3e\3e\3e\3e\3"+
		"e\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\3g\5g\u08c0\ng\3h\3h\3h\3h\3h\3"+
		"h\3h\3h\5h\u08ca\nh\3i\3i\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\3j\3k\3k\3l\3"+
		"l\3l\3l\3l\3l\3l\3l\5l\u08e3\nl\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5"+
		"m\u08f1\nm\3n\3n\5n\u08f5\nn\3o\3o\3o\7o\u08fa\no\fo\16o\u08fd\13o\3p"+
		"\3p\3p\3p\3p\3p\5p\u0905\np\3q\3q\3q\3q\3q\3q\3q\3q\5q\u090f\nq\3r\3r"+
		"\3r\3r\3r\3r\3r\3r\5r\u0919\nr\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s"+
		"\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s"+
		"\3s\3s\3s\3s\3s\3s\3s\5s\u0946\ns\3t\3t\3t\3t\3t\3t\7t\u094e\nt\ft\16"+
		"t\u0951\13t\3u\3u\3u\3u\3u\3u\7u\u0959\nu\fu\16u\u095c\13u\3v\3v\5v\u0960"+
		"\nv\3w\3w\3w\3w\3w\3w\3w\5w\u0969\nw\3x\3x\3x\3x\5x\u096f\nx\3y\3y\3y"+
		"\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0981\ny\3z\3z\3z\5z\u0986"+
		"\nz\3{\3{\5{\u098a\n{\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u099a"+
		"\n|\3}\3}\3}\5}\u099f\n}\3~\3~\3~\5~\u09a4\n~\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u09b4"+
		"\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\5\u0081"+
		"\u09bd\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u09cb\n\u0084\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\5\u0085\u09fd\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\7\u0086\u0a05\n\u0086\f\u0086\16\u0086\u0a08\13\u0086"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\5\u0087\u0aaf\n\u0087\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0ab6\n\u0088\3\u0089\3\u0089\3\u0089\5\u0089"+
		"\u0abb\n\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u0ac0\n\u008a\3\u008b\3"+
		"\u008b\3\u008b\5\u008b\u0ac5\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\3\u008d\5\u008d\u0ace\n\u008d\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\7\u008e\u0ad6\n\u008e\f\u008e\16\u008e\u0ad9\13"+
		"\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0aea"+
		"\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\7\u0091\u0af7\n\u0091\f\u0091\16\u0091\u0afa"+
		"\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\5\u0092\u0b16\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0b1c\n"+
		"\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0b30\n\u0094\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096"+
		"\5\u0096\u0b37\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0b3e\n\u0097\3\u0098\3\u0098\3\u0098\7\u0098\u0b43\n\u0098\f\u0098\16"+
		"\u0098\u0b46\13\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0b68\n\u0099\3\u009a\3\u009a\5\u009a\u0b6c\n\u009a\3\u009b\3\u009b\3"+
		"\u009b\5\u009b\u0b71\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5"+
		"\u009c\u0b78\n\u009c\3\u009d\3\u009d\5\u009d\u0b7c\n\u009d\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0b84\n\u009e\f\u009e\16\u009e"+
		"\u0b87\13\u009e\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0b94\n\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0b9c\n\u00a1\f\u00a1\16\u00a1"+
		"\u0b9f\13\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\5\u00a3\u0bd7\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4"+
		"\u0be5\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u0be9\n\u00a5\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\5\u00a6\u0bf0\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\3\u00a7\7\u00a7\u0bf8\n\u00a7\f\u00a7\16\u00a7\u0bfb\13"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0c03\n"+
		"\u00a8\f\u00a8\16\u00a8\u0c06\13\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0c0b\n\u00a9\3\u00aa\3\u00aa\5\u00aa\u0c0f\n\u00aa\3\u00ab\3\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad"+
		"\3\u00ad\3\u00ad\7\u00ad\u0c1e\n\u00ad\f\u00ad\16\u00ad\u0c21\13\u00ad"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u0c2b\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0c47\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0c50\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0c5d"+
		"\n\u00b2\f\u00b2\16\u00b2\u0c60\13\u00b2\3\u00b3\3\u00b3\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0c69\n\u00b4\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0ca1\n\u00b5"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0ca6\n\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u0cad\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\7\u00b8\u0cb5\n\u00b8\f\u00b8\16\u00b8\u0cb8\13\u00b8"+
		"\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u0cc3\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\7\u00bb\u0ccb\n\u00bb\f\u00bb\16\u00bb\u0cce\13\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u0cdb\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\5\u00bd\u0ce3\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u0cee\n\u00be\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0d00\n\u00c1\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0d08\n\u00c2\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d11\n\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u0d1f\n\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u0d24\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0d2b\n"+
		"\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0d45"+
		"\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u0d59\n\u00cc\3\u00cd\3\u00cd\5\u00cd\u0d5d\n\u00cd\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0d64\n\u00ce\f\u00ce\16"+
		"\u00ce\u0d67\13\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0d86\n\u00cf\3\u00d0"+
		"\3\u00d0\5\u00d0\u0d8a\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u0d90\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2"+
		"\u0d98\n\u00d2\f\u00d2\16\u00d2\u0d9b\13\u00d2\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0daf\n\u00d3"+
		"\3\u00d4\3\u00d4\5\u00d4\u0db3\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u0db9\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0dbe\n\u00d6\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0dc4\n\u00d7\3\u00d8\3\u00d8\5"+
		"\u00d8\u0dc8\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9"+
		"\u0dd8\n\u00d9\3\u00da\3\u00da\5\u00da\u0ddc\n\u00da\3\u00db\3\u00db\3"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\5\u00dc"+
		"\u0de8\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u0df2\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\5\u00de\u0e03\n\u00de\3\u00df\3\u00df\3\u00df\7\u00df\u0e08\n"+
		"\u00df\f\u00df\16\u00df\u0e0b\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u0e13\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\7\u00e2\u0e1e\n\u00e2\f\u00e2"+
		"\16\u00e2\u0e21\13\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0ed8\n\u00e4\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0eea\n\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0ef1\n\u00e7\f\u00e7\16\u00e7"+
		"\u0ef4\13\u00e7\3\u00e8\3\u00e8\5\u00e8\u0ef8\n\u00e8\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0f0a\n\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0f1b\n\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0f23\n\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u0f2b\n\u00ec\f\u00ec"+
		"\16\u00ec\u0f2e\13\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0f3b\n\u00ee\f\u00ee"+
		"\16\u00ee\u0f3e\13\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\5\u00ef\u0f47\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1"+
		"\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0f5e"+
		"\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0f64\n\u00f5\3\u00f6"+
		"\3\u00f6\5\u00f6\u0f68\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0f76"+
		"\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8"+
		"\u0f88\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0f9f\n\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0fa7\n\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u0faf\n\u00fb\f\u00fb"+
		"\16\u00fb\u0fb2\13\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\5\u00fd\u0fc4\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0fd2"+
		"\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\5\u0100\u0fe6\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u1016\n\u0102\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\5\u0103\u101c\n\u0103\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\7\u0104\u1024\n\u0104\f\u0104\16\u0104\u1027"+
		"\13\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u1030\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1037\n"+
		"\u0106\3\u0107\3\u0107\5\u0107\u103b\n\u0107\3\u0108\3\u0108\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1045\n\u0109\3\u010a\3"+
		"\u010a\3\u010a\5\u010a\u104a\n\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u104f"+
		"\n\u010a\f\u010a\16\u010a\u1052\13\u010a\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u1058\n\u010b\3\u010c\3\u010c\3\u010c\5\u010c\u105d\n\u010c\3"+
		"\u010d\3\u010d\3\u010d\7\u010d\u1062\n\u010d\f\u010d\16\u010d\u1065\13"+
		"\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\5\u010e\u1072\n\u010e\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1084\n\u010f\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u10eb\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\7\u0114\u10f7\n\u0114\f\u0114\16\u0114"+
		"\u10fa\13\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1101"+
		"\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1108\n\u0116"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1111"+
		"\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\7\u0119\u111d\n\u0119\f\u0119\16\u0119\u1120\13\u0119"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\5\u011b\u1128\n\u011b"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c\u1130\n\u011c"+
		"\f\u011c\16\u011c\u1133\13\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u114e\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1164"+
		"\n\u011f\f\u011f\16\u011f\u1167\13\u011f\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1185\n\u0120"+
		"\3\u0121\3\u0121\5\u0121\u1189\n\u0121\3\u0122\3\u0122\3\u0122\5\u0122"+
		"\u118e\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\5\u0123\u1197\n\u0123\3\u0124\3\u0124\5\u0124\u119b\n\u0124\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11b6\n\u0126"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u11be\n\u0127"+
		"\f\u0127\16\u0127\u11c1\13\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u11cf"+
		"\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\5\u0129\u11e3\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u11f7\n\u012a\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\5\u012d\u1220\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\5\u012e\u123a\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\7\u012f\u1242\n\u012f\f\u012f\16\u012f\u1245\13\u012f\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\5\u0130\u124b\n\u0130\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u1254\n\u0131\f\u0131\16\u0131"+
		"\u1257\13\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1264\n\u0133\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\5\u0134\u12fa\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1310"+
		"\n\u0135\3\u0136\3\u0136\5\u0136\u1314\n\u0136\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\5\u0137\u1347\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u134c\n"+
		"\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u135a\n\u0139\3\u013a\3\u013a"+
		"\5\u013a\u135e\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1364\n"+
		"\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u13a8\n\u013c\3\u013d\3\u013d"+
		"\3\u013e\3\u013e\5\u013e\u13ae\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u13cb\n\u0140\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u13dc\n\u0141\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\7\u0142\u13e4\n\u0142\f\u0142"+
		"\16\u0142\u13e7\13\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\5\u0143\u13f2\n\u0143\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1420\n\u0144\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\7\u0145\u1428\n\u0145\f\u0145"+
		"\16\u0145\u142b\13\u0145\3\u0146\3\u0146\3\u0146\5\u0146\u1430\n\u0146"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1436\n\u0147\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\7\u0148\u143e\n\u0148\f\u0148\16\u0148"+
		"\u1441\13\u0148\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u145e\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u1464\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u146a\n"+
		"\u014d\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f"+
		"\3\u014f\7\u014f\u1475\n\u014f\f\u014f\16\u014f\u1478\13\u014f\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u1483\n\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\5\u0151\u14a0\n\u0151\3\u0152\3\u0152\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u14b5\n\u0154"+
		"\3\u0155\3\u0155\5\u0155\u14b9\n\u0155\3\u0156\3\u0156\5\u0156\u14bd\n"+
		"\u0156\3\u0157\3\u0157\3\u0157\5\u0157\u14c2\n\u0157\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\7\u0158\u14ca\n\u0158\f\u0158\16\u0158"+
		"\u14cd\13\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u14e3\n\u0159\3\u015a\3\u015a"+
		"\3\u015a\5\u015a\u14e8\n\u015a\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b"+
		"\u14ee\n\u015b\3\u015c\3\u015c\3\u015c\5\u015c\u14f3\n\u015c\3\u015d\3"+
		"\u015d\3\u015d\5\u015d\u14f8\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3"+
		"\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\5\u015e\u1519\n\u015e\3\u015f\3\u015f\3\u015f\5\u015f\u151e\n\u015f\3"+
		"\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u1526\n\u0160\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\7\u0161\u152e\n\u0161\f"+
		"\u0161\16\u0161\u1531\13\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u1539\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\7\u0163\u1541\n\u0163\f\u0163\16\u0163\u1544\13\u0163\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1555\n\u0164\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u155d\n\u0165\3\u0166"+
		"\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u156f\n\u0168"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\5\u0169\u157a\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\7\u016a"+
		"\u1581\n\u016a\f\u016a\16\u016a\u1584\13\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\5\u016b\u15a5\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\5\u016c\u15ad\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\5\u016d\u15b4\n\u016d\3\u016e\3\u016e\3\u016e\5\u016e\u15b9\n\u016e\3"+
		"\u016f\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\7\u0170\u15c4\n\u0170\f\u0170\16\u0170\u15c7\13\u0170\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\7\u0172\u15d4\n\u0172\f\u0172\16\u0172\u15d7\13\u0172\3\u0173\3\u0173"+
		"\5\u0173\u15db\n\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174"+
		"\u15eb\n\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u15fb"+
		"\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u160b\n\u0176"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1623\n\u0177\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\5\u0178\u162a\n\u0178\3\u0179\3\u0179\3\u0179"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\7\u017a\u1634\n\u017a\f\u017a"+
		"\16\u017a\u1637\13\u017a\3\u017b\3\u017b\3\u017b\5\u017b\u163c\n\u017b"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1660"+
		"\n\u017c\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1667\n\u017d"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017f\3\u017f\3\u017f\5\u017f\u1676\n\u017f\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u1687\n\u0180\3\u0181\3\u0181"+
		"\3\u0182\3\u0182\5\u0182\u168d\n\u0182\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\5\u0183\u17e1\n\u0183\3\u0184\3\u0184\5\u0184\u17e5\n\u0184\3"+
		"\u0185\3\u0185\3\u0185\5\u0185\u17ea\n\u0185\3\u0186\3\u0186\3\u0186\3"+
		"\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u18a0\n\u0186"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u1930"+
		"\n\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\5\u0189\u1946\n\u0189\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\3\u018a\7\u018a\u194e\n\u018a\f\u018a\16\u018a\u1951"+
		"\13\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u1958\n\u018b"+
		"\3\u018c\3\u018c\5\u018c\u195c\n\u018c\3\u018d\3\u018d\3\u018e\3\u018e"+
		"\3\u018e\5\u018e\u1963\n\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\5\u018f\u1975\n\u018f\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0191\3\u0191\3\u0191\5\u0191\u197e\n\u0191\3\u0192\3\u0192\3\u0192"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u1987\n\u0193\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u19b3\n\u0194\3\u0195\3\u0195"+
		"\3\u0195\5\u0195\u19b8\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u19c4\n\u0196\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\7\u0197\u19ce"+
		"\n\u0197\f\u0197\16\u0197\u19d1\13\u0197\3\u0198\3\u0198\5\u0198\u19d5"+
		"\n\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u19ed\n\u0199\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\5\u019a\u19fb\n\u019a\3\u019b\3\u019b\3\u019b\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\7\u019d"+
		"\u1a09\n\u019d\f\u019d\16\u019d\u1a0c\13\u019d\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e"+
		"\u1a4f\n\u019e\3\u019f\3\u019f\5\u019f\u1a53\n\u019f\3\u01a0\3\u01a0\3"+
		"\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\5\u01a0\u1a62\n\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u1a6c\n\u01a2\f\u01a2\16\u01a2"+
		"\u1a6f\13\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1a7e\n\u01a4"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1ab9\n\u01a6\3\u01a7\3\u01a7\5\u01a7"+
		"\u1abd\n\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\5\u01a9\u1b0e\n\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\5\u01ab\u1b28\n\u01ab\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1b2d\n\u01ac\3"+
		"\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\5\u01ad\u1b4c\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\7\u01ae\u1b54\n\u01ae\f\u01ae\16\u01ae\u1b57\13\u01ae"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u1b5d\n\u01af\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1b67\n\u01b0"+
		"\3\u01b1\3\u01b1\3\u01b2\3\u01b2\5\u01b2\u1b6d\n\u01b2\3\u01b3\3\u01b3"+
		"\5\u01b3\u1b71\n\u01b3\3\u01b4\3\u01b4\5\u01b4\u1b75\n\u01b4\3\u01b5\3"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b7c\n\u01b5\3\u01b6\3\u01b6\3"+
		"\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b8e\n\u01b6\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1b97\n\u01b7"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\7\u01b8\u1b9f\n\u01b8"+
		"\f\u01b8\16\u01b8\u1ba2\13\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba"+
		"\3\u01ba\5\u01ba\u1baa\n\u01ba\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1baf\n"+
		"\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bbc\n\u01bd\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\5\u01be\u1bc2\n\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\5\u01bf\u1bd2\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0"+
		"\u1bd9\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1be5\n\u01c1\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1bf6\n\u01c3\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\7\u01c4\u1bfe\n\u01c4\f\u01c4\16\u01c4\u1c01"+
		"\13\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\5\u01c6\u1c0b\n\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c19\n\u01c8"+
		"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca"+
		"\3\u01ca\3\u01ca\5\u01ca\u1c26\n\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u1c38\n\u01cb\3\u01cc\3\u01cc\5\u01cc"+
		"\u1c3c\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\7\u01ce\u1c4e\n\u01ce\f\u01ce\16\u01ce\u1c51\13\u01ce\3\u01cf\3\u01cf"+
		"\5\u01cf\u1c55\n\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\7\u01d3\u1c6a\n\u01d3\f\u01d3\16\u01d3"+
		"\u1c6d\13\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d5\3\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\7\u01d6\u1c83\n\u01d6\f\u01d6\16\u01d6"+
		"\u1c86\13\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1c8d"+
		"\n\u01d7\3\u01d8\3\u01d8\5\u01d8\u1c91\n\u01d8\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u1c9c\n\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\7\u01d9\u1cad\n\u01d9"+
		"\f\u01d9\16\u01d9\u1cb0\13\u01d9\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1cd6\n\u01da\3\u01db\3\u01db"+
		"\5\u01db\u1cda\n\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\5\u01dc\u1cfe\n\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\7\u01dc\u1d0f\n\u01dc\f\u01dc\16\u01dc\u1d12\13\u01dc\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1d19\n\u01dd\3\u01de\3\u01de"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\7\u01de\u1d21\n\u01de\f\u01de\16\u01de"+
		"\u1d24\13\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\3\u01e0\3\u01e0\5\u01e0\u1d2f\n\u01e0\3\u01e1\3\u01e1\5\u01e1\u1d33\n"+
		"\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1d38\n\u01e1\3\u01e1\3\u01e1\5"+
		"\u01e1\u1d3c\n\u01e1\3\u01e2\3\u01e2\3\u01e2\7\u01e2\u1d41\n\u01e2\f\u01e2"+
		"\16\u01e2\u1d44\13\u01e2\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1d6b\n\u01e4\3\u01e5\3\u01e5"+
		"\5\u01e5\u1d6f\n\u01e5\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1d74\n\u01e6\3"+
		"\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7"+
		"\5\u01e7\u1d7f\n\u01e7\3\u01e8\3\u01e8\5\u01e8\u1d83\n\u01e8\3\u01e9\3"+
		"\u01e9\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\7\u01ea\u1d8f\n\u01ea\f\u01ea\16\u01ea\u1d92\13\u01ea\3\u01eb\3\u01eb"+
		"\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u1d9d"+
		"\n\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\5\u01ec\u1da7\n\u01ec\3\u01ed\3\u01ed\5\u01ed\u1dab\n\u01ed\3\u01ee\3"+
		"\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee"+
		"\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1dba\n\u01ee\3\u01ef\3\u01ef\3\u01ef"+
		"\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1dc2\n\u01ef\3\u01f0\3\u01f0\5\u01f0"+
		"\u1dc6\n\u01f0\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\5\u01f2\u1dd0\n\u01f2\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f5"+
		"\3\u01f5\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u1ddc\n\u01f6\3\u01f7"+
		"\3\u01f7\3\u01f7\5\u01f7\u1de1\n\u01f7\3\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\5\u01f8\u1de7\n\u01f8\3\u01f9\3\u01f9\5\u01f9\u1deb\n\u01f9\3\u01fa\3"+
		"\u01fa\3\u01fa\3\u01fa\3\u01fa\7\u01fa\u1df2\n\u01fa\f\u01fa\16\u01fa"+
		"\u1df5\13\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fb\3\u01fb\3\u01fb\5\u01fb\u1e01\n\u01fb\3\u01fc\3\u01fc\3\u01fc"+
		"\5\u01fc\u1e06\n\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\7\u01fd\u1e0f\n\u01fd\f\u01fd\16\u01fd\u1e12\13\u01fd\3\u01fe"+
		"\3\u01fe\3\u01fe\5\u01fe\u1e17\n\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\7\u01ff\u1e1f\n\u01ff\f\u01ff\16\u01ff\u1e22\13\u01ff"+
		"\3\u0200\3\u0200\5\u0200\u1e26\n\u0200\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\5\u0201\u1e47\n\u0201\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202"+
		"\u1e4e\n\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\5\u0202\u1e6b\n\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\7\u0202\u1e86\n\u0202\f\u0202\16\u0202\u1e89"+
		"\13\u0202\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203\u1e99\n\u0203"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\5\u0204\u1ea2"+
		"\n\u0204\3\u0205\3\u0205\5\u0205\u1ea6\n\u0205\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u1eaf\n\u0206\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207\3\u0207"+
		"\5\u0207\u1ebc\n\u0207\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208"+
		"\7\u0208\u1ec4\n\u0208\f\u0208\16\u0208\u1ec7\13\u0208\3\u0209\3\u0209"+
		"\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1ed1\n\u0209"+
		"\3\u020a\3\u020a\3\u020b\3\u020b\3\u020b\5\u020b\u1ed8\n\u020b\3\u020c"+
		"\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u1ee1\n\u020c"+
		"\3\u020d\3\u020d\5\u020d\u1ee5\n\u020d\3\u020e\3\u020e\3\u020e\3\u020e"+
		"\3\u020e\3\u020e\7\u020e\u1eed\n\u020e\f\u020e\16\u020e\u1ef0\13\u020e"+
		"\3\u020f\3\u020f\3\u020f\3\u020f\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0210\5\u0210\u1f11\n\u0210\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\7\u0211\u1f1c"+
		"\n\u0211\f\u0211\16\u0211\u1f1f\13\u0211\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\5\u0212\u1f2f\n\u0212\3\u0213\3\u0213\3\u0213\3\u0213\5\u0213"+
		"\u1f35\n\u0213\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\5\u0214\u1f3e\n\u0214\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215"+
		"\u1f45\n\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\5\u0216\u1f57\n\u0216\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\5\u0217"+
		"\u1f5e\n\u0217\3\u0218\3\u0218\5\u0218\u1f62\n\u0218\3\u0219\3\u0219\5"+
		"\u0219\u1f66\n\u0219\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3"+
		"\u021b\3\u021b\3\u021b\3\u021c\3\u021c\5\u021c\u1f73\n\u021c\3\u021d\3"+
		"\u021d\5\u021d\u1f77\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3"+
		"\u021e\3\u021f\3\u021f\3\u021f\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\5\u0220"+
		"\u1f8f\n\u0220\3\u0221\3\u0221\5\u0221\u1f93\n\u0221\3\u0222\3\u0222\3"+
		"\u0222\3\u0222\5\u0222\u1f99\n\u0222\3\u0223\3\u0223\3\u0223\3\u0223\3"+
		"\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223"+
		"\3\u0223\3\u0223\3\u0223\5\u0223\u1fab\n\u0223\3\u0224\3\u0224\3\u0225"+
		"\3\u0225\3\u0225\3\u0225\3\u0225\3\u0225\5\u0225\u1fb5\n\u0225\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226"+
		"\5\u0226\u1fd3\n\u0226\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227"+
		"\5\u0227\u1fdb\n\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\5\u0228\u1fee\n\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\7\u0228\u20d7\n\u0228\f\u0228\16\u0228\u20da\13\u0228"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\5\u0229\u20e5\n\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\7\u0229\u212c\n\u0229\f\u0229\16\u0229\u212f\13\u0229\3\u022a\3\u022a"+
		"\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a"+
		"\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a"+
		"\5\u022a\u2145\n\u022a\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\5\u022b"+
		"\u2248\n\u022b\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\5\u022c\u224f\n"+
		"\u022c\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\5\u022d\u225c\n\u022d\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\7\u022f"+
		"\u2269\n\u022f\f\u022f\16\u022f\u226c\13\u022f\3\u0230\3\u0230\3\u0230"+
		"\3\u0230\3\u0230\5\u0230\u2273\n\u0230\3\u0231\3\u0231\3\u0232\3\u0232"+
		"\3\u0232\3\u0232\3\u0232\5\u0232\u227c\n\u0232\3\u0233\3\u0233\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\5\u0233\u2290\n\u0233"+
		"\3\u0234\3\u0234\3\u0234\5\u0234\u2295\n\u0234\3\u0235\3\u0235\3\u0235"+
		"\3\u0235\3\u0235\3\u0235\7\u0235\u229d\n\u0235\f\u0235\16\u0235\u22a0"+
		"\13\u0235\3\u0236\3\u0236\3\u0236\3\u0236\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\5\u0237\u22ab\n\u0237\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238"+
		"\3\u0238\3\u0238\3\u0239\3\u0239\5\u0239\u22b6\n\u0239\3\u023a\3\u023a"+
		"\3\u023a\3\u023a\5\u023a\u22bc\n\u023a\3\u023b\3\u023b\3\u023b\3\u023b"+
		"\3\u023b\5\u023b\u22c3\n\u023b\3\u023c\3\u023c\3\u023c\3\u023c\3\u023c"+
		"\3\u023c\5\u023c\u22cb\n\u023c\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u22d9"+
		"\n\u023d\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e"+
		"\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\5\u023e\u22e9\n\u023e"+
		"\3\u023f\3\u023f\3\u0240\3\u0240\5\u0240\u22ef\n\u0240\3\u0241\3\u0241"+
		"\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\3\u0242\5\u0242\u22f9\n\u0242"+
		"\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u2301\n\u0243"+
		"\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244"+
		"\3\u0244\3\u0244\3\u0244\5\u0244\u230f\n\u0244\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\7\u0245\u2317\n\u0245\f\u0245\16\u0245\u231a"+
		"\13\u0245\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\7\u0246\u2322"+
		"\n\u0246\f\u0246\16\u0246\u2325\13\u0246\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\5\u0247\u232c\n\u0247\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\7\u0248\u2334\n\u0248\f\u0248\16\u0248\u2337\13\u0248\3\u0249"+
		"\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249\3\u0249"+
		"\5\u0249\u2343\n\u0249\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a"+
		"\7\u024a\u234b\n\u024a\f\u024a\16\u024a\u234e\13\u024a\3\u024b\3\u024b"+
		"\3\u024b\3\u024b\3\u024b\5\u024b\u2355\n\u024b\3\u024c\3\u024c\3\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u235f\n\u024c\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\3\u024d\5\u024d"+
		"\u236a\n\u024d\3\u024e\3\u024e\3\u024e\3\u024f\3\u024f\3\u024f\3\u024f"+
		"\3\u024f\5\u024f\u2374\n\u024f\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\5\u0250\u2386\n\u0250\3\u0251\3\u0251\3\u0251\3\u0252"+
		"\3\u0252\3\u0252\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253"+
		"\5\u0253\u2395\n\u0253\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254"+
		"\u239c\n\u0254\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0256"+
		"\3\u0256\3\u0256\3\u0256\3\u0256\7\u0256\u23a9\n\u0256\f\u0256\16\u0256"+
		"\u23ac\13\u0256\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0258\3\u0258"+
		"\3\u0258\5\u0258\u23b6\n\u0258\3\u0259\3\u0259\5\u0259\u23ba\n\u0259\3"+
		"\u025a\3\u025a\3\u025a\3\u025a\5\u025a\u23c0\n\u025a\3\u025b\3\u025b\3"+
		"\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b"+
		"\3\u025b\3\u025b\3\u025b\5\u025b\u23d0\n\u025b\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\3\u025c\7\u025c\u23d7\n\u025c\f\u025c\16\u025c\u23da\13\u025c"+
		"\3\u025d\3\u025d\3\u025d\7\u025d\u23df\n\u025d\f\u025d\16\u025d\u23e2"+
		"\13\u025d\3\u025e\3\u025e\5\u025e\u23e6\n\u025e\3\u025f\3\u025f\5\u025f"+
		"\u23ea\n\u025f\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\7\u0260"+
		"\u23f2\n\u0260\f\u0260\16\u0260\u23f5\13\u0260\3\u0261\3\u0261\3\u0261"+
		"\3\u0261\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\7\u0262\u2401"+
		"\n\u0262\f\u0262\16\u0262\u2404\13\u0262\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263\u240f\n\u0263\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\7\u0264\u2417\n\u0264\f\u0264"+
		"\16\u0264\u241a\13\u0264\3\u0265\3\u0265\3\u0265\3\u0265\5\u0265\u2420"+
		"\n\u0265\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\7\u0266\u2428"+
		"\n\u0266\f\u0266\16\u0266\u242b\13\u0266\3\u0267\3\u0267\3\u0268\3\u0268"+
		"\3\u0269\3\u0269\3\u026a\3\u026a\3\u026b\3\u026b\3\u026c\3\u026c\3\u026d"+
		"\3\u026d\3\u026d\3\u026d\5\u026d\u243d\n\u026d\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\5\u026e\u245e\n\u026e\3\u026f\3\u026f\3\u0270\3\u0270\3\u0271"+
		"\3\u0271\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\5\u0272\u246b\n\u0272"+
		"\3\u0273\3\u0273\3\u0273\5\u0273\u2470\n\u0273\3\u0274\3\u0274\3\u0274"+
		"\5\u0274\u2475\n\u0274\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\5\u0275"+
		"\u247c\n\u0275\3\u0276\3\u0276\3\u0277\3\u0277\3\u0278\3\u0278\3\u0279"+
		"\3\u0279\3\u0279\2^\4\20\34\66BJV\u0096\u009a\u00b0\u00b8\u00ba\u00dc"+
		"\u00e6\u00e8\u010a\u011a\u0120\u012e\u013a\u0140\u014c\u014e\u0158\u0162"+
		"\u016e\u0174\u019a\u01a2\u01bc\u01c2\u01cc\u01d6\u01da\u01f4\u0206\u0212"+
		"\u0218\u0226\u0230\u0236\u023c\u024c\u025c\u0260\u0282\u0288\u028e\u029c"+
		"\u02ae\u02c0\u02c4\u02d2\u02de\u02e2\u02f2\u0312\u032c\u0338\u0342\u035a"+
		"\u036e\u0386\u039a\u03a4\u03aa\u03b0\u03b6\u03ba\u03d2\u03f2\u03f8\u03fc"+
		"\u0402\u040e\u041a\u0420\u044e\u0450\u045c\u0468\u0488\u048a\u048e\u0492"+
		"\u04aa\u04b6\u04b8\u04be\u04c2\u04c6\u04ca\u027a\2\4\6\b\n\f\16\20\22"+
		"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp"+
		"rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc"+
		"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4"+
		"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec"+
		"\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304"+
		"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c"+
		"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334"+
		"\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c"+
		"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364"+
		"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c"+
		"\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394"+
		"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac"+
		"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4"+
		"\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc"+
		"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4"+
		"\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c"+
		"\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424"+
		"\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c"+
		"\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454"+
		"\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c"+
		"\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484"+
		"\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c"+
		"\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4"+
		"\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc"+
		"\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4"+
		"\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\2\31\4\2\u00d6\u00d6\u0104\u0104"+
		"\4\2\t\t\u01e3\u01e3\t\2\30\30\33\33\"\"\'\'==AAJJ\4\2;;DD\4\2WW\u00bd"+
		"\u00bd\4\2\u00af\u00af\u00ec\u00ec\4\2\u00db\u00db\u01a5\u01a5\b\2[[\u008b"+
		"\u008b\u0092\u0092\u00ad\u00ad\u00f3\u00f3\u0194\u0194\4\2\u0174\u0174"+
		"\u0190\u0190\4\2\u00db\u00db\u00ef\u00ef\6\2\u00de\u00de\u017f\u017f\u019c"+
		"\u019c\u01af\u01af\4\2\u00f2\u00f2\u019b\u019b\6\2\u00b1\u00b1\u00fc\u00fc"+
		"\u017d\u017d\u01b9\u01b9\3\2_`\3\2\u0174\u0175\4\2\u00d3\u00d3\u012a\u012a"+
		"\4\2\u0093\u0093\u00ba\u00ba\5\2[[bb\u018c\u018c\4\2\b\t\r\23_\2\26\31"+
		"\33\33\35\37\"\"$%\'(*+..\61\61\639=ACCFLNOSZ\\^ccfgijlnuy|}\u0080\u0080"+
		"\u0082\u0085\u008a\u008d\u008f\u0090\u0092\u0097\u009a\u009b\u00a3\u00a8"+
		"\u00ab\u00ab\u00ad\u00ad\u00af\u00b3\u00b5\u00b7\u00ba\u00be\u00c0\u00c2"+
		"\u00c4\u00c5\u00c7\u00ca\u00cc\u00ce\u00d1\u00d1\u00d3\u00d3\u00d5\u00d5"+
		"\u00d7\u00d7\u00d9\u00d9\u00dd\u00df\u00e1\u00e1\u00e4\u00e4\u00e6\u00ea"+
		"\u00ec\u00ee\u00f0\u00f5\u00f7\u00f7\u00fa\u00fd\u0103\u0104\u0106\u0106"+
		"\u0108\u010e\u0110\u0110\u0113\u0113\u0116\u0118\u011b\u0126\u012a\u012b"+
		"\u012e\u012f\u0131\u0131\u0134\u0134\u0136\u0138\u013a\u013a\u013d\u013f"+
		"\u0147\u014d\u014f\u014f\u0151\u0151\u0153\u0155\u0157\u015d\u015f\u0162"+
		"\u0164\u016d\u016f\u0170\u0172\u0173\u0175\u017c\u017e\u0182\u0184\u0184"+
		"\u0186\u0187\u0189\u0189\u018b\u018b\u018d\u0196\u0199\u019a\u019c\u01a1"+
		"\u01a7\u01a7\u01a9\u01a9\u01ac\u01b2\u01b5\u01b9\u01bc\u01c0\u01c4\u01c4"+
		"\u01c6\u01c8\u01cb\u01cb\u01ce\u01d2\u01dc\u01de\"\2oprs~\177\u0086\u0086"+
		"\u00a9\u00aa\u00cb\u00cb\u00cf\u00cf\u00d4\u00d4\u00e2\u00e2\u00f9\u00f9"+
		"\u00fe\u00ff\u0101\u0101\u0111\u0111\u0127\u0127\u0129\u0129\u012c\u012c"+
		"\u0133\u0133\u0135\u0135\u0142\u0142\u0146\u0146\u0150\u0150\u0152\u0152"+
		"\u015e\u015e\u0174\u0174\u0185\u0185\u018a\u018a\u0197\u0197\u01a3\u01a4"+
		"\u01a8\u01a8\u01aa\u01aa\u01c1\u01c2\u01d3\u01db\26\2kkqq\u0088\u0088"+
		"\u008e\u008e\u0099\u0099\u009f\u009f\u00da\u00da\u00dc\u00dc\u00eb\u00eb"+
		"\u00f8\u00f8\u0104\u0105\u0107\u0107\u0112\u0112\u0114\u0114\u0128\u0128"+
		"\u0130\u0130\u0143\u0145\u0171\u0171\u0188\u0188\u01c5\u01c5:\2[[_ehh"+
		"ttz{\u0081\u0081\u0087\u0087\u0089\u0089\u0091\u0091\u0098\u0098\u009c"+
		"\u009e\u00a0\u00a2\u00ac\u00ac\u00ae\u00ae\u00b4\u00b4\u00b8\u00b9\u00bf"+
		"\u00bf\u00c3\u00c3\u00c6\u00c6\u00d0\u00d0\u00d2\u00d2\u00d6\u00d6\u00d8"+
		"\u00d8\u00db\u00db\u00e0\u00e0\u00e3\u00e3\u00e5\u00e5\u00ef\u00ef\u00f6"+
		"\u00f6\u0100\u0100\u0102\u0102\u010f\u010f\u0115\u0115\u0119\u011a\u012d"+
		"\u012d\u0132\u0132\u0139\u0139\u013b\u013c\u0140\u0141\u014e\u014e\u0156"+
		"\u0156\u0163\u0163\u016e\u016e\u017d\u017d\u0183\u0183\u018c\u018c\u0198"+
		"\u0198\u019b\u019b\u01a2\u01a2\u01a5\u01a6\u01ab\u01ab\u01b3\u01b4\u01ba"+
		"\u01bb\u01c3\u01c3\u01c9\u01ca\u01cc\u01cd\u27f6\2\u04f2\3\2\2\2\4\u04f6"+
		"\3\2\2\2\6\u050a\3\2\2\2\b\u050e\3\2\2\2\n\u0510\3\2\2\2\f\u051f\3\2\2"+
		"\2\16\u0521\3\2\2\2\20\u0523\3\2\2\2\22\u0533\3\2\2\2\24\u054a\3\2\2\2"+
		"\26\u0550\3\2\2\2\30\u0552\3\2\2\2\32\u0559\3\2\2\2\34\u055b\3\2\2\2\36"+
		"\u0566\3\2\2\2 \u0569\3\2\2\2\"\u056b\3\2\2\2$\u056d\3\2\2\2&\u0571\3"+
		"\2\2\2(\u057c\3\2\2\2*\u0581\3\2\2\2,\u0586\3\2\2\2.\u0591\3\2\2\2\60"+
		"\u0595\3\2\2\2\62\u0597\3\2\2\2\64\u059b\3\2\2\2\66\u059d\3\2\2\28\u05bf"+
		"\3\2\2\2:\u05c1\3\2\2\2<\u05c4\3\2\2\2>\u05c8\3\2\2\2@\u05d1\3\2\2\2B"+
		"\u05d3\3\2\2\2D\u05de\3\2\2\2F\u05e2\3\2\2\2H\u05e4\3\2\2\2J\u05e6\3\2"+
		"\2\2L\u05f1\3\2\2\2N\u0601\3\2\2\2P\u0605\3\2\2\2R\u0608\3\2\2\2T\u0612"+
		"\3\2\2\2V\u0614\3\2\2\2X\u061e\3\2\2\2Z\u0625\3\2\2\2\\\u0627\3\2\2\2"+
		"^\u062b\3\2\2\2`\u0630\3\2\2\2b\u0663\3\2\2\2d\u0665\3\2\2\2f\u0667\3"+
		"\2\2\2h\u0673\3\2\2\2j\u0675\3\2\2\2l\u0679\3\2\2\2n\u068a\3\2\2\2p\u068c"+
		"\3\2\2\2r\u06a4\3\2\2\2t\u06a6\3\2\2\2v\u06a8\3\2\2\2x\u071c\3\2\2\2z"+
		"\u071e\3\2\2\2|\u0730\3\2\2\2~\u0732\3\2\2\2\u0080\u073c\3\2\2\2\u0082"+
		"\u075f\3\2\2\2\u0084\u0761\3\2\2\2\u0086\u0769\3\2\2\2\u0088\u076b\3\2"+
		"\2\2\u008a\u0772\3\2\2\2\u008c\u077a\3\2\2\2\u008e\u077c\3\2\2\2\u0090"+
		"\u0780\3\2\2\2\u0092\u0783\3\2\2\2\u0094\u078c\3\2\2\2\u0096\u078e\3\2"+
		"\2\2\u0098\u0798\3\2\2\2\u009a\u079d\3\2\2\2\u009c\u07ab\3\2\2\2\u009e"+
		"\u07b7\3\2\2\2\u00a0\u07b9\3\2\2\2\u00a2\u07bc\3\2\2\2\u00a4\u07bf\3\2"+
		"\2\2\u00a6\u07c7\3\2\2\2\u00a8\u07cb\3\2\2\2\u00aa\u07d0\3\2\2\2\u00ac"+
		"\u07d5\3\2\2\2\u00ae\u07d7\3\2\2\2\u00b0\u07d9\3\2\2\2\u00b2\u0853\3\2"+
		"\2\2\u00b4\u0855\3\2\2\2\u00b6\u085d\3\2\2\2\u00b8\u085f\3\2\2\2\u00ba"+
		"\u0867\3\2\2\2\u00bc\u0883\3\2\2\2\u00be\u0892\3\2\2\2\u00c0\u0894\3\2"+
		"\2\2\u00c2\u089a\3\2\2\2\u00c4\u08a4\3\2\2\2\u00c6\u08a6\3\2\2\2\u00c8"+
		"\u08ac\3\2\2\2\u00ca\u08b2\3\2\2\2\u00cc\u08bf\3\2\2\2\u00ce\u08c9\3\2"+
		"\2\2\u00d0\u08cb\3\2\2\2\u00d2\u08d1\3\2\2\2\u00d4\u08d8\3\2\2\2\u00d6"+
		"\u08e2\3\2\2\2\u00d8\u08f0\3\2\2\2\u00da\u08f4\3\2\2\2\u00dc\u08f6\3\2"+
		"\2\2\u00de\u0904\3\2\2\2\u00e0\u090e\3\2\2\2\u00e2\u0918\3\2\2\2\u00e4"+
		"\u0945\3\2\2\2\u00e6\u0947\3\2\2\2\u00e8\u0952\3\2\2\2\u00ea\u095f\3\2"+
		"\2\2\u00ec\u0968\3\2\2\2\u00ee\u096e\3\2\2\2\u00f0\u0980\3\2\2\2\u00f2"+
		"\u0985\3\2\2\2\u00f4\u0989\3\2\2\2\u00f6\u0999\3\2\2\2\u00f8\u099e\3\2"+
		"\2\2\u00fa\u09a3\3\2\2\2\u00fc\u09b3\3\2\2\2\u00fe\u09b5\3\2\2\2\u0100"+
		"\u09bc\3\2\2\2\u0102\u09be\3\2\2\2\u0104\u09c0\3\2\2\2\u0106\u09ca\3\2"+
		"\2\2\u0108\u09fc\3\2\2\2\u010a\u09fe\3\2\2\2\u010c\u0aae\3\2\2\2\u010e"+
		"\u0ab5\3\2\2\2\u0110\u0aba\3\2\2\2\u0112\u0abf\3\2\2\2\u0114\u0ac4\3\2"+
		"\2\2\u0116\u0ac6\3\2\2\2\u0118\u0acd\3\2\2\2\u011a\u0acf\3\2\2\2\u011c"+
		"\u0ae9\3\2\2\2\u011e\u0aeb\3\2\2\2\u0120\u0af0\3\2\2\2\u0122\u0b15\3\2"+
		"\2\2\u0124\u0b1b\3\2\2\2\u0126\u0b2f\3\2\2\2\u0128\u0b31\3\2\2\2\u012a"+
		"\u0b36\3\2\2\2\u012c\u0b3d\3\2\2\2\u012e\u0b3f\3\2\2\2\u0130\u0b67\3\2"+
		"\2\2\u0132\u0b6b\3\2\2\2\u0134\u0b70\3\2\2\2\u0136\u0b77\3\2\2\2\u0138"+
		"\u0b7b\3\2\2\2\u013a\u0b7d\3\2\2\2\u013c\u0b88\3\2\2\2\u013e\u0b93\3\2"+
		"\2\2\u0140\u0b95\3\2\2\2\u0142\u0ba0\3\2\2\2\u0144\u0bd6\3\2\2\2\u0146"+
		"\u0be4\3\2\2\2\u0148\u0be8\3\2\2\2\u014a\u0bef\3\2\2\2\u014c\u0bf1\3\2"+
		"\2\2\u014e\u0bfc\3\2\2\2\u0150\u0c0a\3\2\2\2\u0152\u0c0e\3\2\2\2\u0154"+
		"\u0c10\3\2\2\2\u0156\u0c15\3\2\2\2\u0158\u0c1a\3\2\2\2\u015a\u0c2a\3\2"+
		"\2\2\u015c\u0c46\3\2\2\2\u015e\u0c4f\3\2\2\2\u0160\u0c51\3\2\2\2\u0162"+
		"\u0c55\3\2\2\2\u0164\u0c61\3\2\2\2\u0166\u0c68\3\2\2\2\u0168\u0ca0\3\2"+
		"\2\2\u016a\u0ca5\3\2\2\2\u016c\u0cac\3\2\2\2\u016e\u0cae\3\2\2\2\u0170"+
		"\u0cb9\3\2\2\2\u0172\u0cc2\3\2\2\2\u0174\u0cc4\3\2\2\2\u0176\u0cda\3\2"+
		"\2\2\u0178\u0ce2\3\2\2\2\u017a\u0ced\3\2\2\2\u017c\u0cef\3\2\2\2\u017e"+
		"\u0cf3\3\2\2\2\u0180\u0cff\3\2\2\2\u0182\u0d07\3\2\2\2\u0184\u0d10\3\2"+
		"\2\2\u0186\u0d1e\3\2\2\2\u0188\u0d23\3\2\2\2\u018a\u0d2a\3\2\2\2\u018c"+
		"\u0d2c\3\2\2\2\u018e\u0d30\3\2\2\2\u0190\u0d38\3\2\2\2\u0192\u0d44\3\2"+
		"\2\2\u0194\u0d46\3\2\2\2\u0196\u0d58\3\2\2\2\u0198\u0d5c\3\2\2\2\u019a"+
		"\u0d5e\3\2\2\2\u019c\u0d85\3\2\2\2\u019e\u0d89\3\2\2\2\u01a0\u0d8f\3\2"+
		"\2\2\u01a2\u0d91\3\2\2\2\u01a4\u0dae\3\2\2\2\u01a6\u0db2\3\2\2\2\u01a8"+
		"\u0db8\3\2\2\2\u01aa\u0dbd\3\2";
	private static final String _serializedATNSegment1 =
		"\2\2\u01ac\u0dc3\3\2\2\2\u01ae\u0dc7\3\2\2\2\u01b0\u0dd7\3\2\2\2\u01b2"+
		"\u0ddb\3\2\2\2\u01b4\u0ddd\3\2\2\2\u01b6\u0de7\3\2\2\2\u01b8\u0df1\3\2"+
		"\2\2\u01ba\u0e02\3\2\2\2\u01bc\u0e04\3\2\2\2\u01be\u0e12\3\2\2\2\u01c0"+
		"\u0e14\3\2\2\2\u01c2\u0e1a\3\2\2\2\u01c4\u0e22\3\2\2\2\u01c6\u0ed7\3\2"+
		"\2\2\u01c8\u0ed9\3\2\2\2\u01ca\u0ee9\3\2\2\2\u01cc\u0eeb\3\2\2\2\u01ce"+
		"\u0ef7\3\2\2\2\u01d0\u0f09\3\2\2\2\u01d2\u0f1a\3\2\2\2\u01d4\u0f22\3\2"+
		"\2\2\u01d6\u0f24\3\2\2\2\u01d8\u0f2f\3\2\2\2\u01da\u0f34\3\2\2\2\u01dc"+
		"\u0f46\3\2\2\2\u01de\u0f48\3\2\2\2\u01e0\u0f4b\3\2\2\2\u01e2\u0f4d\3\2"+
		"\2\2\u01e4\u0f4f\3\2\2\2\u01e6\u0f5d\3\2\2\2\u01e8\u0f63\3\2\2\2\u01ea"+
		"\u0f67\3\2\2\2\u01ec\u0f75\3\2\2\2\u01ee\u0f87\3\2\2\2\u01f0\u0f9e\3\2"+
		"\2\2\u01f2\u0fa6\3\2\2\2\u01f4\u0fa8\3\2\2\2\u01f6\u0fb3\3\2\2\2\u01f8"+
		"\u0fc3\3\2\2\2\u01fa\u0fc5\3\2\2\2\u01fc\u0fd1\3\2\2\2\u01fe\u0fe5\3\2"+
		"\2\2\u0200\u0fe7\3\2\2\2\u0202\u1015\3\2\2\2\u0204\u101b\3\2\2\2\u0206"+
		"\u101d\3\2\2\2\u0208\u102f\3\2\2\2\u020a\u1036\3\2\2\2\u020c\u103a\3\2"+
		"\2\2\u020e\u103c\3\2\2\2\u0210\u1044\3\2\2\2\u0212\u1049\3\2\2\2\u0214"+
		"\u1057\3\2\2\2\u0216\u105c\3\2\2\2\u0218\u105e\3\2\2\2\u021a\u1071\3\2"+
		"\2\2\u021c\u1083\3\2\2\2\u021e\u1085\3\2\2\2\u0220\u108e\3\2\2\2\u0222"+
		"\u10ea\3\2\2\2\u0224\u10ec\3\2\2\2\u0226\u10f0\3\2\2\2\u0228\u1100\3\2"+
		"\2\2\u022a\u1107\3\2\2\2\u022c\u1110\3\2\2\2\u022e\u1112\3\2\2\2\u0230"+
		"\u1116\3\2\2\2\u0232\u1121\3\2\2\2\u0234\u1127\3\2\2\2\u0236\u1129\3\2"+
		"\2\2\u0238\u114d\3\2\2\2\u023a\u114f\3\2\2\2\u023c\u115d\3\2\2\2\u023e"+
		"\u1184\3\2\2\2\u0240\u1188\3\2\2\2\u0242\u118d\3\2\2\2\u0244\u1196\3\2"+
		"\2\2\u0246\u119a\3\2\2\2\u0248\u119c\3\2\2\2\u024a\u11b5\3\2\2\2\u024c"+
		"\u11b7\3\2\2\2\u024e\u11ce\3\2\2\2\u0250\u11e2\3\2\2\2\u0252\u11f6\3\2"+
		"\2\2\u0254\u11f8\3\2\2\2\u0256\u11fe\3\2\2\2\u0258\u121f\3\2\2\2\u025a"+
		"\u1239\3\2\2\2\u025c\u123b\3\2\2\2\u025e\u124a\3\2\2\2\u0260\u124c\3\2"+
		"\2\2\u0262\u1258\3\2\2\2\u0264\u1263\3\2\2\2\u0266\u12f9\3\2\2\2\u0268"+
		"\u130f\3\2\2\2\u026a\u1313\3\2\2\2\u026c\u1346\3\2\2\2\u026e\u134b\3\2"+
		"\2\2\u0270\u1359\3\2\2\2\u0272\u135d\3\2\2\2\u0274\u1363\3\2\2\2\u0276"+
		"\u13a7\3\2\2\2\u0278\u13a9\3\2\2\2\u027a\u13ad\3\2\2\2\u027c\u13af\3\2"+
		"\2\2\u027e\u13ca\3\2\2\2\u0280\u13db\3\2\2\2\u0282\u13dd\3\2\2\2\u0284"+
		"\u13f1\3\2\2\2\u0286\u141f\3\2\2\2\u0288\u1421\3\2\2\2\u028a\u142f\3\2"+
		"\2\2\u028c\u1435\3\2\2\2\u028e\u1437\3\2\2\2\u0290\u1442\3\2\2\2\u0292"+
		"\u1445\3\2\2\2\u0294\u145d\3\2\2\2\u0296\u1463\3\2\2\2\u0298\u1469\3\2"+
		"\2\2\u029a\u146b\3\2\2\2\u029c\u1471\3\2\2\2\u029e\u1482\3\2\2\2\u02a0"+
		"\u149f\3\2\2\2\u02a2\u14a1\3\2\2\2\u02a4\u14a3\3\2\2\2\u02a6\u14b4\3\2"+
		"\2\2\u02a8\u14b8\3\2\2\2\u02aa\u14bc\3\2\2\2\u02ac\u14c1\3\2\2\2\u02ae"+
		"\u14c3\3\2\2\2\u02b0\u14e2\3\2\2\2\u02b2\u14e7\3\2\2\2\u02b4\u14ed\3\2"+
		"\2\2\u02b6\u14f2\3\2\2\2\u02b8\u14f7\3\2\2\2\u02ba\u1518\3\2\2\2\u02bc"+
		"\u151d\3\2\2\2\u02be\u1525\3\2\2\2\u02c0\u1527\3\2\2\2\u02c2\u1538\3\2"+
		"\2\2\u02c4\u153a\3\2\2\2\u02c6\u1554\3\2\2\2\u02c8\u155c\3\2\2\2\u02ca"+
		"\u155e\3\2\2\2\u02cc\u1560\3\2\2\2\u02ce\u156e\3\2\2\2\u02d0\u1579\3\2"+
		"\2\2\u02d2\u157b\3\2\2\2\u02d4\u15a4\3\2\2\2\u02d6\u15ac\3\2\2\2\u02d8"+
		"\u15b3\3\2\2\2\u02da\u15b8\3\2\2\2\u02dc\u15ba\3\2\2\2\u02de\u15bd\3\2"+
		"\2\2\u02e0\u15c8\3\2\2\2\u02e2\u15ce\3\2\2\2\u02e4\u15da\3\2\2\2\u02e6"+
		"\u15ea\3\2\2\2\u02e8\u15fa\3\2\2\2\u02ea\u160a\3\2\2\2\u02ec\u1622\3\2"+
		"\2\2\u02ee\u1629\3\2\2\2\u02f0\u162b\3\2\2\2\u02f2\u162e\3\2\2\2\u02f4"+
		"\u163b\3\2\2\2\u02f6\u165f\3\2\2\2\u02f8\u1666\3\2\2\2\u02fa\u1668\3\2"+
		"\2\2\u02fc\u1675\3\2\2\2\u02fe\u1686\3\2\2\2\u0300\u1688\3\2\2\2\u0302"+
		"\u168c\3\2\2\2\u0304\u17e0\3\2\2\2\u0306\u17e4\3\2\2\2\u0308\u17e9\3\2"+
		"\2\2\u030a\u189f\3\2\2\2\u030c\u192f\3\2\2\2\u030e\u1931\3\2\2\2\u0310"+
		"\u1945\3\2\2\2\u0312\u1947\3\2\2\2\u0314\u1957\3\2\2\2\u0316\u195b\3\2"+
		"\2\2\u0318\u195d\3\2\2\2\u031a\u1962\3\2\2\2\u031c\u1974\3\2\2\2\u031e"+
		"\u1976\3\2\2\2\u0320\u197d\3\2\2\2\u0322\u197f\3\2\2\2\u0324\u1986\3\2"+
		"\2\2\u0326\u19b2\3\2\2\2\u0328\u19b7\3\2\2\2\u032a\u19c3\3\2\2\2\u032c"+
		"\u19c5\3\2\2\2\u032e\u19d4\3\2\2\2\u0330\u19ec\3\2\2\2\u0332\u19fa\3\2"+
		"\2\2\u0334\u19fc\3\2\2\2\u0336\u19ff\3\2\2\2\u0338\u1a05\3\2\2\2\u033a"+
		"\u1a4e\3\2\2\2\u033c\u1a52\3\2\2\2\u033e\u1a61\3\2\2\2\u0340\u1a63\3\2"+
		"\2\2\u0342\u1a68\3\2\2\2\u0344\u1a70\3\2\2\2\u0346\u1a7d\3\2\2\2\u0348"+
		"\u1a7f\3\2\2\2\u034a\u1ab8\3\2\2\2\u034c\u1abc\3\2\2\2\u034e\u1abe\3\2"+
		"\2\2\u0350\u1b0d\3\2\2\2\u0352\u1b0f\3\2\2\2\u0354\u1b27\3\2\2\2\u0356"+
		"\u1b2c\3\2\2\2\u0358\u1b4b\3\2\2\2\u035a\u1b4d\3\2\2\2\u035c\u1b5c\3\2"+
		"\2\2\u035e\u1b66\3\2\2\2\u0360\u1b68\3\2\2\2\u0362\u1b6c\3\2\2\2\u0364"+
		"\u1b70\3\2\2\2\u0366\u1b74\3\2\2\2\u0368\u1b7b\3\2\2\2\u036a\u1b8d\3\2"+
		"\2\2\u036c\u1b96\3\2\2\2\u036e\u1b98\3\2\2\2\u0370\u1ba3\3\2\2\2\u0372"+
		"\u1ba9\3\2\2\2\u0374\u1bae\3\2\2\2\u0376\u1bb0\3\2\2\2\u0378\u1bbb\3\2"+
		"\2\2\u037a\u1bc1\3\2\2\2\u037c\u1bd1\3\2\2\2\u037e\u1bd8\3\2\2\2\u0380"+
		"\u1be4\3\2\2\2\u0382\u1be6\3\2\2\2\u0384\u1bf5\3\2\2\2\u0386\u1bf7\3\2"+
		"\2\2\u0388\u1c02\3\2\2\2\u038a\u1c0a\3\2\2\2\u038c\u1c0c\3\2\2\2\u038e"+
		"\u1c18\3\2\2\2\u0390\u1c1a\3\2\2\2\u0392\u1c25\3\2\2\2\u0394\u1c37\3\2"+
		"\2\2\u0396\u1c3b\3\2\2\2\u0398\u1c3d\3\2\2\2\u039a\u1c47\3\2\2\2\u039c"+
		"\u1c54\3\2\2\2\u039e\u1c56\3\2\2\2\u03a0\u1c5a\3\2\2\2\u03a2\u1c60\3\2"+
		"\2\2\u03a4\u1c63\3\2\2\2\u03a6\u1c6e\3\2\2\2\u03a8\u1c76\3\2\2\2\u03aa"+
		"\u1c78\3\2\2\2\u03ac\u1c8c\3\2\2\2\u03ae\u1c90\3\2\2\2\u03b0\u1c9b\3\2"+
		"\2\2\u03b2\u1cd5\3\2\2\2\u03b4\u1cd9\3\2\2\2\u03b6\u1cfd\3\2\2\2\u03b8"+
		"\u1d18\3\2\2\2\u03ba\u1d1a\3\2\2\2\u03bc\u1d25\3\2\2\2\u03be\u1d2e\3\2"+
		"\2\2\u03c0\u1d3b\3\2\2\2\u03c2\u1d3d\3\2\2\2\u03c4\u1d45\3\2\2\2\u03c6"+
		"\u1d6a\3\2\2\2\u03c8\u1d6e\3\2\2\2\u03ca\u1d73\3\2\2\2\u03cc\u1d7e\3\2"+
		"\2\2\u03ce\u1d82\3\2\2\2\u03d0\u1d84\3\2\2\2\u03d2\u1d88\3\2\2\2\u03d4"+
		"\u1d9c\3\2\2\2\u03d6\u1da6\3\2\2\2\u03d8\u1daa\3\2\2\2\u03da\u1db9\3\2"+
		"\2\2\u03dc\u1dc1\3\2\2\2\u03de\u1dc5\3\2\2\2\u03e0\u1dc7\3\2\2\2\u03e2"+
		"\u1dcf\3\2\2\2\u03e4\u1dd1\3\2\2\2\u03e6\u1dd3\3\2\2\2\u03e8\u1dd5\3\2"+
		"\2\2\u03ea\u1ddb\3\2\2\2\u03ec\u1de0\3\2\2\2\u03ee\u1de6\3\2\2\2\u03f0"+
		"\u1dea\3\2\2\2\u03f2\u1dec\3\2\2\2\u03f4\u1e00\3\2\2\2\u03f6\u1e05\3\2"+
		"\2\2\u03f8\u1e07\3\2\2\2\u03fa\u1e16\3\2\2\2\u03fc\u1e18\3\2\2\2\u03fe"+
		"\u1e25\3\2\2\2\u0400\u1e46\3\2\2\2\u0402\u1e6a\3\2\2\2\u0404\u1e98\3\2"+
		"\2\2\u0406\u1ea1\3\2\2\2\u0408\u1ea5\3\2\2\2\u040a\u1eae\3\2\2\2\u040c"+
		"\u1ebb\3\2\2\2\u040e\u1ebd\3\2\2\2\u0410\u1ed0\3\2\2\2\u0412\u1ed2\3\2"+
		"\2\2\u0414\u1ed7\3\2\2\2\u0416\u1ee0\3\2\2\2\u0418\u1ee4\3\2\2\2\u041a"+
		"\u1ee6\3\2\2\2\u041c\u1ef1\3\2\2\2\u041e\u1f10\3\2\2\2\u0420\u1f12\3\2"+
		"\2\2\u0422\u1f2e\3\2\2\2\u0424\u1f34\3\2\2\2\u0426\u1f3d\3\2\2\2\u0428"+
		"\u1f44\3\2\2\2\u042a\u1f56\3\2\2\2\u042c\u1f5d\3\2\2\2\u042e\u1f61\3\2"+
		"\2\2\u0430\u1f65\3\2\2\2\u0432\u1f67\3\2\2\2\u0434\u1f6d\3\2\2\2\u0436"+
		"\u1f72\3\2\2\2\u0438\u1f76\3\2\2\2\u043a\u1f78\3\2\2\2\u043c\u1f7e\3\2"+
		"\2\2\u043e\u1f8e\3\2\2\2\u0440\u1f92\3\2\2\2\u0442\u1f98\3\2\2\2\u0444"+
		"\u1faa\3\2\2\2\u0446\u1fac\3\2\2\2\u0448\u1fb4\3\2\2\2\u044a\u1fd2\3\2"+
		"\2\2\u044c\u1fda\3\2\2\2\u044e\u1fed\3\2\2\2\u0450\u20e4\3\2\2\2\u0452"+
		"\u2144\3\2\2\2\u0454\u2247\3\2\2\2\u0456\u224e\3\2\2\2\u0458\u225b\3\2"+
		"\2\2\u045a\u225d\3\2\2\2\u045c\u2262\3\2\2\2\u045e\u2272\3\2\2\2\u0460"+
		"\u2274\3\2\2\2\u0462\u227b\3\2\2\2\u0464\u228f\3\2\2\2\u0466\u2294\3\2"+
		"\2\2\u0468\u2296\3\2\2\2\u046a\u22a1\3\2\2\2\u046c\u22aa\3\2\2\2\u046e"+
		"\u22ac\3\2\2\2\u0470\u22b5\3\2\2\2\u0472\u22bb\3\2\2\2\u0474\u22c2\3\2"+
		"\2\2\u0476\u22ca\3\2\2\2\u0478\u22d8\3\2\2\2\u047a\u22e8\3\2\2\2\u047c"+
		"\u22ea\3\2\2\2\u047e\u22ee\3\2\2\2\u0480\u22f0\3\2\2\2\u0482\u22f8\3\2"+
		"\2\2\u0484\u2300\3\2\2\2\u0486\u230e\3\2\2\2\u0488\u2310\3\2\2\2\u048a"+
		"\u231b\3\2\2\2\u048c\u232b\3\2\2\2\u048e\u232d\3\2\2\2\u0490\u2342\3\2"+
		"\2\2\u0492\u2344\3\2\2\2\u0494\u2354\3\2\2\2\u0496\u235e\3\2\2\2\u0498"+
		"\u2369\3\2\2\2\u049a\u236b\3\2\2\2\u049c\u2373\3\2\2\2\u049e\u2385\3\2"+
		"\2\2\u04a0\u2387\3\2\2\2\u04a2\u238a\3\2\2\2\u04a4\u2394\3\2\2\2\u04a6"+
		"\u239b\3\2\2\2\u04a8\u239d\3\2\2\2\u04aa\u23a3\3\2\2\2\u04ac\u23ad\3\2"+
		"\2\2\u04ae\u23b5\3\2\2\2\u04b0\u23b9\3\2\2\2\u04b2\u23bf\3\2\2\2\u04b4"+
		"\u23cf\3\2\2\2\u04b6\u23d1\3\2\2\2\u04b8\u23db\3\2\2\2\u04ba\u23e5\3\2"+
		"\2\2\u04bc\u23e9\3\2\2\2\u04be\u23eb\3\2\2\2\u04c0\u23f6\3\2\2\2\u04c2"+
		"\u23fa\3\2\2\2\u04c4\u240e\3\2\2\2\u04c6\u2410\3\2\2\2\u04c8\u241f\3\2"+
		"\2\2\u04ca\u2421\3\2\2\2\u04cc\u242c\3\2\2\2\u04ce\u242e\3\2\2\2\u04d0"+
		"\u2430\3\2\2\2\u04d2\u2432\3\2\2\2\u04d4\u2434\3\2\2\2\u04d6\u2436\3\2"+
		"\2\2\u04d8\u243c\3\2\2\2\u04da\u245d\3\2\2\2\u04dc\u245f\3\2\2\2\u04de"+
		"\u2461\3\2\2\2\u04e0\u2463\3\2\2\2\u04e2\u246a\3\2\2\2\u04e4\u246f\3\2"+
		"\2\2\u04e6\u2474\3\2\2\2\u04e8\u247b\3\2\2\2\u04ea\u247d\3\2\2\2\u04ec"+
		"\u247f\3\2\2\2\u04ee\u2481\3\2\2\2\u04f0\u2483\3\2\2\2\u04f2\u04f3\5\4"+
		"\3\2\u04f3\u04f4\5\n\6\2\u04f4\u04f5\5\b\5\2\u04f5\3\3\2\2\2\u04f6\u04fb"+
		"\b\3\1\2\u04f7\u04f8\f\4\2\2\u04f8\u04fa\5\6\4\2\u04f9\u04f7\3\2\2\2\u04fa"+
		"\u04fd\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\5\3\2\2\2"+
		"\u04fd\u04fb\3\2\2\2\u04fe\u04ff\7\3\2\2\u04ff\u0500\7K\2\2\u0500\u050b"+
		"\7\36\2\2\u0501\u0502\7\3\2\2\u0502\u0503\7I\2\2\u0503\u050b\7$\2\2\u0504"+
		"\u0505\7\3\2\2\u0505\u0506\7I\2\2\u0506\u050b\7\63\2\2\u0507\u0508\7\3"+
		"\2\2\u0508\u0509\7I\2\2\u0509\u050b\7\35\2\2\u050a\u04fe\3\2\2\2\u050a"+
		"\u0501\3\2\2\2\u050a\u0504\3\2\2\2\u050a\u0507\3\2\2\2\u050b\7\3\2\2\2"+
		"\u050c\u050f\7\4\2\2\u050d\u050f\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050d"+
		"\3\2\2\2\u050f\t\3\2\2\2\u0510\u0511\5\f\7\2\u0511\u0512\7n\2\2\u0512"+
		"\u0513\5\64\33\2\u0513\u0514\5\u0094K\2\u0514\u0515\7\u00c3\2\2\u0515"+
		"\u0516\5\u00a8U\2\u0516\13\3\2\2\2\u0517\u0518\5\u00a6T\2\u0518\u0519"+
		"\5\16\b\2\u0519\u051a\5\20\t\2\u051a\u0520\3\2\2\2\u051b\u051c\5\u00a6"+
		"T\2\u051c\u051d\5\16\b\2\u051d\u0520\3\2\2\2\u051e\u0520\5\u00a6T\2\u051f"+
		"\u0517\3\2\2\2\u051f\u051b\3\2\2\2\u051f\u051e\3\2\2\2\u0520\r\3\2\2\2"+
		"\u0521\u0522\7\u00ab\2\2\u0522\17\3\2\2\2\u0523\u0524\b\t\1\2\u0524\u0525"+
		"\5\22\n\2\u0525\u052a\3\2\2\2\u0526\u0527\f\4\2\2\u0527\u0529\5\22\n\2"+
		"\u0528\u0526\3\2\2\2\u0529\u052c\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b"+
		"\3\2\2\2\u052b\21\3\2\2\2\u052c\u052a\3\2\2\2\u052d\u0534\5\24\13\2\u052e"+
		"\u052f\7\u01df\2\2\u052f\u0530\5\u00acW\2\u0530\u0531\7\u01e0\2\2\u0531"+
		"\u0534\3\2\2\2\u0532\u0534\7\u00ab\2\2\u0533\u052d\3\2\2\2\u0533\u052e"+
		"\3\2\2\2\u0533\u0532\3\2\2\2\u0534\23\3\2\2\2\u0535\u0536\5$\23\2\u0536"+
		"\u0537\5&\24\2\u0537\u0538\5(\25\2\u0538\u0539\5*\26\2\u0539\u053a\5,"+
		"\27\2\u053a\u053b\5.\30\2\u053b\u054b\3\2\2\2\u053c\u053d\5$\23\2\u053d"+
		"\u053e\5\26\f\2\u053e\u053f\7@\2\2\u053f\u0540\5\32\16\2\u0540\u0541\5"+
		" \21\2\u0541\u0542\5\30\r\2\u0542\u0543\7\4\2\2\u0543\u054b\3\2\2\2\u0544"+
		"\u0545\5$\23\2\u0545\u0546\7\64\2\2\u0546\u0547\7\u00d6\2\2\u0547\u0548"+
		"\5\"\22\2\u0548\u0549\7\4\2\2\u0549\u054b\3\2\2\2\u054a\u0535\3\2\2\2"+
		"\u054a\u053c\3\2\2\2\u054a\u0544\3\2\2\2\u054b\25\3\2\2\2\u054c\u0551"+
		"\3\2\2\2\u054d\u054e\7\66\2\2\u054e\u0551\7\61\2\2\u054f\u0551\7\61\2"+
		"\2\u0550\u054c\3\2\2\2\u0550\u054d\3\2\2\2\u0550\u054f\3\2\2\2\u0551\27"+
		"\3\2\2\2\u0552\u0553\5\u00b2Z\2\u0553\31\3\2\2\2\u0554\u0555\7\5\2\2\u0555"+
		"\u0556\5\34\17\2\u0556\u0557\7\6\2\2\u0557\u055a\3\2\2\2\u0558\u055a\3"+
		"\2\2\2\u0559\u0554\3\2\2\2\u0559\u0558\3\2\2\2\u055a\33\3\2\2\2\u055b"+
		"\u055c\b\17\1\2\u055c\u055d\5\36\20\2\u055d\u0563\3\2\2\2\u055e\u055f"+
		"\f\4\2\2\u055f\u0560\7\7\2\2\u0560\u0562\5\36\20\2\u0561\u055e\3\2\2\2"+
		"\u0562\u0565\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564\35"+
		"\3\2\2\2\u0565\u0563\3\2\2\2\u0566\u0567\5$\23\2\u0567\u0568\5(\25\2\u0568"+
		"\37\3\2\2\2\u0569\u056a\t\2\2\2\u056a!\3\2\2\2\u056b\u056c\5\u00acW\2"+
		"\u056c#\3\2\2\2\u056d\u056e\5\u00acW\2\u056e%\3\2\2\2\u056f\u0572\3\2"+
		"\2\2\u0570\u0572\7?\2\2\u0571\u056f\3\2\2\2\u0571\u0570\3\2\2\2\u0572"+
		"\'\3\2\2\2\u0573\u057d\5\u041e\u0210\2\u0574\u0575\5\u041e\u0210\2\u0575"+
		"\u0576\7\b\2\2\u0576\u0577\7\u01ae\2\2\u0577\u057d\3\2\2\2\u0578\u0579"+
		"\5\u041e\u0210\2\u0579\u057a\7\b\2\2\u057a\u057b\7H\2\2\u057b\u057d\3"+
		"\2\2\2\u057c\u0573\3\2\2\2\u057c\u0574\3\2\2\2\u057c\u0578\3\2\2\2\u057d"+
		")\3\2\2\2\u057e\u0582\3\2\2\2\u057f\u0580\7!\2\2\u0580\u0582\7\u01e7\2"+
		"\2\u0581\u057e\3\2\2\2\u0581\u057f\3\2\2\2\u0582+\3\2\2\2\u0583\u0587"+
		"\3\2\2\2\u0584\u0585\7\u012d\2\2\u0585\u0587\7\u0132\2\2\u0586\u0583\3"+
		"\2\2\2\u0586\u0584\3\2\2\2\u0587-\3\2\2\2\u0588\u0592\7\4\2\2\u0589\u058a"+
		"\5\60\31\2\u058a\u058b\5\u00b2Z\2\u058b\u058c\7\4\2\2\u058c\u0592\3\2"+
		"\2\2\u058d\u058e\5\60\31\2\u058e\u058f\5\u044e\u0228\2\u058f\u0590\7\4"+
		"\2\2\u0590\u0592\3\2\2\2\u0591\u0588\3\2\2\2\u0591\u0589\3\2\2\2\u0591"+
		"\u058d\3\2\2\2\u0592/\3\2\2\2\u0593\u0596\5\62\32\2\u0594\u0596\7\u00ac"+
		"\2\2\u0595\u0593\3\2\2\2\u0595\u0594\3\2\2\2\u0596\61\3\2\2\2\u0597\u0598"+
		"\t\3\2\2\u0598\63\3\2\2\2\u0599\u059c\5\66\34\2\u059a\u059c\3\2\2\2\u059b"+
		"\u0599\3\2\2\2\u059b\u059a\3\2\2\2\u059c\65\3\2\2\2\u059d\u059e\b\34\1"+
		"\2\u059e\u059f\58\35\2\u059f\u05a4\3\2\2\2\u05a0\u05a1\f\4\2\2\u05a1\u05a3"+
		"\58\35\2\u05a2\u05a0\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4"+
		"\u05a5\3\2\2\2\u05a5\67\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7\u05a8\5\n\6"+
		"\2\u05a8\u05a9\7\4\2\2\u05a9\u05c0\3\2\2\2\u05aa\u05c0\5<\37\2\u05ab\u05c0"+
		"\5L\'\2\u05ac\u05c0\5R*\2\u05ad\u05c0\5\\/\2\u05ae\u05c0\5^\60\2\u05af"+
		"\u05c0\5`\61\2\u05b0\u05c0\5f\64\2\u05b1\u05c0\5j\66\2\u05b2\u05c0\5n"+
		"8\2\u05b3\u05c0\5p9\2\u05b4\u05b5\5x=\2\u05b5\u05b6\7\4\2\2\u05b6\u05c0"+
		"\3\2\2\2\u05b7\u05c0\5z>\2\u05b8\u05c0\5:\36\2\u05b9\u05c0\5> \2\u05ba"+
		"\u05c0\5\u0082B\2\u05bb\u05c0\5\u0088E\2\u05bc\u05c0\5\u008aF\2\u05bd"+
		"\u05c0\5\u008eH\2\u05be\u05c0\5\u0090I\2\u05bf\u05a7\3\2\2\2\u05bf\u05aa"+
		"\3\2\2\2\u05bf\u05ab\3\2\2\2\u05bf\u05ac\3\2\2\2\u05bf\u05ad\3\2\2\2\u05bf"+
		"\u05ae\3\2\2\2\u05bf\u05af\3\2\2\2\u05bf\u05b0\3\2\2\2\u05bf\u05b1\3\2"+
		"\2\2\u05bf\u05b2\3\2\2\2\u05bf\u05b3\3\2\2\2\u05bf\u05b4\3\2\2\2\u05bf"+
		"\u05b7\3\2\2\2\u05bf\u05b8\3\2\2\2\u05bf\u05b9\3\2\2\2\u05bf\u05ba\3\2"+
		"\2\2\u05bf\u05bb\3\2\2\2\u05bf\u05bc\3\2\2\2\u05bf\u05bd\3\2\2\2\u05bf"+
		"\u05be\3\2\2\2\u05c09\3\2\2\2\u05c1\u05c2\7M\2\2\u05c2\u05c3\5\u009eP"+
		"\2\u05c3;\3\2\2\2\u05c4\u05c5\5J&\2\u05c5\u05c6\5\62\32\2\u05c6\u05c7"+
		"\5\u009eP\2\u05c7=\3\2\2\2\u05c8\u05c9\7:\2\2\u05c9\u05ca\5@!\2\u05ca"+
		"\u05cb\7\32\2\2\u05cb\u05cc\5B\"\2\u05cc\u05cd\7\4\2\2\u05cd?\3\2\2\2"+
		"\u05ce\u05d2\3\2\2\2\u05cf\u05d2\7+\2\2\u05d0\u05d2\7\31\2\2\u05d1\u05ce"+
		"\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1\u05d0\3\2\2\2\u05d2A\3\2\2\2\u05d3"+
		"\u05d4\b\"\1\2\u05d4\u05d5\5D#\2\u05d5\u05db\3\2\2\2\u05d6\u05d7\f\4\2"+
		"\2\u05d7\u05d8\7\7\2\2\u05d8\u05da\5D#\2\u05d9\u05d6\3\2\2\2\u05da\u05dd"+
		"\3\2\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dcC\3\2\2\2\u05dd"+
		"\u05db\3\2\2\2\u05de\u05df\5H%\2\u05df\u05e0\5\62\32\2\u05e0\u05e1\5F"+
		"$\2\u05e1E\3\2\2\2\u05e2\u05e3\t\4\2\2\u05e3G\3\2\2\2\u05e4\u05e5\7\u01e7"+
		"\2\2\u05e5I\3\2\2\2\u05e6\u05e7\b&\1\2\u05e7\u05e8\5\u00acW\2\u05e8\u05ee"+
		"\3\2\2\2\u05e9\u05ea\f\4\2\2\u05ea\u05eb\7\n\2\2\u05eb\u05ed\5\u00a0Q"+
		"\2\u05ec\u05e9\3\2\2\2\u05ed\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee\u05ef"+
		"\3\2\2\2\u05efK\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f1\u05f2\7\u00ea\2\2\u05f2"+
		"\u05f3\5\u00a2R\2\u05f3\u05f7\5\64\33\2\u05f4\u05f6\5N(\2\u05f5\u05f4"+
		"\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8"+
		"\u05fb\3\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fc\5P)\2\u05fb\u05fa\3\2\2"+
		"\2\u05fb\u05fc\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe\7\u00c3\2\2\u05fe"+
		"\u05ff\7\u00ea\2\2\u05ff\u0600\7\4\2\2\u0600M\3\2\2\2\u0601\u0602\7B\2"+
		"\2\u0602\u0603\5\u00a2R\2\u0603\u0604\5\64\33\2\u0604O\3\2\2\2\u0605\u0606"+
		"\7\u00bf\2\2\u0606\u0607\5\64\33\2\u0607Q\3\2\2\2\u0608\u0609\7z\2\2\u0609"+
		"\u060a\5T+\2\u060a\u060b\5V,\2\u060b\u060c\5Z.\2\u060c\u060d\7\u00c3\2"+
		"\2\u060d\u060e\7z\2\2\u060e\u060f\7\4\2\2\u060fS\3\2\2\2\u0610\u0613\5"+
		"\u044e\u0228\2\u0611\u0613\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0611\3\2"+
		"\2\2\u0613U\3\2\2\2\u0614\u0615\b,\1\2\u0615\u0616\5X-\2\u0616\u061b\3"+
		"\2\2\2\u0617\u0618\f\4\2\2\u0618\u061a\5X-\2\u0619\u0617\3\2\2\2\u061a"+
		"\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061b\u061c\3\2\2\2\u061cW\3\2\2\2"+
		"\u061d\u061b\3\2\2\2\u061e\u061f\7\u01c9\2\2\u061f\u0620\5\u00a2R\2\u0620"+
		"\u0621\5\64\33\2\u0621Y\3\2\2\2\u0622\u0623\7\u00bf\2\2\u0623\u0626\5"+
		"\64\33\2\u0624\u0626\3\2\2\2\u0625\u0622\3\2\2\2\u0625\u0624\3\2\2\2\u0626"+
		"[\3\2\2\2\u0627\u0628\5\u00a6T\2\u0628\u0629\7\34\2\2\u0629\u062a\5v<"+
		"\2\u062a]\3\2\2\2\u062b\u062c\5\u00a6T\2\u062c\u062d\7#\2\2\u062d\u062e"+
		"\5\u00a4S\2\u062e\u062f\5v<\2\u062f_\3\2\2\2\u0630\u0631\5\u00a6T\2\u0631"+
		"\u0632\7\u00d6\2\2\u0632\u0633\5b\62\2\u0633\u0634\5v<\2\u0634a\3\2\2"+
		"\2\u0635\u0636\5d\63\2\u0636\u0637\7\u00ef\2\2\u0637\u0638\7 \2\2\u0638"+
		"\u0639\5\u03b4\u01db\2\u0639\u063a\7\34\2\2\u063a\u0664\3\2\2\2\u063b"+
		"\u063c\5d\63\2\u063c\u063d\7\u00ef\2\2\u063d\u063e\5\u03b4\u01db\2\u063e"+
		"\u063f\7\u01bb\2\2\u063f\u0645\5\u044e\u0228\2\u0640\u0641\5\u044e\u0228"+
		"\2\u0641\u0642\7\7\2\2\u0642\u0644\3\2\2\2\u0643\u0640\3\2\2\2\u0644\u0647"+
		"\3\2\2\2\u0645\u0643\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0648\3\2\2\2\u0647"+
		"\u0645\3\2\2\2\u0648\u0649\7\34\2\2\u0649\u0664\3\2\2\2\u064a\u064b\5"+
		"d\63\2\u064b\u064c\7\u00ef\2\2\u064c\u064d\5\u044e\u0228\2\u064d\u064e"+
		"\7\34\2\2\u064e\u0664\3\2\2\2\u064f\u0650\5d\63\2\u0650\u0651\7\u00ef"+
		"\2\2\u0651\u0652\5\u044e\u0228\2\u0652\u0653\7\u01e2\2\2\u0653\u0654\5"+
		"\u044e\u0228\2\u0654\u0655\7\34\2\2\u0655\u0664\3\2\2\2\u0656\u0657\5"+
		"d\63\2\u0657\u0658\7\u00ef\2\2\u0658\u0659\7O\2\2\u0659\u065a\5\u044e"+
		"\u0228\2\u065a\u065b\7\u01e2\2\2\u065b\u065c\5\u044e\u0228\2\u065c\u065d"+
		"\7\34\2\2\u065d\u0664\3\2\2\2\u065e\u065f\5d\63\2\u065f\u0660\7\u00ef"+
		"\2\2\u0660\u0661\5\u03b4\u01db\2\u0661\u0662\7\34\2\2\u0662\u0664\3\2"+
		"\2\2\u0663\u0635\3\2\2\2\u0663\u063b\3\2\2\2\u0663\u064a\3\2\2\2\u0663"+
		"\u064f\3\2\2\2\u0663\u0656\3\2\2\2\u0663\u065e\3\2\2\2\u0664c\3\2\2\2"+
		"\u0665\u0666\7\u01e7\2\2\u0666e\3\2\2\2\u0667\u0668\5\u00a6T\2\u0668\u0669"+
		"\7&\2\2\u0669\u066a\5d\63\2\u066a\u066b\5h\65\2\u066b\u066c\7\u00ef\2"+
		"\2\u066c\u066d\7c\2\2\u066d\u066e\5\u00a4S\2\u066e\u066f\5v<\2\u066fg"+
		"\3\2\2\2\u0670\u0674\3\2\2\2\u0671\u0672\7\37\2\2\u0672\u0674\7\u01ea"+
		"\2\2\u0673\u0670\3\2\2\2\u0673\u0671\3\2\2\2\u0674i\3\2\2\2\u0675\u0676"+
		"\5l\67\2\u0676\u0677\5\u00a8U\2\u0677\u0678\5\u00aaV\2\u0678k\3\2\2\2"+
		"\u0679\u067a\t\5\2\2\u067am\3\2\2\2\u067b\u067c\7/\2\2\u067c\u067d\79"+
		"\2\2\u067d\u067e\5\u03b4\u01db\2\u067e\u067f\7\4\2\2\u067f\u068b\3\2\2"+
		"\2\u0680\u0681\7/\2\2\u0681\u0682\7\27\2\2\u0682\u0683\5\u044e\u0228\2"+
		"\u0683\u0684\7\4\2\2\u0684\u068b\3\2\2\2\u0685\u0687\7/\2\2\u0686\u0688"+
		"\5\u044e\u0228\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689\3"+
		"\2\2\2\u0689\u068b\7\4\2\2\u068a\u067b\3\2\2\2\u068a\u0680\3\2\2\2\u068a"+
		"\u0685\3\2\2\2\u068bo\3\2\2\2\u068c\u068d\7,\2\2\u068d\u0696\5r:\2\u068e"+
		"\u0693\7\u01e4\2\2\u068f\u0690\7\7\2\2\u0690\u0692\5t;\2\u0691\u068f\3"+
		"\2\2\2\u0692\u0695\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3\2\2\2\u0694"+
		"\u0697\3\2\2\2\u0695\u0693\3\2\2\2\u0696\u068e\3\2\2\2\u0696\u0697\3\2"+
		"\2\2\u0697\u0699\3\2\2\2\u0698\u069a\5|?\2\u0699\u0698\3\2\2\2\u0699\u069a"+
		"\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c\7\4\2\2\u069cq\3\2\2\2\u069d"+
		"\u06a5\3\2\2\2\u069e\u06a5\7)\2\2\u069f\u06a5\7N\2\2\u06a0\u06a5\7L\2"+
		"\2\u06a1\u06a5\7\65\2\2\u06a2\u06a5\78\2\2\u06a3\u06a5\7>\2\2\u06a4\u069d"+
		"\3\2\2\2\u06a4\u069e\3\2\2\2\u06a4\u069f\3\2\2\2\u06a4\u06a0\3\2\2\2\u06a4"+
		"\u06a1\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a4\u06a3\3\2\2\2\u06a5s\3\2\2\2"+
		"\u06a6\u06a7\5\u044e\u0228\2\u06a7u\3\2\2\2\u06a8\u06a9\5\64\33\2\u06a9"+
		"\u06aa\7\u00c3\2\2\u06aa\u06ab\7\34\2\2\u06ab\u06ac\5\u00a8U\2\u06ac\u06ad"+
		"\7\4\2\2\u06adw\3\2\2\2\u06ae\u071d\5\u033e\u01a0\2\u06af\u071d\5\u0340"+
		"\u01a1\2\u06b0\u071d\5\u029a\u014e\2\u06b1\u071d\5\u034a\u01a6\2\u06b2"+
		"\u071d\5\u0238\u011d\2\u06b3\u071d\5\u01c0\u00e1\2\u06b4\u071d\5\u01c6"+
		"\u00e4\2\u06b5\u071d\5\u01d2\u00ea\2\u06b6\u071d\5\u01ee\u00f8\2\u06b7"+
		"\u071d\5\u01f8\u00fd\2\u06b8\u071d\5\u02e0\u0171\2\u06b9\u071d\5\u00d2"+
		"j\2\u06ba\u071d\5\u030a\u0186\2\u06bb\u071d\5\u030c\u0187\2\u06bc\u071d"+
		"\5\u0196\u00cc\2\u06bd\u071d\5\u0108\u0085\2\u06be\u071d\5\u011e\u0090"+
		"\2\u06bf\u071d\5\u00c6d\2\u06c0\u071d\5\u00c2b\2\u06c1\u071d\5\u0350\u01a9"+
		"\2\u06c2\u071d\5\u034e\u01a8\2\u06c3\u071d\5\u0200\u0101\2\u06c4\u071d"+
		"\5\u00caf\2\u06c5\u071d\5\u00c8e\2\u06c6\u071d\5\u035e\u01b0\2\u06c7\u071d"+
		"\5\u0104\u0083\2\u06c8\u071d\5\u0124\u0093\2\u06c9\u071d\5\u0354\u01ab"+
		"\2\u06ca\u071d\5\u0266\u0134\2\u06cb\u071d\5\u00fe\u0080\2\u06cc\u071d"+
		"\5\u0126\u0094\2\u06cd\u071d\5\u018e\u00c8\2\u06ce\u071d\5\u021e\u0110"+
		"\2\u06cf\u071d\5\u02f6\u017c\2\u06d0\u071d\5\u0352\u01aa\2\u06d1\u071d"+
		"\5\u0348\u01a5\2\u06d2\u071d\5\u01ba\u00de\2\u06d3\u071d\5\u01c8\u00e5"+
		"\2\u06d4\u071d\5\u01e4\u00f3\2\u06d5\u071d\5\u01f0\u00f9\2\u06d6\u071d"+
		"\5\u02ba\u015e\2\u06d7\u071d\5\u00d0i\2\u06d8\u071d\5\u023a\u011e\2\u06d9"+
		"\u071d\5\u0248\u0125\2\u06da\u071d\5\u024a\u0126\2\u06db\u071d\5\u01a4"+
		"\u00d3\2\u06dc\u071d\5\u00d8m\2\u06dd\u071d\5\u0194\u00cb\2\u06de\u071d"+
		"\5\u0144\u00a3\2\u06df\u071d\5\u01b4\u00db\2\u06e0\u071d\5\u0202\u0102"+
		"\2\u06e1\u071d\5\u00b4[\2\u06e2\u071d\5\u00c0a\2\u06e3\u071d\5\u01fa\u00fe"+
		"\2\u06e4\u071d\5\u0336\u019c\2\u06e5\u071d\5\u0380\u01c1\2\u06e6\u071d"+
		"\5\u03a6\u01d4\2\u06e7\u071d\5\u0222\u0112\2\u06e8\u071d\5\u038c\u01c7"+
		"\2\u06e9\u071d\5\u0106\u0084\2\u06ea\u071d\5\u02f0\u0179\2\u06eb\u071d"+
		"\5\u0220\u0111\2\u06ec\u071d\5\u02fa\u017e\2\u06ed\u071d\5\u01d0\u00e9"+
		"\2\u06ee\u071d\5\u01ec\u00f7\2\u06ef\u071d\5\u00d6l\2\u06f0\u071d\5\u0250"+
		"\u0129\2\u06f1\u071d\5\u0252\u012a\2\u06f2\u071d\5\u0254\u012b\2\u06f3"+
		"\u071d\5\u01b0\u00d9\2\u06f4\u071d\5\u031c\u018f\2\u06f5\u071d\5\u0258"+
		"\u012d\2\u06f6\u071d\5\u01b8\u00dd\2\u06f7\u071d\5\u021c\u010f\2\u06f8"+
		"\u071d\5\u00ccg\2\u06f9\u071d\5\u00ceh\2\u06fa\u071d\5\u01fe\u0100\2\u06fb"+
		"\u071d\5\u0346\u01a4\2\u06fc\u071d\5\u037c\u01bf\2\u06fd\u071d\5\u036a"+
		"\u01b6\2\u06fe\u071d\5\u0274\u013b\2\u06ff\u071d\5\u027c\u013f\2\u0700"+
		"\u071d\5\u0292\u014a\2\u0701\u071d\5\u02a4\u0153\2\u0702\u071d\5\u0382"+
		"\u01c2\2\u0703\u071d\5\u0322\u0192\2\u0704\u071d\5\u0334\u019b\2\u0705"+
		"\u071d\5\u0390\u01c9\2\u0706\u071d\5\u031e\u0190\2\u0707\u071d\5\u0376"+
		"\u01bc\2\u0708\u071d\5\u0256\u012c\2\u0709\u071d\5\u02fe\u0180\2\u070a"+
		"\u071d\5\u02e8\u0175\2\u070b\u071d\5\u02e6\u0174\2\u070c\u071d\5\u02ea"+
		"\u0176\2\u070d\u071d\5\u0304\u0183\2\u070e\u071d\5\u027e\u0140\2\u070f"+
		"\u071d\5\u0294\u014b\2\u0710\u071d\5\u030e\u0188\2\u0711\u071d\5\u026c"+
		"\u0137\2\u0712\u071d\5\u03ae\u01d8\2\u0713\u071d\5\u0326\u0194\2\u0714"+
		"\u071d\5\u0262\u0132\2\u0715\u071d\5\u0324\u0193\2\u0716\u071d\5\u0398"+
		"\u01cd\2\u0717\u071d\5\u0358\u01ad\2\u0718\u071d\5\u00f6|\2\u0719\u071d"+
		"\5\u00e0q\2\u071a\u071d\5\u00fc\177\2\u071b\u071d\5\u0330\u0199\2\u071c"+
		"\u06ae\3\2\2\2\u071c\u06af\3\2\2\2\u071c\u06b0\3\2\2\2\u071c\u06b1\3\2"+
		"\2\2\u071c\u06b2\3\2\2\2\u071c\u06b3\3\2\2\2\u071c\u06b4\3\2\2\2\u071c"+
		"\u06b5\3\2\2\2\u071c\u06b6\3\2\2\2\u071c\u06b7\3\2\2\2\u071c\u06b8\3\2"+
		"\2\2\u071c\u06b9\3\2\2\2\u071c\u06ba\3\2\2\2\u071c\u06bb\3\2\2\2\u071c"+
		"\u06bc\3\2\2\2\u071c\u06bd\3\2\2\2\u071c\u06be\3\2\2\2\u071c\u06bf\3\2"+
		"\2\2\u071c\u06c0\3\2\2\2\u071c\u06c1\3\2\2\2\u071c\u06c2\3\2\2\2\u071c"+
		"\u06c3\3\2\2\2\u071c\u06c4\3\2\2\2\u071c\u06c5\3\2\2\2\u071c\u06c6\3\2"+
		"\2\2\u071c\u06c7\3\2\2\2\u071c\u06c8\3\2\2\2\u071c\u06c9\3\2\2\2\u071c"+
		"\u06ca\3\2\2\2\u071c\u06cb\3\2\2\2\u071c\u06cc\3\2\2\2\u071c\u06cd\3\2"+
		"\2\2\u071c\u06ce\3\2\2\2\u071c\u06cf\3\2\2\2\u071c\u06d0\3\2\2\2\u071c"+
		"\u06d1\3\2\2\2\u071c\u06d2\3\2\2\2\u071c\u06d3\3\2\2\2\u071c\u06d4\3\2"+
		"\2\2\u071c\u06d5\3\2\2\2\u071c\u06d6\3\2\2\2\u071c\u06d7\3\2\2\2\u071c"+
		"\u06d8\3\2\2\2\u071c\u06d9\3\2\2\2\u071c\u06da\3\2\2\2\u071c\u06db\3\2"+
		"\2\2\u071c\u06dc\3\2\2\2\u071c\u06dd\3\2\2\2\u071c\u06de\3\2\2\2\u071c"+
		"\u06df\3\2\2\2\u071c\u06e0\3\2\2\2\u071c\u06e1\3\2\2\2\u071c\u06e2\3\2"+
		"\2\2\u071c\u06e3\3\2\2\2\u071c\u06e4\3\2\2\2\u071c\u06e5\3\2\2\2\u071c"+
		"\u06e6\3\2\2\2\u071c\u06e7\3\2\2\2\u071c\u06e8\3\2\2\2\u071c\u06e9\3\2"+
		"\2\2\u071c\u06ea\3\2\2\2\u071c\u06eb\3\2\2\2\u071c\u06ec\3\2\2\2\u071c"+
		"\u06ed\3\2\2\2\u071c\u06ee\3\2\2\2\u071c\u06ef\3\2\2\2\u071c\u06f0\3\2"+
		"\2\2\u071c\u06f1\3\2\2\2\u071c\u06f2\3\2\2\2\u071c\u06f3\3\2\2\2\u071c"+
		"\u06f4\3\2\2\2\u071c\u06f5\3\2\2\2\u071c\u06f6\3\2\2\2\u071c\u06f7\3\2"+
		"\2\2\u071c\u06f8\3\2\2\2\u071c\u06f9\3\2\2\2\u071c\u06fa\3\2\2\2\u071c"+
		"\u06fb\3\2\2\2\u071c\u06fc\3\2\2\2\u071c\u06fd\3\2\2\2\u071c\u06fe\3\2"+
		"\2\2\u071c\u06ff\3\2\2\2\u071c\u0700\3\2\2\2\u071c\u0701\3\2\2\2\u071c"+
		"\u0702\3\2\2\2\u071c\u0703\3\2\2\2\u071c\u0704\3\2\2\2\u071c\u0705\3\2"+
		"\2\2\u071c\u0706\3\2\2\2\u071c\u0707\3\2\2\2\u071c\u0708\3\2\2\2\u071c"+
		"\u0709\3\2\2\2\u071c\u070a\3\2\2\2\u071c\u070b\3\2\2\2\u071c\u070c\3\2"+
		"\2\2\u071c\u070d\3\2\2\2\u071c\u070e\3\2\2\2\u071c\u070f\3\2\2\2\u071c"+
		"\u0710\3\2\2\2\u071c\u0711\3\2\2\2\u071c\u0712\3\2\2\2\u071c\u0713\3\2"+
		"\2\2\u071c\u0714\3\2\2\2\u071c\u0715\3\2\2\2\u071c\u0716\3\2\2\2\u071c"+
		"\u0717\3\2\2\2\u071c\u0718\3\2\2\2\u071c\u0719\3\2\2\2\u071c\u071a\3\2"+
		"\2\2\u071c\u071b\3\2\2\2\u071dy\3\2\2\2\u071e\u071f\7 \2\2\u071f\u0721"+
		"\5\u044e\u0228\2\u0720\u0722\5|?\2\u0721\u0720\3\2\2\2\u0721\u0722\3\2"+
		"\2\2\u0722\u0725\3\2\2\2\u0723\u0724\7\u0102\2\2\u0724\u0726\7\u01e7\2"+
		"\2\u0725\u0723\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0728"+
		"\7\4\2\2\u0728{\3\2\2\2\u0729\u072a\7\u01bb\2\2\u072a\u072b\7\5\2\2\u072b"+
		"\u072c\5~@\2\u072c\u072d\7\6\2\2\u072d\u0731\3\2\2\2\u072e\u072f\7\u01bb"+
		"\2\2\u072f\u0731\5~@\2\u0730\u0729\3\2\2\2\u0730\u072e\3\2\2\2\u0731}"+
		"\3\2\2\2\u0732\u0737\5\u0080A\2\u0733\u0734\7\7\2\2\u0734\u0736\5\u0080"+
		"A\2\u0735\u0733\3\2\2\2\u0736\u0739\3\2\2\2\u0737\u0735\3\2\2\2\u0737"+
		"\u0738\3\2\2\2\u0738\177\3\2\2\2\u0739\u0737\3\2\2\2\u073a\u073d\5<\37"+
		"\2\u073b\u073d\5\u00acW\2\u073c\u073a\3\2\2\2\u073c\u073b\3\2\2\2\u073d"+
		"\u0081\3\2\2\2\u073e\u073f\7-\2\2\u073f\u0744\5\u0092J\2\u0740\u0742\7"+
		"\66\2\2\u0741\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0743\3\2\2\2\u0743"+
		"\u0745\7\61\2\2\u0744\u0741\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\3"+
		"\2\2\2\u0746\u0747\7\u00d6\2\2\u0747\u0748\5\u03b4\u01db\2\u0748\u0760"+
		"\3\2\2\2\u0749\u074a\7-\2\2\u074a\u074f\5\u0092J\2\u074b\u074d\7\66\2"+
		"\2\u074c\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u0750"+
		"\7\61\2\2\u074f\u074c\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2"+
		"\u0751\u0752\7\u00d6\2\2\u0752\u0753\7 \2\2\u0753\u0755\7\u01e4\2\2\u0754"+
		"\u0756\5|?\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0760\3\2\2"+
		"\2\u0757\u0758\7-\2\2\u0758\u0759\5\u0092J\2\u0759\u075a\7\5\2\2\u075a"+
		"\u075b\5\u0084C\2\u075b\u075c\7\6\2\2\u075c\u0760\3\2\2\2\u075d\u075e"+
		"\7-\2\2\u075e\u0760\5\u0092J\2\u075f\u073e\3\2\2\2\u075f\u0749\3\2\2\2"+
		"\u075f\u0757\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0083\3\2\2\2\u0761\u0766"+
		"\5\u0086D\2\u0762\u0763\7\7\2\2\u0763\u0765\5\u0086D\2\u0764\u0762\3\2"+
		"\2\2\u0765\u0768\3\2\2\2\u0766\u0764\3\2\2\2\u0766\u0767\3\2\2\2\u0767"+
		"\u0085\3\2\2\2\u0768\u0766\3\2\2\2\u0769\u076a\7\u01e7\2\2\u076a\u0087"+
		"\3\2\2\2\u076b\u076c\7<\2\2\u076c\u076d\5\u008cG\2\u076d\u076e\5\u0092"+
		"J\2\u076e\u076f\7\u0102\2\2\u076f\u0770\7\u01e7\2\2\u0770\u0771\7\4\2"+
		"\2\u0771\u0089\3\2\2\2\u0772\u0773\7\62\2\2\u0773\u0774\5\u008cG\2\u0774"+
		"\u0775\5\u0092J\2\u0775\u0776\7\4\2\2\u0776\u008b\3\2\2\2\u0777\u077b"+
		"\3\2\2\2\u0778\u077b\7%\2\2\u0779\u077b\7(\2\2\u077a\u0777\3\2\2\2\u077a"+
		"\u0778\3\2\2\2\u077a\u0779\3\2\2\2\u077b\u008d\3\2\2\2\u077c\u077d\7\60"+
		"\2\2\u077d\u077e\5\u0092J\2\u077e\u077f\7\4\2\2\u077f\u008f\3\2\2\2\u0780"+
		"\u0781\7\u0132\2\2\u0781\u0782\7\4\2\2\u0782\u0091\3\2\2\2\u0783\u0784"+
		"\7\u01e7\2\2\u0784\u0093\3\2\2\2\u0785\u0786\7)\2\2\u0786\u0787\5\u0096"+
		"L\2\u0787\u0788\5\u044e\u0228\2\u0788\u078d\3\2\2\2\u0789\u078a\7)\2\2"+
		"\u078a\u078d\5\u0096L\2\u078b\u078d\3\2\2\2\u078c\u0785\3\2\2\2\u078c"+
		"\u0789\3\2\2\2\u078c\u078b\3\2\2\2\u078d\u0095\3\2\2\2\u078e\u078f\bL"+
		"\1\2\u078f\u0790\5\u0098M\2\u0790\u0795\3\2\2\2\u0791\u0792\f\4\2\2\u0792"+
		"\u0794\5\u0098M\2\u0793\u0791\3\2\2\2\u0794\u0797\3\2\2\2\u0795\u0793"+
		"\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0097\3\2\2\2\u0797\u0795\3\2\2\2\u0798"+
		"\u0799\7\u01c9\2\2\u0799\u079a\5\u009aN\2\u079a\u079b\7\u01a2\2\2\u079b"+
		"\u079c\5\64\33\2\u079c\u0099\3\2\2\2\u079d\u079e\bN\1\2\u079e\u079f\5"+
		"\u009cO\2\u079f\u07a5\3\2\2\2\u07a0\u07a1\f\4\2\2\u07a1\u07a2\7\u0140"+
		"\2\2\u07a2\u07a4\5\u009cO\2\u07a3\u07a0\3\2\2\2\u07a4\u07a7\3\2\2\2\u07a5"+
		"\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u009b\3\2\2\2\u07a7\u07a5\3\2"+
		"\2\2\u07a8\u07a9\7\u01e7\2\2\u07a9\u07ac\7\u01e4\2\2\u07aa\u07ac\5\u00ac"+
		"W\2\u07ab\u07a8\3\2\2\2\u07ab\u07aa\3\2\2\2\u07ac\u009d\3\2\2\2\u07ad"+
		"\u07b8\5\u00acW\2\u07ae\u07af\5\u044e\u0228\2\u07af\u07b0\7\4\2\2\u07b0"+
		"\u07b8\3\2\2\2\u07b1\u07b2\5\u03cc\u01e7\2\u07b2\u07b3\5\u04c2\u0262\2"+
		"\u07b3\u07b4\5\u03fa\u01fe\2\u07b4\u07b5\5\u0414\u020b\2\u07b5\u07b6\7"+
		"\4\2\2\u07b6\u07b8\3\2\2\2\u07b7\u07ad\3\2\2\2\u07b7\u07ae\3\2\2\2\u07b7"+
		"\u07b1\3\2\2\2\u07b8\u009f\3\2\2\2\u07b9\u07ba\5\u044e\u0228\2\u07ba\u07bb"+
		"\7\13\2\2\u07bb\u00a1\3\2\2\2\u07bc\u07bd\5\u044e\u0228\2\u07bd\u07be"+
		"\7\u01a2\2\2\u07be\u00a3\3\2\2\2\u07bf\u07c0\5\u044e\u0228\2\u07c0\u07c1"+
		"\7\34\2\2\u07c1\u00a5\3\2\2\2\u07c2\u07c3\7\u01df\2\2\u07c3\u07c4\5\u00ac"+
		"W\2\u07c4\u07c5\7\u01e0\2\2\u07c5\u07c8\3\2\2\2\u07c6\u07c8\3\2\2\2\u07c7"+
		"\u07c2\3\2\2\2\u07c7\u07c6\3\2\2\2\u07c8\u00a7\3\2\2\2\u07c9\u07cc\5\u00ac"+
		"W\2\u07ca\u07cc\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07ca\3\2\2\2\u07cc"+
		"\u00a9\3\2\2\2\u07cd\u07d1\7\4\2\2\u07ce\u07cf\7\u01c9\2\2\u07cf\u07d1"+
		"\5\u009eP\2\u07d0\u07cd\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d1\u00ab\3\2\2"+
		"\2\u07d2\u07d6\5\u04c8\u0265\2\u07d3\u07d6\5\u04ea\u0276\2\u07d4\u07d6"+
		"\7\u01e7\2\2\u07d5\u07d2\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5\u07d4\3\2\2"+
		"\2\u07d6\u00ad\3\2\2\2\u07d7\u07d8\5\u00b0Y\2\u07d8\u00af\3\2\2\2\u07d9"+
		"\u07da\bY\1\2\u07da\u07db\5\u00b2Z\2\u07db\u07e1\3\2\2\2\u07dc\u07dd\f"+
		"\4\2\2\u07dd\u07de\7\4\2\2\u07de\u07e0\5\u00b2Z\2\u07df\u07dc\3\2\2\2"+
		"\u07e0\u07e3\3\2\2\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u00b1"+
		"\3\2\2\2\u07e3\u07e1\3\2\2\2\u07e4\u0854\5\u033e\u01a0\2\u07e5\u0854\5"+
		"\u0340\u01a1\2\u07e6\u0854\5\u029a\u014e\2\u07e7\u0854\5\u034a\u01a6\2"+
		"\u07e8\u0854\5\u0238\u011d\2\u07e9\u0854\5\u01c0\u00e1\2\u07ea\u0854\5"+
		"\u01c6\u00e4\2\u07eb\u0854\5\u01d2\u00ea\2\u07ec\u0854\5\u01ee\u00f8\2"+
		"\u07ed\u0854\5\u01f8\u00fd\2\u07ee\u0854\5\u02e0\u0171\2\u07ef\u0854\5"+
		"\u00d2j\2\u07f0\u0854\5\u030a\u0186\2\u07f1\u0854\5\u030c\u0187\2\u07f2"+
		"\u0854\5\u0196\u00cc\2\u07f3\u0854\5\u0108\u0085\2\u07f4\u0854\5\u011e"+
		"\u0090\2\u07f5\u0854\5\u00c6d\2\u07f6\u0854\5\u00c2b\2\u07f7\u0854\5\u0350"+
		"\u01a9\2\u07f8\u0854\5\u034e\u01a8\2\u07f9\u0854\5\u0200\u0101\2\u07fa"+
		"\u0854\5\u00caf\2\u07fb\u0854\5\u00c8e\2\u07fc\u0854\5\u035e\u01b0\2\u07fd"+
		"\u0854\5\u0104\u0083\2\u07fe\u0854\5\u0124\u0093\2\u07ff\u0854\5\u0354"+
		"\u01ab\2\u0800\u0854\5\u0266\u0134\2\u0801\u0854\5\u00fe\u0080\2\u0802"+
		"\u0854\5\u0126\u0094\2\u0803\u0854\5\u018e\u00c8\2\u0804\u0854\5\u021e"+
		"\u0110\2\u0805\u0854\5\u02f6\u017c\2\u0806\u0854\5\u0352\u01aa\2\u0807"+
		"\u0854\5\u0348\u01a5\2\u0808\u0854\5\u01ba\u00de\2\u0809\u0854\5\u01c8"+
		"\u00e5\2\u080a\u0854\5\u01e4\u00f3\2\u080b\u0854\5\u01f0\u00f9\2\u080c"+
		"\u0854\5\u02ba\u015e\2\u080d\u0854\5\u00d0i\2\u080e\u0854\5\u023a\u011e"+
		"\2\u080f\u0854\5\u0248\u0125\2\u0810\u0854\5\u024a\u0126\2\u0811\u0854"+
		"\5\u01a4\u00d3\2\u0812\u0854\5\u00d8m\2\u0813\u0854\5\u0194\u00cb\2\u0814"+
		"\u0854\5\u0144\u00a3\2\u0815\u0854\5\u01b4\u00db\2\u0816\u0854\5\u0202"+
		"\u0102\2\u0817\u0854\5\u00b4[\2\u0818\u0854\5\u00c0a\2\u0819\u0854\5\u01fa"+
		"\u00fe\2\u081a\u0854\5\u0336\u019c\2\u081b\u0854\5\u0380\u01c1\2\u081c"+
		"\u0854\5\u03a6\u01d4\2\u081d\u0854\5\u0222\u0112\2\u081e\u0854\5\u038c"+
		"\u01c7\2\u081f\u0854\5\u0106\u0084\2\u0820\u0854\5\u02f0\u0179\2\u0821"+
		"\u0854\5\u0220\u0111\2\u0822\u0854\5\u02fa\u017e\2\u0823\u0854\5\u01d0"+
		"\u00e9\2\u0824\u0854\5\u01ec\u00f7\2\u0825\u0854\5\u00d6l\2\u0826\u0854"+
		"\5\u0250\u0129\2\u0827\u0854\5\u0252\u012a\2\u0828\u0854\5\u0254\u012b"+
		"\2\u0829\u0854\5\u01b0\u00d9\2\u082a\u0854\5\u031c\u018f\2\u082b\u0854"+
		"\5\u0258\u012d\2\u082c\u0854\5\u01b8\u00dd\2\u082d\u0854\5\u021c\u010f"+
		"\2\u082e\u0854\5\u00ccg\2\u082f\u0854\5\u00ceh\2\u0830\u0854\5\u01fe\u0100"+
		"\2\u0831\u0854\5\u0346\u01a4\2\u0832\u0854\5\u037c\u01bf\2\u0833\u0854"+
		"\5\u036a\u01b6\2\u0834\u0854\5\u0274\u013b\2\u0835\u0854\5\u027c\u013f"+
		"\2\u0836\u0854\5\u0292\u014a\2\u0837\u0854\5\u02a4\u0153\2\u0838\u0854"+
		"\5\u0382\u01c2\2\u0839\u0854\5\u0322\u0192\2\u083a\u0854\5\u0334\u019b"+
		"\2\u083b\u0854\5\u0390\u01c9\2\u083c\u0854\5\u031e\u0190\2\u083d\u0854"+
		"\5\u0376\u01bc\2\u083e\u0854\5\u0256\u012c\2\u083f\u0854\5\u02fe\u0180"+
		"\2\u0840\u0854\5\u02e8\u0175\2\u0841\u0854\5\u02e6\u0174\2\u0842\u0854"+
		"\5\u02ea\u0176\2\u0843\u0854\5\u0304\u0183\2\u0844\u0854\5\u027e\u0140"+
		"\2\u0845\u0854\5\u0294\u014b\2\u0846\u0854\5\u030e\u0188\2\u0847\u0854"+
		"\5\u026c\u0137\2\u0848\u0854\5\u03ae\u01d8\2\u0849\u0854\5\u0326\u0194"+
		"\2\u084a\u0854\5\u0262\u0132\2\u084b\u0854\5\u0324\u0193\2\u084c\u0854"+
		"\5\u0398\u01cd\2\u084d\u0854\5\u0358\u01ad\2\u084e\u0854\5\u00f6|\2\u084f"+
		"\u0854\5\u00e0q\2\u0850\u0854\5\u00fc\177\2\u0851\u0854\5\u0330\u0199"+
		"\2\u0852\u0854\3\2\2\2\u0853\u07e4\3\2\2\2\u0853\u07e5\3\2\2\2\u0853\u07e6"+
		"\3\2\2\2\u0853\u07e7\3\2\2\2\u0853\u07e8\3\2\2\2\u0853\u07e9\3\2\2\2\u0853"+
		"\u07ea\3\2\2\2\u0853\u07eb\3\2\2\2\u0853\u07ec\3\2\2\2\u0853\u07ed\3\2"+
		"\2\2\u0853\u07ee\3\2\2\2\u0853\u07ef\3\2\2\2\u0853\u07f0\3\2\2\2\u0853"+
		"\u07f1\3\2\2\2\u0853\u07f2\3\2\2\2\u0853\u07f3\3\2\2\2\u0853\u07f4\3\2"+
		"\2\2\u0853\u07f5\3\2\2\2\u0853\u07f6\3\2\2\2\u0853\u07f7\3\2\2\2\u0853"+
		"\u07f8\3\2\2\2\u0853\u07f9\3\2\2\2\u0853\u07fa\3\2\2\2\u0853\u07fb\3\2"+
		"\2\2\u0853\u07fc\3\2\2\2\u0853\u07fd\3\2\2\2\u0853\u07fe\3\2\2\2\u0853"+
		"\u07ff\3\2\2\2\u0853\u0800\3\2\2\2\u0853\u0801\3\2\2\2\u0853\u0802\3\2"+
		"\2\2\u0853\u0803\3\2\2\2\u0853\u0804\3\2\2\2\u0853\u0805\3\2\2\2\u0853"+
		"\u0806\3\2\2\2\u0853\u0807\3\2\2\2\u0853\u0808\3\2\2\2\u0853\u0809\3\2"+
		"\2\2\u0853\u080a\3\2\2\2\u0853\u080b\3\2\2\2\u0853\u080c\3\2\2\2\u0853"+
		"\u080d\3\2\2\2\u0853\u080e\3\2\2\2\u0853\u080f\3\2\2\2\u0853\u0810\3\2"+
		"\2\2\u0853\u0811\3\2\2\2\u0853\u0812\3\2\2\2\u0853\u0813\3\2\2\2\u0853"+
		"\u0814\3\2\2\2\u0853\u0815\3\2\2\2\u0853\u0816\3\2\2\2\u0853\u0817\3\2"+
		"\2\2\u0853\u0818\3\2\2\2\u0853\u0819\3\2\2\2\u0853\u081a\3\2\2\2\u0853"+
		"\u081b\3\2\2\2\u0853\u081c\3\2\2\2\u0853\u081d\3\2\2\2\u0853\u081e\3\2"+
		"\2\2\u0853\u081f\3\2\2\2\u0853\u0820\3\2\2\2\u0853\u0821\3\2\2\2\u0853"+
		"\u0822\3\2\2\2\u0853\u0823\3\2\2\2\u0853\u0824\3\2\2\2\u0853\u0825\3\2"+
		"\2\2\u0853\u0826\3\2\2\2\u0853\u0827\3\2\2\2\u0853\u0828\3\2\2\2\u0853"+
		"\u0829\3\2\2\2\u0853\u082a\3\2\2\2\u0853\u082b\3\2\2\2\u0853\u082c\3\2"+
		"\2\2\u0853\u082d\3\2\2\2\u0853\u082e\3\2\2\2\u0853\u082f\3\2\2\2\u0853"+
		"\u0830\3\2\2\2\u0853\u0831\3\2\2\2\u0853\u0832\3\2\2\2\u0853\u0833\3\2"+
		"\2\2\u0853\u0834\3\2\2\2\u0853\u0835\3\2\2\2\u0853\u0836\3\2\2\2\u0853"+
		"\u0837\3\2\2\2\u0853\u0838\3\2\2\2\u0853\u0839\3\2\2\2\u0853\u083a\3\2"+
		"\2\2\u0853\u083b\3\2\2\2\u0853\u083c\3\2\2\2\u0853\u083d\3\2\2\2\u0853"+
		"\u083e\3\2\2\2\u0853\u083f\3\2\2\2\u0853\u0840\3\2\2\2\u0853\u0841\3\2"+
		"\2\2\u0853\u0842\3\2\2\2\u0853\u0843\3\2\2\2\u0853\u0844\3\2\2\2\u0853"+
		"\u0845\3\2\2\2\u0853\u0846\3\2\2\2\u0853\u0847\3\2\2\2\u0853\u0848\3\2"+
		"\2\2\u0853\u0849\3\2\2\2\u0853\u084a\3\2\2\2\u0853\u084b\3\2\2\2\u0853"+
		"\u084c\3\2\2\2\u0853\u084d\3\2\2\2\u0853\u084e\3\2\2\2\u0853\u084f\3\2"+
		"\2\2\u0853\u0850\3\2\2\2\u0853\u0851\3\2\2\2\u0853\u0852\3\2\2\2\u0854"+
		"\u00b3\3\2\2\2\u0855\u0856\7\u0098\2\2\u0856\u0857\7\u0172\2\2\u0857\u0858"+
		"\5\u04e0\u0271\2\u0858\u0859\5\u00b6\\\2\u0859\u085a\5\u00b8]\2\u085a"+
		"\u00b5\3\2\2\2\u085b\u085e\7\u01cd\2\2\u085c\u085e\3\2\2\2\u085d\u085b"+
		"\3\2\2\2\u085d\u085c\3\2\2\2\u085e\u00b7\3\2\2\2\u085f\u0864\b]\1\2\u0860"+
		"\u0861\f\4\2\2\u0861\u0863\5\u00be`\2\u0862\u0860\3\2\2\2\u0863\u0866"+
		"\3\2\2\2\u0864\u0862\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u00b9\3\2\2\2\u0866"+
		"\u0864\3\2\2\2\u0867\u086c\b^\1\2\u0868\u0869\f\4\2\2\u0869\u086b\5\u00bc"+
		"_\2\u086a\u0868\3\2\2\2\u086b\u086e\3\2\2\2\u086c\u086a\3\2\2\2\u086c"+
		"\u086d\3\2\2\2\u086d\u00bb\3\2\2\2\u086e\u086c\3\2\2\2\u086f\u0870\7\u014d"+
		"\2\2\u0870\u0884\5\u04de\u0270\2\u0871\u0872\7\u00c2\2\2\u0872\u0873\7"+
		"\u014d\2\2\u0873\u0884\5\u04de\u0270\2\u0874\u0875\7\u01b2\2\2\u0875\u0876"+
		"\7\u014d\2\2\u0876\u0884\5\u04de\u0270\2\u0877\u0878\7\u0090\2\2\u0878"+
		"\u0879\7\u0115\2\2\u0879\u0884\5\u04e2\u0272\2\u087a\u087b\7\u01bd\2\2"+
		"\u087b\u087c\7\u01b8\2\2\u087c\u0884\5\u04de\u0270\2\u087d\u087e\7\u01ba"+
		"\2\2\u087e\u0884\5\u04ca\u0266\2\u087f\u0880\7\u014d\2\2\u0880\u0884\7"+
		"\u0132\2\2\u0881\u0884\7\u00f4\2\2\u0882\u0884\7\u01e7\2\2\u0883\u086f"+
		"\3\2\2\2\u0883\u0871\3\2\2\2\u0883\u0874\3\2\2\2\u0883\u0877\3\2\2\2\u0883"+
		"\u087a\3\2\2\2\u0883\u087d\3\2\2\2\u0883\u087f\3\2\2\2\u0883\u0881\3\2"+
		"\2\2\u0883\u0882\3\2\2\2\u0884\u00bd\3\2\2\2\u0885\u0893\5\u00bc_\2\u0886"+
		"\u0887\7\u0199\2\2\u0887\u0893\5\u04dc\u026f\2\u0888\u0889\7X\2\2\u0889"+
		"\u0893\5\u04ca\u0266\2\u088a\u088b\7\u0172\2\2\u088b\u0893\5\u04ca\u0266"+
		"\2\u088c\u088d\7\u00ef\2\2\u088d\u088e\7\u0172\2\2\u088e\u0893\5\u04ca"+
		"\u0266\2\u088f\u0890\7\u00ef\2\2\u0890\u0891\7\u00e3\2\2\u0891\u0893\5"+
		"\u04ca\u0266\2\u0892\u0885\3\2\2\2\u0892\u0886\3\2\2\2\u0892\u0888\3\2"+
		"\2\2\u0892\u088a\3\2\2\2\u0892\u088c\3\2\2\2\u0892\u088f\3\2\2\2\u0893"+
		"\u00bf\3\2\2\2\u0894\u0895\7\u0098\2\2\u0895\u0896\7\u01ba\2\2\u0896\u0897"+
		"\5\u04e0\u0271\2\u0897\u0898\5\u00b6\\\2\u0898\u0899\5\u00b8]\2\u0899"+
		"\u00c1\3\2\2\2\u089a\u089b\7]\2\2\u089b\u089c\7\u0172\2\2\u089c\u089d"+
		"\5\u04e0\u0271\2\u089d\u089e\5\u00b6\\\2\u089e\u089f\5\u00ba^\2\u089f"+
		"\u00c3\3\2\2\2\u08a0\u08a1\7\u00ef\2\2\u08a1\u08a2\7\u00a6\2\2\u08a2\u08a5"+
		"\5\u04ce\u0268\2\u08a3\u08a5\3\2\2\2\u08a4\u08a0\3\2\2\2\u08a4\u08a3\3"+
		"\2\2\2\u08a5\u00c5\3\2\2\2\u08a6\u08a7\7]\2\2\u08a7\u08a8\7\u0172\2\2"+
		"\u08a8\u08a9\5\u04e0\u0271\2\u08a9\u08aa\5\u00c4c\2\u08aa\u08ab\5\u00f8"+
		"}\2\u08ab\u00c7\3\2\2\2\u08ac\u08ad\7]\2\2\u08ad\u08ae\7\u01ba\2\2\u08ae"+
		"\u08af\5\u04e0\u0271\2\u08af\u08b0\5\u00b6\\\2\u08b0\u08b1\5\u00ba^\2"+
		"\u08b1\u00c9\3\2\2\2\u08b2\u08b3\7]\2\2\u08b3\u08b4\7\u01ba\2\2\u08b4"+
		"\u08b5\5\u04e0\u0271\2\u08b5\u08b6\5\u00f8}\2\u08b6\u00cb\3\2\2\2\u08b7"+
		"\u08b8\7\u00bd\2\2\u08b8\u08b9\7\u0172\2\2\u08b9\u08c0\5\u04ca\u0266\2"+
		"\u08ba\u08bb\7\u00bd\2\2\u08bb\u08bc\7\u0172\2\2\u08bc\u08bd\7\u00ea\2"+
		"\2\u08bd\u08be\7\u00cb\2\2\u08be\u08c0\5\u04ca\u0266\2\u08bf\u08b7\3\2"+
		"\2\2\u08bf\u08ba\3\2\2\2\u08c0\u00cd\3\2\2\2\u08c1\u08c2\7\u00bd\2\2\u08c2"+
		"\u08c3\7\u01ba\2\2\u08c3\u08ca\5\u04ca\u0266\2\u08c4\u08c5\7\u00bd\2\2"+
		"\u08c5\u08c6\7\u01ba\2\2\u08c6\u08c7\7\u00ea\2\2\u08c7\u08c8\7\u00cb\2"+
		"\2\u08c8\u08ca\5\u04ca\u0266\2\u08c9\u08c1\3\2\2\2\u08c9\u08c4\3\2\2\2"+
		"\u08ca\u00cf\3\2\2\2\u08cb\u08cc\7\u0098\2\2\u08cc\u08cd\7\u00e3\2\2\u08cd"+
		"\u08ce\5\u04e0\u0271\2\u08ce\u08cf\5\u00b6\\\2\u08cf\u08d0\5\u00b8]\2"+
		"\u08d0\u00d1\3\2\2\2\u08d1\u08d2\7]\2\2\u08d2\u08d3\7\u00e3\2\2\u08d3"+
		"\u08d4\5\u04e0\u0271\2\u08d4\u08d5\5\u00d4k\2\u08d5\u08d6\7\u01ba\2\2"+
		"\u08d6\u08d7\5\u04ca\u0266\2\u08d7\u00d3\3\2\2\2\u08d8\u08d9\t\6\2\2\u08d9"+
		"\u00d5\3\2\2\2\u08da\u08db\7\u00bd\2\2\u08db\u08dc\7\u00e3\2\2\u08dc\u08e3"+
		"\5\u04ca\u0266\2\u08dd\u08de\7\u00bd\2\2\u08de\u08df\7\u00e3\2\2\u08df"+
		"\u08e0\7\u00ea\2\2\u08e0\u08e1\7\u00cb\2\2\u08e1\u08e3\5\u04ca\u0266\2"+
		"\u08e2\u08da\3\2\2\2\u08e2\u08dd\3\2\2\2\u08e3\u00d7\3\2\2\2\u08e4\u08e5"+
		"\7\u0098\2\2\u08e5\u08e6\7\u0178\2\2\u08e6\u08e7\5\u00dan\2\u08e7\u08e8"+
		"\7k\2\2\u08e8\u08e9\5\u04e0\u0271\2\u08e9\u08ea\5\u00dco\2\u08ea\u08f1"+
		"\3\2\2\2\u08eb\u08ec\7\u0098\2\2\u08ec\u08ed\7\u0178\2\2\u08ed\u08ee\5"+
		"\u04e4\u0273\2\u08ee\u08ef\5\u00dco\2\u08ef\u08f1\3\2\2\2\u08f0\u08e4"+
		"\3\2\2\2\u08f0\u08eb\3\2\2\2\u08f1\u00d9\3\2\2\2\u08f2\u08f5\5\u04e4\u0273"+
		"\2\u08f3\u08f5\3\2\2\2\u08f4\u08f2\3\2\2\2\u08f4\u08f3\3\2\2\2\u08f5\u00db"+
		"\3\2\2\2\u08f6\u08fb\bo\1\2\u08f7\u08f8\f\4\2\2\u08f8\u08fa\5\u00dep\2"+
		"\u08f9\u08f7\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fb\u08fc"+
		"\3\2\2\2\u08fc\u00dd\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fe\u0905\5\u0144\u00a3"+
		"\2\u08ff\u0905\5\u02a4\u0153\2\u0900\u0905\5\u0194\u00cb\2\u0901\u0905"+
		"\5\u0202\u0102\2\u0902\u0905\5\u027c\u013f\2\u0903\u0905\5\u0330\u0199"+
		"\2\u0904\u08fe\3\2\2\2\u0904\u08ff\3\2\2\2\u0904\u0900\3\2\2\2\u0904\u0901"+
		"\3\2\2\2\u0904\u0902\3\2\2\2\u0904\u0903\3\2\2\2\u0905\u00df\3\2\2\2\u0906"+
		"\u0907\7\u0184\2\2\u0907\u090f\5\u00e2r\2\u0908\u0909\7\u0184\2\2\u0909"+
		"\u090a\7\u0118\2\2\u090a\u090f\5\u00e2r\2\u090b\u090c\7\u0184\2\2\u090c"+
		"\u090d\7\u0182\2\2\u090d\u090f\5\u00e2r\2\u090e\u0906\3\2\2\2\u090e\u0908"+
		"\3\2\2\2\u090e\u090b\3\2\2\2\u090f\u00e1\3\2\2\2\u0910\u0911\7\u01a7\2"+
		"\2\u0911\u0919\5\u032c\u0197\2\u0912\u0913\7\u0182\2\2\u0913\u0914\7\u0080"+
		"\2\2\u0914\u0915\7d\2\2\u0915\u0916\7\u01a7\2\2\u0916\u0919\5\u032c\u0197"+
		"\2\u0917\u0919\5\u00e4s\2\u0918\u0910\3\2\2\2\u0918\u0912\3\2\2\2\u0918"+
		"\u0917\3\2\2\2\u0919\u00e3\3\2\2\2\u091a\u091b\5\u00e6t\2\u091b\u091c"+
		"\7\t\2\2\u091c\u091d\5\u00e8u\2\u091d\u0946\3\2\2\2\u091e\u091f\5\u00e6"+
		"t\2\u091f\u0920\7\t\2\2\u0920\u0921\7\u00ac\2\2\u0921\u0946\3\2\2\2\u0922"+
		"\u0923\5\u00e6t\2\u0923\u0924\7\u01a5\2\2\u0924\u0925\5\u00e8u\2\u0925"+
		"\u0946\3\2\2\2\u0926\u0927\5\u00e6t\2\u0927\u0928\7\u01a5\2\2\u0928\u0929"+
		"\7\u00ac\2\2\u0929\u0946\3\2\2\2\u092a\u092b\5\u00e6t\2\u092b\u092c\7"+
		"\u00db\2\2\u092c\u092d\7\u009b\2\2\u092d\u0946\3\2\2\2\u092e\u092f\7\u01a3"+
		"\2\2\u092f\u0930\7\u01de\2\2\u0930\u0946\5\u00f0y\2\u0931\u0932\7|\2\2"+
		"\u0932\u0946\5\u04de\u0270\2\u0933\u0934\7\u0178\2\2\u0934\u0946\5\u04de"+
		"\u0270\2\u0935\u0936\7\u0126\2\2\u0936\u0946\5\u00f2z\2\u0937\u0938\7"+
		"\u0172\2\2\u0938\u0946\5\u00f4{\2\u0939\u093a\7\u0182\2\2\u093a\u093b"+
		"\7k\2\2\u093b\u0946\5\u00f4{\2\u093c\u093d\7\u01d2\2\2\u093d\u093e\7\u013e"+
		"\2\2\u093e\u0946\5\u0460\u0231\2\u093f\u0940\7\u01a7\2\2\u0940\u0941\7"+
		"\u018b\2\2\u0941\u0946\5\u04de\u0270\2\u0942\u0943\7\u0182\2\2\u0943\u0944"+
		"\7k\2\2\u0944\u0946\7\u00ac\2\2\u0945\u091a\3\2\2\2\u0945\u091e\3\2\2"+
		"\2\u0945\u0922\3\2\2\2\u0945\u0926\3\2\2\2\u0945\u092a\3\2\2\2\u0945\u092e"+
		"\3\2\2\2\u0945\u0931\3\2\2\2\u0945\u0933\3\2\2\2\u0945\u0935\3\2\2\2\u0945"+
		"\u0937\3\2\2\2\u0945\u0939\3\2\2\2\u0945\u093c\3\2\2\2\u0945\u093f\3\2"+
		"\2\2\u0945\u0942\3\2\2\2\u0946\u00e5\3\2\2\2\u0947\u0948\bt\1\2\u0948"+
		"\u0949\5\u04e4\u0273\2\u0949\u094f\3\2\2\2\u094a\u094b\f\4\2\2\u094b\u094c"+
		"\7\f\2\2\u094c\u094e\5\u04e4\u0273\2\u094d\u094a\3\2\2\2\u094e\u0951\3"+
		"\2\2\2\u094f\u094d\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u00e7\3\2\2\2\u0951"+
		"\u094f\3\2\2\2\u0952\u0953\bu\1\2\u0953\u0954\5\u00eav\2\u0954\u095a\3"+
		"\2\2\2\u0955\u0956\f\4\2\2\u0956\u0957\7\7\2\2\u0957\u0959\5\u00eav\2"+
		"\u0958\u0955\3\2\2\2\u0959\u095c\3\2\2\2\u095a\u0958\3\2\2\2\u095a\u095b"+
		"\3\2\2\2\u095b\u00e9\3\2\2\2\u095c\u095a\3\2\2\2\u095d\u0960\5\u00eex"+
		"\2\u095e\u0960\5\u01a0\u00d1\2\u095f\u095d\3\2\2\2\u095f\u095e\3\2\2\2"+
		"\u0960\u00eb\3\2\2\2\u0961\u0962\7\u015d\2\2\u0962\u0969\7\u01b1\2\2\u0963"+
		"\u0964\7\u015d\2\2\u0964\u0969\7\u008d\2\2\u0965\u0966\7\u0168\2\2\u0966"+
		"\u0969\7\u015d\2\2\u0967\u0969\7\u0180\2\2\u0968\u0961\3\2\2\2\u0968\u0963"+
		"\3\2\2\2\u0968\u0965\3\2\2\2\u0968\u0967\3\2\2\2\u0969\u00ed\3\2\2\2\u096a"+
		"\u096f\5\u00f4{\2\u096b\u096f\7\u01ab\2\2\u096c\u096f\7\u00d0\2\2\u096d"+
		"\u096f\7\u013b\2\2\u096e\u096a\3\2\2\2\u096e\u096b\3\2\2\2\u096e\u096c"+
		"\3\2\2\2\u096e\u096d\3\2\2\2\u096f\u00ef\3\2\2\2\u0970\u0971\5\u0446\u0224"+
		"\2\u0971\u0972\7\5\2\2\u0972\u0973\5\u04dc\u026f\2\u0973\u0974\7\6\2\2"+
		"\u0974\u0975\5\u04de\u0270\2\u0975\u0976\5\u044a\u0226\2\u0976\u0981\3"+
		"\2\2\2\u0977\u0978\5\u0446\u0224\2\u0978\u0979\5\u04de\u0270\2\u0979\u097a"+
		"\5\u044a\u0226\2\u097a\u0981\3\2\2\2\u097b\u0981\5\u04de\u0270\2\u097c"+
		"\u0981\5\u01a0\u00d1\2\u097d\u0981\7\u01e7\2\2\u097e\u0981\7\u00ac\2\2"+
		"\u097f\u0981\7\u0118\2\2\u0980\u0970\3\2\2\2\u0980\u0977\3\2\2\2\u0980"+
		"\u097b\3\2\2\2\u0980\u097c\3\2\2\2\u0980\u097d\3\2\2\2\u0980\u097e\3\2"+
		"\2\2\u0980\u097f\3\2\2\2\u0981\u00f1\3\2\2\2\u0982\u0986\5\u04de\u0270"+
		"\2\u0983\u0986\7\u00ac\2\2\u0984\u0986\3\2\2\2\u0985\u0982\3\2\2\2\u0985"+
		"\u0983\3\2\2\2\u0985\u0984\3\2\2\2\u0986\u00f3\3\2\2\2\u0987\u098a\5\u04e4"+
		"\u0273\2\u0988\u098a\5\u04de\u0270\2\u0989\u0987\3\2\2\2\u0989\u0988\3"+
		"\2\2\2\u098a\u00f5\3\2\2\2\u098b\u098c\7\u016b\2\2\u098c\u099a\5\u00e6"+
		"t\2\u098d\u098e\7\u016b\2\2\u098e\u098f\7\u01a3\2\2\u098f\u099a\7\u01de"+
		"\2\2\u0990\u0991\7\u016b\2\2\u0991\u0992\7\u01a7\2\2\u0992\u0993\7\u0106"+
		"\2\2\u0993\u099a\7\u0113\2\2\u0994\u0995\7\u016b\2\2\u0995\u0996\7\u0182"+
		"\2\2\u0996\u099a\7k\2\2\u0997\u0998\7\u016b\2\2\u0998\u099a\7[\2\2\u0999"+
		"\u098b\3\2\2\2\u0999\u098d\3\2\2\2\u0999\u0990\3\2\2\2\u0999\u0994\3\2"+
		"\2\2\u0999\u0997\3\2\2\2\u099a\u00f7\3\2\2\2\u099b\u099c\7\u0184\2\2\u099c"+
		"\u099f\5\u00e2r\2\u099d\u099f\5\u00f6|\2\u099e\u099b\3\2\2\2\u099e\u099d"+
		"\3\2\2\2\u099f\u00f9\3\2\2\2\u09a0\u09a1\7\u0184\2\2\u09a1\u09a4\5\u00e4"+
		"s\2\u09a2\u09a4\5\u00f6|\2\u09a3\u09a0\3\2\2\2\u09a3\u09a2\3\2\2\2\u09a4"+
		"\u00fb\3\2\2\2\u09a5\u09a6\7\u0187\2\2\u09a6\u09b4\5\u00e6t\2\u09a7\u09a8"+
		"\7\u0187\2\2\u09a8\u09a9\7\u01a3\2\2\u09a9\u09b4\7\u01de\2\2\u09aa\u09ab"+
		"\7\u0187\2\2\u09ab\u09ac\7\u01a7\2\2\u09ac\u09ad\7\u0106\2\2\u09ad\u09b4"+
		"\7\u0113\2\2\u09ae\u09af\7\u0187\2\2\u09af\u09b0\7\u0182\2\2\u09b0\u09b4"+
		"\7k\2\2\u09b1\u09b2\7\u0187\2\2\u09b2\u09b4\7[\2\2\u09b3\u09a5\3\2\2\2"+
		"\u09b3\u09a7\3\2\2\2\u09b3\u09aa\3\2\2\2\u09b3\u09ae\3\2\2\2\u09b3\u09b1"+
		"\3\2\2\2\u09b4\u00fd\3\2\2\2\u09b5\u09b6\7\u0184\2\2\u09b6\u09b7\7\u0092"+
		"\2\2\u09b7\u09b8\5\u0100\u0081\2\u09b8\u09b9\5\u0102\u0082\2\u09b9\u00ff"+
		"\3\2\2\2\u09ba\u09bd\5\u04c6\u0264\2\u09bb\u09bd\7[\2\2\u09bc\u09ba\3"+
		"\2\2\2\u09bc\u09bb\3\2\2\2\u09bd\u0101\3\2\2\2\u09be\u09bf\t\7\2\2\u09bf"+
		"\u0103\3\2\2\2\u09c0\u09c1\7\u0082\2\2\u09c1\u0105\3\2\2\2\u09c2\u09c3"+
		"\7\u00b7\2\2\u09c3\u09cb\7[\2\2\u09c4\u09c5\7\u00b7\2\2\u09c5\u09cb\7"+
		"\u019e\2\2\u09c6\u09c7\7\u00b7\2\2\u09c7\u09cb\7\u01a0\2\2\u09c8\u09c9"+
		"\7\u00b7\2\2\u09c9\u09cb\7\u014f\2\2\u09ca\u09c2\3\2\2\2\u09ca\u09c4\3"+
		"\2\2\2\u09ca\u09c6\3\2\2\2\u09ca\u09c8\3\2\2\2\u09cb\u0107\3\2\2\2\u09cc"+
		"\u09cd\7]\2\2\u09cd\u09ce\7\u019b\2\2\u09ce\u09cf\5\u040c\u0207\2\u09cf"+
		"\u09d0\5\u010a\u0086\2\u09d0\u09fd\3\2\2\2\u09d1\u09d2\7]\2\2\u09d2\u09d3"+
		"\7\u019b\2\2\u09d3\u09d4\7\u00ea\2\2\u09d4\u09d5\7\u00cb\2\2\u09d5\u09d6"+
		"\5\u040c\u0207\2\u09d6\u09d7\5\u010a\u0086\2\u09d7\u09fd\3\2\2\2\u09d8"+
		"\u09d9\7]\2\2\u09d9\u09da\7\u00f2\2\2\u09da\u09db\5\u04c8\u0265\2\u09db"+
		"\u09dc\5\u010a\u0086\2\u09dc\u09fd\3\2\2\2\u09dd\u09de\7]\2\2\u09de\u09df"+
		"\7\u00f2\2\2\u09df\u09e0\7\u00ea\2\2\u09e0\u09e1\7\u00cb\2\2\u09e1\u09e2"+
		"\5\u04c8\u0265\2\u09e2\u09e3\5\u010a\u0086\2\u09e3\u09fd\3\2\2\2\u09e4"+
		"\u09e5\7]\2\2\u09e5\u09e6\7\u017e\2\2\u09e6\u09e7\5\u04c8\u0265\2\u09e7"+
		"\u09e8\5\u010a\u0086\2\u09e8\u09fd\3\2\2\2\u09e9\u09ea\7]\2\2\u09ea\u09eb"+
		"\7\u017e\2\2\u09eb\u09ec\7\u00ea\2\2\u09ec\u09ed\7\u00cb\2\2\u09ed\u09ee"+
		"\5\u04c8\u0265\2\u09ee\u09ef\5\u010a\u0086\2\u09ef\u09fd\3\2\2\2\u09f0"+
		"\u09f1\7]\2\2\u09f1\u09f2\7\u01c7\2\2\u09f2\u09f3\5\u04c8\u0265\2\u09f3"+
		"\u09f4\5\u010a\u0086\2\u09f4\u09fd\3\2\2\2\u09f5\u09f6\7]\2\2\u09f6\u09f7"+
		"\7\u01c7\2\2\u09f7\u09f8\7\u00ea\2\2\u09f8\u09f9\7\u00cb\2\2\u09f9\u09fa"+
		"\5\u04c8\u0265\2\u09fa\u09fb\5\u010a\u0086\2\u09fb\u09fd\3\2\2\2\u09fc"+
		"\u09cc\3\2\2\2\u09fc\u09d1\3\2\2\2\u09fc\u09d8\3\2\2\2\u09fc\u09dd\3\2"+
		"\2\2\u09fc\u09e4\3\2\2\2\u09fc\u09e9\3\2\2\2\u09fc\u09f0\3\2\2\2\u09fc"+
		"\u09f5\3\2\2\2\u09fd\u0109\3\2\2\2\u09fe\u09ff\b\u0086\1\2\u09ff\u0a00"+
		"\5\u010c\u0087\2\u0a00\u0a06\3\2\2\2\u0a01\u0a02\f\4\2\2\u0a02\u0a03\7"+
		"\7\2\2\u0a03\u0a05\5\u010c\u0087\2\u0a04\u0a01\3\2\2\2\u0a05\u0a08\3\2"+
		"\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u010b\3\2\2\2\u0a08"+
		"\u0a06\3\2\2\2\u0a09\u0a0a\7]\2\2\u0a0a\u0a0b\5\u0306\u0184\2\u0a0b\u0a0c"+
		"\5\u04e4\u0273\2\u0a0c\u0a0d\5\u0308\u0185\2\u0a0d\u0a0e\7\u01ae\2\2\u0a0e"+
		"\u0a0f\5\u041e\u0210\2\u0a0f\u0a10\5\u0112\u008a\2\u0a10\u0a11\5\u0114"+
		"\u008b\2\u0a11\u0aaf\3\2\2\2\u0a12\u0a13\7]\2\2\u0a13\u0a14\5\u0306\u0184"+
		"\2\u0a14\u0a15\5\u04e4\u0273\2\u0a15\u0a16\5\u010e\u0088\2\u0a16\u0aaf"+
		"\3\2\2\2\u0a17\u0a18\7]\2\2\u0a18\u0a19\5\u0306\u0184\2\u0a19\u0a1a\5"+
		"\u04e4\u0273\2\u0a1a\u0a1b\7\u0184\2\2\u0a1b\u0a1c\7\u0191\2\2\u0a1c\u0a1d"+
		"\5\u04e2\u0272\2\u0a1d\u0aaf\3\2\2\2\u0a1e\u0a1f\7]\2\2\u0a1f\u0a20\5"+
		"\u0306\u0184\2\u0a20\u0a21\5\u04e4\u0273\2\u0a21\u0a22\7\u0184\2\2\u0a22"+
		"\u0a23\5\u0116\u008c\2\u0a23\u0aaf\3\2\2\2\u0a24\u0a25\7]\2\2\u0a25\u0a26"+
		"\5\u0306\u0184\2\u0a26\u0a27\5\u04e4\u0273\2\u0a27\u0a28\7\u016b\2\2\u0a28"+
		"\u0a29\5\u0116\u008c\2\u0a29\u0aaf\3\2\2\2\u0a2a\u0a2b\7]\2\2\u0a2b\u0a2c"+
		"\5\u0306\u0184\2\u0a2c\u0a2d\5\u04e4\u0273\2\u0a2d\u0a2e\7\u0184\2\2\u0a2e"+
		"\u0a2f\7\u0194\2\2\u0a2f\u0a30\5\u04e4\u0273\2\u0a30\u0aaf\3\2\2\2\u0a31"+
		"\u0a32\7\u00bd\2\2\u0a32\u0a33\5\u0306\u0184\2\u0a33\u0a34\7\u00ea\2\2"+
		"\u0a34\u0a35\7\u00cb\2\2\u0a35\u0a36\5\u04e4\u0273\2\u0a36\u0a37\5\u0110"+
		"\u0089\2\u0a37\u0aaf\3\2\2\2\u0a38\u0a39\7\u00bd\2\2\u0a39\u0a3a\5\u0306"+
		"\u0184\2\u0a3a\u0a3b\5\u04e4\u0273\2\u0a3b\u0a3c\5\u0110\u0089\2\u0a3c"+
		"\u0aaf\3\2\2\2\u0a3d\u0a3e\7]\2\2\u0a3e\u0a3f\5\u0306\u0184\2\u0a3f\u0a40"+
		"\5\u04e4\u0273\2\u0a40\u0a41\5\u01d8\u00ed\2\u0a41\u0aaf\3\2\2\2\u0a42"+
		"\u0a43\7]\2\2\u0a43\u0a44\5\u0306\u0184\2\u0a44\u0a45\5\u04e4\u0273\2"+
		"\u0a45\u0a46\7\u00bd\2\2\u0a46\u0a47\7\u012d\2\2\u0a47\u0a48\7\u0132\2"+
		"\2\u0a48\u0aaf\3\2\2\2\u0a49\u0a4a\7]\2\2\u0a4a\u0a4b\5\u0306\u0184\2"+
		"\u0a4b\u0a4c\5\u04e4\u0273\2\u0a4c\u0a4d\7\u0184\2\2\u0a4d\u0a4e\7\u012d"+
		"\2\2\u0a4e\u0a4f\7\u0132\2\2\u0a4f\u0aaf\3\2\2\2\u0a50\u0a51\7\u00bd\2"+
		"\2\u0a51\u0a52\7\u0091\2\2\u0a52\u0a53\7\u00ea\2\2\u0a53\u0a54\7\u00cb"+
		"\2\2\u0a54\u0a55\5\u04cc\u0267\2\u0a55\u0a56\5\u0110\u0089\2\u0a56\u0aaf"+
		"\3\2\2\2\u0a57\u0a58\7\u00bd\2\2\u0a58\u0a59\7\u0091\2\2\u0a59\u0a5a\5"+
		"\u04cc\u0267\2\u0a5a\u0a5b\5\u0110\u0089\2\u0a5b\u0aaf\3\2\2\2\u0a5c\u0a5d"+
		"\7W\2\2\u0a5d\u0aaf\5\u0154\u00ab\2\u0a5e\u0a5f\7W\2\2\u0a5f\u0a60\7\u0089"+
		"\2\2\u0a60\u0aaf\5\u0154\u00ab\2\u0a61\u0a62\7W\2\2\u0a62\u0aaf\5\u0166"+
		"\u00b4\2\u0a63\u0a64\7\u01be\2\2\u0a64\u0a65\7\u0091\2\2\u0a65\u0aaf\5"+
		"\u04cc\u0267\2\u0a66\u0a67\7\u0085\2\2\u0a67\u0a68\7\u013b\2\2\u0a68\u0aaf"+
		"\5\u04cc\u0267\2\u0a69\u0a6a\7\u00c0\2\2\u0a6a\u0a6b\7\u01a9\2\2\u0a6b"+
		"\u0aaf\5\u04cc\u0267\2\u0a6c\u0a6d\7\u00c0\2\2\u0a6d\u0a6e\7^\2\2\u0a6e"+
		"\u0a6f\7\u01a9\2\2\u0a6f\u0aaf\5\u04cc\u0267\2\u0a70\u0a71\7\u00c0\2\2"+
		"\u0a71\u0a72\7\u016a\2\2\u0a72\u0a73\7\u01a9\2\2\u0a73\u0aaf\5\u04cc\u0267"+
		"\2\u0a74\u0a75\7\u00b6\2\2\u0a75\u0a76\7\u01a9\2\2\u0a76\u0aaf\5\u04cc"+
		"\u0267\2\u0a77\u0a78\7\u00c0\2\2\u0a78\u0a79\7\u0176\2\2\u0a79\u0aaf\5"+
		"\u04cc\u0267\2\u0a7a\u0a7b\7\u00c0\2\2\u0a7b\u0a7c\7^\2\2\u0a7c\u0a7d"+
		"\7\u0176\2\2\u0a7d\u0aaf\5\u04cc\u0267\2\u0a7e\u0a7f\7\u00c0\2\2\u0a7f"+
		"\u0a80\7\u016a\2\2\u0a80\u0a81\7\u0176\2\2\u0a81\u0aaf\5\u04cc\u0267\2"+
		"\u0a82\u0a83\7\u00b6\2\2\u0a83\u0a84\7\u0176\2\2\u0a84\u0aaf\5\u04cc\u0267"+
		"\2\u0a85\u0a86\7\u00f4\2\2\u0a86\u0aaf\5\u04c8\u0265\2\u0a87\u0a88\7\u012b"+
		"\2\2\u0a88\u0a89\7\u00f4\2\2\u0a89\u0aaf\5\u04c8\u0265\2\u0a8a\u0a8b\7"+
		"\u0137\2\2\u0a8b\u0aaf\5\u025e\u0130\2\u0a8c\u0a8d\7\u0148\2\2\u0a8d\u0a8e"+
		"\7\u01a5\2\2\u0a8e\u0aaf\5\u04e0\u0271\2\u0a8f\u0a90\7\u0184\2\2\u0a90"+
		"\u0a91\7\u019d\2\2\u0a91\u0aaf\5\u04cc\u0267\2\u0a92\u0a93\7\u0184\2\2"+
		"\u0a93\u0aaf\5\u0116\u008c\2\u0a94\u0a95\7\u016b\2\2\u0a95\u0aaf\5\u0116"+
		"\u008c\2\u0a96\u0aaf\5\u01d8\u00ed\2\u0a97\u0a98\7\u0184\2\2\u0a98\u0a99"+
		"\7\u01cd\2\2\u0a99\u0aaf\7\u013a\2\2\u0a9a\u0a9b\7\u0184\2\2\u0a9b\u0a9c"+
		"\7\u01ce\2\2\u0a9c\u0aaf\7\u013a\2\2\u0a9d\u0a9e\7\u0184\2\2\u0a9e\u0a9f"+
		"\7\u01ce\2\2\u0a9f\u0aaf\7\u0085\2\2\u0aa0\u0aa1\7\u00c0\2\2\u0aa1\u0aa2"+
		"\7\u01a9\2\2\u0aa2\u0aaf\7[\2\2\u0aa3\u0aa4\7\u00c0\2\2\u0aa4\u0aa5\7"+
		"\u01a9\2\2\u0aa5\u0aaf\7\u01ba\2\2\u0aa6\u0aa7\7\u00b6\2\2\u0aa7\u0aa8"+
		"\7\u01a9\2\2\u0aa8\u0aaf\7[\2\2\u0aa9\u0aaa\7\u00b6\2\2\u0aaa\u0aab\7"+
		"\u01a9\2\2\u0aab\u0aaf\7\u01ba\2\2\u0aac\u0aad\7\u012d\2\2\u0aad\u0aaf"+
		"\7\u0137\2\2\u0aae\u0a09\3\2\2\2\u0aae\u0a12\3\2\2\2\u0aae\u0a17\3\2\2"+
		"\2\u0aae\u0a1e\3\2\2\2\u0aae\u0a24\3\2\2\2\u0aae\u0a2a\3\2\2\2\u0aae\u0a31"+
		"\3\2\2\2\u0aae\u0a38\3\2\2\2\u0aae\u0a3d\3\2\2\2\u0aae\u0a42\3\2\2\2\u0aae"+
		"\u0a49\3\2\2\2\u0aae\u0a50\3\2\2\2\u0aae\u0a57\3\2\2\2\u0aae\u0a5c\3\2"+
		"\2\2\u0aae\u0a5e\3\2\2\2\u0aae\u0a61\3\2\2\2\u0aae\u0a63\3\2\2\2\u0aae"+
		"\u0a66\3\2\2\2\u0aae\u0a69\3\2\2\2\u0aae\u0a6c\3\2\2\2\u0aae\u0a70\3\2"+
		"\2\2\u0aae\u0a74\3\2\2\2\u0aae\u0a77\3\2\2\2\u0aae\u0a7a\3\2\2\2\u0aae"+
		"\u0a7e\3\2\2\2\u0aae\u0a82\3\2\2\2\u0aae\u0a85\3\2\2\2\u0aae\u0a87\3\2"+
		"\2\2\u0aae\u0a8a\3\2\2\2\u0aae\u0a8c\3\2\2\2\u0aae\u0a8f\3\2\2\2\u0aae"+
		"\u0a92\3\2\2\2\u0aae\u0a94\3\2\2\2\u0aae\u0a96\3\2\2\2\u0aae\u0a97\3\2"+
		"\2\2\u0aae\u0a9a\3\2\2\2\u0aae\u0a9d\3\2\2\2\u0aae\u0aa0\3\2\2\2\u0aae"+
		"\u0aa3\3\2\2\2\u0aae\u0aa6\3\2\2\2\u0aae\u0aa9\3\2\2\2\u0aae\u0aac\3\2"+
		"\2\2\u0aaf\u010d\3\2\2\2\u0ab0\u0ab1\7\u0184\2\2\u0ab1\u0ab2\7\u00ac\2"+
		"\2\u0ab2\u0ab6\5\u044e\u0228\2\u0ab3\u0ab4\7\u00bd\2\2\u0ab4\u0ab6\7\u00ac"+
		"\2\2\u0ab5\u0ab0\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab6\u010f\3\2\2\2\u0ab7"+
		"\u0abb\7x\2\2\u0ab8\u0abb\7\u016d\2\2\u0ab9\u0abb\3\2\2\2\u0aba\u0ab7"+
		"\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0aba\u0ab9\3\2\2\2\u0abb\u0111\3\2\2\2\u0abc"+
		"\u0abd\7\u0087\2\2\u0abd\u0ac0\5\u025e\u0130\2\u0abe\u0ac0\3\2\2\2\u0abf"+
		"\u0abc\3\2\2\2\u0abf\u0abe\3\2\2\2\u0ac0\u0113\3\2\2\2\u0ac1\u0ac2\7\u01bb"+
		"\2\2\u0ac2\u0ac5\5\u044e\u0228\2\u0ac3\u0ac5\3\2\2\2\u0ac4\u0ac1\3\2\2"+
		"\2\u0ac4\u0ac3\3\2\2\2\u0ac5\u0115\3\2\2\2\u0ac6\u0ac7\7\5\2\2\u0ac7\u0ac8"+
		"\5\u011a\u008e\2\u0ac8\u0ac9\7\6\2\2\u0ac9\u0117\3\2\2\2\u0aca\u0acb\7"+
		"\u01cd\2\2\u0acb\u0ace\5\u0116\u008c\2\u0acc\u0ace\3\2\2\2\u0acd\u0aca"+
		"\3\2\2\2\u0acd\u0acc\3\2\2\2\u0ace\u0119\3\2\2\2\u0acf\u0ad0\b\u008e\1"+
		"\2\u0ad0\u0ad1\5\u011c\u008f\2\u0ad1\u0ad7\3\2\2\2\u0ad2\u0ad3\f\4\2\2"+
		"\u0ad3\u0ad4\7\7\2\2\u0ad4\u0ad6\5\u011c\u008f\2\u0ad5\u0ad2\3\2\2\2\u0ad6"+
		"\u0ad9\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u011b\3\2"+
		"\2\2\u0ad9\u0ad7\3\2\2\2\u0ada\u0adb\5\u04e8\u0275\2\u0adb\u0adc\7\f\2"+
		"\2\u0adc\u0add\5\u04e8\u0275\2\u0add\u0ade\7\t\2\2\u0ade\u0adf\5\u022a"+
		"\u0116\2\u0adf\u0aea\3\2\2\2\u0ae0\u0ae1\5\u04e8\u0275\2\u0ae1\u0ae2\7"+
		"\f\2\2\u0ae2\u0ae3\5\u04e8\u0275\2\u0ae3\u0aea\3\2\2\2\u0ae4\u0ae5\5\u04e8"+
		"\u0275\2\u0ae5\u0ae6\7\t\2\2\u0ae6\u0ae7\5\u022a\u0116\2\u0ae7\u0aea\3"+
		"\2\2\2\u0ae8\u0aea\5\u04e8\u0275\2\u0ae9\u0ada\3\2\2\2\u0ae9\u0ae0\3\2"+
		"\2\2\u0ae9\u0ae4\3\2\2\2\u0ae9\u0ae8\3\2\2\2\u0aea\u011d\3\2\2\2\u0aeb"+
		"\u0aec\7]\2\2\u0aec\u0aed\7\u01ae\2\2\u0aed\u0aee\5\u025e\u0130\2\u0aee"+
		"\u0aef\5\u0120\u0091\2\u0aef\u011f\3\2\2\2\u0af0\u0af1\b\u0091\1\2\u0af1"+
		"\u0af2\5\u0122\u0092\2\u0af2\u0af8\3\2\2\2\u0af3\u0af4\f\4\2\2\u0af4\u0af5"+
		"\7\7\2\2\u0af5\u0af7\5\u0122\u0092\2\u0af6\u0af3\3\2\2\2\u0af7\u0afa\3"+
		"\2\2\2\u0af8\u0af6\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0121\3\2\2\2\u0afa"+
		"\u0af8\3\2\2\2\u0afb\u0afc\7]\2\2\u0afc\u0afd\7j\2\2\u0afd\u0afe\5\u04e4"+
		"\u0273\2\u0afe\u0aff\5\u0308\u0185\2\u0aff\u0b00\7\u01ae\2\2\u0b00\u0b01"+
		"\5\u041e\u0210\2\u0b01\u0b02\5\u0112\u008a\2\u0b02\u0b03\5\u0110\u0089"+
		"\2\u0b03\u0b16\3\2\2\2\u0b04\u0b05\7W\2\2\u0b05\u0b06\7j\2\2\u0b06\u0b07"+
		"\5\u041c\u020f\2\u0b07\u0b08\5\u0110\u0089\2\u0b08\u0b16\3\2\2\2\u0b09"+
		"\u0b0a\7\u00bd\2\2\u0b0a\u0b0b\7j\2\2\u0b0b\u0b0c\7\u00ea\2\2\u0b0c\u0b0d"+
		"\7\u00cb\2\2\u0b0d\u0b0e\5\u04e4\u0273\2\u0b0e\u0b0f\5\u0110\u0089\2\u0b0f"+
		"\u0b16\3\2\2\2\u0b10\u0b11\7\u00bd\2\2\u0b11\u0b12\7j\2\2\u0b12\u0b13"+
		"\5\u04e4\u0273\2\u0b13\u0b14\5\u0110\u0089\2\u0b14\u0b16\3\2\2\2\u0b15"+
		"\u0afb\3\2\2\2\u0b15\u0b04\3\2\2\2\u0b15\u0b09\3\2\2\2\u0b15\u0b10\3\2"+
		"\2\2\u0b16\u0123\3\2\2\2\u0b17\u0b18\7\u0084\2\2\u0b18\u0b1c\5\u03a8\u01d5"+
		"\2\u0b19\u0b1a\7\u0084\2\2\u0b1a\u0b1c\7[\2\2\u0b1b\u0b17\3\2\2\2\u0b1b"+
		"\u0b19\3\2\2\2\u0b1c\u0125\3\2\2\2\u0b1d\u0b1e\7\u0096\2\2\u0b1e\u0b1f"+
		"\5\u0132\u009a\2\u0b1f\u0b20\5\u04c8\u0265\2\u0b20\u0b21\5\u016c\u00b7"+
		"\2\u0b21\u0b22\5\u0134\u009b\2\u0b22\u0b23\5\u0128\u0095\2\u0b23\u0b24"+
		"\5\u012a\u0096\2\u0b24\u0b25\5\u0136\u009c\2\u0b25\u0b26\5\u00b6\\\2\u0b26"+
		"\u0b27\5\u012c\u0097\2\u0b27\u0b30\3\2\2\2\u0b28\u0b29\7\u0096\2\2\u0b29"+
		"\u0b2a\5\u03b0\u01d9\2\u0b2a\u0b2b\7\u01a5\2\2\u0b2b\u0b2c\5\u012a\u0096"+
		"\2\u0b2c\u0b2d\5\u00b6\\\2\u0b2d\u0b2e\5\u012c\u0097\2\u0b2e\u0b30\3\2"+
		"\2\2\u0b2f\u0b1d\3\2\2\2\u0b2f\u0b28\3\2\2\2\u0b30\u0127\3\2\2\2\u0b31"+
		"\u0b32\t\b\2\2\u0b32\u0129\3\2\2\2\u0b33\u0b37\5\u04de\u0270\2\u0b34\u0b37"+
		"\7\u0192\2\2\u0b35\u0b37\7\u0193\2\2\u0b36\u0b33\3\2\2\2\u0b36\u0b34\3"+
		"\2\2\2\u0b36\u0b35\3\2\2\2\u0b37\u012b\3\2\2\2\u0b38\u0b39\7\5\2\2\u0b39"+
		"\u0b3a\5\u013a\u009e\2\u0b3a\u0b3b\7\6\2\2\u0b3b\u0b3e\3\2\2\2\u0b3c\u0b3e"+
		"\5\u012e\u0098\2\u0b3d\u0b38\3\2\2\2\u0b3d\u0b3c\3\2\2\2\u0b3e\u012d\3"+
		"\2\2\2\u0b3f\u0b44\b\u0098\1\2\u0b40\u0b41\f\4\2\2\u0b41\u0b43\5\u0130"+
		"\u0099\2\u0b42\u0b40\3\2\2\2\u0b43\u0b46\3\2\2\2\u0b44\u0b42\3\2\2\2\u0b44"+
		"\u0b45\3\2\2\2\u0b45\u012f\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b47\u0b48\7\u00d7"+
		"\2\2\u0b48\u0b49\7\u015b\2\2\u0b49\u0b68\7\r\2\2\u0b4a\u0b4b\7\u00b2\2"+
		"\2\u0b4b\u0b4c\5\u034c\u01a7\2\u0b4c\u0b4d\5\u04de\u0270\2\u0b4d\u0b68"+
		"\3\2\2\2\u0b4e\u0b4f\7\u0132\2\2\u0b4f\u0b50\5\u034c\u01a7\2\u0b50\u0b51"+
		"\5\u04de\u0270\2\u0b51\u0b68\3\2\2\2\u0b52\u0b53\7\u015b\2\2\u0b53\u0b54"+
		"\5\u034c\u01a7\2\u0b54\u0b55\5\u04de\u0270\2\u0b55\u0b68\3\2\2\2\u0b56"+
		"\u0b57\7\u00c5\2\2\u0b57\u0b58\5\u034c\u01a7\2\u0b58\u0b59\5\u04de\u0270"+
		"\2\u0b59\u0b68\3\2\2\2\u0b5a\u0b5b\7\u00d7\2\2\u0b5b\u0b5c\7\u015b\2\2"+
		"\u0b5c\u0b68\5\u016e\u00b8\2\u0b5d\u0b5e\7\u00d7\2\2\u0b5e\u0b5f\7\u012d"+
		"\2\2\u0b5f\u0b60\7\u0132\2\2\u0b60\u0b68\5\u016e\u00b8\2\u0b61\u0b62\7"+
		"\u00c1\2\2\u0b62\u0b68\5\u04de\u0270\2\u0b63\u0b68\7q\2\2\u0b64\u0b68"+
		"\7\u013a\2\2\u0b65\u0b68\7\u009a\2\2\u0b66\u0b68\7\u00e6\2\2\u0b67\u0b47"+
		"\3\2\2\2\u0b67\u0b4a\3\2\2\2\u0b67\u0b4e\3\2\2\2\u0b67\u0b52\3\2\2\2\u0b67"+
		"\u0b56\3\2\2\2\u0b67\u0b5a\3\2\2\2\u0b67\u0b5d\3\2\2\2\u0b67\u0b61\3\2"+
		"\2\2\u0b67\u0b63\3\2\2\2\u0b67\u0b64\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b67"+
		"\u0b66\3\2\2\2\u0b68\u0131\3\2\2\2\u0b69\u0b6c\7q\2\2\u0b6a\u0b6c\3\2"+
		"\2\2\u0b6b\u0b69\3\2\2\2\u0b6b\u0b6a\3\2\2\2\u0b6c\u0133\3\2\2\2\u0b6d"+
		"\u0b6e\7\u01cd\2\2\u0b6e\u0b71\7\u013a\2\2\u0b6f\u0b71\3\2\2\2\u0b70\u0b6d"+
		"\3\2\2\2\u0b70\u0b6f\3\2\2\2\u0b71\u0135\3\2\2\2\u0b72\u0b73\5\u0138\u009d"+
		"\2\u0b73\u0b74\7\u00b3\2\2\u0b74\u0b75\5\u04de\u0270\2\u0b75\u0b78\3\2"+
		"\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b72\3\2\2\2\u0b77\u0b76\3\2\2\2\u0b78"+
		"\u0137\3\2\2\2\u0b79\u0b7c\7\u01bb\2\2\u0b7a\u0b7c\3\2\2\2\u0b7b\u0b79"+
		"\3\2\2\2\u0b7b\u0b7a\3\2\2\2\u0b7c\u0139\3\2\2\2\u0b7d\u0b7e\b\u009e\1"+
		"\2\u0b7e\u0b7f\5\u013c\u009f\2\u0b7f\u0b85\3\2\2\2\u0b80\u0b81\f\4\2\2"+
		"\u0b81\u0b82\7\7\2\2\u0b82\u0b84\5\u013c\u009f\2\u0b83\u0b80\3\2\2\2\u0b84"+
		"\u0b87\3\2\2\2\u0b85\u0b83\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u013b\3\2"+
		"\2\2\u0b87\u0b85\3\2\2\2\u0b88\u0b89\5\u04e8\u0275\2\u0b89\u0b8a\5\u013e"+
		"\u00a0\2\u0b8a\u013d\3\2\2\2\u0b8b\u0b8c\7\5\2\2\u0b8c\u0b8d\5\u0140\u00a1"+
		"\2\u0b8d\u0b8e\7\6\2\2\u0b8e\u0b94\3\2\2\2\u0b8f\u0b94\7\r\2\2\u0b90\u0b94"+
		"\5\u00eex\2\u0b91\u0b94\5\u01a0\u00d1\2\u0b92\u0b94\3\2\2\2\u0b93\u0b8b"+
		"\3\2\2\2\u0b93\u0b8f\3\2\2\2\u0b93\u0b90\3\2\2\2\u0b93\u0b91\3\2\2\2\u0b93"+
		"\u0b92\3\2\2\2\u0b94\u013f\3\2\2\2\u0b95\u0b96\b\u00a1\1\2\u0b96\u0b97"+
		"\5\u0142\u00a2\2\u0b97\u0b9d\3\2\2\2\u0b98\u0b99\f\4\2\2\u0b99\u0b9a\7"+
		"\7\2\2\u0b9a\u0b9c\5\u0142\u00a2\2\u0b9b\u0b98\3\2\2\2\u0b9c\u0b9f\3\2"+
		"\2\2\u0b9d\u0b9b\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0141\3\2\2\2\u0b9f"+
		"\u0b9d\3\2\2\2\u0ba0\u0ba1\5\u00eex\2\u0ba1\u0143\3\2\2\2\u0ba2\u0ba3"+
		"\7\u0098\2\2\u0ba3\u0ba4\5\u0146\u00a4\2\u0ba4\u0ba5\7\u019b\2\2\u0ba5"+
		"\u0ba6\5\u04c8\u0265\2\u0ba6\u0ba7\7\5\2\2\u0ba7\u0ba8\5\u0148\u00a5\2"+
		"\u0ba8\u0ba9\7\6\2\2\u0ba9\u0baa\5\u0182\u00c2\2\u0baa\u0bab\5\u0184\u00c3"+
		"\2\u0bab\u0bac\5\u0186\u00c4\2\u0bac\u0bad\5\u0188\u00c5\2\u0bad\u0bd7"+
		"\3\2\2\2\u0bae\u0baf\7\u0098\2\2\u0baf\u0bb0\5\u0146\u00a4\2\u0bb0\u0bb1"+
		"\7\u019b\2\2\u0bb1\u0bb2\7\u00ea\2\2\u0bb2\u0bb3\7\u012d\2\2\u0bb3\u0bb4"+
		"\7\u00cb\2\2\u0bb4\u0bb5\5\u04c8\u0265\2\u0bb5\u0bb6\7\5\2\2\u0bb6\u0bb7"+
		"\5\u0148\u00a5\2\u0bb7\u0bb8\7\6\2\2\u0bb8\u0bb9\5\u0182\u00c2\2\u0bb9"+
		"\u0bba\5\u0184\u00c3\2\u0bba\u0bbb\5\u0186\u00c4\2\u0bbb\u0bbc\5\u0188"+
		"\u00c5\2\u0bbc\u0bd7\3\2\2\2\u0bbd\u0bbe\7\u0098\2\2\u0bbe\u0bbf\5\u0146"+
		"\u00a4\2\u0bbf\u0bc0\7\u019b\2\2\u0bc0\u0bc1\5\u04c8\u0265\2\u0bc1\u0bc2"+
		"\7\u0137\2\2\u0bc2\u0bc3\5\u025e\u0130\2\u0bc3\u0bc4\5\u014a\u00a6\2\u0bc4"+
		"\u0bc5\5\u0184\u00c3\2\u0bc5\u0bc6\5\u0186\u00c4\2\u0bc6\u0bc7\5\u0188"+
		"\u00c5\2\u0bc7\u0bd7\3\2\2\2\u0bc8\u0bc9\7\u0098\2\2\u0bc9\u0bca\5\u0146"+
		"\u00a4\2\u0bca\u0bcb\7\u019b\2\2\u0bcb\u0bcc\7\u00ea\2\2\u0bcc\u0bcd\7"+
		"\u012d\2\2\u0bcd\u0bce\7\u00cb\2\2\u0bce\u0bcf\5\u04c8\u0265\2\u0bcf\u0bd0"+
		"\7\u0137\2\2\u0bd0\u0bd1\5\u025e\u0130\2\u0bd1\u0bd2\5\u014a\u00a6\2\u0bd2"+
		"\u0bd3\5\u0184\u00c3\2\u0bd3\u0bd4\5\u0186\u00c4\2\u0bd4\u0bd5\5\u0188"+
		"\u00c5\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0ba2\3\2\2\2\u0bd6\u0bae\3\2\2\2\u0bd6"+
		"\u0bbd\3\2\2\2\u0bd6\u0bc8\3\2\2\2\u0bd7\u0145\3\2\2\2\u0bd8\u0be5\7\u01a0"+
		"\2\2\u0bd9\u0be5\7\u019e\2\2\u0bda\u0bdb\7\u0118\2\2\u0bdb\u0be5\7\u01a0"+
		"\2\2\u0bdc\u0bdd\7\u0118\2\2\u0bdd\u0be5\7\u019e\2\2\u0bde\u0bdf\7\u00df"+
		"\2\2\u0bdf\u0be5\7\u01a0\2\2\u0be0\u0be1\7\u00df\2\2\u0be1\u0be5\7\u019e"+
		"\2\2\u0be2\u0be5\7\u01b7\2\2\u0be3\u0be5\3\2\2\2\u0be4\u0bd8\3\2\2\2\u0be4"+
		"\u0bd9\3\2\2\2\u0be4\u0bda\3\2\2\2\u0be4\u0bdc\3\2\2\2\u0be4\u0bde\3\2"+
		"\2\2\u0be4\u0be0\3\2\2\2\u0be4\u0be2\3\2\2\2\u0be4\u0be3\3\2\2\2\u0be5"+
		"\u0147\3\2\2\2\u0be6\u0be9\5\u014c\u00a7\2\u0be7\u0be9\3\2\2\2\u0be8\u0be6"+
		"\3\2\2\2\u0be8\u0be7\3\2\2\2\u0be9\u0149\3\2\2\2\u0bea\u0beb\7\5\2\2\u0beb"+
		"\u0bec\5\u014e\u00a8\2\u0bec\u0bed\7\6\2\2\u0bed\u0bf0\3\2\2\2\u0bee\u0bf0"+
		"\3\2\2\2\u0bef\u0bea\3\2\2\2\u0bef\u0bee\3\2\2\2\u0bf0\u014b\3\2\2\2\u0bf1"+
		"\u0bf2\b\u00a7\1\2\u0bf2\u0bf3\5\u0150\u00a9\2\u0bf3\u0bf9\3\2\2\2\u0bf4"+
		"\u0bf5\f\4\2\2\u0bf5\u0bf6\7\7\2\2\u0bf6\u0bf8\5\u0150\u00a9\2\u0bf7\u0bf4"+
		"\3\2\2\2\u0bf8\u0bfb\3\2\2\2\u0bf9\u0bf7\3\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa"+
		"\u014d\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfc\u0bfd\b\u00a8\1\2\u0bfd\u0bfe"+
		"\5\u0152\u00aa\2\u0bfe\u0c04\3\2\2\2\u0bff\u0c00\f\4\2\2\u0c00\u0c01\7"+
		"\7\2\2\u0c01\u0c03\5\u0152\u00aa\2\u0c02\u0bff\3\2\2\2\u0c03\u0c06\3\2"+
		"\2\2\u0c04\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05\u014f\3\2\2\2\u0c06"+
		"\u0c04\3\2\2\2\u0c07\u0c0b\5\u0154\u00ab\2\u0c08\u0c0b\5\u0160\u00b1\2"+
		"\u0c09\u0c0b\5\u0166\u00b4\2\u0c0a\u0c07\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0a"+
		"\u0c09\3\2\2\2\u0c0b\u0151\3\2\2\2\u0c0c\u0c0f\5\u0156\u00ac\2\u0c0d\u0c0f"+
		"\5\u0166\u00b4\2\u0c0e\u0c0c\3\2\2\2\u0c0e\u0c0d\3\2\2\2\u0c0f\u0153\3"+
		"\2\2\2\u0c10\u0c11\5\u04e4\u0273\2\u0c11\u0c12\5\u041e\u0210\2\u0c12\u0c13"+
		"\5\u01d4\u00eb\2\u0c13\u0c14\5\u0158\u00ad\2\u0c14\u0155\3\2\2\2\u0c15"+
		"\u0c16\5\u04e4\u0273\2\u0c16\u0c17\7\u01cd\2\2\u0c17\u0c18\7\u013f\2\2"+
		"\u0c18\u0c19\5\u0158\u00ad\2\u0c19\u0157\3\2\2\2\u0c1a\u0c1f\b\u00ad\1"+
		"\2\u0c1b\u0c1c\f\4\2\2\u0c1c\u0c1e\5\u015a\u00ae\2\u0c1d\u0c1b\3\2\2\2"+
		"\u0c1e\u0c21\3\2\2\2\u0c1f\u0c1d\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0159"+
		"\3\2\2\2\u0c21\u0c1f\3\2\2\2\u0c22\u0c23\7\u0091\2\2\u0c23\u0c24\5\u04cc"+
		"\u0267\2\u0c24\u0c25\5\u015c\u00af\2\u0c25\u0c2b\3\2\2\2\u0c26\u0c2b\5"+
		"\u015c\u00af\2\u0c27\u0c2b\5\u015e\u00b0\2\u0c28\u0c29\7\u0087\2\2\u0c29"+
		"\u0c2b\5\u025e\u0130\2\u0c2a\u0c22\3\2\2\2\u0c2a\u0c26\3\2\2\2\u0c2a\u0c27"+
		"\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2b\u015b\3\2\2\2\u0c2c\u0c2d\7\u0081\2"+
		"\2\u0c2d\u0c2e\7\5\2\2\u0c2e\u0c2f\5\u044e\u0228\2\u0c2f\u0c30\7\6\2\2"+
		"\u0c30\u0c31\5\u016a\u00b6\2\u0c31\u0c47\3\2\2\2\u0c32\u0c33\7\u0163\2"+
		"\2\u0c33\u0c34\5\u04c8\u0265\2\u0c34\u0c35\5\u016c\u00b7\2\u0c35\u0c36"+
		"\5\u0172\u00ba\2\u0c36\u0c37\5\u017a\u00be\2\u0c37\u0c47\3\2\2\2\u0c38"+
		"\u0c39\7\u01b4\2\2\u0c39\u0c3a\5\u02da\u016e\2\u0c3a\u0c3b\5\u018a\u00c6"+
		"\2\u0c3b\u0c47\3\2\2\2\u0c3c\u0c3d\7\u0156\2\2\u0c3d\u0c3e\7\u0108\2\2"+
		"\u0c3e\u0c3f\5\u02da\u016e\2\u0c3f\u0c40\5\u018a\u00c6\2\u0c40\u0c47\3"+
		"\2\2\2\u0c41\u0c42\7\u00ac\2\2\u0c42\u0c47\5\u0450\u0229\2\u0c43\u0c44"+
		"\7\u012d\2\2\u0c44\u0c47\7\u0132\2\2\u0c45\u0c47\7\u0132\2\2\u0c46\u0c2c"+
		"\3\2\2\2\u0c46\u0c32\3\2\2\2\u0c46\u0c38\3\2\2\2\u0c46\u0c3c\3\2\2\2\u0c46"+
		"\u0c41\3\2\2\2\u0c46\u0c43\3\2\2\2\u0c46\u0c45\3\2\2\2\u0c47\u015d\3\2"+
		"\2\2\u0c48\u0c50\7\u00ae\2\2\u0c49\u0c4a\7\u012d\2\2\u0c4a\u0c50\7\u00ae"+
		"\2\2\u0c4b\u0c4c\7\u00f6\2\2\u0c4c\u0c50\7\u00af\2\2\u0c4d\u0c4e\7\u00f6"+
		"\2\2\u0c4e\u0c50\7\u00ec\2\2\u0c4f\u0c48\3\2\2\2\u0c4f\u0c49\3\2\2\2\u0c4f"+
		"\u0c4b\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50\u015f\3\2\2\2\u0c51\u0c52\7\u0114"+
		"\2\2\u0c52\u0c53\5\u04c8\u0265\2\u0c53\u0c54\5\u0162\u00b2\2\u0c54\u0161"+
		"\3\2\2\2\u0c55\u0c5e\b\u00b2\1\2\u0c56\u0c57\f\5\2\2\u0c57\u0c58\7\u00f0"+
		"\2\2\u0c58\u0c5d\5\u0164\u00b3\2\u0c59\u0c5a\f\4\2\2\u0c5a\u0c5b\7\u00c8"+
		"\2\2\u0c5b\u0c5d\5\u0164\u00b3\2\u0c5c\u0c56\3\2\2\2\u0c5c\u0c59\3\2\2"+
		"\2\u0c5d\u0c60\3\2\2\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0163"+
		"\3\2\2\2\u0c60\u0c5e\3\2\2\2\u0c61\u0c62\t\t\2\2\u0c62\u0165\3\2\2\2\u0c63"+
		"\u0c64\7\u0091\2\2\u0c64\u0c65\5\u04cc\u0267\2\u0c65\u0c66\5\u0168\u00b5"+
		"\2\u0c66\u0c69\3\2\2\2\u0c67\u0c69\5\u0168\u00b5\2\u0c68\u0c63\3\2\2\2"+
		"\u0c68\u0c67\3\2\2\2\u0c69\u0167\3\2\2\2\u0c6a\u0c6b\7\u00d8\2\2\u0c6b"+
		"\u0c6c\7\u0108\2\2\u0c6c\u0c6d\7\5\2\2\u0c6d\u0c6e\5\u016e\u00b8\2\u0c6e"+
		"\u0c6f\7\6\2\2\u0c6f\u0c70\7\u0163\2\2\u0c70\u0c71\5\u04c8\u0265\2\u0c71"+
		"\u0c72\5\u016c\u00b7\2\u0c72\u0c73\5\u0172\u00ba\2\u0c73\u0c74\5\u017a"+
		"\u00be\2\u0c74\u0c75\5\u0218\u010d\2\u0c75\u0ca1\3\2\2\2\u0c76\u0c77\7"+
		"\u01b4\2\2\u0c77\u0c78\7\5\2\2\u0c78\u0c79\5\u016e\u00b8\2\u0c79\u0c7a"+
		"\7\6\2\2\u0c7a\u0c7b\5\u02da\u016e\2\u0c7b\u0c7c\5\u018a\u00c6\2\u0c7c"+
		"\u0c7d\5\u0218\u010d\2\u0c7d\u0ca1\3\2\2\2\u0c7e\u0c7f\7\u0156\2\2\u0c7f"+
		"\u0c80\7\u0108\2\2\u0c80\u0c81\7\5\2\2\u0c81\u0c82\5\u016e\u00b8\2\u0c82"+
		"\u0c83\7\6\2\2\u0c83\u0c84\5\u02da\u016e\2\u0c84\u0c85\5\u018a\u00c6\2"+
		"\u0c85\u0c86\5\u0218\u010d\2\u0c86\u0ca1\3\2\2\2\u0c87\u0c88\7\u0081\2"+
		"\2\u0c88\u0c89\7\5\2\2\u0c89\u0c8a\5\u044e\u0228\2\u0c8a\u0c8b\7\6\2\2"+
		"\u0c8b\u0c8c\5\u0218\u010d\2\u0c8c\u0ca1\3\2\2\2\u0c8d\u0c8e\7\u00c7\2"+
		"\2\u0c8e\u0c8f\5\u02ac\u0157\2\u0c8f\u0c90\7\5\2\2\u0c90\u0c91\5\u0174"+
		"\u00bb\2\u0c91\u0c92\7\6\2\2\u0c92\u0c93\5\u02da\u016e\2\u0c93\u0c94\5"+
		"\u018a\u00c6\2\u0c94\u0c95\5\u0178\u00bd\2\u0c95\u0c96\5\u0218\u010d\2"+
		"\u0c96\u0ca1\3\2\2\2\u0c97\u0c98\7\u01b4\2\2\u0c98\u0c99\5\u018c\u00c7"+
		"\2\u0c99\u0c9a\5\u0218\u010d\2\u0c9a\u0ca1\3\2\2\2\u0c9b\u0c9c\7\u0156"+
		"\2\2\u0c9c\u0c9d\7\u0108\2\2\u0c9d\u0c9e\5\u018c\u00c7\2\u0c9e\u0c9f\5"+
		"\u0218\u010d\2\u0c9f\u0ca1\3\2\2\2\u0ca0\u0c6a\3\2\2\2\u0ca0\u0c76\3\2"+
		"\2\2\u0ca0\u0c7e\3\2\2\2\u0ca0\u0c87\3\2\2\2\u0ca0\u0c8d\3\2\2\2\u0ca0"+
		"\u0c97\3\2\2\2\u0ca0\u0c9b\3\2\2\2\u0ca1\u0169\3\2\2\2\u0ca2\u0ca3\7\u012b"+
		"\2\2\u0ca3\u0ca6\7\u00f4\2\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca2\3\2\2\2\u0ca5"+
		"\u0ca4\3\2\2\2\u0ca6\u016b\3\2\2\2\u0ca7\u0ca8\7\5\2\2\u0ca8\u0ca9\5\u016e"+
		"\u00b8\2\u0ca9\u0caa\7\6\2\2\u0caa\u0cad\3\2\2\2\u0cab\u0cad\3\2\2\2\u0cac"+
		"\u0ca7\3\2\2\2\u0cac\u0cab\3\2\2\2\u0cad\u016d\3\2\2\2\u0cae\u0caf\b\u00b8"+
		"\1\2\u0caf\u0cb0\5\u0170\u00b9\2\u0cb0\u0cb6\3\2\2\2\u0cb1\u0cb2\f\4\2"+
		"\2\u0cb2\u0cb3\7\7\2\2\u0cb3\u0cb5\5\u0170\u00b9\2\u0cb4\u0cb1\3\2\2\2"+
		"\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u016f"+
		"\3\2\2\2\u0cb8\u0cb6\3\2\2\2\u0cb9\u0cba\5\u04e4\u0273\2\u0cba\u0171\3"+
		"\2\2\2\u0cbb\u0cbc\7\u011e\2\2\u0cbc\u0cc3\7\u00dc\2\2\u0cbd\u0cbe\7\u011e"+
		"\2\2\u0cbe\u0cc3\7\u014a\2\2\u0cbf\u0cc0\7\u011e\2\2\u0cc0\u0cc3\7\u0189"+
		"\2\2\u0cc1\u0cc3\3\2\2\2\u0cc2\u0cbb\3\2\2\2\u0cc2\u0cbd\3\2\2\2\u0cc2"+
		"\u0cbf\3\2\2\2\u0cc2\u0cc1\3\2\2\2\u0cc3\u0173\3\2\2\2\u0cc4\u0cc5\b\u00bb"+
		"\1\2\u0cc5\u0cc6\5\u0176\u00bc\2\u0cc6\u0ccc\3\2\2\2\u0cc7\u0cc8\f\4\2"+
		"\2\u0cc8\u0cc9\7\7\2\2\u0cc9\u0ccb\5\u0176\u00bc\2\u0cca\u0cc7\3\2\2\2"+
		"\u0ccb\u0cce\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0175"+
		"\3\2\2\2\u0cce\u0ccc\3\2\2\2\u0ccf\u0cd0\5\u02b0\u0159\2\u0cd0\u0cd1\7"+
		"\u01cd\2\2\u0cd1\u0cd2\7\u013d\2\2\u0cd2\u0cd3\7\5\2\2\u0cd3\u0cd4\5\u02ee"+
		"\u0178\2\u0cd4\u0cd5\7\6\2\2\u0cd5\u0cdb\3\2\2\2\u0cd6\u0cd7\5\u02b0\u0159"+
		"\2\u0cd7\u0cd8\7\u01cd\2\2\u0cd8\u0cd9\5\u02ee\u0178\2\u0cd9\u0cdb\3\2"+
		"\2\2\u0cda\u0ccf\3\2\2\2\u0cda\u0cd6\3\2\2\2\u0cdb\u0177\3\2\2\2\u0cdc"+
		"\u0cdd\7\u01ca\2\2\u0cdd\u0cde\7\5\2\2\u0cde\u0cdf\5\u044e\u0228\2\u0cdf"+
		"\u0ce0\7\6\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0ce3\3\2\2\2\u0ce2\u0cdc\3\2"+
		"\2\2\u0ce2\u0ce1\3\2\2\2\u0ce3\u0179\3\2\2\2\u0ce4\u0ce5\5\u017c\u00bf"+
		"\2\u0ce5\u0ce6\5\u017e\u00c0\2\u0ce6\u0cee\3\2\2\2\u0ce7\u0ce8\5\u017e"+
		"\u00c0\2\u0ce8\u0ce9\5\u017c\u00bf\2\u0ce9\u0cee\3\2\2\2\u0cea\u0cee\5"+
		"\u017c\u00bf\2\u0ceb\u0cee\5\u017e\u00c0\2\u0cec\u0cee\3\2\2\2\u0ced\u0ce4"+
		"\3\2\2\2\u0ced\u0ce7\3\2\2\2\u0ced\u0cea\3\2\2\2\u0ced\u0ceb\3\2\2\2\u0ced"+
		"\u0cec\3\2\2\2\u0cee\u017b\3\2\2\2\u0cef\u0cf0\7\u013b\2\2\u0cf0\u0cf1"+
		"\7\u01b9\2\2\u0cf1\u0cf2\5\u0180\u00c1\2\u0cf2\u017d\3\2\2\2\u0cf3\u0cf4"+
		"\7\u013b\2\2\u0cf4\u0cf5\7\u00b1\2\2\u0cf5\u0cf6\5\u0180\u00c1\2\u0cf6"+
		"\u017f\3\2\2\2\u0cf7\u0cf8\7\u012b\2\2\u0cf8\u0d00\7V\2\2\u0cf9\u0d00"+
		"\7\u016d\2\2\u0cfa\u0d00\7x\2\2\u0cfb\u0cfc\7\u0184\2\2\u0cfc\u0d00\7"+
		"\u0132\2\2\u0cfd\u0cfe\7\u0184\2\2\u0cfe\u0d00\7\u00ac\2\2\u0cff\u0cf7"+
		"\3\2\2\2\u0cff\u0cf9\3\2\2\2\u0cff\u0cfa\3\2\2\2\u0cff\u0cfb\3\2\2\2\u0cff"+
		"\u0cfd\3\2\2\2\u0d00\u0181\3\2\2\2\u0d01\u0d02\7\u00f5\2\2\u0d02\u0d03"+
		"\7\5\2\2\u0d03\u0d04\5\u04c6\u0264\2\u0d04\u0d05\7\6\2\2\u0d05\u0d08\3"+
		"\2\2\2\u0d06\u0d08\3\2\2\2\u0d07\u0d01\3\2\2\2\u0d07\u0d06\3\2\2\2\u0d08"+
		"\u0183\3\2\2\2\u0d09\u0d0a\7\u01cd\2\2\u0d0a\u0d11\5\u0116\u008c\2\u0d0b"+
		"\u0d0c\7\u01cd\2\2\u0d0c\u0d11\7\u013a\2\2\u0d0d\u0d0e\7\u01ce\2\2\u0d0e"+
		"\u0d11\7\u013a\2\2\u0d0f\u0d11\3\2\2\2\u0d10\u0d09\3\2\2\2\u0d10\u0d0b"+
		"\3\2\2\2\u0d10\u0d0d\3\2\2\2\u0d10\u0d0f\3\2\2\2\u0d11\u0185\3\2\2\2\u0d12"+
		"\u0d13\7\u013b\2\2\u0d13\u0d14\7\u008c\2\2\u0d14\u0d1f\7\u00bd\2\2\u0d15"+
		"\u0d16\7\u013b\2\2\u0d16\u0d17\7\u008c\2\2\u0d17\u0d18\7\u00b1\2\2\u0d18"+
		"\u0d1f\7\u0175\2\2\u0d19\u0d1a\7\u013b\2\2\u0d1a\u0d1b\7\u008c\2\2\u0d1b"+
		"\u0d1c\7\u0155\2\2\u0d1c\u0d1f\7\u0175\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d12"+
		"\3\2\2\2\u0d1e\u0d15\3\2\2\2\u0d1e\u0d19\3\2\2\2\u0d1e\u0d1d\3\2\2\2\u0d1f"+
		"\u0187\3\2\2\2\u0d20\u0d21\7\u019d\2\2\u0d21\u0d24\5\u04cc\u0267\2\u0d22"+
		"\u0d24\3\2\2\2\u0d23\u0d20\3\2\2\2\u0d23\u0d22\3\2\2\2\u0d24\u0189\3\2"+
		"\2\2\u0d25\u0d26\7\u01bb\2\2\u0d26\u0d27\7\u00f2\2\2\u0d27\u0d28\7\u019d"+
		"\2\2\u0d28\u0d2b\5\u04cc\u0267\2\u0d29\u0d2b\3\2\2\2\u0d2a\u0d25\3\2\2"+
		"\2\u0d2a\u0d29\3\2\2\2\u0d2b\u018b\3\2\2\2\u0d2c\u0d2d\7\u01bb\2\2\u0d2d"+
		"\u0d2e\7\u00f2\2\2\u0d2e\u0d2f\5\u04d4\u026b\2\u0d2f\u018d\3\2\2\2\u0d30"+
		"\u0d31\7\u0098\2\2\u0d31\u0d32\5\u0146\u00a4\2\u0d32\u0d33\7\u019b\2\2"+
		"\u0d33\u0d34\5\u0190\u00c9\2\u0d34\u0d35\7d\2\2\u0d35\u0d36\5\u03ae\u01d8"+
		"\2\u0d36\u0d37\5\u0192\u00ca\2\u0d37\u018f\3\2\2\2\u0d38\u0d39\5\u04c8"+
		"\u0265\2\u0d39\u0d3a\5\u016c\u00b7\2\u0d3a\u0d3b\5\u0184\u00c3\2\u0d3b"+
		"\u0d3c\5\u0186\u00c4\2\u0d3c\u0d3d\5\u0188\u00c5\2\u0d3d\u0191\3\2\2\2"+
		"\u0d3e\u0d3f\7\u01cd\2\2\u0d3f\u0d45\7\u00a5\2\2\u0d40\u0d41\7\u01cd\2"+
		"\2\u0d41\u0d42\7\u012b\2\2\u0d42\u0d45\7\u00a5\2\2\u0d43\u0d45\3\2\2\2"+
		"\u0d44\u0d3e\3\2\2\2\u0d44\u0d40\3\2\2\2\u0d44\u0d43\3\2\2\2\u0d45\u0193"+
		"\3\2\2\2\u0d46\u0d47\7\u0098\2\2\u0d47\u0d48\5\u0146\u00a4\2\u0d48\u0d49"+
		"\7\u017e\2\2\u0d49\u0d4a\5\u04c8\u0265\2\u0d4a\u0d4b\5\u0198\u00cd\2\u0d4b"+
		"\u0195\3\2\2\2\u0d4c\u0d4d\7]\2\2\u0d4d\u0d4e\7\u017e\2\2\u0d4e\u0d4f"+
		"\5\u04c8\u0265\2\u0d4f\u0d50\5\u019a\u00ce\2\u0d50\u0d59\3\2\2\2\u0d51"+
		"\u0d52\7]\2\2\u0d52\u0d53\7\u017e\2\2\u0d53\u0d54\7\u00ea\2\2\u0d54\u0d55"+
		"\7\u00cb\2\2\u0d55\u0d56\5\u04c8\u0265\2\u0d56\u0d57\5\u019a\u00ce\2\u0d57"+
		"\u0d59\3\2\2\2\u0d58\u0d4c\3\2\2\2\u0d58\u0d51\3\2\2\2\u0d59\u0197\3\2"+
		"\2\2\u0d5a\u0d5d\5\u019a\u00ce\2\u0d5b\u0d5d\3\2\2\2\u0d5c\u0d5a\3\2\2"+
		"\2\u0d5c\u0d5b\3\2\2\2\u0d5d\u0199\3\2\2\2\u0d5e\u0d5f\b\u00ce\1\2\u0d5f"+
		"\u0d60\5\u019c\u00cf\2\u0d60\u0d65\3\2\2\2\u0d61\u0d62\f\4\2\2\u0d62\u0d64"+
		"\5\u019c\u00cf\2\u0d63\u0d61\3\2\2\2\u0d64\u0d67\3\2\2\2\u0d65\u0d63\3"+
		"\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u019b\3\2\2\2\u0d67\u0d65\3\2\2\2\u0d68"+
		"\u0d69\7\u00f1\2\2\u0d69\u0d6a\5\u019e\u00d0\2\u0d6a\u0d6b\5\u01a0\u00d1"+
		"\2\u0d6b\u0d86\3\2\2\2\u0d6c\u0d6d\7\u018f\2\2\u0d6d\u0d6e\5\u00b6\\\2"+
		"\u0d6e\u0d6f\5\u01a0\u00d1\2\u0d6f\u0d86\3\2\2\2\u0d70\u0d71\7\u016c\2"+
		"\2\u0d71\u0d72\5\u00b6\\\2\u0d72\u0d73\5\u01a0\u00d1\2\u0d73\u0d86\3\2"+
		"\2\2\u0d74\u0d75\7v\2\2\u0d75\u0d86\5\u01a0\u00d1\2\u0d76\u0d77\7\u011f"+
		"\2\2\u0d77\u0d86\5\u01a0\u00d1\2\u0d78\u0d79\7\u0121\2\2\u0d79\u0d86\5"+
		"\u01a0\u00d1\2\u0d7a\u0d7b\7\u0147\2\2\u0d7b\u0d7c\7u\2\2\u0d7c\u0d86"+
		"\5\u025e\u0130\2\u0d7d\u0d86\7\u00a4\2\2\u0d7e\u0d7f\7\u012b\2\2\u0d7f"+
		"\u0d86\7\u00a4\2\2\u0d80\u0d81\7\u012b\2\2\u0d81\u0d86\7\u011f\2\2\u0d82"+
		"\u0d83\7\u012b\2\2\u0d83\u0d86\7\u0121\2\2\u0d84\u0d86\7\u016c\2\2\u0d85"+
		"\u0d68\3\2\2\2\u0d85\u0d6c\3\2\2\2\u0d85\u0d70\3\2\2\2\u0d85\u0d74\3\2"+
		"\2\2\u0d85\u0d76\3\2\2\2\u0d85\u0d78\3\2\2\2\u0d85\u0d7a\3\2\2\2\u0d85"+
		"\u0d7d\3\2\2\2\u0d85\u0d7e\3\2\2\2\u0d85\u0d80\3\2\2\2\u0d85\u0d82\3\2"+
		"\2\2\u0d85\u0d84\3\2\2\2\u0d86\u019d\3\2\2\2\u0d87\u0d8a\7u\2\2\u0d88"+
		"\u0d8a\3\2\2\2\u0d89\u0d87\3\2\2\2\u0d89\u0d88\3\2\2\2\u0d8a\u019f\3\2"+
		"\2\2\u0d8b\u0d8c\7\16\2\2\u0d8c\u0d90\7\u01e9\2\2\u0d8d\u0d90\5\u04e2"+
		"\u0272\2\u0d8e\u0d90\7\u01e9\2\2\u0d8f\u0d8b\3\2\2\2\u0d8f\u0d8d\3\2\2"+
		"\2\u0d8f\u0d8e\3\2\2\2\u0d90\u01a1\3\2\2\2\u0d91\u0d92\b\u00d2\1\2\u0d92"+
		"\u0d93\5\u01a0\u00d1\2\u0d93\u0d99\3\2\2\2\u0d94\u0d95\f\4\2\2\u0d95\u0d96"+
		"\7\7\2\2\u0d96\u0d98\5\u01a0\u00d1\2\u0d97\u0d94\3\2\2\2\u0d98\u0d9b\3"+
		"\2\2\2\u0d99\u0d97\3\2\2\2\u0d99\u0d9a\3\2\2\2\u0d9a\u01a3\3\2\2\2\u0d9b"+
		"\u0d99\3\2\2\2\u0d9c\u0d9d\7\u0098\2\2\u0d9d\u0d9e\5\u02bc\u015f\2\u0d9e"+
		"\u0d9f\5\u01a6\u00d4\2\u0d9f\u0da0\5\u01b2\u00da\2\u0da0\u0da1\7\u010a"+
		"\2\2\u0da1\u0da2\5\u00f4{\2\u0da2\u0da3\7\u00e4\2\2\u0da3\u0da4\5\u01a8"+
		"\u00d5\2\u0da4\u0da5\5\u01aa\u00d6\2\u0da5\u0da6\5\u01ae\u00d8\2\u0da6"+
		"\u0daf\3\2\2\2\u0da7\u0da8\7\u0098\2\2\u0da8\u0da9\5\u02bc\u015f\2\u0da9"+
		"\u0daa\5\u01a6\u00d4\2\u0daa\u0dab\5\u01b2\u00da\2\u0dab\u0dac\7\u010a"+
		"\2\2\u0dac\u0dad\5\u00f4{\2\u0dad\u0daf\3\2\2\2\u0dae\u0d9c\3\2\2\2\u0dae"+
		"\u0da7\3\2\2\2\u0daf\u01a5\3\2\2\2\u0db0\u0db3\7\u01ad\2\2\u0db1\u0db3"+
		"\3\2\2\2\u0db2\u0db0\3\2\2\2\u0db2\u0db1\3\2\2\2\u0db3\u01a7\3\2\2\2\u0db4"+
		"\u0db5\5\u04cc\u0267\2\u0db5\u0db6\5\u0260\u0131\2\u0db6\u0db9\3\2\2\2"+
		"\u0db7\u0db9\5\u04cc\u0267\2\u0db8\u0db4\3\2\2\2\u0db8\u0db7\3\2\2\2\u0db9"+
		"\u01a9\3\2\2\2\u0dba\u0dbb\7\u00f7\2\2\u0dbb\u0dbe\5\u01a8\u00d5\2\u0dbc"+
		"\u0dbe\3\2\2\2\u0dbd\u0dba\3\2\2\2\u0dbd\u0dbc\3\2\2\2\u0dbe\u01ab\3\2"+
		"\2\2\u0dbf\u0dc0\7\u01bf\2\2\u0dc0\u0dc4\5\u01a8\u00d5\2\u0dc1\u0dc2\7"+
		"\u012b\2\2\u0dc2\u0dc4\7\u01bf\2\2\u0dc3\u0dbf\3\2\2\2\u0dc3\u0dc1\3\2"+
		"\2\2\u0dc4\u01ad\3\2\2\2\u0dc5\u0dc8\5\u01ac\u00d7\2\u0dc6\u0dc8\3\2\2"+
		"\2\u0dc7\u0dc5\3\2\2\2\u0dc7\u0dc6\3\2\2\2\u0dc8\u01af\3\2\2\2\u0dc9\u0dca"+
		"\7\u00bd\2\2\u0dca\u0dcb\5\u01b2\u00da\2\u0dcb\u0dcc\7\u010a\2\2\u0dcc"+
		"\u0dcd\5\u00f4{\2\u0dcd\u0dce\5\u0110\u0089\2\u0dce\u0dd8\3\2\2\2\u0dcf"+
		"\u0dd0\7\u00bd\2\2\u0dd0\u0dd1\5\u01b2\u00da\2\u0dd1\u0dd2\7\u010a\2\2"+
		"\u0dd2\u0dd3\7\u00ea\2\2\u0dd3\u0dd4\7\u00cb\2\2\u0dd4\u0dd5\5\u00f4{"+
		"\2\u0dd5\u0dd6\5\u0110\u0089\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dc9\3\2\2\2"+
		"\u0dd7\u0dcf\3\2\2\2\u0dd8\u01b1\3\2\2\2\u0dd9\u0ddc\7\u0159\2\2\u0dda"+
		"\u0ddc\3\2\2\2\u0ddb\u0dd9\3\2\2\2\u0ddb\u0dda\3\2\2\2\u0ddc\u01b3\3\2"+
		"\2\2\u0ddd\u0dde\7\u0098\2\2\u0dde\u0ddf\7\u019d\2\2\u0ddf\u0de0\5\u04cc"+
		"\u0267\2\u0de0\u0de1\5\u01b6\u00dc\2\u0de1\u0de2\7\u011b\2\2\u0de2\u0de3"+
		"\5\u04de\u0270\2\u0de3\u01b5\3\2\2\2\u0de4\u0de5\7\u0148\2\2\u0de5\u0de8"+
		"\5\u04cc\u0267\2\u0de6\u0de8\3\2\2\2\u0de7\u0de4\3\2\2\2\u0de7\u0de6\3"+
		"\2\2\2\u0de8\u01b7\3\2\2\2\u0de9\u0dea\7\u00bd\2\2\u0dea\u0deb\7\u019d"+
		"\2\2\u0deb\u0df2\5\u04cc\u0267\2\u0dec\u0ded\7\u00bd\2\2\u0ded\u0dee\7"+
		"\u019d\2\2\u0dee\u0def\7\u00ea\2\2\u0def\u0df0\7\u00cb\2\2\u0df0\u0df2"+
		"\5\u04cc\u0267\2\u0df1\u0de9\3\2\2\2\u0df1\u0dec\3\2\2\2\u0df2\u01b9\3"+
		"\2\2\2\u0df3\u0df4\7\u0098\2\2\u0df4\u0df5\7\u00cd\2\2\u0df5\u0df6\5\u04cc"+
		"\u0267\2\u0df6\u0df7\5\u00b6\\\2\u0df7\u0df8\5\u01bc\u00df\2\u0df8\u0e03"+
		"\3\2\2\2\u0df9\u0dfa\7\u0098\2\2\u0dfa\u0dfb\7\u00cd\2\2\u0dfb\u0dfc\7"+
		"\u00ea\2\2\u0dfc\u0dfd\7\u012d\2\2\u0dfd\u0dfe\7\u00cb\2\2\u0dfe\u0dff"+
		"\5\u04cc\u0267\2\u0dff\u0e00\5\u00b6\\\2\u0e00\u0e01\5\u01bc\u00df\2\u0e01"+
		"\u0e03\3\2\2\2\u0e02\u0df3\3\2\2\2\u0e02\u0df9\3\2\2\2\u0e03\u01bb\3\2"+
		"\2\2\u0e04\u0e09\b\u00df\1\2\u0e05\u0e06\f\4\2\2\u0e06\u0e08\5\u01be\u00e0"+
		"\2\u0e07\u0e05\3\2\2\2\u0e08\u0e0b\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e09\u0e0a"+
		"\3\2\2\2\u0e0a\u01bd\3\2\2\2\u0e0b\u0e09\3\2\2\2\u0e0c\u0e0d\7\u0178\2"+
		"\2\u0e0d\u0e13\5\u04cc\u0267\2\u0e0e\u0e0f\7\u01c6\2\2\u0e0f\u0e13\5\u00f4"+
		"{\2\u0e10\u0e11\7\u00db\2\2\u0e11\u0e13\5\u00f4{\2\u0e12\u0e0c\3\2\2\2"+
		"\u0e12\u0e0e\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e13\u01bf\3\2\2\2\u0e14\u0e15"+
		"\7]\2\2\u0e15\u0e16\7\u00cd\2\2\u0e16\u0e17\5\u04cc\u0267\2\u0e17\u0e18"+
		"\7\u01b9\2\2\u0e18\u0e19\5\u01c2\u00e2\2\u0e19\u01c1\3\2\2\2\u0e1a\u0e1f"+
		"\b\u00e2\1\2\u0e1b\u0e1c\f\4\2\2\u0e1c\u0e1e\5\u01c4\u00e3\2\u0e1d\u0e1b"+
		"\3\2\2\2\u0e1e\u0e21\3\2\2\2\u0e1f\u0e1d\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20"+
		"\u01c3\3\2\2\2\u0e21\u0e1f\3\2\2\2\u0e22\u0e23\7\u01a5\2\2\u0e23\u0e24"+
		"\5\u00f4{\2\u0e24\u01c5\3\2\2\2\u0e25\u0e26\7]\2\2\u0e26\u0e27\7\u00cd"+
		"\2\2\u0e27\u0e28\5\u04cc\u0267\2\u0e28\u0e29\5\u00d4k\2\u0e29\u0e2a\7"+
		"{\2\2\u0e2a\u0e2b\7\5\2\2\u0e2b\u0e2c\5\u041e\u0210\2\u0e2c\u0e2d\7d\2"+
		"\2\u0e2d\u0e2e\5\u041e\u0210\2\u0e2e\u0e2f\7\6\2\2\u0e2f\u0ed8\3\2\2\2"+
		"\u0e30\u0e31\7]\2\2\u0e31\u0e32\7\u00cd\2\2\u0e32\u0e33\5\u04cc\u0267"+
		"\2\u0e33\u0e34\5\u00d4k\2\u0e34\u0e35\7Z\2\2\u0e35\u0e36\5\u04d8\u026d"+
		"\2\u0e36\u0e37\5\u022c\u0117\2\u0e37\u0ed8\3\2\2\2\u0e38\u0e39\7]\2\2"+
		"\u0e39\u0e3a\7\u00cd\2\2\u0e3a\u0e3b\5\u04cc\u0267\2\u0e3b\u0e3c\5\u00d4"+
		"k\2\u0e3c\u0e3d\5\u01b2\u00da\2\u0e3d\u0e3e\7\u010a\2\2\u0e3e\u0e3f\5"+
		"\u04cc\u0267\2\u0e3f\u0ed8\3\2\2\2\u0e40\u0e41\7]\2\2\u0e41\u0e42\7\u00cd"+
		"\2\2\u0e42\u0e43\5\u04cc\u0267\2\u0e43\u0e44\5\u00d4k\2\u0e44\u0e45\7"+
		"\u013d\2\2\u0e45\u0e46\5\u02ee\u0178\2\u0e46\u0e47\5\u02ec\u0177\2\u0e47"+
		"\u0ed8\3\2\2\2\u0e48\u0e49\7]\2\2\u0e49\u0e4a\7\u00cd\2\2\u0e4a\u0e4b"+
		"\5\u04cc\u0267\2\u0e4b\u0e4c\5\u00d4k\2\u0e4c\u0e4d\7\u013d\2\2\u0e4d"+
		"\u0e4e\7\u0083\2\2\u0e4e\u0e4f\5\u025e\u0130\2\u0e4f\u0e50\7\u01bb\2\2"+
		"\u0e50\u0e51\5\u04d0\u0269\2\u0e51\u0ed8\3\2\2\2\u0e52\u0e53\7]\2\2\u0e53"+
		"\u0e54\7\u00cd\2\2\u0e54\u0e55\5\u04cc\u0267\2\u0e55\u0e56\5\u00d4k\2"+
		"\u0e56\u0e57\7\u013d\2\2\u0e57\u0e58\7\u00d1\2\2\u0e58\u0e59\5\u025e\u0130"+
		"\2\u0e59\u0e5a\7\u01bb\2\2\u0e5a\u0e5b\5\u04d0\u0269\2\u0e5b\u0ed8\3\2"+
		"\2\2\u0e5c\u0e5d\7]\2\2\u0e5d\u0e5e\7\u00cd\2\2\u0e5e\u0e5f\5\u04cc\u0267"+
		"\2\u0e5f\u0e60\5\u00d4k\2\u0e60\u0e61\7\u0088\2\2\u0e61\u0e62\5\u025e"+
		"\u0130\2\u0e62\u0ed8\3\2\2\2\u0e63\u0e64\7]\2\2\u0e64\u0e65\7\u00cd\2"+
		"\2\u0e65\u0e66\5\u04cc\u0267\2\u0e66\u0e67\5\u00d4k\2\u0e67\u0e68\7\u0095"+
		"\2\2\u0e68\u0e69\5\u025e\u0130\2\u0e69\u0ed8\3\2\2\2\u0e6a\u0e6b\7]\2"+
		"\2\u0e6b\u0e6c\7\u00cd\2\2\u0e6c\u0e6d\5\u04cc\u0267\2\u0e6d\u0e6e\5\u00d4"+
		"k\2\u0e6e\u0e6f\7\u00bb\2\2\u0e6f\u0e70\5\u025e\u0130\2\u0e70\u0ed8\3"+
		"\2\2\2\u0e71\u0e72\7]\2\2\u0e72\u0e73\7\u00cd\2\2\u0e73\u0e74\5\u04cc"+
		"\u0267\2\u0e74\u0e75\5\u00d4k\2\u0e75\u0e76\7\u00dd\2\2\u0e76\u0e77\5"+
		"\u0290\u0149\2\u0e77\u0ed8\3\2\2\2\u0e78\u0e79\7]\2\2\u0e79\u0e7a\7\u00cd"+
		"\2\2\u0e7a\u0e7b\5\u04cc\u0267\2\u0e7b\u0e7c\5\u00d4k\2\u0e7c\u0e7d\7"+
		"\u0178\2\2\u0e7d\u0e7e\5\u04cc\u0267\2\u0e7e\u0ed8\3\2\2\2\u0e7f\u0e80"+
		"\7]\2\2\u0e80\u0e81\7\u00cd\2\2\u0e81\u0e82\5\u04cc\u0267\2\u0e82\u0e83"+
		"\5\u00d4k\2\u0e83\u0e84\7\u019b\2\2\u0e84\u0e85\5\u025e\u0130\2\u0e85"+
		"\u0ed8\3\2\2\2\u0e86\u0e87\7]\2\2\u0e87\u0e88\7\u00cd\2\2\u0e88\u0e89"+
		"\5\u04cc\u0267\2\u0e89\u0e8a\5\u00d4k\2\u0e8a\u0e8b\7\u01a1\2\2\u0e8b"+
		"\u0e8c\7\u017a\2\2\u0e8c\u0e8d\7\u0149\2\2\u0e8d\u0e8e\5\u025e\u0130\2"+
		"\u0e8e\u0ed8\3\2\2\2\u0e8f\u0e90\7]\2\2\u0e90\u0e91\7\u00cd\2\2\u0e91"+
		"\u0e92\5\u04cc\u0267\2\u0e92\u0e93\5\u00d4k\2\u0e93\u0e94\7\u01a1\2\2"+
		"\u0e94\u0e95\7\u017a\2\2\u0e95\u0e96\7\u00b5\2\2\u0e96\u0e97\5\u025e\u0130"+
		"\2\u0e97\u0ed8\3\2\2\2\u0e98\u0e99\7]\2\2\u0e99\u0e9a\7\u00cd\2\2\u0e9a"+
		"\u0e9b\5\u04cc\u0267\2\u0e9b\u0e9c\5\u00d4k\2\u0e9c\u0e9d\7\u01a1\2\2"+
		"\u0e9d\u0e9e\7\u017a\2\2\u0e9e\u0e9f\7\u019f\2\2\u0e9f\u0ea0\5\u025e\u0130"+
		"\2\u0ea0\u0ed8\3\2\2\2\u0ea1\u0ea2\7]\2\2\u0ea2\u0ea3\7\u00cd\2\2\u0ea3"+
		"\u0ea4\5\u04cc\u0267\2\u0ea4\u0ea5\5\u00d4k\2\u0ea5\u0ea6\7\u01a1\2\2"+
		"\u0ea6\u0ea7\7\u017a\2\2\u0ea7\u0ea8\7\u008f\2\2\u0ea8\u0ea9\5\u025e\u0130"+
		"\2\u0ea9\u0ed8\3\2\2\2\u0eaa\u0eab\7]\2\2\u0eab\u0eac\7\u00cd\2\2\u0eac"+
		"\u0ead\5\u04cc\u0267\2\u0ead\u0eae\5\u00d4k\2\u0eae\u0eaf\7\u017e\2\2"+
		"\u0eaf\u0eb0\5\u025e\u0130\2\u0eb0\u0ed8\3\2\2\2\u0eb1\u0eb2\7]\2\2\u0eb2"+
		"\u0eb3\7\u00cd\2\2\u0eb3\u0eb4\5\u04cc\u0267\2\u0eb4\u0eb5\5\u00d4k\2"+
		"\u0eb5\u0eb6\7\u01c7\2\2\u0eb6\u0eb7\5\u025e\u0130\2\u0eb7\u0ed8\3\2\2"+
		"\2\u0eb8\u0eb9\7]\2\2\u0eb9\u0eba\7\u00cd\2\2\u0eba\u0ebb\5\u04cc\u0267"+
		"\2\u0ebb\u0ebc\5\u00d4k\2\u0ebc\u0ebd\7\u00d8\2\2\u0ebd\u0ebe\7\u019b"+
		"\2\2\u0ebe\u0ebf\5\u025e\u0130\2\u0ebf\u0ed8\3\2\2\2\u0ec0\u0ec1\7]\2"+
		"\2\u0ec1\u0ec2\7\u00cd\2\2\u0ec2\u0ec3\5\u04cc\u0267\2\u0ec3\u0ec4\5\u00d4"+
		"k\2\u0ec4\u0ec5\7\u00d8\2\2\u0ec5\u0ec6\7\u00a5\2\2\u0ec6\u0ec7\7\u01d0"+
		"\2\2\u0ec7\u0ec8\5\u04cc\u0267\2\u0ec8\u0ed8\3\2\2\2\u0ec9\u0eca\7]\2"+
		"\2\u0eca\u0ecb\7\u00cd\2\2\u0ecb\u0ecc\5\u04cc\u0267\2\u0ecc\u0ecd\5\u00d4"+
		"k\2\u0ecd\u0ece\7\u0181\2\2\u0ece\u0ecf\5\u04cc\u0267\2\u0ecf\u0ed8\3"+
		"\2\2\2\u0ed0\u0ed1\7]\2\2\u0ed1\u0ed2\7\u00cd\2\2\u0ed2\u0ed3\5\u04cc"+
		"\u0267\2\u0ed3\u0ed4\5\u00d4k\2\u0ed4\u0ed5\7\u01ae\2\2\u0ed5\u0ed6\5"+
		"\u025e\u0130\2\u0ed6\u0ed8\3\2\2\2\u0ed7\u0e25\3\2\2\2\u0ed7\u0e30\3\2"+
		"\2\2\u0ed7\u0e38\3\2\2\2\u0ed7\u0e40\3\2\2\2\u0ed7\u0e48\3\2\2\2\u0ed7"+
		"\u0e52\3\2\2\2\u0ed7\u0e5c\3\2\2\2\u0ed7\u0e63\3\2\2\2\u0ed7\u0e6a\3\2"+
		"\2\2\u0ed7\u0e71\3\2\2\2\u0ed7\u0e78\3\2\2\2\u0ed7\u0e7f\3\2\2\2\u0ed7"+
		"\u0e86\3\2\2\2\u0ed7\u0e8f\3\2\2\2\u0ed7\u0e98\3\2\2\2\u0ed7\u0ea1\3\2"+
		"\2\2\u0ed7\u0eaa\3\2\2\2\u0ed7\u0eb1\3\2\2\2\u0ed7\u0eb8\3\2\2\2\u0ed7"+
		"\u0ec0\3\2\2\2\u0ed7\u0ec9\3\2\2\2\u0ed7\u0ed0\3\2\2\2\u0ed8\u01c7\3\2"+
		"\2\2\u0ed9\u0eda\7\u0098\2\2\u0eda\u0edb\7\u00d8\2\2\u0edb\u0edc\7\u00a5"+
		"\2\2\u0edc\u0edd\7\u01d0\2\2\u0edd\u0ede\5\u04cc\u0267\2\u0ede\u0edf\5"+
		"\u01ce\u00e8\2\u0edf\u0ee0\5\u01d4\u00eb\2\u0ee0\u01c9\3\2\2\2\u0ee1\u0ee2"+
		"\7\u00e4\2\2\u0ee2\u0eea\5\u01a8\u00d5\2\u0ee3\u0ee4\7\u01bf\2\2\u0ee4"+
		"\u0eea\5\u01a8\u00d5\2\u0ee5\u0ee6\7\u012b\2\2\u0ee6\u0eea\7\u00e4\2\2"+
		"\u0ee7\u0ee8\7\u012b\2\2\u0ee8\u0eea\7\u01bf\2\2\u0ee9\u0ee1\3\2\2\2\u0ee9"+
		"\u0ee3\3\2\2\2\u0ee9\u0ee5\3\2\2\2\u0ee9\u0ee7\3\2\2\2\u0eea\u01cb\3\2"+
		"\2\2\u0eeb\u0eec\b\u00e7\1\2\u0eec\u0eed\5\u01ca\u00e6\2\u0eed\u0ef2\3"+
		"\2\2\2\u0eee\u0eef\f\4\2\2\u0eef\u0ef1\5\u01ca\u00e6\2\u0ef0\u0eee\3\2"+
		"\2\2\u0ef1\u0ef4\3\2\2\2\u0ef2\u0ef0\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3"+
		"\u01cd\3\2\2\2\u0ef4\u0ef2\3\2\2\2\u0ef5\u0ef8\5\u01cc\u00e7\2\u0ef6\u0ef8"+
		"\3\2\2\2\u0ef7\u0ef5\3\2\2\2\u0ef7\u0ef6\3\2\2\2\u0ef8\u01cf\3\2\2\2\u0ef9"+
		"\u0efa\7\u00bd\2\2\u0efa\u0efb\7\u00d8\2\2\u0efb\u0efc\7\u00a5\2\2\u0efc"+
		"\u0efd\7\u01d0\2\2\u0efd\u0efe\5\u04cc\u0267\2\u0efe\u0eff\5\u0110\u0089"+
		"\2\u0eff\u0f0a\3\2\2\2\u0f00\u0f01\7\u00bd\2\2\u0f01\u0f02\7\u00d8\2\2"+
		"\u0f02\u0f03\7\u00a5\2\2\u0f03\u0f04\7\u01d0\2\2\u0f04\u0f05\7\u00ea\2"+
		"\2\u0f05\u0f06\7\u00cb\2\2\u0f06\u0f07\5\u04cc\u0267\2\u0f07\u0f08\5\u0110"+
		"\u0089\2\u0f08\u0f0a\3\2\2\2\u0f09\u0ef9\3\2\2\2\u0f09\u0f00\3\2\2\2\u0f0a"+
		"\u01d1\3\2\2\2\u0f0b\u0f0c\7]\2\2\u0f0c\u0f0d\7\u00d8\2\2\u0f0d\u0f0e"+
		"\7\u00a5\2\2\u0f0e\u0f0f\7\u01d0\2\2\u0f0f\u0f10\5\u04cc\u0267\2\u0f10"+
		"\u0f11\5\u01ce\u00e8\2\u0f11\u0f12\5\u01d8\u00ed\2\u0f12\u0f1b\3\2\2\2"+
		"\u0f13\u0f14\7]\2\2\u0f14\u0f15\7\u00d8\2\2\u0f15\u0f16\7\u00a5\2\2\u0f16"+
		"\u0f17\7\u01d0\2\2\u0f17\u0f18\5\u04cc\u0267\2\u0f18\u0f19\5\u01cc\u00e7"+
		"\2\u0f19\u0f1b\3\2\2\2\u0f1a\u0f0b\3\2\2\2\u0f1a\u0f13\3\2\2\2\u0f1b\u01d3"+
		"\3\2\2\2\u0f1c\u0f1d\7\u013f\2\2\u0f1d\u0f1e\7\5\2\2\u0f1e\u0f1f\5\u01d6"+
		"\u00ec\2\u0f1f\u0f20\7";
	private static final String _serializedATNSegment2 =
		"\6\2\2\u0f20\u0f23\3\2\2\2\u0f21\u0f23\3\2\2\2\u0f22\u0f1c\3\2\2\2\u0f22"+
		"\u0f21\3\2\2\2\u0f23\u01d5\3\2\2\2\u0f24\u0f25\b\u00ec\1\2\u0f25\u0f26"+
		"\5\u01de\u00f0\2\u0f26\u0f2c\3\2\2\2\u0f27\u0f28\f\4\2\2\u0f28\u0f29\7"+
		"\7\2\2\u0f29\u0f2b\5\u01de\u00f0\2\u0f2a\u0f27\3\2\2\2\u0f2b\u0f2e\3\2"+
		"\2\2\u0f2c\u0f2a\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u01d7\3\2\2\2\u0f2e"+
		"\u0f2c\3\2\2\2\u0f2f\u0f30\7\u013f\2\2\u0f30\u0f31\7\5\2\2\u0f31\u0f32"+
		"\5\u01da\u00ee\2\u0f32\u0f33\7\6\2\2\u0f33\u01d9\3\2\2\2\u0f34\u0f35\b"+
		"\u00ee\1\2\u0f35\u0f36\5\u01dc\u00ef\2\u0f36\u0f3c\3\2\2\2\u0f37\u0f38"+
		"\f\4\2\2\u0f38\u0f39\7\7\2\2\u0f39\u0f3b\5\u01dc\u00ef\2\u0f3a\u0f37\3"+
		"\2\2\2\u0f3b\u0f3e\3\2\2\2\u0f3c\u0f3a\3\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d"+
		"\u01db\3\2\2\2\u0f3e\u0f3c\3\2\2\2\u0f3f\u0f47\5\u01de\u00f0\2\u0f40\u0f41"+
		"\7\u0184\2\2\u0f41\u0f47\5\u01de\u00f0\2\u0f42\u0f43\7W\2\2\u0f43\u0f47"+
		"\5\u01de\u00f0\2\u0f44\u0f45\7\u00bd\2\2\u0f45\u0f47\5\u01e0\u00f1\2\u0f46"+
		"\u0f3f\3\2\2\2\u0f46\u0f40\3\2\2\2\u0f46\u0f42\3\2\2\2\u0f46\u0f44\3\2"+
		"\2\2\u0f47\u01dd\3\2\2\2\u0f48\u0f49\5\u01e0\u00f1\2\u0f49\u0f4a\5\u01e2"+
		"\u00f2\2\u0f4a\u01df\3\2\2\2\u0f4b\u0f4c\5\u04e8\u0275\2\u0f4c\u01e1\3"+
		"\2\2\2\u0f4d\u0f4e\5\u04de\u0270\2\u0f4e\u01e3\3\2\2\2\u0f4f\u0f50\7\u0098"+
		"\2\2\u0f50\u0f51\7\u0181\2\2\u0f51\u0f52\5\u04cc\u0267\2\u0f52\u0f53\5"+
		"\u01e6\u00f4\2\u0f53\u0f54\5\u01ea\u00f6\2\u0f54\u0f55\7\u00d8\2\2\u0f55"+
		"\u0f56\7\u00a5\2\2\u0f56\u0f57\7\u01d0\2\2\u0f57\u0f58\5\u04cc\u0267\2"+
		"\u0f58\u0f59\5\u01d4\u00eb\2\u0f59\u01e5\3\2\2\2\u0f5a\u0f5b\7\u01ae\2"+
		"\2\u0f5b\u0f5e\5\u04de\u0270\2\u0f5c\u0f5e\3\2\2\2\u0f5d\u0f5a\3\2\2\2"+
		"\u0f5d\u0f5c\3\2\2\2\u0f5e\u01e7\3\2\2\2\u0f5f\u0f60\7\u01c6\2\2\u0f60"+
		"\u0f64\5\u04de\u0270\2\u0f61\u0f62\7\u01c6\2\2\u0f62\u0f64\7\u0132\2\2"+
		"\u0f63\u0f5f\3\2\2\2\u0f63\u0f61\3\2\2\2\u0f64\u01e9\3\2\2\2\u0f65\u0f68"+
		"\5\u01e8\u00f5\2\u0f66\u0f68\3\2\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f66\3"+
		"\2\2\2\u0f68\u01eb\3\2\2\2\u0f69\u0f6a\7\u00bd\2\2\u0f6a\u0f6b\7\u0181"+
		"\2\2\u0f6b\u0f6c\5\u04cc\u0267\2\u0f6c\u0f6d\5\u0110\u0089\2\u0f6d\u0f76"+
		"\3\2\2\2\u0f6e\u0f6f\7\u00bd\2\2\u0f6f\u0f70\7\u0181\2\2\u0f70\u0f71\7"+
		"\u00ea\2\2\u0f71\u0f72\7\u00cb\2\2\u0f72\u0f73\5\u04cc\u0267\2\u0f73\u0f74"+
		"\5\u0110\u0089\2\u0f74\u0f76\3\2\2\2\u0f75\u0f69\3\2\2\2\u0f75\u0f6e\3"+
		"\2\2\2\u0f76\u01ed\3\2\2\2\u0f77\u0f78\7]\2\2\u0f78\u0f79\7\u0181\2\2"+
		"\u0f79\u0f7a\5\u04cc\u0267\2\u0f7a\u0f7b\5\u01e8\u00f5\2\u0f7b\u0f7c\5"+
		"\u01d8\u00ed\2\u0f7c\u0f88\3\2\2\2\u0f7d\u0f7e\7]\2\2\u0f7e\u0f7f\7\u0181"+
		"\2\2\u0f7f\u0f80\5\u04cc\u0267\2\u0f80\u0f81\5\u01e8\u00f5\2\u0f81\u0f88"+
		"\3\2\2\2\u0f82\u0f83\7]\2\2\u0f83\u0f84\7\u0181\2\2\u0f84\u0f85\5\u04cc"+
		"\u0267\2\u0f85\u0f86\5\u01d8\u00ed\2\u0f86\u0f88\3\2\2\2\u0f87\u0f77\3"+
		"\2\2\2\u0f87\u0f7d\3\2\2\2\u0f87\u0f82\3\2\2\2\u0f88\u01ef\3\2\2\2\u0f89"+
		"\u0f8a\7\u0098\2\2\u0f8a\u0f8b\7\u00d8\2\2\u0f8b\u0f8c\7\u019b\2\2\u0f8c"+
		"\u0f8d\5\u04c8\u0265\2\u0f8d\u0f8e\5\u01f2\u00fa\2\u0f8e\u0f8f\7\u0181"+
		"\2\2\u0f8f\u0f90\5\u04cc\u0267\2\u0f90\u0f91\5\u01d4\u00eb\2\u0f91\u0f9f"+
		"\3\2\2\2\u0f92\u0f93\7\u0098\2\2\u0f93\u0f94\7\u00d8\2\2\u0f94\u0f95\7"+
		"\u019b\2\2\u0f95\u0f96\7\u00ea\2\2\u0f96\u0f97\7\u012d\2\2\u0f97\u0f98"+
		"\7\u00cb\2\2\u0f98\u0f99\5\u04c8\u0265\2\u0f99\u0f9a\5\u01f2\u00fa\2\u0f9a"+
		"\u0f9b\7\u0181\2\2\u0f9b\u0f9c\5\u04cc\u0267\2\u0f9c\u0f9d\5\u01d4\u00eb"+
		"\2\u0f9d\u0f9f\3\2\2\2\u0f9e\u0f89\3\2\2\2\u0f9e\u0f92\3\2\2\2\u0f9f\u01f1"+
		"\3\2\2\2\u0fa0\u0fa1\7\5\2\2\u0fa1\u0fa7\7\6\2\2\u0fa2\u0fa3\7\5\2\2\u0fa3"+
		"\u0fa4\5\u01f4\u00fb\2\u0fa4\u0fa5\7\6\2\2\u0fa5\u0fa7\3\2\2\2\u0fa6\u0fa0"+
		"\3\2\2\2\u0fa6\u0fa2\3\2\2\2\u0fa7\u01f3\3\2\2\2\u0fa8\u0fa9\b\u00fb\1"+
		"\2\u0fa9\u0faa\5\u01f6\u00fc\2\u0faa\u0fb0\3\2\2\2\u0fab\u0fac\f\4\2\2"+
		"\u0fac\u0fad\7\7\2\2\u0fad\u0faf\5\u01f6\u00fc\2\u0fae\u0fab\3\2\2\2\u0faf"+
		"\u0fb2\3\2\2\2\u0fb0\u0fae\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u01f5\3\2"+
		"\2\2\u0fb2\u0fb0\3\2\2\2\u0fb3\u0fb4\5\u0154\u00ab\2\u0fb4\u01f7\3\2\2"+
		"\2\u0fb5\u0fb6\7]\2\2\u0fb6\u0fb7\7\u00d8\2\2\u0fb7\u0fb8\7\u019b\2\2"+
		"\u0fb8\u0fb9\5\u040c\u0207\2\u0fb9\u0fba\5\u010a\u0086\2\u0fba\u0fc4\3"+
		"\2\2\2\u0fbb\u0fbc\7]\2\2\u0fbc\u0fbd\7\u00d8\2\2\u0fbd\u0fbe\7\u019b"+
		"\2\2\u0fbe\u0fbf\7\u00ea\2\2\u0fbf\u0fc0\7\u00cb\2\2\u0fc0\u0fc1\5\u040c"+
		"\u0207\2\u0fc1\u0fc2\5\u010a\u0086\2\u0fc2\u0fc4\3\2\2\2\u0fc3\u0fb5\3"+
		"\2\2\2\u0fc3\u0fbb\3\2\2\2\u0fc4\u01f9\3\2\2\2\u0fc5\u0fc6\7\u0098\2\2"+
		"\u0fc6\u0fc7\7\u01ba\2\2\u0fc7\u0fc8\7\u011d\2\2\u0fc8\u0fc9\7\u00d6\2"+
		"\2\u0fc9\u0fca\5\u01fc\u00ff\2\u0fca\u0fcb\7\u0181\2\2\u0fcb\u0fcc\5\u04cc"+
		"\u0267\2\u0fcc\u0fcd\5\u01d4\u00eb\2\u0fcd\u01fb\3\2\2\2\u0fce\u0fd2\5"+
		"\u04e0\u0271\2\u0fcf\u0fd2\7\u00a2\2\2\u0fd0\u0fd2\7\u01ba\2\2\u0fd1\u0fce"+
		"\3\2\2\2\u0fd1\u0fcf\3\2\2\2\u0fd1\u0fd0\3\2\2\2\u0fd2\u01fd\3\2\2\2\u0fd3"+
		"\u0fd4\7\u00bd\2\2\u0fd4\u0fd5\7\u01ba\2\2\u0fd5\u0fd6\7\u011d\2\2\u0fd6"+
		"\u0fd7\7\u00d6\2\2\u0fd7\u0fd8\5\u01fc\u00ff\2\u0fd8\u0fd9\7\u0181\2\2"+
		"\u0fd9\u0fda\5\u04cc\u0267\2\u0fda\u0fe6\3\2\2\2\u0fdb\u0fdc\7\u00bd\2"+
		"\2\u0fdc\u0fdd\7\u01ba\2\2\u0fdd\u0fde\7\u011d\2\2\u0fde\u0fdf\7\u00ea"+
		"\2\2\u0fdf\u0fe0\7\u00cb\2\2\u0fe0\u0fe1\7\u00d6\2\2\u0fe1\u0fe2\5\u01fc"+
		"\u00ff\2\u0fe2\u0fe3\7\u0181\2\2\u0fe3\u0fe4\5\u04cc\u0267\2\u0fe4\u0fe6"+
		"\3\2\2\2\u0fe5\u0fd3\3\2\2\2\u0fe5\u0fdb\3\2\2\2\u0fe6\u01ff\3\2\2\2\u0fe7"+
		"\u0fe8\7]\2\2\u0fe8\u0fe9\7\u01ba\2\2\u0fe9\u0fea\7\u011d\2\2\u0fea\u0feb"+
		"\7\u00d6\2\2\u0feb\u0fec\5\u01fc\u00ff\2\u0fec\u0fed\7\u0181\2\2\u0fed"+
		"\u0fee\5\u04cc\u0267\2\u0fee\u0fef\5\u01d8\u00ed\2\u0fef\u0201\3\2\2\2"+
		"\u0ff0\u0ff1\7\u0098\2\2\u0ff1\u0ff2\7\u01a9\2\2\u0ff2\u0ff3\5\u04cc\u0267"+
		"\2\u0ff3\u0ff4\5\u0204\u0103\2\u0ff4\u0ff5\5\u0206\u0104\2\u0ff5\u0ff6"+
		"\7\u013b\2\2\u0ff6\u0ff7\5\u04c8\u0265\2\u0ff7\u0ff8\5\u020a\u0106\2\u0ff8"+
		"\u0ff9\5\u0210\u0109\2\u0ff9\u0ffa\7\u00ca\2\2\u0ffa\u0ffb\7\u015a\2\2"+
		"\u0ffb\u0ffc\5\u04d8\u026d\2\u0ffc\u0ffd\7\5\2\2\u0ffd\u0ffe\5\u0212\u010a"+
		"\2\u0ffe\u0fff\7\6\2\2\u0fff\u1016\3\2\2\2\u1000\u1001\7\u0098\2\2\u1001"+
		"\u1002\7\u0091\2\2\u1002\u1003\7\u01a9\2\2\u1003\u1004\5\u04cc\u0267\2"+
		"\u1004\u1005\7Y\2\2\u1005\u1006\5\u0206\u0104\2\u1006\u1007\7\u013b\2"+
		"\2\u1007\u1008\5\u04c8\u0265\2\u1008\u1009\5\u0216\u010c\2\u1009\u100a"+
		"\5\u0218\u010d\2\u100a\u100b\7\u00d6\2\2\u100b\u100c\7\u00be\2\2\u100c"+
		"\u100d\7\u0174\2\2\u100d\u100e\5\u0210\u0109\2\u100e\u100f\7\u00ca\2\2"+
		"\u100f\u1010\7\u015a\2\2\u1010\u1011\5\u04d8\u026d\2\u1011\u1012\7\5\2"+
		"\2\u1012\u1013\5\u0212\u010a\2\u1013\u1014\7\6\2\2\u1014\u1016\3\2\2\2"+
		"\u1015\u0ff0\3\2\2\2\u1015\u1000\3\2\2\2\u1016\u0203\3\2\2\2\u1017\u101c"+
		"\7m\2\2\u1018\u101c\7Y\2\2\u1019\u101a\7\u00fd\2\2\u101a\u101c\7\u0137"+
		"\2\2\u101b\u1017\3\2\2\2\u101b\u1018\3\2\2\2\u101b\u1019\3\2\2\2\u101c"+
		"\u0205\3\2\2\2\u101d\u101e\b\u0104\1\2\u101e\u101f\5\u0208\u0105\2\u101f"+
		"\u1025\3\2\2\2\u1020\u1021\f\4\2\2\u1021\u1022\7\u0140\2\2\u1022\u1024"+
		"\5\u0208\u0105\2\u1023\u1020\3\2\2\2\u1024\u1027\3\2\2\2\u1025\u1023\3"+
		"\2\2\2\u1025\u1026\3\2\2\2\u1026\u0207\3\2\2\2\u1027\u1025\3\2\2\2\u1028"+
		"\u1029\7\u01b9\2\2\u1029\u102a\7\u0137\2\2\u102a\u1030\5\u016e\u00b8\2"+
		"\u102b\u1030\7\u00fc\2\2\u102c\u1030\7\u00b1\2\2\u102d\u1030\7\u01b9\2"+
		"\2\u102e\u1030\7\u01ac\2\2\u102f\u1028\3\2\2\2\u102f\u102b\3\2\2\2\u102f"+
		"\u102c\3\2\2\2\u102f\u102d\3\2\2\2\u102f\u102e\3\2\2\2\u1030\u0209\3\2"+
		"\2\2\u1031\u1032\7\u00d6\2\2\u1032\u1033\5\u020c\u0107\2\u1033\u1034\5"+
		"\u020e\u0108\2\u1034\u1037\3\2\2\2\u1035\u1037\3\2\2\2\u1036\u1031\3\2"+
		"\2\2\u1036\u1035\3\2\2\2\u1037\u020b\3\2\2\2\u1038\u103b\7\u00be\2\2\u1039"+
		"\u103b\3\2\2\2\u103a\u1038\3\2\2\2\u103a\u1039\3\2\2\2\u103b\u020d\3\2"+
		"\2\2\u103c\u103d\t\n\2\2\u103d\u020f\3\2\2\2\u103e\u103f\7\u01c9\2\2\u103f"+
		"\u1040\7\5\2\2\u1040\u1041\5\u044e\u0228\2\u1041\u1042\7\6\2\2\u1042\u1045"+
		"\3\2\2\2\u1043\u1045\3\2\2\2\u1044\u103e\3\2\2\2\u1044\u1043\3\2\2\2\u1045"+
		"\u0211\3\2\2\2\u1046\u1047\b\u010a\1\2\u1047\u104a\5\u0214\u010b\2\u1048"+
		"\u104a\3\2\2\2\u1049\u1046\3\2\2\2\u1049\u1048\3\2\2\2\u104a\u1050\3\2"+
		"\2\2\u104b\u104c\f\5\2\2\u104c\u104d\7\7\2\2\u104d\u104f\5\u0214\u010b"+
		"\2\u104e\u104b\3\2\2\2\u104f\u1052\3\2\2\2\u1050\u104e\3\2\2\2\u1050\u1051"+
		"\3\2\2\2\u1051\u0213\3\2\2\2\u1052\u1050\3\2\2\2\u1053\u1058\5\u04dc\u026f"+
		"\2\u1054\u1058\5\u04de\u0270\2\u1055\u1058\5\u04e8\u0275\2\u1056\u1058"+
		"\7\u01e9\2\2\u1057\u1053\3\2\2\2\u1057\u1054\3\2\2\2\u1057\u1055\3\2\2"+
		"\2\u1057\u1056\3\2\2\2\u1058\u0215\3\2\2\2\u1059\u105a\7\u00db\2\2\u105a"+
		"\u105d\5\u04c8\u0265\2\u105b\u105d\3\2\2\2\u105c\u1059\3\2\2\2\u105c\u105b"+
		"\3\2\2\2\u105d\u0217\3\2\2\2\u105e\u1063\b\u010d\1\2\u105f\u1060\f\4\2"+
		"\2\u1060\u1062\5\u021a\u010e\2\u1061\u105f\3\2\2\2\u1062\u1065\3\2\2\2"+
		"\u1063\u1061\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u0219\3\2\2\2\u1065\u1063"+
		"\3\2\2\2\u1066\u1067\7\u012d\2\2\u1067\u1072\7\u00ae\2\2\u1068\u1072\7"+
		"\u00ae\2\2\u1069\u106a\7\u00f6\2\2\u106a\u1072\7\u00ec\2\2\u106b\u106c"+
		"\7\u00f6\2\2\u106c\u1072\7\u00af\2\2\u106d\u106e\7\u012d\2\2\u106e\u1072"+
		"\7\u01bd\2\2\u106f\u1070\7\u012b\2\2\u1070\u1072\7\u00f4\2\2\u1071\u1066"+
		"\3\2\2\2\u1071\u1068\3\2\2\2\u1071\u1069\3\2\2\2\u1071\u106b\3\2\2\2\u1071"+
		"\u106d\3\2\2\2\u1071\u106f\3\2\2\2\u1072\u021b\3\2\2\2\u1073\u1074\7\u00bd"+
		"\2\2\u1074\u1075\7\u01a9\2\2\u1075\u1076\5\u04cc\u0267\2\u1076\u1077\7"+
		"\u013b\2\2\u1077\u1078\5\u025e\u0130\2\u1078\u1079\5\u0110\u0089\2\u1079"+
		"\u1084\3\2\2\2\u107a\u107b\7\u00bd\2\2\u107b\u107c\7\u01a9\2\2\u107c\u107d"+
		"\7\u00ea\2\2\u107d\u107e\7\u00cb\2\2\u107e\u107f\5\u04cc\u0267\2\u107f"+
		"\u1080\7\u013b\2\2\u1080\u1081\5\u025e\u0130\2\u1081\u1082\5\u0110\u0089"+
		"\2\u1082\u1084\3\2\2\2\u1083\u1073\3\2\2\2\u1083\u107a\3\2\2\2\u1084\u021d"+
		"\3\2\2\2\u1085\u1086\7\u0098\2\2\u1086\u1087\7f\2\2\u1087\u1088\5\u04cc"+
		"\u0267\2\u1088\u1089\7\u0081\2\2\u1089\u108a\7\5\2\2\u108a\u108b\5\u044e"+
		"\u0228\2\u108b\u108c\7\6\2\2\u108c\u108d\5\u0218\u010d\2\u108d\u021f\3"+
		"\2\2\2\u108e\u108f\7\u00bd\2\2\u108f\u1090\7f\2\2\u1090\u1091\5\u04cc"+
		"\u0267\2\u1091\u1092\5\u0110\u0089\2\u1092\u0221\3\2\2\2\u1093\u1094\7"+
		"\u0098\2\2\u1094\u1095\7\u01ae\2\2\u1095\u1096\5\u025e\u0130\2\u1096\u1097"+
		"\7d\2\2\u1097\u1098\7\5\2\2\u1098\u1099\5\u0418\u020d\2\u1099\u109a\7"+
		"\6\2\2\u109a\u10eb\3\2\2\2\u109b\u109c\7\u0098\2\2\u109c\u109d\7\u01ae"+
		"\2\2\u109d\u109e\5\u025e\u0130\2\u109e\u109f\7d\2\2\u109f\u10a0\7\u00c4"+
		"\2\2\u10a0\u10a1\7\5\2\2\u10a1\u10a2\5\u0234\u011b\2\u10a2\u10a3\7\6\2"+
		"\2\u10a3\u10eb\3\2\2\2\u10a4\u10a5\7\u0098\2\2\u10a5\u10a6\7Z\2\2\u10a6"+
		"\u10a7\5\u04d8\u026d\2\u10a7\u10a8\5\u022c\u0117\2\u10a8\u10a9\5\u0224"+
		"\u0113\2\u10a9\u10eb\3\2\2\2\u10aa\u10ab\7\u0098\2\2\u10ab\u10ac\7Z\2"+
		"\2\u10ac\u10ad\5\u04d8\u026d\2\u10ad\u10ae\5\u022e\u0118\2\u10ae\u10eb"+
		"\3\2\2\2\u10af\u10b0\7\u0098\2\2\u10b0\u10b1\7\u013d\2\2\u10b1\u10b2\5"+
		"\u02ee\u0178\2\u10b2\u10b3\5\u0224\u0113\2\u10b3\u10eb\3\2\2\2\u10b4\u10b5"+
		"\7\u0098\2\2\u10b5\u10b6\7\u01ae\2\2\u10b6\u10b7\5\u025e\u0130\2\u10b7"+
		"\u10b8\5\u0224\u0113\2\u10b8\u10eb\3\2\2\2\u10b9\u10ba\7\u0098\2\2\u10ba"+
		"\u10bb\7\u01ae\2\2\u10bb\u10bc\5\u025e\u0130\2\u10bc\u10bd\7d\2\2\u10bd"+
		"\u10be\7\u015c\2\2\u10be\u10bf\5\u0224\u0113\2\u10bf\u10eb\3\2\2\2\u10c0"+
		"\u10c1\7\u0098\2\2\u10c1\u10c2\7\u01a1\2\2\u10c2\u10c3\7\u017a\2\2\u10c3"+
		"\u10c4\7\u0149\2\2\u10c4\u10c5\5\u025e\u0130\2\u10c5\u10c6\5\u0224\u0113"+
		"\2\u10c6\u10eb\3\2\2\2\u10c7\u10c8\7\u0098\2\2\u10c8\u10c9\7\u01a1\2\2"+
		"\u10c9\u10ca\7\u017a\2\2\u10ca\u10cb\7\u00b5\2\2\u10cb\u10cc\5\u025e\u0130"+
		"\2\u10cc\u10cd\5\u0224\u0113\2\u10cd\u10eb\3\2\2\2\u10ce\u10cf\7\u0098"+
		"\2\2\u10cf\u10d0\7\u01a1\2\2\u10d0\u10d1\7\u017a\2\2\u10d1\u10d2\7\u019f"+
		"\2\2\u10d2\u10d3\5\u025e\u0130\2\u10d3\u10d4\5\u0224\u0113\2\u10d4\u10eb"+
		"\3\2\2\2\u10d5\u10d6\7\u0098\2\2\u10d6\u10d7\7\u01a1\2\2\u10d7\u10d8\7"+
		"\u017a\2\2\u10d8\u10d9\7\u008f\2\2\u10d9\u10da\5\u025e\u0130\2\u10da\u10db"+
		"\5\u0224\u0113\2\u10db\u10eb\3\2\2\2\u10dc\u10dd\7\u0098\2\2\u10dd\u10de"+
		"\7\u0088\2\2\u10de\u10df\5\u025e\u0130\2\u10df\u10e0\5\u0224\u0113\2\u10e0"+
		"\u10eb\3\2\2\2\u10e1\u10e2\7\u0098\2\2\u10e2\u10e3\7\u0088\2\2\u10e3\u10e4"+
		"\5\u025e\u0130\2\u10e4\u10e5\7\u00db\2\2\u10e5\u10e6\5\u025e\u0130\2\u10e6"+
		"\u10eb\3\2\2\2\u10e7\u10e8\7\u0098\2\2\u10e8\u10e9\7\u01ae\2\2\u10e9\u10eb"+
		"\5\u025e\u0130\2\u10ea\u1093\3\2\2\2\u10ea\u109b\3\2\2\2\u10ea\u10a4\3"+
		"\2\2\2\u10ea\u10aa\3\2\2\2\u10ea\u10af\3\2\2\2\u10ea\u10b4\3\2\2\2\u10ea"+
		"\u10b9\3\2\2\2\u10ea\u10c0\3\2\2\2\u10ea\u10c7\3\2\2\2\u10ea\u10ce\3\2"+
		"\2\2\u10ea\u10d5\3\2\2\2\u10ea\u10dc\3\2\2\2\u10ea\u10e1\3\2\2\2\u10ea"+
		"\u10e7\3\2\2\2\u10eb\u0223\3\2\2\2\u10ec\u10ed\7\5\2\2\u10ed\u10ee\5\u0226"+
		"\u0114\2\u10ee\u10ef\7\6\2\2\u10ef\u0225\3\2\2\2\u10f0\u10f1\b\u0114\1"+
		"\2\u10f1\u10f2\5\u0228\u0115\2\u10f2\u10f8\3\2\2\2\u10f3\u10f4\f\4\2\2"+
		"\u10f4\u10f5\7\7\2\2\u10f5\u10f7\5\u0228\u0115\2\u10f6\u10f3\3\2\2\2\u10f7"+
		"\u10fa\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u0227\3\2"+
		"\2\2\u10fa\u10f8\3\2\2\2\u10fb\u10fc\5\u04e8\u0275\2\u10fc\u10fd\7\t\2"+
		"\2\u10fd\u10fe\5\u022a\u0116\2\u10fe\u1101\3\2\2\2\u10ff\u1101\5\u04e8"+
		"\u0275\2\u1100\u10fb\3\2\2\2\u1100\u10ff\3\2\2\2\u1101\u0229\3\2\2\2\u1102"+
		"\u1108\5\u02ce\u0168\2\u1103\u1108\5\u04f0\u0279\2\u1104\u1108\5\u0484"+
		"\u0243\2\u1105\u1108\5\u01a0\u00d1\2\u1106\u1108\5\u04de\u0270\2\u1107"+
		"\u1102\3\2\2\2\u1107\u1103\3\2\2\2\u1107\u1104\3\2\2\2\u1107\u1105\3\2"+
		"\2\2\u1107\u1106\3\2\2\2\u1108\u022b\3\2\2\2\u1109\u110a\7\5\2\2\u110a"+
		"\u110b\7\r\2\2\u110b\u1111\7\6\2\2\u110c\u110d\7\5\2\2\u110d\u110e\5\u048e"+
		"\u0248\2\u110e\u110f\7\6\2\2\u110f\u1111\3\2\2\2\u1110\u1109\3\2\2\2\u1110"+
		"\u110c\3\2\2\2\u1111\u022d\3\2\2\2\u1112\u1113\7\5\2\2\u1113\u1114\5\u0230"+
		"\u0119\2\u1114\u1115\7\6\2\2\u1115\u022f\3\2\2\2\u1116\u1117\b\u0119\1"+
		"\2\u1117\u1118\5\u0232\u011a\2\u1118\u111e\3\2\2\2\u1119\u111a\f\4\2\2"+
		"\u111a\u111b\7\7\2\2\u111b\u111d\5\u0232\u011a\2\u111c\u1119\3\2\2\2\u111d"+
		"\u1120\3\2\2\2\u111e\u111c\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u0231\3\2"+
		"\2\2\u1120\u111e\3\2\2\2\u1121\u1122\7\u01e7\2\2\u1122\u1123\7\t\2\2\u1123"+
		"\u1124\5\u022a\u0116\2\u1124\u0233\3\2\2\2\u1125\u1128\5\u0236\u011c\2"+
		"\u1126\u1128\3\2\2\2\u1127\u1125\3\2\2\2\u1127\u1126\3\2\2\2\u1128\u0235"+
		"\3\2\2\2\u1129\u112a\b\u011c\1\2\u112a\u112b\5\u04de\u0270\2\u112b\u1131"+
		"\3\2\2\2\u112c\u112d\f\4\2\2\u112d\u112e\7\7\2\2\u112e\u1130\5\u04de\u0270"+
		"\2\u112f\u112c\3\2\2\2\u1130\u1133\3\2\2\2\u1131\u112f\3\2\2\2\u1131\u1132"+
		"\3\2\2\2\u1132\u0237\3\2\2\2\u1133\u1131\3\2\2\2\u1134\u1135\7]\2\2\u1135"+
		"\u1136\7\u01ae\2\2\u1136\u1137\5\u025e\u0130\2\u1137\u1138\7W\2\2\u1138"+
		"\u1139\7\u01c0\2\2\u1139\u113a\5\u04de\u0270\2\u113a\u113b\7m\2\2\u113b"+
		"\u113c\5\u04de\u0270\2\u113c\u114e\3\2\2\2\u113d\u113e\7]\2\2\u113e\u113f"+
		"\7\u01ae\2\2\u113f\u1140\5\u025e\u0130\2\u1140\u1141\7W\2\2\u1141\u1142"+
		"\7\u01c0\2\2\u1142\u1143\5\u04de\u0270\2\u1143\u1144\7Y\2\2\u1144\u1145"+
		"\5\u04de\u0270\2\u1145\u114e\3\2\2\2\u1146\u1147\7]\2\2\u1147\u1148\7"+
		"\u01ae\2\2\u1148\u1149\5\u025e\u0130\2\u1149\u114a\7W\2\2\u114a\u114b"+
		"\7\u01c0\2\2\u114b\u114c\5\u04de\u0270\2\u114c\u114e\3\2\2\2\u114d\u1134"+
		"\3\2\2\2\u114d\u113d\3\2\2\2\u114d\u1146\3\2\2\2\u114e\u0239\3\2\2\2\u114f"+
		"\u1150\7\u0098\2\2\u1150\u1151\7\u013d\2\2\u1151\u1152\7\u0083\2\2\u1152"+
		"\u1153\5\u025e\u0130\2\u1153\u1154\5\u0240\u0121\2\u1154\u1155\7\u00d6"+
		"\2\2\u1155\u1156\7\u01ae\2\2\u1156\u1157\5\u041e\u0210\2\u1157\u1158\7"+
		"\u01bb\2\2\u1158\u1159\5\u04d0\u0269\2\u1159\u115a\5\u0242\u0122\2\u115a"+
		"\u115b\7d\2\2\u115b\u115c\5\u023c\u011f\2\u115c\u023b\3\2\2\2\u115d\u115e"+
		"\b\u011f\1\2\u115e\u115f\5\u023e\u0120\2\u115f\u1165\3\2\2\2\u1160\u1161"+
		"\f\4\2\2\u1161\u1162\7\7\2\2\u1162\u1164\5\u023e\u0120\2\u1163\u1160\3"+
		"\2\2\2\u1164\u1167\3\2\2\2\u1165\u1163\3\2\2\2\u1165\u1166\3\2\2\2\u1166"+
		"\u023d\3\2\2\2\u1167\u1165\3\2\2\2\u1168\u1169\7\u00dd\2\2\u1169\u116a"+
		"\5\u04dc\u026f\2\u116a\u116b\7\5\2\2\u116b\u116c\5\u048e\u0248\2\u116c"+
		"\u116d\7\6\2\2\u116d\u116e\5\u04d8\u026d\2\u116e\u116f\5\u02be\u0160\2"+
		"\u116f\u1185\3\2\2\2\u1170\u1171\7\u013d\2\2\u1171\u1172\5\u04dc\u026f"+
		"\2\u1172\u1173\5\u02ee\u0178\2\u1173\u1174\5\u02ec\u0177\2\u1174\u1175"+
		"\5\u0244\u0123\2\u1175\u1176\5\u0246\u0124\2\u1176\u1185\3\2\2\2\u1177"+
		"\u1178\7\u013d\2\2\u1178\u1179\5\u04dc\u026f\2\u1179\u117a\5\u02ee\u0178"+
		"\2\u117a\u117b\5\u0244\u0123\2\u117b\u117c\5\u0246\u0124\2\u117c\u1185"+
		"\3\2\2\2\u117d\u117e\7\u00dd\2\2\u117e\u117f\5\u04dc\u026f\2\u117f\u1180"+
		"\5\u04d8\u026d\2\u1180\u1181\5\u02be\u0160\2\u1181\u1185\3\2\2\2\u1182"+
		"\u1183\7\u0194\2\2\u1183\u1185\5\u041e\u0210\2\u1184\u1168\3\2\2\2\u1184"+
		"\u1170\3\2\2\2\u1184\u1177\3\2\2\2\u1184\u117d\3\2\2\2\u1184\u1182\3\2"+
		"\2\2\u1185\u023f\3\2\2\2\u1186\u1189\7\u00ac\2\2\u1187\u1189\3\2\2\2\u1188"+
		"\u1186\3\2\2\2\u1188\u1187\3\2\2\2\u1189\u0241\3\2\2\2\u118a\u118b\7\u00d1"+
		"\2\2\u118b\u118e\5\u025e\u0130\2\u118c\u118e\3\2\2\2\u118d\u118a\3\2\2"+
		"\2\u118d\u118c\3\2\2\2\u118e\u0243\3\2\2\2\u118f\u1190\7\u00d6\2\2\u1190"+
		"\u1191\7\u0141\2\2\u1191\u1192\7u\2\2\u1192\u1197\5\u025e\u0130\2\u1193"+
		"\u1194\7\u00d6\2\2\u1194\u1197\7\u017a\2\2\u1195\u1197\3\2\2\2\u1196\u118f"+
		"\3\2\2\2\u1196\u1193\3\2\2\2\u1196\u1195\3\2\2\2\u1197\u0245\3\2\2\2\u1198"+
		"\u119b\7\u0160\2\2\u1199\u119b\3\2\2\2\u119a\u1198\3\2\2\2\u119a\u1199"+
		"\3\2\2\2\u119b\u0247\3\2\2\2\u119c\u119d\7\u0098\2\2\u119d\u119e\7\u013d"+
		"\2\2\u119e\u119f\7\u00d1\2\2\u119f\u11a0\5\u025e\u0130\2\u11a0\u11a1\7"+
		"\u01bb\2\2\u11a1\u11a2\5\u04d0\u0269\2\u11a2\u0249\3\2\2\2\u11a3\u11a4"+
		"\7]\2\2\u11a4\u11a5\7\u013d\2\2\u11a5\u11a6\7\u00d1\2\2\u11a6\u11a7\5"+
		"\u025e\u0130\2\u11a7\u11a8\7\u01bb\2\2\u11a8\u11a9\5\u04d0\u0269\2\u11a9"+
		"\u11aa\7W\2\2\u11aa\u11ab\5\u023c\u011f\2\u11ab\u11b6\3\2\2\2\u11ac\u11ad"+
		"\7]\2\2\u11ad\u11ae\7\u013d\2\2\u11ae\u11af\7\u00d1\2\2\u11af\u11b0\5"+
		"\u025e\u0130\2\u11b0\u11b1\7\u01bb\2\2\u11b1\u11b2\5\u04d0\u0269\2\u11b2"+
		"\u11b3\7\u00bd\2\2\u11b3\u11b4\5\u024c\u0127\2\u11b4\u11b6\3\2\2\2\u11b5"+
		"\u11a3\3\2\2\2\u11b5\u11ac\3\2\2\2\u11b6\u024b\3\2\2\2\u11b7\u11b8\b\u0127"+
		"\1\2\u11b8\u11b9\5\u024e\u0128\2\u11b9\u11bf\3\2\2\2\u11ba\u11bb\f\4\2"+
		"\2\u11bb\u11bc\7\7\2\2\u11bc\u11be\5\u024e\u0128\2\u11bd\u11ba\3\2\2\2"+
		"\u11be\u11c1\3\2\2\2\u11bf\u11bd\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u024d"+
		"\3\2\2\2\u11c1\u11bf\3\2\2\2\u11c2\u11c3\7\u013d\2\2\u11c3\u11c4\5\u04dc"+
		"\u026f\2\u11c4\u11c5\7\5\2\2\u11c5\u11c6\5\u048e\u0248\2\u11c6\u11c7\7"+
		"\6\2\2\u11c7\u11cf\3\2\2\2\u11c8\u11c9\7\u00dd\2\2\u11c9\u11ca\5\u04dc"+
		"\u026f\2\u11ca\u11cb\7\5\2\2\u11cb\u11cc\5\u048e\u0248\2\u11cc\u11cd\7"+
		"\6\2\2\u11cd\u11cf\3\2\2\2\u11ce\u11c2\3\2\2\2\u11ce\u11c8\3\2\2\2\u11cf"+
		"\u024f\3\2\2\2\u11d0\u11d1\7\u00bd\2\2\u11d1\u11d2\7\u013d\2\2\u11d2\u11d3"+
		"\7\u0083\2\2\u11d3\u11d4\5\u025e\u0130\2\u11d4\u11d5\7\u01bb\2\2\u11d5"+
		"\u11d6\5\u04d0\u0269\2\u11d6\u11d7\5\u0110\u0089\2\u11d7\u11e3\3\2\2\2"+
		"\u11d8\u11d9\7\u00bd\2\2\u11d9\u11da\7\u013d\2\2\u11da\u11db\7\u0083\2"+
		"\2\u11db\u11dc\7\u00ea\2\2\u11dc\u11dd\7\u00cb\2\2\u11dd\u11de\5\u025e"+
		"\u0130\2\u11de\u11df\7\u01bb\2\2\u11df\u11e0\5\u04d0\u0269\2\u11e0\u11e1"+
		"\5\u0110\u0089\2\u11e1\u11e3\3\2\2\2\u11e2\u11d0\3\2\2\2\u11e2\u11d8\3"+
		"\2\2\2\u11e3\u0251\3\2\2\2\u11e4\u11e5\7\u00bd\2\2\u11e5\u11e6\7\u013d"+
		"\2\2\u11e6\u11e7\7\u00d1\2\2\u11e7\u11e8\5\u025e\u0130\2\u11e8\u11e9\7"+
		"\u01bb\2\2\u11e9\u11ea\5\u04d0\u0269\2\u11ea\u11eb\5\u0110\u0089\2\u11eb"+
		"\u11f7\3\2\2\2\u11ec\u11ed\7\u00bd\2\2\u11ed\u11ee\7\u013d\2\2\u11ee\u11ef"+
		"\7\u00d1\2\2\u11ef\u11f0\7\u00ea\2\2\u11f0\u11f1\7\u00cb\2\2\u11f1\u11f2"+
		"\5\u025e\u0130\2\u11f2\u11f3\7\u01bb\2\2\u11f3\u11f4\5\u04d0\u0269\2\u11f4"+
		"\u11f5\5\u0110\u0089\2\u11f5\u11f7\3\2\2\2\u11f6\u11e4\3\2\2\2\u11f6\u11ec"+
		"\3\2\2\2\u11f7\u0253\3\2\2\2\u11f8\u11f9\7\u00bd\2\2\u11f9\u11fa\7\u0147"+
		"\2\2\u11fa\u11fb\7u\2\2\u11fb\u11fc\5\u04ca\u0266\2\u11fc\u11fd\5\u0110"+
		"\u0089\2\u11fd\u0255\3\2\2\2\u11fe\u11ff\7\u015f\2\2\u11ff\u1200\7\u0147"+
		"\2\2\u1200\u1201\7u\2\2\u1201\u1202\5\u04ca\u0266\2\u1202\u1203\7\u01a5"+
		"\2\2\u1203\u1204\5\u04cc\u0267\2\u1204\u0257\3\2\2\2\u1205\u1206\7\u00bd"+
		"\2\2\u1206\u1207\5\u025a\u012e\2\u1207\u1208\7\u00ea\2\2\u1208\u1209\7"+
		"\u00cb\2\2\u1209\u120a\5\u025c\u012f\2\u120a\u120b\5\u0110\u0089\2\u120b"+
		"\u1220\3\2\2\2\u120c\u120d\7\u00bd\2\2\u120d\u120e\5\u025a\u012e\2\u120e"+
		"\u120f\5\u025c\u012f\2\u120f\u1210\5\u0110\u0089\2\u1210\u1220\3\2\2\2"+
		"\u1211\u1212\7\u00bd\2\2\u1212\u1213\7\u00f2\2\2\u1213\u1214\7\u008e\2"+
		"\2\u1214\u1215\5\u025c\u012f\2\u1215\u1216\5\u0110\u0089\2\u1216\u1220"+
		"\3\2\2\2\u1217\u1218\7\u00bd\2\2\u1218\u1219\7\u00f2\2\2\u1219\u121a\7"+
		"\u008e\2\2\u121a\u121b\7\u00ea\2\2\u121b\u121c\7\u00cb\2\2\u121c\u121d"+
		"\5\u025c\u012f\2\u121d\u121e\5\u0110\u0089\2\u121e\u1220\3\2\2\2\u121f"+
		"\u1205\3\2\2\2\u121f\u120c\3\2\2\2\u121f\u1211\3\2\2\2\u121f\u1217\3\2"+
		"\2\2\u1220\u0259\3\2\2\2\u1221\u123a\7\u019b\2\2\u1222\u123a\7\u017e\2"+
		"\2\u1223\u123a\7\u01c7\2\2\u1224\u123a\7\u00f2\2\2\u1225\u1226\7\u00d8"+
		"\2\2\u1226\u123a\7\u019b\2\2\u1227\u123a\7\u01ae\2\2\u1228\u123a\7\u00bb"+
		"\2\2\u1229\u123a\7\u0088\2\2\u122a\u123a\7\u0095\2\2\u122b\u123a\7\u0178"+
		"\2\2\u122c\u123a\7\u00cd\2\2\u122d\u122e\7\u01a1\2\2\u122e\u122f\7\u017a"+
		"\2\2\u122f\u123a\7\u0149\2\2\u1230\u1231\7\u01a1\2\2\u1231\u1232\7\u017a"+
		"\2\2\u1232\u123a\7\u00b5\2\2\u1233\u1234\7\u01a1\2\2\u1234\u1235\7\u017a"+
		"\2\2\u1235\u123a\7\u019f\2\2\u1236\u1237\7\u01a1\2\2\u1237\u1238\7\u017a"+
		"\2\2\u1238\u123a\7\u008f\2\2\u1239\u1221\3\2\2\2\u1239\u1222\3\2\2\2\u1239"+
		"\u1223\3\2\2\2\u1239\u1224\3\2\2\2\u1239\u1225\3\2\2\2\u1239\u1227\3\2"+
		"\2\2\u1239\u1228\3\2\2\2\u1239\u1229\3\2\2\2\u1239\u122a\3\2\2\2\u1239"+
		"\u122b\3\2\2\2\u1239\u122c\3\2\2\2\u1239\u122d\3\2\2\2\u1239\u1230\3\2"+
		"\2\2\u1239\u1233\3\2\2\2\u1239\u1236\3\2\2\2\u123a\u025b\3\2\2\2\u123b"+
		"\u123c\b\u012f\1\2\u123c\u123d\5\u025e\u0130\2\u123d\u1243\3\2\2\2\u123e"+
		"\u123f\f\4\2\2\u123f\u1240\7\7\2\2\u1240\u1242\5\u025e\u0130\2\u1241\u123e"+
		"\3\2\2\2\u1242\u1245\3\2\2\2\u1243\u1241\3\2\2\2\u1243\u1244\3\2\2\2\u1244"+
		"\u025d\3\2\2\2\u1245\u1243\3\2\2\2\u1246\u1247\5\u04e4\u0273\2\u1247\u1248"+
		"\5\u0260\u0131\2\u1248\u124b\3\2\2\2\u1249\u124b\5\u04e4\u0273\2\u124a"+
		"\u1246\3\2\2\2\u124a\u1249\3\2\2\2\u124b\u025f\3\2\2\2\u124c\u124d\b\u0131"+
		"\1\2\u124d\u124e\7\f\2\2\u124e\u124f\5\u04d2\u026a\2\u124f\u1255\3\2\2"+
		"\2\u1250\u1251\f\3\2\2\u1251\u1252\7\f\2\2\u1252\u1254\5\u04d2\u026a\2"+
		"\u1253\u1250\3\2\2\2\u1254\u1257\3\2\2\2\u1255\u1253\3\2\2\2\u1255\u1256"+
		"\3\2\2\2\u1256\u0261\3\2\2\2\u1257\u1255\3\2\2\2\u1258\u1259\7\u01ac\2"+
		"\2\u1259\u125a\5\u03c8\u01e5\2\u125a\u125b\5\u040e\u0208\2\u125b\u125c"+
		"\5\u0264\u0133\2\u125c\u125d\5\u0110\u0089\2\u125d\u0263\3\2\2\2\u125e"+
		"\u125f\7\u0094\2\2\u125f\u1264\7\u00e9\2\2\u1260\u1261\7\u016c\2\2\u1261"+
		"\u1264\7\u00e9\2\2\u1262\u1264\3\2\2\2\u1263\u125e\3\2\2\2\u1263\u1260"+
		"\3\2\2\2\u1263\u1262\3\2\2\2\u1264\u0265\3\2\2\2\u1265\u1266\7\u008a\2"+
		"\2\u1266\u1267\7\u013b\2\2\u1267\u1268\7{\2\2\u1268\u1269\7\5\2\2\u1269"+
		"\u126a\5\u041e\u0210\2\u126a\u126b\7d\2\2\u126b\u126c\5\u041e\u0210\2"+
		"\u126c\u126d\7\6\2\2\u126d\u126e\7\u0104\2\2\u126e\u126f\5\u026a\u0136"+
		"\2\u126f\u12fa\3\2\2\2\u1270\u1271\7\u008a\2\2\u1271\u1272\7\u013b\2\2"+
		"\u1272\u1273\5\u0268\u0135\2\u1273\u1274\5\u025e\u0130\2\u1274\u1275\7"+
		"\u0104\2\2\u1275\u1276\5\u026a\u0136\2\u1276\u12fa\3\2\2\2\u1277\u1278"+
		"\7\u008a\2\2\u1278\u1279\7\u013b\2\2\u1279\u127a\7Z\2\2\u127a\u127b\5"+
		"\u04d8\u026d\2\u127b\u127c\5\u022c\u0117\2\u127c\u127d\7\u0104\2\2\u127d"+
		"\u127e\5\u026a\u0136\2\u127e\u12fa\3\2\2\2\u127f\u1280\7\u008a\2\2\u1280"+
		"\u1281\7\u013b\2\2\u1281\u1282\7\u00dd\2\2\u1282\u1283\5\u04d8\u026d\2"+
		"\u1283\u1284\5\u02be\u0160\2\u1284\u1285\7\u0104\2\2\u1285\u1286\5\u026a"+
		"\u0136\2\u1286\u12fa\3\2\2\2\u1287\u1288\7\u008a\2\2\u1288\u1289\7\u013b"+
		"\2\2\u1289\u128a\7\u013d\2\2\u128a\u128b\5\u02ee\u0178\2\u128b\u128c\5"+
		"\u02ec\u0177\2\u128c\u128d\7\u0104\2\2\u128d\u128e\5\u026a\u0136\2\u128e"+
		"\u12fa\3\2\2\2\u128f\u1290\7\u008a\2\2\u1290\u1291\7\u013b\2\2\u1291\u1292"+
		"\7\u0091\2\2\u1292\u1293\5\u04cc\u0267\2\u1293\u1294\7\u013b\2\2\u1294"+
		"\u1295\5\u025e\u0130\2\u1295\u1296\7\u0104\2\2\u1296\u1297\5\u026a\u0136"+
		"\2\u1297\u12fa\3\2\2\2\u1298\u1299\7\u008a\2\2\u1299\u129a\7\u013b\2\2"+
		"\u129a\u129b\7\u0176\2\2\u129b\u129c\5\u04cc\u0267\2\u129c\u129d\7\u013b"+
		"\2\2\u129d\u129e\5\u025e\u0130\2\u129e\u129f\7\u0104\2\2\u129f\u12a0\5"+
		"\u026a\u0136\2\u12a0\u12fa\3\2\2\2\u12a1\u12a2\7\u008a\2\2\u12a2\u12a3"+
		"\7\u013b\2\2\u12a3\u12a4\7\u01a9\2\2\u12a4\u12a5\5\u04cc\u0267\2\u12a5"+
		"\u12a6\7\u013b\2\2\u12a6\u12a7\5\u025e\u0130\2\u12a7\u12a8\7\u0104\2\2"+
		"\u12a8\u12a9\5\u026a\u0136\2\u12a9\u12fa\3\2\2\2\u12aa\u12ab\7\u008a\2"+
		"\2\u12ab\u12ac\7\u013b\2\2\u12ac\u12ad\7\u013d\2\2\u12ad\u12ae\7\u0083"+
		"\2\2\u12ae\u12af\5\u025e\u0130\2\u12af\u12b0\7\u01bb\2\2\u12b0\u12b1\5"+
		"\u04d0\u0269\2\u12b1\u12b2\7\u0104\2\2\u12b2\u12b3\5\u026a\u0136\2\u12b3"+
		"\u12fa\3\2\2\2\u12b4\u12b5\7\u008a\2\2\u12b5\u12b6\7\u013b\2\2\u12b6\u12b7"+
		"\7\u013d\2\2\u12b7\u12b8\7\u00d1\2\2\u12b8\u12b9\5\u025e\u0130\2\u12b9"+
		"\u12ba\7\u01bb\2\2\u12ba\u12bb\5\u04d0\u0269\2\u12bb\u12bc\7\u0104\2\2"+
		"\u12bc\u12bd\5\u026a\u0136\2\u12bd\u12fa\3\2\2\2\u12be\u12bf\7\u008a\2"+
		"\2\u12bf\u12c0\7\u013b\2\2\u12c0\u12c1\5\u01b2\u00da\2\u12c1\u12c2\7\u010a"+
		"\2\2\u12c2\u12c3\5\u025e\u0130\2\u12c3\u12c4\7\u0104\2\2\u12c4\u12c5\5"+
		"\u026a\u0136\2\u12c5\u12fa\3\2\2\2\u12c6\u12c7\7\u008a\2\2\u12c7\u12c8"+
		"\7\u013b\2\2\u12c8\u12c9\7\u0176\2\2\u12c9\u12ca\5\u04cc\u0267\2\u12ca"+
		"\u12cb\7\u0104\2\2\u12cb\u12cc\5\u026a\u0136\2\u12cc\u12fa\3\2\2\2\u12cd"+
		"\u12ce\7\u008a\2\2\u12ce\u12cf\7\u013b\2\2\u12cf\u12d0\7\u010b\2\2\u12d0"+
		"\u12d1\7\u0136\2\2\u12d1\u12d2\5\u01a0\u00d1\2\u12d2\u12d3\7\u0104\2\2"+
		"\u12d3\u12d4\5\u026a\u0136\2\u12d4\u12fa\3\2\2\2\u12d5\u12d6\7\u008a\2"+
		"\2\u12d6\u12d7\7\u013b\2\2\u12d7\u12d8\7\u01a1\2\2\u12d8\u12d9\7\u017a"+
		"\2\2\u12d9\u12da\7\u0149\2\2\u12da\u12db\5\u025e\u0130\2\u12db\u12dc\7"+
		"\u0104\2\2\u12dc\u12dd\5\u026a\u0136\2\u12dd\u12fa\3\2\2\2\u12de\u12df"+
		"\7\u008a\2\2\u12df\u12e0\7\u013b\2\2\u12e0\u12e1\7\u01a1\2\2\u12e1\u12e2"+
		"\7\u017a\2\2\u12e2\u12e3\7\u00b5\2\2\u12e3\u12e4\5\u025e\u0130\2\u12e4"+
		"\u12e5\7\u0104\2\2\u12e5\u12e6\5\u026a\u0136\2\u12e6\u12fa\3\2\2\2\u12e7"+
		"\u12e8\7\u008a\2\2\u12e8\u12e9\7\u013b\2\2\u12e9\u12ea\7\u01a1\2\2\u12ea"+
		"\u12eb\7\u017a\2\2\u12eb\u12ec\7\u019f\2\2\u12ec\u12ed\5\u025e\u0130\2"+
		"\u12ed\u12ee\7\u0104\2\2\u12ee\u12ef\5\u026a\u0136\2\u12ef\u12fa\3\2\2"+
		"\2\u12f0\u12f1\7\u008a\2\2\u12f1\u12f2\7\u013b\2\2\u12f2\u12f3\7\u01a1"+
		"\2\2\u12f3\u12f4\7\u017a\2\2\u12f4\u12f5\7\u008f\2\2\u12f5\u12f6\5\u025e"+
		"\u0130\2\u12f6\u12f7\7\u0104\2\2\u12f7\u12f8\5\u026a\u0136\2\u12f8\u12fa"+
		"\3\2\2\2\u12f9\u1265\3\2\2\2\u12f9\u1270\3\2\2\2\u12f9\u1277\3\2\2\2\u12f9"+
		"\u127f\3\2\2\2\u12f9\u1287\3\2\2\2\u12f9\u128f\3\2\2\2\u12f9\u1298\3\2"+
		"\2\2\u12f9\u12a1\3\2\2\2\u12f9\u12aa\3\2\2\2\u12f9\u12b4\3\2\2\2\u12f9"+
		"\u12be\3\2\2\2\u12f9\u12c6\3\2\2\2\u12f9\u12cd\3\2\2\2\u12f9\u12d5\3\2"+
		"\2\2\u12f9\u12de\3\2\2\2\u12f9\u12e7\3\2\2\2\u12f9\u12f0\3\2\2\2\u12fa"+
		"\u0267\3\2\2\2\u12fb\u1310\7\u0089\2\2\u12fc\u1310\7\u00a6\2\2\u12fd\u1310"+
		"\7\u0178\2\2\u12fe\u1310\7\u00f2\2\2\u12ff\u1310\7\u017e\2\2\u1300\u1310"+
		"\7\u019b\2\2\u1301\u1310\7\u00bb\2\2\u1302\u1310\7\u01ae\2\2\u1303\u1310"+
		"\7\u01c7\2\2\u1304\u1310\7\u0088\2\2\u1305\u1310\7\u0095\2\2\u1306\u1310"+
		"\7\u019d\2\2\u1307\u1310\7\u00cd\2\2\u1308\u1310\7\u0172\2\2\u1309\u130a"+
		"\7\u00d8\2\2\u130a\u1310\7\u019b\2\2\u130b\u1310\7\u0181\2\2\u130c\u130d"+
		"\7\u00d8\2\2\u130d\u130e\7\u00a5\2\2\u130e\u1310\7\u01d0\2\2\u130f\u12fb"+
		"\3\2\2\2\u130f\u12fc\3\2\2\2\u130f\u12fd\3\2\2\2\u130f\u12fe\3\2\2\2\u130f"+
		"\u12ff\3\2\2\2\u130f\u1300\3\2\2\2\u130f\u1301\3\2\2\2\u130f\u1302\3\2"+
		"\2\2\u130f\u1303\3\2\2\2\u130f\u1304\3\2\2\2\u130f\u1305\3\2\2\2\u130f"+
		"\u1306\3\2\2\2\u130f\u1307\3\2\2\2\u130f\u1308\3\2\2\2\u130f\u1309\3\2"+
		"\2\2\u130f\u130b\3\2\2\2\u130f\u130c\3\2\2\2\u1310\u0269\3\2\2\2\u1311"+
		"\u1314\5\u04de\u0270\2\u1312\u1314\7\u0132\2\2\u1313\u1311\3\2\2\2\u1313"+
		"\u1312\3\2\2\2\u1314\u026b\3\2\2\2\u1315\u1316\7\u017c\2\2\u1316\u1317"+
		"\7\u0109\2\2\u1317\u1318\5\u026e\u0138\2\u1318\u1319\7\u013b\2\2\u1319"+
		"\u131a\5\u0270\u0139\2\u131a\u131b\5\u025e\u0130\2\u131b\u131c\7\u0104"+
		"\2\2\u131c\u131d\5\u0272\u013a\2\u131d\u1347\3\2\2\2\u131e\u131f\7\u017c"+
		"\2\2\u131f\u1320\7\u0109\2\2\u1320\u1321\5\u026e\u0138\2\u1321\u1322\7"+
		"\u013b\2\2\u1322\u1323\7Z\2\2\u1323\u1324\5\u04d8\u026d\2\u1324\u1325"+
		"\5\u022c\u0117\2\u1325\u1326\7\u0104\2\2\u1326\u1327\5\u0272\u013a\2\u1327"+
		"\u1347\3\2\2\2\u1328\u1329\7\u017c\2\2\u1329\u132a\7\u0109\2\2\u132a\u132b"+
		"\5\u026e\u0138\2\u132b\u132c\7\u013b\2\2\u132c\u132d\7\u00dd\2\2\u132d"+
		"\u132e\5\u04d8\u026d\2\u132e\u132f\5\u02be\u0160\2\u132f\u1330\7\u0104"+
		"\2\2\u1330\u1331\5\u0272\u013a\2\u1331\u1347\3\2\2\2\u1332\u1333\7\u017c"+
		"\2\2\u1333\u1334\7\u0109\2\2\u1334\u1335\5\u026e\u0138\2\u1335\u1336\7"+
		"\u013b\2\2\u1336\u1337\5\u01b2\u00da\2\u1337\u1338\7\u010a\2\2\u1338\u1339"+
		"\5\u025e\u0130\2\u1339\u133a\7\u0104\2\2\u133a\u133b\5\u0272\u013a\2\u133b"+
		"\u1347\3\2\2\2\u133c\u133d\7\u017c\2\2\u133d\u133e\7\u0109\2\2\u133e\u133f"+
		"\5\u026e\u0138\2\u133f\u1340\7\u013b\2\2\u1340\u1341\7\u010b\2\2\u1341"+
		"\u1342\7\u0136\2\2\u1342\u1343\5\u01a0\u00d1\2\u1343\u1344\7\u0104\2\2"+
		"\u1344\u1345\5\u0272\u013a\2\u1345\u1347\3\2\2\2\u1346\u1315\3\2\2\2\u1346"+
		"\u131e\3\2\2\2\u1346\u1328\3\2\2\2\u1346\u1332\3\2\2\2\u1346\u133c\3\2"+
		"\2\2\u1347\u026d\3\2\2\2\u1348\u1349\7\u00d6\2\2\u1349\u134c\5\u00f4{"+
		"\2\u134a\u134c\3\2\2\2\u134b\u1348\3\2\2\2\u134b\u134a\3\2\2\2\u134c\u026f"+
		"\3\2\2\2\u134d\u135a\7\u0089\2\2\u134e\u135a\7\u00a6\2\2\u134f\u1350\7"+
		"\u00d8\2\2\u1350\u135a\7\u019b\2\2\u1351\u135a\7\u0178\2\2\u1352\u135a"+
		"\7\u017e\2\2\u1353\u135a\7\u019b\2\2\u1354\u135a\7\u00bb\2\2\u1355\u135a"+
		"\7\u0172\2\2\u1356\u135a\7\u019d\2\2\u1357\u135a\7\u01ae\2\2\u1358\u135a"+
		"\7\u01c7\2\2\u1359\u134d\3\2\2\2\u1359\u134e\3\2\2\2\u1359\u134f\3\2\2"+
		"\2\u1359\u1351\3\2\2\2\u1359\u1352\3\2\2\2\u1359\u1353\3\2\2\2\u1359\u1354"+
		"\3\2\2\2\u1359\u1355\3\2\2\2\u1359\u1356\3\2\2\2\u1359\u1357\3\2\2\2\u1359"+
		"\u1358\3\2\2\2\u135a\u0271\3\2\2\2\u135b\u135e\5\u04de\u0270\2\u135c\u135e"+
		"\7\u0132\2\2\u135d\u135b\3\2\2\2\u135d\u135c\3\2\2\2\u135e\u0273\3\2\2"+
		"\2\u135f\u1360\7\u00d2\2\2\u1360\u1364\5\u0276\u013c\2\u1361\u1362\7\u0124"+
		"\2\2\u1362\u1364\5\u0276\u013c\2\u1363\u135f\3\2\2\2\u1363\u1361\3\2\2"+
		"\2\u1364\u0275\3\2\2\2\u1365\u1366\7T\2\2\u1366\u1367\5\u04e2\u0272\2"+
		"\u1367\u1368\5\u027a\u013e\2\u1368\u1369\5\u03a8\u01d5\2\u1369\u13a8\3"+
		"\2\2\2\u136a\u136b\7\u0165\2\2\u136b\u136c\5\u04e2\u0272\2\u136c\u136d"+
		"\5\u027a\u013e\2\u136d\u136e\5\u03a8\u01d5\2\u136e\u13a8\3\2\2\2\u136f"+
		"\u1370\5\u04e2\u0272\2\u1370\u1371\5\u027a\u013e\2\u1371\u1372\5\u03a8"+
		"\u01d5\2\u1372\u13a8\3\2\2\2\u1373\u1374\7\u00d9\2\2\u1374\u1375\5\u04e2"+
		"\u0272\2\u1375\u1376\5\u027a\u013e\2\u1376\u1377\5\u03a8\u01d5\2\u1377"+
		"\u13a8\3\2\2\2\u1378\u1379\7l\2\2\u1379\u137a\5\u04e2\u0272\2\u137a\u137b"+
		"\5\u027a\u013e\2\u137b\u137c\5\u03a8\u01d5\2\u137c\u13a8\3\2\2\2\u137d"+
		"\u137e\5\u0278\u013d\2\u137e\u137f\5\u03a8\u01d5\2\u137f\u13a8\3\2\2\2"+
		"\u1380\u1381\7\u012a\2\2\u1381\u1382\5\u027a\u013e\2\u1382\u1383\5\u03a8"+
		"\u01d5\2\u1383\u13a8\3\2\2\2\u1384\u1385\7\u0157\2\2\u1385\u1386\5\u027a"+
		"\u013e\2\u1386\u1387\5\u03a8\u01d5\2\u1387\u13a8\3\2\2\2\u1388\u1389\7"+
		"\u00d3\2\2\u1389\u138a\5\u027a\u013e\2\u138a\u138b\5\u03a8\u01d5\2\u138b"+
		"\u13a8\3\2\2\2\u138c\u138d\7\u010c\2\2\u138d\u138e\5\u027a\u013e\2\u138e"+
		"\u138f\5\u03a8\u01d5\2\u138f\u13a8\3\2\2\2\u1390\u1391\7[\2\2\u1391\u1392"+
		"\5\u027a\u013e\2\u1392\u1393\5\u03a8\u01d5\2\u1393\u13a8\3\2\2\2\u1394"+
		"\u1395\7\u00d9\2\2\u1395\u1396\5\u027a\u013e\2\u1396\u1397\5\u03a8\u01d5"+
		"\2\u1397\u13a8\3\2\2\2\u1398\u1399\7\u00d9\2\2\u1399\u139a\7[\2\2\u139a"+
		"\u139b\5\u027a\u013e\2\u139b\u139c\5\u03a8\u01d5\2\u139c\u13a8\3\2\2\2"+
		"\u139d\u139e\7l\2\2\u139e\u139f\5\u027a\u013e\2\u139f\u13a0\5\u03a8\u01d5"+
		"\2\u13a0\u13a8\3\2\2\2\u13a1\u13a2\7l\2\2\u13a2\u13a3\7[\2\2\u13a3\u13a4"+
		"\5\u027a\u013e\2\u13a4\u13a5\5\u03a8\u01d5\2\u13a5\u13a8\3\2\2\2\u13a6"+
		"\u13a8\5\u03a8\u01d5\2\u13a7\u1365\3\2\2\2\u13a7\u136a\3\2\2\2\u13a7\u136f"+
		"\3\2\2\2\u13a7\u1373\3\2\2\2\u13a7\u1378\3\2\2\2\u13a7\u137d\3\2\2\2\u13a7"+
		"\u1380\3\2\2\2\u13a7\u1384\3\2\2\2\u13a7\u1388\3\2\2\2\u13a7\u138c\3\2"+
		"\2\2\u13a7\u1390\3\2\2\2\u13a7\u1394\3\2\2\2\u13a7\u1398\3\2\2\2\u13a7"+
		"\u139d\3\2\2\2\u13a7\u13a1\3\2\2\2\u13a7\u13a6\3\2\2\2\u13a8\u0277\3\2"+
		"\2\2\u13a9\u13aa\t\13\2\2\u13aa\u0279\3\2\2\2\u13ab\u13ae\5\u0278\u013d"+
		"\2\u13ac\u13ae\3\2\2\2\u13ad\u13ab\3\2\2\2\u13ad\u13ac\3\2\2\2\u13ae\u027b"+
		"\3\2\2\2\u13af\u13b0\7\u00e0\2\2\u13b0\u13b1\5\u0280\u0141\2\u13b1\u13b2"+
		"\7\u013b\2\2\u13b2\u13b3\5\u0286\u0144\2\u13b3\u13b4\7\u01a5\2\2\u13b4"+
		"\u13b5\5\u0288\u0145\2\u13b5\u13b6\5\u028c\u0147\2\u13b6\u027d\3\2\2\2"+
		"\u13b7\u13b8\7\u0170\2\2\u13b8\u13b9\5\u0280\u0141\2\u13b9\u13ba\7\u013b"+
		"\2\2\u13ba\u13bb\5\u0286\u0144\2\u13bb\u13bc\7\u00db\2\2\u13bc\u13bd\5"+
		"\u0288\u0145\2\u13bd\u13be\5\u0110\u0089\2\u13be\u13cb\3\2\2\2\u13bf\u13c0"+
		"\7\u0170\2\2\u13c0\u13c1\7\u00e0\2\2\u13c1\u13c2\7\u013e\2\2\u13c2\u13c3"+
		"\7\u00d6\2\2\u13c3\u13c4\5\u0280\u0141\2\u13c4\u13c5\7\u013b\2\2\u13c5"+
		"\u13c6\5\u0286\u0144\2\u13c6\u13c7\7\u00db\2\2\u13c7\u13c8\5\u0288\u0145"+
		"\2\u13c8\u13c9\5\u0110\u0089\2\u13c9\u13cb\3\2\2\2\u13ca\u13b7\3\2\2\2"+
		"\u13ca\u13bf\3\2\2\2\u13cb\u027f\3\2\2\2\u13cc\u13cd\7[\2\2\u13cd\u13ce"+
		"\7\5\2\2\u13ce\u13cf\5\u016e\u00b8\2\u13cf\u13d0\7\6\2\2\u13d0\u13dc\3"+
		"\2\2\2\u13d1\u13d2\7[\2\2\u13d2\u13d3\7\u0158\2\2\u13d3\u13d4\7\5\2\2"+
		"\u13d4\u13d5\5\u016e\u00b8\2\u13d5\u13d6\7\6\2\2\u13d6\u13dc\3\2\2\2\u13d7"+
		"\u13dc\5\u0282\u0142\2\u13d8\u13dc\7[\2\2\u13d9\u13da\7[\2\2\u13da\u13dc"+
		"\7\u0158\2\2\u13db\u13cc\3\2\2\2\u13db\u13d1\3\2\2\2\u13db\u13d7\3\2\2"+
		"\2\u13db\u13d8\3\2\2\2\u13db\u13d9\3\2\2\2\u13dc\u0281\3\2\2\2\u13dd\u13de"+
		"\b\u0142\1\2\u13de\u13df\5\u0284\u0143\2\u13df\u13e5\3\2\2\2\u13e0\u13e1"+
		"\f\4\2\2\u13e1\u13e2\7\7\2\2\u13e2\u13e4\5\u0284\u0143\2\u13e3\u13e0\3"+
		"\2\2\2\u13e4\u13e7\3\2\2\2\u13e5\u13e3\3\2\2\2\u13e5\u13e6\3\2\2\2\u13e6"+
		"\u0283\3\2\2\2\u13e7\u13e5\3\2\2\2\u13e8\u13e9\5\u04e4\u0273\2\u13e9\u13ea"+
		"\5\u016c\u00b7\2\u13ea\u13f2\3\2\2\2\u13eb\u13ec\7\u017d\2\2\u13ec\u13f2"+
		"\5\u016c\u00b7\2\u13ed\u13ee\7\u0163\2\2\u13ee\u13f2\5\u016c\u00b7\2\u13ef"+
		"\u13f0\7\u0098\2\2\u13f0\u13f2\5\u016c\u00b7\2\u13f1\u13e8\3\2\2\2\u13f1"+
		"\u13eb\3\2\2\2\u13f1\u13ed\3\2\2\2\u13f1\u13ef\3\2\2\2\u13f2\u0285\3\2"+
		"\2\2\u13f3\u1420\5\u04c6\u0264\2\u13f4\u13f5\7\u019b\2\2\u13f5\u1420\5"+
		"\u04c6\u0264\2\u13f6\u13f7\7\u017e\2\2\u13f7\u1420\5\u04c6\u0264\2\u13f8"+
		"\u13f9\7\u00d8\2\2\u13f9\u13fa\7\u00a5\2\2\u13fa\u13fb\7\u01d0\2\2\u13fb"+
		"\u1420\5\u04ca\u0266\2\u13fc\u13fd\7\u00d8\2\2\u13fd\u13fe\7\u0181\2\2"+
		"\u13fe\u1420\5\u04ca\u0266\2\u13ff\u1400\7\u00dd\2\2\u1400\u1420\5\u028e"+
		"\u0148\2\u1401\u1402\7\u00a6\2\2\u1402\u1420\5\u04ca\u0266\2\u1403\u1404"+
		"\7\u00bb\2\2\u1404\u1420\5\u025c\u012f\2\u1405\u1406\7\u010a\2\2\u1406"+
		"\u1420\5\u04ca\u0266\2\u1407\u1408\7\u010b\2\2\u1408\u1409\7\u0136\2\2"+
		"\u1409\u1420\5\u01a2\u00d2\2\u140a\u140b\7\u0178\2\2\u140b\u1420\5\u04ca"+
		"\u0266\2\u140c\u140d\7\u019d\2\2\u140d\u1420\5\u04ca\u0266\2\u140e\u140f"+
		"\7\u01ae\2\2\u140f\u1420\5\u025c\u012f\2\u1410\u1411\7[\2\2\u1411\u1412"+
		"\7\u019c\2\2\u1412\u1413\7\u00ef\2\2\u1413\u1414\7\u0178\2\2\u1414\u1420"+
		"\5\u04ca\u0266\2\u1415\u1416\7[\2\2\u1416\u1417\7\u017f\2\2\u1417\u1418"+
		"\7\u00ef\2\2\u1418\u1419\7\u0178\2\2\u1419\u1420\5\u04ca\u0266\2\u141a"+
		"\u141b\7[\2\2\u141b\u141c\7\u00de\2\2\u141c\u141d\7\u00ef\2\2\u141d\u141e"+
		"\7\u0178\2\2\u141e\u1420\5\u04ca\u0266\2\u141f\u13f3\3\2\2\2\u141f\u13f4"+
		"\3\2\2\2\u141f\u13f6\3\2\2\2\u141f\u13f8\3\2\2\2\u141f\u13fc\3\2\2\2\u141f"+
		"\u13ff\3\2\2\2\u141f\u1401\3\2\2\2\u141f\u1403\3\2\2\2\u141f\u1405\3\2"+
		"\2\2\u141f\u1407\3\2\2\2\u141f\u140a\3\2\2\2\u141f\u140c\3\2\2\2\u141f"+
		"\u140e\3\2\2\2\u141f\u1410\3\2\2\2\u141f\u1415\3\2\2\2\u141f\u141a\3\2"+
		"\2\2\u1420\u0287\3\2\2\2\u1421\u1422\b\u0145\1\2\u1422\u1423\5\u028a\u0146"+
		"\2\u1423\u1429\3\2\2\2\u1424\u1425\f\4\2\2\u1425\u1426\7\7\2\2\u1426\u1428"+
		"\5\u028a\u0146\2\u1427\u1424\3\2\2\2\u1428\u142b\3\2\2\2\u1429\u1427\3"+
		"\2\2\2\u1429\u142a\3\2\2\2\u142a\u0289\3\2\2\2\u142b\u1429\3\2\2\2\u142c"+
		"\u1430\5\u04e0\u0271\2\u142d\u142e\7\u00e3\2\2\u142e\u1430\5\u04e0\u0271"+
		"\2\u142f\u142c\3\2\2\2\u142f\u142d\3\2\2\2\u1430\u028b\3\2\2\2\u1431\u1432"+
		"\7\u01cd\2\2\u1432\u1433\7\u00e0\2\2\u1433\u1436\7\u013e\2\2\u1434\u1436"+
		"\3\2\2\2\u1435\u1431\3\2\2\2\u1435\u1434\3\2\2\2\u1436\u028d\3\2\2\2\u1437"+
		"\u1438\b\u0148\1\2\u1438\u1439\5\u0290\u0149\2\u1439\u143f\3\2\2\2\u143a"+
		"\u143b\f\4\2\2\u143b\u143c\7\7\2\2\u143c\u143e\5\u0290\u0149\2\u143d\u143a"+
		"\3\2\2\2\u143e\u1441\3\2\2\2\u143f\u143d\3\2\2\2\u143f\u1440\3\2\2\2\u1440"+
		"\u028f\3\2\2\2\u1441\u143f\3\2\2\2\u1442\u1443\5\u04d8\u026d\2\u1443\u1444"+
		"\5\u02be\u0160\2\u1444\u0291\3\2\2\2\u1445\u1446\7\u00e0\2\2\u1446\u1447"+
		"\5\u0282\u0142\2\u1447\u1448\7\u01a5\2\2\u1448\u1449\5\u04ca\u0266\2\u1449"+
		"\u144a\5\u0296\u014c\2\u144a\u144b\5\u0298\u014d\2\u144b\u0293\3\2\2\2"+
		"\u144c\u144d\7\u0170\2\2\u144d\u144e\5\u0282\u0142\2\u144e\u144f\7\u00db"+
		"\2\2\u144f\u1450\5\u04ca\u0266\2\u1450\u1451\5\u0298\u014d\2\u1451\u1452"+
		"\5\u0110\u0089\2\u1452\u145e\3\2\2\2\u1453\u1454\7\u0170\2\2\u1454\u1455"+
		"\7X\2\2\u1455\u1456\7\u013e\2\2\u1456\u1457\7\u00d6\2\2\u1457\u1458\5"+
		"\u0282\u0142\2\u1458\u1459\7\u00db\2\2\u1459\u145a\5\u04ca\u0266\2\u145a"+
		"\u145b\5\u0298\u014d\2\u145b\u145c\5\u0110\u0089\2\u145c\u145e\3\2\2\2"+
		"\u145d\u144c\3\2\2\2\u145d\u1453\3\2\2\2\u145e\u0295\3\2\2\2\u145f\u1460"+
		"\7\u01cd\2\2\u1460\u1461\7X\2\2\u1461\u1464\7\u013e\2\2\u1462\u1464\3"+
		"\2\2\2\u1463\u145f\3\2\2\2\u1463\u1462\3\2\2\2\u1464\u0297\3\2\2\2\u1465"+
		"\u1466\7\u00e1\2\2\u1466\u1467\7u\2\2\u1467\u146a\5\u04e0\u0271\2\u1468"+
		"\u146a\3\2\2\2\u1469\u1465\3\2\2\2\u1469\u1468\3\2\2\2\u146a\u0299\3\2"+
		"\2\2\u146b\u146c\7]\2\2\u146c\u146d\7\u00ac\2\2\u146d\u146e\7\u0158\2"+
		"\2\u146e\u146f\5\u029c\u014f\2\u146f\u1470\5\u02a0\u0151\2\u1470\u029b"+
		"\3\2\2\2\u1471\u1476\b\u014f\1\2\u1472\u1473\f\4\2\2\u1473\u1475\5\u029e"+
		"\u0150\2\u1474\u1472\3\2\2\2\u1475\u1478\3\2\2\2\u1476\u1474\3\2\2\2\u1476"+
		"\u1477\3\2\2\2\u1477\u029d\3\2\2\2\u1478\u1476\3\2\2\2\u1479\u147a\7\u00ef"+
		"\2\2\u147a\u147b\7\u0178\2\2\u147b\u1483\5\u04ca\u0266\2\u147c\u147d\7"+
		"\u00d6\2\2\u147d\u147e\7\u0172\2\2\u147e\u1483\5\u04ca\u0266\2\u147f\u1480"+
		"\7\u00d6\2\2\u1480\u1481\7\u01ba\2\2\u1481\u1483\5\u04ca\u0266\2\u1482"+
		"\u1479\3\2\2\2\u1482\u147c\3\2\2\2\u1482\u147f\3\2\2\2\u1483\u029f\3\2"+
		"\2\2\u1484\u1485\7\u00e0\2\2\u1485\u1486\5\u0280\u0141\2\u1486\u1487\7"+
		"\u013b\2\2\u1487\u1488\5\u02a2\u0152\2\u1488\u1489\7\u01a5\2\2\u1489\u148a"+
		"\5\u0288\u0145\2\u148a\u148b\5\u028c\u0147\2\u148b\u14a0\3\2\2\2\u148c"+
		"\u148d\7\u0170\2\2\u148d\u148e\5\u0280\u0141\2\u148e\u148f\7\u013b\2\2"+
		"\u148f\u1490\5\u02a2\u0152\2\u1490\u1491\7\u00db\2\2\u1491\u1492\5\u0288"+
		"\u0145\2\u1492\u1493\5\u0110\u0089\2\u1493\u14a0\3\2\2\2\u1494\u1495\7"+
		"\u0170\2\2\u1495\u1496\7\u00e0\2\2\u1496\u1497\7\u013e\2\2\u1497\u1498"+
		"\7\u00d6\2\2\u1498\u1499\5\u0280\u0141\2\u1499\u149a\7\u013b\2\2\u149a"+
		"\u149b\5\u02a2\u0152\2\u149b\u149c\7\u00db\2\2\u149c\u149d\5\u0288\u0145"+
		"\2\u149d\u149e\5\u0110\u0089\2\u149e\u14a0\3\2\2\2\u149f\u1484\3\2\2\2"+
		"\u149f\u148c\3\2\2\2\u149f\u1494\3\2\2\2\u14a0\u02a1\3\2\2\2\u14a1\u14a2"+
		"\t\f\2\2\u14a2\u02a3\3\2\2\2\u14a3\u14a4\7\u0098\2\2\u14a4\u14a5\5\u02a6"+
		"\u0154\2\u14a5\u14a6\7\u00f2\2\2\u14a6\u14a7\5\u02a8\u0155\2\u14a7\u14a8"+
		"\5\u02aa\u0156\2\u14a8\u14a9\7\u013b\2\2\u14a9\u14aa\5\u04c8\u0265\2\u14aa"+
		"\u14ab\5\u02ac\u0157\2\u14ab\u14ac\7\5\2\2\u14ac\u14ad\5\u02ae\u0158\2"+
		"\u14ad\u14ae\7\6\2\2\u14ae\u14af\5\u0118\u008d\2\u14af\u14b0\5\u0188\u00c5"+
		"\2\u14b0\u14b1\5\u0414\u020b\2\u14b1\u02a5\3\2\2\2\u14b2\u14b5\7\u01b4"+
		"\2\2\u14b3\u14b5\3\2\2\2\u14b4\u14b2\3\2\2\2\u14b4\u14b3\3\2\2\2\u14b5"+
		"\u02a7\3\2\2\2\u14b6\u14b9\7\u008e\2\2\u14b7\u14b9\3\2\2\2\u14b8\u14b6"+
		"\3\2\2\2\u14b8\u14b7\3\2\2\2\u14b9\u02a9\3\2\2\2\u14ba\u14bd\5\u04d4\u026b"+
		"\2\u14bb\u14bd\3\2\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bb\3\2\2\2\u14bd\u02ab"+
		"\3\2\2\2\u14be\u14bf\7\u01bb\2\2\u14bf\u14c2\5\u04d0\u0269\2\u14c0\u14c2"+
		"\3\2\2\2\u14c1\u14be\3\2\2\2\u14c1\u14c0\3\2\2\2\u14c2\u02ad\3\2\2\2\u14c3"+
		"\u14c4\b\u0158\1\2\u14c4\u14c5\5\u02b0\u0159\2\u14c5\u14cb\3\2\2\2\u14c6"+
		"\u14c7\f\4\2\2\u14c7\u14c8\7\7\2\2\u14c8\u14ca\5\u02b0\u0159\2\u14c9\u14c6"+
		"\3\2\2\2\u14ca\u14cd\3\2\2\2\u14cb\u14c9\3\2\2\2\u14cb\u14cc\3\2\2\2\u14cc"+
		"\u02af\3\2\2\2\u14cd\u14cb\3\2\2\2\u14ce\u14cf\7\5\2\2\u14cf\u14d0\5\u044e"+
		"\u0228\2\u14d0\u14d1\7\6\2\2\u14d1\u14d2\5\u02b2\u015a\2\u14d2\u14d3\5"+
		"\u02b4\u015b\2\u14d3\u14d4\5\u02b6\u015c\2\u14d4\u14d5\5\u02b8\u015d\2"+
		"\u14d5\u14e3\3\2\2\2\u14d6\u14d7\5\u04e4\u0273\2\u14d7\u14d8\5\u02b2\u015a"+
		"\2\u14d8\u14d9\5\u02b4\u015b\2\u14d9\u14da\5\u02b6\u015c\2\u14da\u14db"+
		"\5\u02b8\u015d\2\u14db\u14e3\3\2\2\2\u14dc\u14dd\5\u0454\u022b\2\u14dd"+
		"\u14de\5\u02b2\u015a\2\u14de\u14df\5\u02b4\u015b\2\u14df\u14e0\5\u02b6"+
		"\u015c\2\u14e0\u14e1\5\u02b8\u015d\2\u14e1\u14e3\3\2\2\2\u14e2\u14ce\3"+
		"\2\2\2\u14e2\u14d6\3\2\2\2\u14e2\u14dc\3\2\2\2\u14e3\u02b1\3\2\2\2\u14e4"+
		"\u14e5\7\u0087\2\2\u14e5\u14e8\5\u025e\u0130\2\u14e6\u14e8\3\2\2\2\u14e7"+
		"\u14e4\3\2\2\2\u14e7\u14e6\3\2\2\2\u14e8\u02b3\3\2\2\2\u14e9\u14ee\5\u025e"+
		"\u0130\2\u14ea\u14eb\7\u01bb\2\2\u14eb\u14ee\5\u025e\u0130\2\u14ec\u14ee"+
		"\3\2\2\2\u14ed\u14e9\3\2\2\2\u14ed\u14ea\3\2\2\2\u14ed\u14ec\3\2\2\2\u14ee"+
		"\u02b5\3\2\2\2\u14ef\u14f3\7e\2\2\u14f0\u14f3\7\u00b4\2\2\u14f1\u14f3"+
		"\3\2\2\2\u14f2\u14ef\3\2\2\2\u14f2\u14f0\3\2\2\2\u14f2\u14f1\3\2\2\2\u14f3"+
		"\u02b7\3\2\2\2\u14f4\u14f8\7P\2\2\u14f5\u14f8\7Q\2\2\u14f6\u14f8\3\2\2"+
		"\2\u14f7\u14f4\3\2\2\2\u14f7\u14f5\3\2\2\2\u14f7\u14f6\3\2\2\2\u14f8\u02b9"+
		"\3\2\2\2\u14f9\u14fa\7\u0098\2\2\u14fa\u14fb\5\u02bc\u015f\2\u14fb\u14fc"+
		"\7\u00dd\2\2\u14fc\u14fd\5\u04d8\u026d\2\u14fd\u14fe\5\u02c2\u0162\2\u14fe"+
		"\u14ff\7\u016f\2\2\u14ff\u1500\7\u019b\2\2\u1500\u1501\7\5\2\2\u1501\u1502"+
		"\5\u02de\u0170\2\u1502\u1503\7\6\2\2\u1503\u1504\5\u02d2\u016a\2\u1504"+
		"\u1505\5\u02da\u016e\2\u1505\u1519\3\2\2\2\u1506\u1507\7\u0098\2\2\u1507"+
		"\u1508\5\u02bc\u015f\2\u1508\u1509\7\u00dd\2\2\u1509\u150a\5\u04d8\u026d"+
		"\2\u150a\u150b\5\u02c2\u0162\2\u150b\u150c\7\u016f\2\2\u150c\u150d\5\u02cc"+
		"\u0167\2\u150d\u150e\5\u02d2\u016a\2\u150e\u150f\5\u02da\u016e\2\u150f"+
		"\u1519\3\2\2\2\u1510\u1511\7\u0098\2\2\u1511\u1512\5\u02bc\u015f\2\u1512"+
		"\u1513\7\u00dd\2\2\u1513\u1514\5\u04d8\u026d\2\u1514\u1515\5\u02c2\u0162"+
		"\2\u1515\u1516\5\u02d2\u016a\2\u1516\u1517\5\u02da\u016e\2\u1517\u1519"+
		"\3\2\2\2\u1518\u14f9\3\2\2\2\u1518\u1506\3\2\2\2\u1518\u1510\3\2\2\2\u1519"+
		"\u02bb\3\2\2\2\u151a\u151b\7\u0140\2\2\u151b\u151e\7\u0169\2\2\u151c\u151e"+
		"\3\2\2\2\u151d\u151a\3\2\2\2\u151d\u151c\3\2\2\2\u151e\u02bd\3\2\2\2\u151f"+
		"\u1520\7\5\2\2\u1520\u1526\7\6\2\2\u1521\u1522\7\5\2\2\u1522\u1523\5\u02c0"+
		"\u0161\2\u1523\u1524\7\6\2\2\u1524\u1526\3\2\2\2\u1525\u151f\3\2\2\2\u1525"+
		"\u1521\3\2\2\2\u1526\u02bf\3\2\2\2\u1527\u1528\b\u0161\1\2\u1528\u1529"+
		"\5\u02c6\u0164\2\u1529\u152f\3\2\2\2\u152a\u152b\f\4\2\2\u152b\u152c\7"+
		"\7\2\2\u152c\u152e\5\u02c6\u0164\2\u152d\u152a\3\2\2\2\u152e\u1531\3\2"+
		"\2\2\u152f\u152d\3\2\2\2\u152f\u1530\3\2\2\2\u1530\u02c1\3\2\2\2\u1531"+
		"\u152f\3\2\2\2\u1532\u1533\7\5\2\2\u1533\u1539\7\6\2\2\u1534\u1535\7\5"+
		"\2\2\u1535\u1536\5\u02c4\u0163\2\u1536\u1537\7\6\2\2\u1537\u1539\3\2\2"+
		"\2\u1538\u1532\3\2\2\2\u1538\u1534\3\2\2\2\u1539\u02c3\3\2\2\2\u153a\u153b"+
		"\b\u0163\1\2\u153b\u153c\5\u02d0\u0169\2\u153c\u1542\3\2\2\2\u153d\u153e"+
		"\f\4\2\2\u153e\u153f\7\7\2\2\u153f\u1541\5\u02d0\u0169\2\u1540\u153d\3"+
		"\2\2\2\u1541\u1544\3\2\2\2\u1542\u1540\3\2\2\2\u1542\u1543\3\2\2\2\u1543"+
		"\u02c5\3\2\2\2\u1544\u1542\3\2\2\2\u1545\u1546\5\u02c8\u0165\2\u1546\u1547"+
		"\5\u02ca\u0166\2\u1547\u1548\5\u02ce\u0168\2\u1548\u1555\3\2\2\2\u1549"+
		"\u154a\5\u02ca\u0166\2\u154a\u154b\5\u02c8\u0165\2\u154b\u154c\5\u02ce"+
		"\u0168\2\u154c\u1555\3\2\2\2\u154d\u154e\5\u02ca\u0166\2\u154e\u154f\5"+
		"\u02ce\u0168\2\u154f\u1555\3\2\2\2\u1550\u1551\5\u02c8\u0165\2\u1551\u1552"+
		"\5\u02ce\u0168\2\u1552\u1555\3\2\2\2\u1553\u1555\5\u02ce\u0168\2\u1554"+
		"\u1545\3\2\2\2\u1554\u1549\3\2\2\2\u1554\u154d\3\2\2\2\u1554\u1550\3\2"+
		"\2\2\u1554\u1553\3\2\2\2\u1555\u02c7\3\2\2\2\u1556\u155d\7\u00ef\2\2\u1557"+
		"\u155d\7\u0142\2\2\u1558\u155d\7\u00f9\2\2\u1559\u155a\7\u00ef\2\2\u155a"+
		"\u155d\7\u0142\2\2\u155b\u155d\7\u01c3\2\2\u155c\u1556\3\2\2\2\u155c\u1557"+
		"\3\2\2\2\u155c\u1558\3\2\2\2\u155c\u1559\3\2\2\2\u155c\u155b\3\2\2\2\u155d"+
		"\u02c9\3\2\2\2\u155e\u155f\5\u04e6\u0274\2\u155f\u02cb\3\2\2\2\u1560\u1561"+
		"\5\u02ce\u0168\2\u1561\u02cd\3\2\2\2\u1562\u1563\5\u04e6\u0274\2\u1563"+
		"\u1564\5\u0260\u0131\2\u1564\u1565\7\b\2\2\u1565\u1566\7\u01ae\2\2\u1566"+
		"\u156f\3\2\2\2\u1567\u1568\7\u0185\2\2\u1568\u1569\5\u04e6\u0274\2\u1569"+
		"\u156a\5\u0260\u0131\2\u156a\u156b\7\b\2\2\u156b\u156c\7\u01ae\2\2\u156c"+
		"\u156f\3\2\2\2\u156d\u156f\5\u041e\u0210\2\u156e\u1562\3\2\2\2\u156e\u1567"+
		"\3\2\2\2\u156e\u156d\3\2\2\2\u156f\u02cf\3\2\2\2\u1570\u1571\5\u02c6\u0164"+
		"\2\u1571\u1572\7\t\2\2\u1572\u1573\5\u044e\u0228\2\u1573\u157a\3\2\2\2"+
		"\u1574\u1575\5\u02c6\u0164\2\u1575\u1576\7\u00ac\2\2\u1576\u1577\5\u044e"+
		"\u0228\2\u1577\u157a\3\2\2\2\u1578\u157a\5\u02c6\u0164\2\u1579\u1570\3"+
		"\2\2\2\u1579\u1574\3\2\2\2\u1579\u1578\3\2\2\2\u157a\u02d1\3\2\2\2\u157b"+
		"\u157c\b\u016a\1\2\u157c\u157d\5\u02d6\u016c\2\u157d\u1582\3\2\2\2\u157e"+
		"\u157f\f\4\2\2\u157f\u1581\5\u02d6\u016c\2\u1580\u157e\3\2\2\2\u1581\u1584"+
		"\3\2\2\2\u1582\u1580\3\2\2\2\u1582\u1583\3\2\2\2\u1583\u02d3\3\2\2\2\u1584"+
		"\u1582\3\2\2\2\u1585\u1586\7\u0097\2\2\u1586\u15a5\5\u01a0\u00d1\2\u1587"+
		"\u1588\7\u0175\2\2\u1588\u15a5\5\u01a0\u00d1\2\u1589\u15a5\5\u00fa~\2"+
		"\u158a\u158b\7w\2\2\u158b\u158c\7\u013b\2\2\u158c\u158d\7\u0132\2\2\u158d"+
		"\u15a5\7\u00fa\2\2\u158e\u158f\7\u016f\2\2\u158f\u1590\7\u0132\2\2\u1590"+
		"\u1591\7\u013b\2\2\u1591\u1592\7\u0132\2\2\u1592\u15a5\7\u00fa\2\2\u1593"+
		"\u15a5\7\u0195\2\2\u1594\u15a5\7\u00ed\2\2\u1595\u15a5\7\u018d\2\2\u1596"+
		"\u15a5\7\u01c8\2\2\u1597\u1598\7\u00ce\2\2\u1598\u1599\7\u017c\2\2\u1599"+
		"\u15a5\7\u00b0\2\2\u159a\u159b\7\u00ce\2\2\u159b\u159c\7\u017c\2\2\u159c"+
		"\u15a5\7\u0103\2\2\u159d\u159e\7\u017c\2\2\u159e\u15a5\7\u00b0\2\2\u159f"+
		"\u15a0\7\u017c\2\2\u15a0\u15a5\7\u0103\2\2\u15a1\u15a5\7\u0110\2\2\u15a2"+
		"\u15a3\7\u012d\2\2\u15a3\u15a5\7\u0110\2\2\u15a4\u1585\3\2\2\2\u15a4\u1587"+
		"\3\2\2\2\u15a4\u1589\3\2\2\2\u15a4\u158a\3\2\2\2\u15a4\u158e\3\2\2\2\u15a4"+
		"\u1593\3\2\2\2\u15a4\u1594\3\2\2\2\u15a4\u1595\3\2\2\2\u15a4\u1596\3\2"+
		"\2\2\u15a4\u1597\3\2\2\2\u15a4\u159a\3\2\2\2\u15a4\u159d\3\2\2\2\u15a4"+
		"\u159f\3\2\2\2\u15a4\u15a1\3\2\2\2\u15a4\u15a2\3\2\2\2\u15a5\u02d5\3\2"+
		"\2\2\u15a6\u15a7\7d\2\2\u15a7\u15ad\5\u02d8\u016d\2\u15a8\u15a9\7\u010a"+
		"\2\2\u15a9\u15ad\5\u00f4{\2\u15aa\u15ad\5\u02d4\u016b\2\u15ab\u15ad\7"+
		"\u01cc\2\2\u15ac\u15a6\3\2\2\2\u15ac\u15a8\3\2\2\2\u15ac\u15aa\3\2\2\2"+
		"\u15ac\u15ab\3\2\2\2\u15ad\u02d7\3\2\2\2\u15ae\u15af\5\u04de\u0270\2\u15af"+
		"\u15b0\7\7\2\2\u15b0\u15b1\5\u04de\u0270\2\u15b1\u15b4\3\2\2\2\u15b2\u15b4"+
		"\5\u04de\u0270\2\u15b3\u15ae\3\2\2\2\u15b3\u15b2\3\2\2\2\u15b4\u02d9\3"+
		"\2\2\2\u15b5\u15b6\7\u01cd\2\2\u15b6\u15b9\5\u0224\u0113\2\u15b7\u15b9"+
		"\3\2\2\2\u15b8\u15b5\3\2\2\2\u15b8\u15b7\3\2\2\2\u15b9\u02db\3\2\2\2\u15ba"+
		"\u15bb\5\u02ca\u0166\2\u15bb\u15bc\5\u02ce\u0168\2\u15bc\u02dd\3\2\2\2"+
		"\u15bd\u15be\b\u0170\1\2\u15be\u15bf\5\u02dc\u016f\2\u15bf\u15c5\3\2\2"+
		"\2\u15c0\u15c1\f\4\2\2\u15c1\u15c2\7\7\2\2\u15c2\u15c4\5\u02dc\u016f\2"+
		"\u15c3\u15c0\3\2\2\2\u15c4\u15c7\3\2\2\2\u15c5\u15c3\3\2\2\2\u15c5\u15c6"+
		"\3\2\2\2\u15c6\u02df\3\2\2\2\u15c7\u15c5\3\2\2\2\u15c8\u15c9\7]\2\2\u15c9"+
		"\u15ca\7\u00dd\2\2\u15ca\u15cb\5\u0290\u0149\2\u15cb\u15cc\5\u02e2\u0172"+
		"\2\u15cc\u15cd\5\u02e4\u0173\2\u15cd\u02e1\3\2\2\2\u15ce\u15cf\b\u0172"+
		"\1\2\u15cf\u15d0\5\u02d4\u016b\2\u15d0\u15d5\3\2\2\2\u15d1\u15d2\f\4\2"+
		"\2\u15d2\u15d4\5\u02d4\u016b\2\u15d3\u15d1\3\2\2\2\u15d4\u15d7\3\2\2\2"+
		"\u15d5\u15d3\3\2\2\2\u15d5\u15d6\3\2\2\2\u15d6\u02e3\3\2\2\2\u15d7\u15d5"+
		"\3\2\2\2\u15d8\u15db\7\u016d\2\2\u15d9\u15db\3\2\2\2\u15da\u15d8\3\2\2"+
		"\2\u15da\u15d9\3\2\2\2\u15db\u02e5\3\2\2\2\u15dc\u15dd\7\u00bd\2\2\u15dd"+
		"\u15de\7\u00dd\2\2\u15de\u15df\5\u04d8\u026d\2\u15df\u15e0\5\u02be\u0160"+
		"\2\u15e0\u15e1\5\u0110\u0089\2\u15e1\u15eb\3\2\2\2\u15e2\u15e3\7\u00bd"+
		"\2\2\u15e3\u15e4\7\u00dd\2\2\u15e4\u15e5\7\u00ea\2\2\u15e5\u15e6\7\u00cb"+
		"\2\2\u15e6\u15e7\5\u04d8\u026d\2\u15e7\u15e8\5\u02be\u0160\2\u15e8\u15e9"+
		"\5\u0110\u0089\2\u15e9\u15eb\3\2\2\2\u15ea\u15dc\3\2\2\2\u15ea\u15e2\3"+
		"\2\2\2\u15eb\u02e7\3\2\2\2\u15ec\u15ed\7\u00bd\2\2\u15ed\u15ee\7Z\2\2"+
		"\u15ee\u15ef\5\u04d8\u026d\2\u15ef\u15f0\5\u022c\u0117\2\u15f0\u15f1\5"+
		"\u0110\u0089\2\u15f1\u15fb\3\2\2\2\u15f2\u15f3\7\u00bd\2\2\u15f3\u15f4"+
		"\7Z\2\2\u15f4\u15f5\7\u00ea\2\2\u15f5\u15f6\7\u00cb\2\2\u15f6\u15f7\5"+
		"\u04d8\u026d\2\u15f7\u15f8\5\u022c\u0117\2\u15f8\u15f9\5\u0110\u0089\2"+
		"\u15f9\u15fb\3\2\2\2\u15fa\u15ec\3\2\2\2\u15fa\u15f2\3\2\2\2\u15fb\u02e9"+
		"\3\2\2\2\u15fc\u15fd\7\u00bd\2\2\u15fd\u15fe\7\u013d\2\2\u15fe\u15ff\5"+
		"\u02ee\u0178\2\u15ff\u1600\5\u02ec\u0177\2\u1600\u1601\5\u0110\u0089\2"+
		"\u1601\u160b\3\2\2\2\u1602\u1603\7\u00bd\2\2\u1603\u1604\7\u013d\2\2\u1604"+
		"\u1605\7\u00ea\2\2\u1605\u1606\7\u00cb\2\2\u1606\u1607\5\u02ee\u0178\2"+
		"\u1607\u1608\5\u02ec\u0177\2\u1608\u1609\5\u0110\u0089\2\u1609\u160b\3"+
		"\2\2\2\u160a\u15fc\3\2\2\2\u160a\u1602\3\2\2\2\u160b\u02eb\3\2\2\2\u160c"+
		"\u160d\7\5\2\2\u160d\u160e\5\u041e\u0210\2\u160e\u160f\7\6\2\2\u160f\u1623"+
		"\3\2\2\2\u1610\u1611\7\5\2\2\u1611\u1612\7\u012c\2\2\u1612\u1613\7\7\2"+
		"\2\u1613\u1614\5\u041e\u0210\2\u1614\u1615\7\6\2\2\u1615\u1623\3\2\2\2"+
		"\u1616\u1617\7\5\2\2\u1617\u1618\5\u041e\u0210\2\u1618\u1619\7\7\2\2\u1619"+
		"\u161a\7\u012c\2\2\u161a\u161b\7\6\2\2\u161b\u1623\3\2\2\2\u161c\u161d"+
		"\7\5\2\2\u161d\u161e\5\u041e\u0210\2\u161e\u161f\7\7\2\2\u161f\u1620\5"+
		"\u041e\u0210\2\u1620\u1621\7\6\2\2\u1621\u1623\3\2\2\2\u1622\u160c\3\2"+
		"\2\2\u1622\u1610\3\2\2\2\u1622\u1616\3\2\2\2\u1622\u161c\3\2\2\2\u1623"+
		"\u02ed\3\2\2\2\u1624\u1625\5\u04e4\u0273\2\u1625\u1626\7\f\2\2\u1626\u1627"+
		"\5\u02ee\u0178\2\u1627\u162a\3\2\2\2\u1628\u162a\5\u047e\u0240\2\u1629"+
		"\u1624\3\2\2\2\u1629\u1628\3\2\2\2\u162a\u02ef\3\2\2\2\u162b\u162c\7\u00b9"+
		"\2\2\u162c\u162d\5\u02f2\u017a\2\u162d\u02f1\3\2\2\2\u162e\u162f\b\u017a"+
		"\1\2\u162f\u1630\5\u02f4\u017b\2\u1630\u1635\3\2\2\2\u1631\u1632\f\4\2"+
		"\2\u1632\u1634\5\u02f4\u017b\2\u1633\u1631\3\2\2\2\u1634\u1637\3\2\2\2"+
		"\u1635\u1633\3\2\2\2\u1635\u1636\3\2\2\2\u1636\u02f3\3\2\2\2\u1637\u1635"+
		"\3\2\2\2\u1638\u163c\5\u04de\u0270\2\u1639\u163a\7\u010a\2\2\u163a\u163c"+
		"\5\u00f4{\2\u163b\u1638\3\2\2\2\u163b\u1639\3\2\2\2\u163c\u02f5\3\2\2"+
		"\2\u163d\u163e\7\u0098\2\2\u163e\u163f\7{\2\2\u163f\u1640\7\5\2\2\u1640"+
		"\u1641\5\u041e\u0210\2\u1641\u1642\7d\2\2\u1642\u1643\5\u041e\u0210\2"+
		"\u1643\u1644\7\6\2\2\u1644\u1645\7\u01cd\2\2\u1645\u1646\7\u00dd\2\2\u1646"+
		"\u1647\5\u0290\u0149\2\u1647\u1648\5\u02f8\u017d\2\u1648\u1660\3\2\2\2"+
		"\u1649\u164a\7\u0098\2\2\u164a\u164b\7{\2\2\u164b\u164c\7\5\2\2\u164c"+
		"\u164d\5\u041e\u0210\2\u164d\u164e\7d\2\2\u164e\u164f\5\u041e\u0210\2"+
		"\u164f\u1650\7\6\2\2\u1650\u1651\7\u01ce\2\2\u1651\u1652\7\u00dd\2\2\u1652"+
		"\u1653\5\u02f8\u017d\2\u1653\u1660\3\2\2\2\u1654\u1655\7\u0098\2\2\u1655"+
		"\u1656\7{\2\2\u1656\u1657\7\5\2\2\u1657\u1658\5\u041e\u0210\2\u1658\u1659"+
		"\7d\2\2\u1659\u165a\5\u041e\u0210\2\u165a\u165b\7\6\2\2\u165b\u165c\7"+
		"\u01cd\2\2\u165c\u165d\7\u00f9\2\2\u165d\u165e\5\u02f8\u017d\2\u165e\u1660"+
		"\3\2\2\2\u165f\u163d\3\2\2\2\u165f\u1649\3\2\2\2\u165f\u1654\3\2\2\2\u1660"+
		"\u02f7\3\2\2\2\u1661\u1662\7d\2\2\u1662\u1667\7\u00ee\2\2\u1663\u1664"+
		"\7d\2\2\u1664\u1667\7g\2\2\u1665\u1667\3\2\2\2\u1666\u1661\3\2\2\2\u1666"+
		"\u1663\3\2\2\2\u1666\u1665\3\2\2\2\u1667\u02f9\3\2\2\2\u1668\u1669\7\u00bd"+
		"\2\2\u1669\u166a\7{\2\2\u166a\u166b\5\u02fc\u017f\2\u166b\u166c\7\5\2"+
		"\2\u166c\u166d\5\u041e\u0210\2\u166d\u166e\7d\2\2\u166e\u166f\5\u041e"+
		"\u0210\2\u166f\u1670\7\6\2\2\u1670\u1671\5\u0110\u0089\2\u1671\u02fb\3"+
		"\2\2\2\u1672\u1673\7\u00ea\2\2\u1673\u1676\7\u00cb\2\2\u1674\u1676\3\2"+
		"\2\2\u1675\u1672\3\2\2\2\u1675\u1674\3\2\2\2\u1676\u02fd\3\2\2\2\u1677"+
		"\u1678\7\u0164\2\2\u1678\u1679\5\u0300\u0181\2\u1679\u167a\5\u04c8\u0265"+
		"\2\u167a\u167b\5\u0302\u0182\2\u167b\u1687\3\2\2\2\u167c\u167d\7\u0164"+
		"\2\2\u167d\u167e\7\u019a\2\2\u167e\u167f\5\u04cc\u0267\2\u167f\u1680\5"+
		"\u0302\u0182\2\u1680\u1687\3\2\2\2\u1681\u1682\7\u0164\2\2\u1682\u1683"+
		"\7\u00a6\2\2\u1683\u1684\5\u04cc\u0267\2\u1684\u1685\5\u0302\u0182\2\u1685"+
		"\u1687\3\2\2\2\u1686\u1677\3\2\2\2\u1686\u167c\3\2\2\2\u1686\u1681\3\2"+
		"\2\2\u1687\u02ff\3\2\2\2\u1688\u1689\t\r\2\2\u1689\u0301\3\2\2\2\u168a"+
		"\u168d\7\u00d7\2\2\u168b\u168d\3\2\2\2\u168c\u168a\3\2\2\2\u168c\u168b"+
		"\3\2\2\2\u168d\u0303\3\2\2\2\u168e\u168f\7]\2\2\u168f\u1690\7\u019b\2"+
		"\2\u1690\u1691\5\u040c\u0207\2\u1691\u1692\7\u0167\2\2\u1692\u1693\5\u0306"+
		"\u0184\2\u1693\u1694\5\u04cc\u0267\2\u1694\u1695\7\u01a5\2\2\u1695\u1696"+
		"\5\u04cc\u0267\2\u1696\u17e1\3\2\2\2\u1697\u1698\7]\2\2\u1698\u1699\7"+
		"\u019b\2\2\u1699\u169a\7\u00ea\2\2\u169a\u169b\7\u00cb\2\2\u169b\u169c"+
		"\5\u040c\u0207\2\u169c\u169d\7\u0167\2\2\u169d\u169e\5\u0306\u0184\2\u169e"+
		"\u169f\5\u04cc\u0267\2\u169f\u16a0\7\u01a5\2\2\u16a0\u16a1\5\u04cc\u0267"+
		"\2\u16a1\u17e1\3\2\2\2\u16a2\u16a3\7]\2\2\u16a3\u16a4\7\u00d8\2\2\u16a4"+
		"\u16a5\7\u019b\2\2\u16a5\u16a6\5\u040c\u0207\2\u16a6\u16a7\7\u0167\2\2"+
		"\u16a7\u16a8\5\u0306\u0184\2\u16a8\u16a9\5\u04cc\u0267\2\u16a9\u16aa\7"+
		"\u01a5\2\2\u16aa\u16ab\5\u04cc\u0267\2\u16ab\u17e1\3\2\2\2\u16ac\u16ad"+
		"\7]\2\2\u16ad\u16ae\7\u00d8\2\2\u16ae\u16af\7\u019b\2\2\u16af\u16b0\7"+
		"\u00ea\2\2\u16b0\u16b1\7\u00cb\2\2\u16b1\u16b2\5\u040c\u0207\2\u16b2\u16b3"+
		"\7\u0167\2\2\u16b3\u16b4\5\u0306\u0184\2\u16b4\u16b5\5\u04cc\u0267\2\u16b5"+
		"\u16b6\7\u01a5\2\2\u16b6\u16b7\5\u04cc\u0267\2\u16b7\u17e1\3\2\2\2\u16b8"+
		"\u16b9\7]\2\2\u16b9\u16ba\7\u01ae\2\2\u16ba\u16bb\5\u025e\u0130\2\u16bb"+
		"\u16bc\7\u0167\2\2\u16bc\u16bd\7j\2\2\u16bd\u16be\5\u04cc\u0267\2\u16be"+
		"\u16bf\7\u01a5\2\2\u16bf\u16c0\5\u04cc\u0267\2\u16c0\u16c1\5\u0110\u0089"+
		"\2\u16c1\u17e1\3\2\2\2\u16c2\u16c3\7]\2\2\u16c3\u16c4\7Z\2\2\u16c4\u16c5"+
		"\5\u04d8\u026d\2\u16c5\u16c6\5\u022c\u0117\2\u16c6\u16c7\7\u0167\2\2\u16c7"+
		"\u16c8\7\u01a5\2\2\u16c8\u16c9\5\u04cc\u0267\2\u16c9\u17e1\3\2\2\2\u16ca"+
		"\u16cb\7]\2\2\u16cb\u16cc\7\u00bb\2\2\u16cc\u16cd\5\u025e\u0130\2\u16cd"+
		"\u16ce\7\u0167\2\2\u16ce\u16cf\7\u0091\2\2\u16cf\u16d0\5\u04cc\u0267\2"+
		"\u16d0\u16d1\7\u01a5\2\2\u16d1\u16d2\5\u04cc\u0267\2\u16d2\u17e1\3\2\2"+
		"\2\u16d3\u16d4\7]\2\2\u16d4\u16d5\5\u01b2\u00da\2\u16d5\u16d6\7\u010a"+
		"\2\2\u16d6\u16d7\5\u04cc\u0267\2\u16d7\u16d8\7\u0167\2\2\u16d8\u16d9\7"+
		"\u01a5\2\2\u16d9\u16da\5\u04cc\u0267\2\u16da\u17e1\3\2\2\2\u16db\u16dc"+
		"\7]\2\2\u16dc\u16dd\7\u013d\2\2\u16dd\u16de\7\u0083\2\2\u16de\u16df\5"+
		"\u025e\u0130\2\u16df\u16e0\7\u01bb\2\2\u16e0\u16e1\5\u04d0\u0269\2\u16e1"+
		"\u16e2\7\u0167\2\2\u16e2\u16e3\7\u01a5\2\2\u16e3\u16e4\5\u04cc\u0267\2"+
		"\u16e4\u17e1\3\2\2\2\u16e5\u16e6\7]\2\2\u16e6\u16e7\7\u013d\2\2\u16e7"+
		"\u16e8\7\u00d1\2\2\u16e8\u16e9\5\u025e\u0130\2\u16e9\u16ea\7\u01bb\2\2"+
		"\u16ea\u16eb\5\u04d0\u0269\2\u16eb\u16ec\7\u0167\2\2\u16ec\u16ed\7\u01a5"+
		"\2\2\u16ed\u16ee\5\u04cc\u0267\2\u16ee\u17e1\3\2\2\2\u16ef\u16f0\7]\2"+
		"\2\u16f0\u16f1\7\u019b\2\2\u16f1\u16f2\5\u040c\u0207\2\u16f2\u16f3\7\u0167"+
		"\2\2\u16f3\u16f4\7\u0091\2\2\u16f4\u16f5\5\u04cc\u0267\2\u16f5\u16f6\7"+
		"\u01a5\2\2\u16f6\u16f7\5\u04cc\u0267\2\u16f7\u17e1\3\2\2\2\u16f8\u16f9"+
		"\7]\2\2\u16f9\u16fa\7\u01a9\2\2\u16fa\u16fb\5\u04cc\u0267\2\u16fb\u16fc"+
		"\7\u013b\2\2\u16fc\u16fd\5\u04c8\u0265\2\u16fd\u16fe\7\u0167\2\2\u16fe"+
		"\u16ff\7\u01a5\2\2\u16ff\u1700\5\u04cc\u0267\2\u1700\u17e1\3\2\2\2\u1701"+
		"\u1702\7]\2\2\u1702\u1703\7\u0088\2\2\u1703\u1704\5\u025e\u0130\2\u1704"+
		"\u1705\7\u0167\2\2\u1705\u1706\7\u01a5\2\2\u1706\u1707\5\u04cc\u0267\2"+
		"\u1707\u17e1\3\2\2\2\u1708\u1709\7]\2\2\u1709\u170a\7\u0095\2\2\u170a"+
		"\u170b\5\u025e\u0130\2\u170b\u170c\7\u0167\2\2\u170c\u170d\7\u01a5\2\2"+
		"\u170d\u170e\5\u04cc\u0267\2\u170e\u17e1\3\2\2\2\u170f\u1710\7]\2\2\u1710"+
		"\u1711\7\u00a6\2\2\u1711\u1712\5\u04ce\u0268\2\u1712\u1713\7\u0167\2\2"+
		"\u1713\u1714\7\u01a5\2\2\u1714\u1715\5\u04ce\u0268\2\u1715\u17e1\3\2\2"+
		"\2\u1716\u1717\7]\2\2\u1717\u1718\7\u00bb\2\2\u1718\u1719\5\u025e\u0130"+
		"\2\u1719\u171a\7\u0167\2\2\u171a\u171b\7\u01a5\2\2\u171b\u171c\5\u04cc"+
		"\u0267\2\u171c\u17e1\3\2\2\2\u171d\u171e\7]\2\2\u171e\u171f\7\u00d8\2"+
		"\2\u171f\u1720\7\u00a5\2\2\u1720\u1721\7\u01d0\2\2\u1721\u1722\5\u04cc"+
		"\u0267\2\u1722\u1723\7\u0167\2\2\u1723\u1724\7\u01a5\2\2\u1724\u1725\5"+
		"\u04cc\u0267\2\u1725\u17e1\3\2\2\2\u1726\u1727\7]\2\2\u1727\u1728\7\u00dd"+
		"\2\2\u1728\u1729\5\u0290\u0149\2\u1729\u172a\7\u0167\2\2\u172a\u172b\7"+
		"\u01a5\2\2\u172b\u172c\5\u04cc\u0267\2\u172c\u17e1\3\2\2\2\u172d\u172e"+
		"\7]\2\2\u172e\u172f\7\u00e3\2\2\u172f\u1730\5\u04e0\u0271\2\u1730\u1731"+
		"\7\u0167\2\2\u1731\u1732\7\u01a5\2\2\u1732\u1733\5\u04e0\u0271\2\u1733"+
		"\u17e1\3\2\2\2\u1734\u1735\7]\2\2\u1735\u1736\7\u0178\2\2\u1736\u1737"+
		"\5\u04cc\u0267\2\u1737\u1738\7\u0167\2\2\u1738\u1739\7\u01a5\2\2\u1739"+
		"\u173a\5\u04cc\u0267\2\u173a\u17e1\3\2\2\2\u173b\u173c\7]\2\2\u173c\u173d"+
		"\7\u0181\2\2\u173d\u173e\5\u04cc\u0267\2\u173e\u173f\7\u0167\2\2\u173f"+
		"\u1740\7\u01a5\2\2\u1740\u1741\5\u04cc\u0267\2\u1741\u17e1\3\2\2\2\u1742"+
		"\u1743\7]\2\2\u1743\u1744\7\u019b\2\2\u1744\u1745\5\u040c\u0207\2\u1745"+
		"\u1746\7\u0167\2\2\u1746\u1747\7\u01a5\2\2\u1747\u1748\5\u04cc\u0267\2"+
		"\u1748\u17e1\3\2\2\2\u1749\u174a\7]\2\2\u174a\u174b\7\u019b\2\2\u174b"+
		"\u174c\7\u00ea\2\2\u174c\u174d\7\u00cb\2\2\u174d\u174e\5\u040c\u0207\2"+
		"\u174e\u174f\7\u0167\2\2\u174f\u1750\7\u01a5\2\2\u1750\u1751\5\u04cc\u0267"+
		"\2\u1751\u17e1\3\2\2\2\u1752\u1753\7]\2\2\u1753\u1754\7\u017e\2\2\u1754"+
		"\u1755\5\u04c8\u0265\2\u1755\u1756\7\u0167\2\2\u1756\u1757\7\u01a5\2\2"+
		"\u1757\u1758\5\u04cc\u0267\2\u1758\u17e1\3\2\2\2\u1759\u175a\7]\2\2\u175a"+
		"\u175b\7\u017e\2\2\u175b\u175c\7\u00ea\2\2\u175c\u175d\7\u00cb\2\2\u175d"+
		"\u175e\5\u04c8\u0265\2\u175e\u175f\7\u0167\2\2\u175f\u1760\7\u01a5\2\2"+
		"\u1760\u1761\5\u04cc\u0267\2\u1761\u17e1\3\2\2\2\u1762\u1763\7]\2\2\u1763"+
		"\u1764\7\u01c7\2\2\u1764\u1765\5\u04c8\u0265\2\u1765\u1766\7\u0167\2\2"+
		"\u1766\u1767\7\u01a5\2\2\u1767\u1768\5\u04cc\u0267\2\u1768\u17e1\3\2\2"+
		"\2\u1769\u176a\7]\2\2\u176a\u176b\7\u01c7\2\2\u176b\u176c\7\u00ea\2\2"+
		"\u176c\u176d\7\u00cb\2\2\u176d\u176e\5\u04c8\u0265\2\u176e\u176f\7\u0167"+
		"\2\2\u176f\u1770\7\u01a5\2\2\u1770\u1771\5\u04cc\u0267\2\u1771\u17e1\3"+
		"\2\2\2\u1772\u1773\7]\2\2\u1773\u1774\7\u00f2\2\2\u1774\u1775\5\u04c8"+
		"\u0265\2\u1775\u1776\7\u0167\2\2\u1776\u1777\7\u01a5\2\2\u1777\u1778\5"+
		"\u04cc\u0267\2\u1778\u17e1\3\2\2\2\u1779\u177a\7]\2\2\u177a\u177b\7\u00f2"+
		"\2\2\u177b\u177c\7\u00ea\2\2\u177c\u177d\7\u00cb\2\2\u177d\u177e\5\u04c8"+
		"\u0265\2\u177e\u177f\7\u0167\2\2\u177f\u1780\7\u01a5\2\2\u1780\u1781\5"+
		"\u04cc\u0267\2\u1781\u17e1\3\2\2\2\u1782\u1783\7]\2\2\u1783\u1784\7\u00d8"+
		"\2\2\u1784\u1785\7\u019b\2\2\u1785\u1786\5\u040c\u0207\2\u1786\u1787\7"+
		"\u0167\2\2\u1787\u1788\7\u01a5\2\2\u1788\u1789\5\u04cc\u0267\2\u1789\u17e1"+
		"\3\2\2\2\u178a\u178b\7]\2\2\u178b\u178c\7\u00d8\2\2\u178c\u178d\7\u019b"+
		"\2\2\u178d\u178e\7\u00ea\2\2\u178e\u178f\7\u00cb\2\2\u178f\u1790\5\u040c"+
		"\u0207\2\u1790\u1791\7\u0167\2\2\u1791\u1792\7\u01a5\2\2\u1792\u1793\5"+
		"\u04cc\u0267\2\u1793\u17e1\3\2\2\2\u1794\u1795\7]\2\2\u1795\u1796\7\u0172"+
		"\2\2\u1796\u1797\5\u04e0\u0271\2\u1797\u1798\7\u0167\2\2\u1798\u1799\7"+
		"\u01a5\2\2\u1799\u179a\5\u04e0\u0271\2\u179a\u17e1\3\2\2\2\u179b\u179c"+
		"\7]\2\2\u179c\u179d\7\u01ba\2\2\u179d\u179e\5\u04e0\u0271\2\u179e\u179f"+
		"\7\u0167\2\2\u179f\u17a0\7\u01a5\2\2\u17a0\u17a1\5\u04e0\u0271\2\u17a1"+
		"\u17e1\3\2\2\2\u17a2\u17a3\7]\2\2\u17a3\u17a4\7\u019d\2\2\u17a4\u17a5"+
		"\5\u04cc\u0267\2\u17a5\u17a6\7\u0167\2\2\u17a6\u17a7\7\u01a5\2\2\u17a7"+
		"\u17a8\5\u04cc\u0267\2\u17a8\u17e1\3\2\2\2\u17a9\u17aa\7]\2\2\u17aa\u17ab"+
		"\7\u019d\2\2\u17ab\u17ac\5\u04cc\u0267\2\u17ac\u17ad\7\u0184\2\2\u17ad"+
		"\u17ae\5\u0116\u008c\2\u17ae\u17e1\3\2\2\2\u17af\u17b0\7]\2\2\u17b0\u17b1"+
		"\7\u019d\2\2\u17b1\u17b2\5\u04cc\u0267\2\u17b2\u17b3\7\u016b\2\2\u17b3"+
		"\u17b4\5\u0116\u008c\2\u17b4\u17e1\3\2\2\2\u17b5\u17b6\7]\2\2\u17b6\u17b7"+
		"\7\u01a1\2\2\u17b7\u17b8\7\u017a\2\2\u17b8\u17b9\7\u0149\2\2\u17b9\u17ba"+
		"\5\u025e\u0130\2\u17ba\u17bb\7\u0167\2\2\u17bb\u17bc\7\u01a5\2\2\u17bc"+
		"\u17bd\5\u04cc\u0267\2\u17bd\u17e1\3\2\2\2\u17be\u17bf\7]\2\2\u17bf\u17c0"+
		"\7\u01a1\2\2\u17c0\u17c1\7\u017a\2\2\u17c1\u17c2\7\u00b5\2\2\u17c2\u17c3"+
		"\5\u025e\u0130\2\u17c3\u17c4\7\u0167\2\2\u17c4\u17c5\7\u01a5\2\2\u17c5"+
		"\u17c6\5\u04cc\u0267\2\u17c6\u17e1\3\2\2\2\u17c7\u17c8\7]\2\2\u17c8\u17c9"+
		"\7\u01a1\2\2\u17c9\u17ca\7\u017a\2\2\u17ca\u17cb\7\u019f\2\2\u17cb\u17cc"+
		"\5\u025e\u0130\2\u17cc\u17cd\7\u0167\2\2\u17cd\u17ce\7\u01a5\2\2\u17ce"+
		"\u17cf\5\u04cc\u0267\2\u17cf\u17e1\3\2\2\2\u17d0\u17d1\7]\2\2\u17d1\u17d2"+
		"\7\u01a1\2\2\u17d2\u17d3\7\u017a\2\2\u17d3\u17d4\7\u008f\2\2\u17d4\u17d5"+
		"\5\u025e\u0130\2\u17d5\u17d6\7\u0167\2\2\u17d6\u17d7\7\u01a5\2\2\u17d7"+
		"\u17d8\5\u04cc\u0267\2\u17d8\u17e1\3\2\2\2\u17d9\u17da\7]\2\2\u17da\u17db"+
		"\7\u01ae\2\2\u17db\u17dc\5\u025e\u0130\2\u17dc\u17dd\7\u0167\2\2\u17dd"+
		"\u17de\7\u01a5\2\2\u17de\u17df\5\u04cc\u0267\2\u17df\u17e1\3\2\2\2\u17e0"+
		"\u168e\3\2\2\2\u17e0\u1697\3\2\2\2\u17e0\u16a2\3\2\2\2\u17e0\u16ac\3\2"+
		"\2\2\u17e0\u16b8\3\2\2\2\u17e0\u16c2\3\2\2\2\u17e0\u16ca\3\2\2\2\u17e0"+
		"\u16d3\3\2\2\2\u17e0\u16db\3\2\2\2\u17e0\u16e5\3\2\2\2\u17e0\u16ef\3\2"+
		"\2\2\u17e0\u16f8\3\2\2\2\u17e0\u1701\3\2\2\2\u17e0\u1708\3\2\2\2\u17e0"+
		"\u170f\3\2\2\2\u17e0\u1716\3\2\2\2\u17e0\u171d\3\2\2\2\u17e0\u1726\3\2"+
		"\2\2\u17e0\u172d\3\2\2\2\u17e0\u1734\3\2\2\2\u17e0\u173b\3\2\2\2\u17e0"+
		"\u1742\3\2\2\2\u17e0\u1749\3\2\2\2\u17e0\u1752\3\2\2\2\u17e0\u1759\3\2"+
		"\2\2\u17e0\u1762\3\2\2\2\u17e0\u1769\3\2\2\2\u17e0\u1772\3\2\2\2\u17e0"+
		"\u1779\3\2\2\2\u17e0\u1782\3\2\2\2\u17e0\u178a\3\2\2\2\u17e0\u1794\3\2"+
		"\2\2\u17e0\u179b\3\2\2\2\u17e0\u17a2\3\2\2\2\u17e0\u17a9\3\2\2\2\u17e0"+
		"\u17af\3\2\2\2\u17e0\u17b5\3\2\2\2\u17e0\u17be\3\2\2\2\u17e0\u17c7\3\2"+
		"\2\2\u17e0\u17d0\3\2\2\2\u17e0\u17d9\3\2\2\2\u17e1\u0305\3\2\2\2\u17e2"+
		"\u17e5\7\u0089\2\2\u17e3\u17e5\3\2\2\2\u17e4\u17e2\3\2\2\2\u17e4\u17e3"+
		"\3\2\2\2\u17e5\u0307\3\2\2\2\u17e6\u17e7\7\u0184\2\2\u17e7\u17ea\7\u00a5"+
		"\2\2\u17e8\u17ea\3\2\2\2\u17e9\u17e6\3\2\2\2\u17e9\u17e8\3\2\2\2\u17ea"+
		"\u0309\3\2\2\2\u17eb\u17ec\7]\2\2\u17ec\u17ed\7Z\2\2\u17ed\u17ee\5\u04d8"+
		"\u026d\2\u17ee\u17ef\5\u022c\u0117\2\u17ef\u17f0\7\u0184\2\2\u17f0\u17f1"+
		"\7\u0178\2\2\u17f1\u17f2\5\u04cc\u0267\2\u17f2\u18a0\3\2\2\2\u17f3\u17f4"+
		"\7]\2\2\u17f4\u17f5\7\u013d\2\2\u17f5\u17f6\5\u02ee\u0178\2\u17f6\u17f7"+
		"\5\u02ec\u0177\2\u17f7\u17f8\7\u0184\2\2\u17f8\u17f9\7\u0178\2\2\u17f9"+
		"\u17fa\5\u04cc\u0267\2\u17fa\u18a0\3\2\2\2\u17fb\u17fc\7]\2\2\u17fc\u17fd"+
		"\7\u013d\2\2\u17fd\u17fe\7\u0083\2\2\u17fe\u17ff\5\u025e\u0130\2\u17ff"+
		"\u1800\7\u01bb\2\2\u1800\u1801\5\u04d0\u0269\2\u1801\u1802\7\u0184\2\2"+
		"\u1802\u1803\7\u0178\2\2\u1803\u1804\5\u04cc\u0267\2\u1804\u18a0\3\2\2"+
		"\2\u1805\u1806\7]\2\2\u1806\u1807\7\u013d\2\2\u1807\u1808\7\u00d1\2\2"+
		"\u1808\u1809\5\u025e\u0130\2\u1809\u180a\7\u01bb\2\2\u180a\u180b\5\u04d0"+
		"\u0269\2\u180b\u180c\7\u0184\2\2\u180c\u180d\7\u0178\2\2\u180d\u180e\5"+
		"\u04cc\u0267\2\u180e\u18a0\3\2\2\2\u180f\u1810\7]\2\2\u1810\u1811\7\u0088"+
		"\2\2\u1811\u1812\5\u025e\u0130\2\u1812\u1813\7\u0184\2\2\u1813\u1814\7"+
		"\u0178\2\2\u1814\u1815\5\u04cc\u0267\2\u1815\u18a0\3\2\2\2\u1816\u1817"+
		"\7]\2\2\u1817\u1818\7\u0095\2\2\u1818\u1819\5\u025e\u0130\2\u1819\u181a"+
		"\7\u0184\2\2\u181a\u181b\7\u0178\2\2\u181b\u181c\5\u04cc\u0267\2\u181c"+
		"\u18a0\3\2\2\2\u181d\u181e\7]\2\2\u181e\u181f\7\u00bb\2\2\u181f\u1820"+
		"\5\u025e\u0130\2\u1820\u1821\7\u0184\2\2\u1821\u1822\7\u0178\2\2\u1822"+
		"\u1823\5\u04cc\u0267\2\u1823\u18a0\3\2\2\2\u1824\u1825\7]\2\2\u1825\u1826"+
		"\7\u00cd\2\2\u1826\u1827\5\u025e\u0130\2\u1827\u1828\7\u0184\2\2\u1828"+
		"\u1829\7\u0178\2\2\u1829\u182a\5\u04cc\u0267\2\u182a\u18a0\3\2\2\2\u182b"+
		"\u182c\7]\2\2\u182c\u182d\7\u00dd\2\2\u182d\u182e\5\u0290\u0149\2\u182e"+
		"\u182f\7\u0184\2\2\u182f\u1830\7\u0178\2\2\u1830\u1831\5\u04cc\u0267\2"+
		"\u1831\u18a0\3\2\2\2\u1832\u1833\7]\2\2\u1833\u1834\7\u019b\2\2\u1834"+
		"\u1835\5\u040c\u0207\2\u1835\u1836\7\u0184\2\2\u1836\u1837\7\u0178\2\2"+
		"\u1837\u1838\5\u04cc\u0267\2\u1838\u18a0\3\2\2\2\u1839\u183a\7]\2\2\u183a"+
		"\u183b\7\u019b\2\2\u183b\u183c\7\u00ea\2\2\u183c\u183d\7\u00cb\2\2\u183d"+
		"\u183e\5\u040c\u0207\2\u183e\u183f\7\u0184\2\2\u183f\u1840\7\u0178\2\2"+
		"\u1840\u1841\5\u04cc\u0267\2\u1841\u18a0\3\2\2\2\u1842\u1843\7]\2\2\u1843"+
		"\u1844\7\u01a1\2\2\u1844\u1845\7\u017a\2\2\u1845\u1846\7\u0149\2\2\u1846"+
		"\u1847\5\u025e\u0130\2\u1847\u1848\7\u0184\2\2\u1848\u1849\7\u0178\2\2"+
		"\u1849\u184a\5\u04cc\u0267\2\u184a\u18a0\3\2\2\2\u184b\u184c\7]\2\2\u184c"+
		"\u184d\7\u01a1\2\2\u184d\u184e\7\u017a\2\2\u184e\u184f\7\u00b5\2\2\u184f"+
		"\u1850\5\u025e\u0130\2\u1850\u1851\7\u0184\2\2\u1851\u1852\7\u0178\2\2"+
		"\u1852\u1853\5\u04cc\u0267\2\u1853\u18a0\3\2\2\2\u1854\u1855\7]\2\2\u1855"+
		"\u1856\7\u01a1\2\2\u1856\u1857\7\u017a\2\2\u1857\u1858\7\u019f\2\2\u1858"+
		"\u1859\5\u025e\u0130\2\u1859\u185a\7\u0184\2\2\u185a\u185b\7\u0178\2\2"+
		"\u185b\u185c\5\u04cc\u0267\2\u185c\u18a0\3\2\2\2\u185d\u185e\7]\2\2\u185e"+
		"\u185f\7\u01a1\2\2\u185f\u1860\7\u017a\2\2\u1860\u1861\7\u008f\2\2\u1861"+
		"\u1862\5\u025e\u0130\2\u1862\u1863\7\u0184\2\2\u1863\u1864\7\u0178\2\2"+
		"\u1864\u1865\5\u04cc\u0267\2\u1865\u18a0\3\2\2\2\u1866\u1867\7]\2\2\u1867"+
		"\u1868\7\u017e\2\2\u1868\u1869\5\u04c8\u0265\2\u1869\u186a\7\u0184\2\2"+
		"\u186a\u186b\7\u0178\2\2\u186b\u186c\5\u04cc\u0267\2\u186c\u18a0\3\2\2"+
		"\2\u186d\u186e\7]\2\2\u186e\u186f\7\u017e\2\2\u186f\u1870\7\u00ea\2\2"+
		"\u1870\u1871\7\u00cb\2\2\u1871\u1872\5\u04c8\u0265\2\u1872\u1873\7\u0184"+
		"\2\2\u1873\u1874\7\u0178\2\2\u1874\u1875\5\u04cc\u0267\2\u1875\u18a0\3"+
		"\2\2\2\u1876\u1877\7]\2\2\u1877\u1878\7\u01c7\2\2\u1878\u1879\5\u04c8"+
		"\u0265\2\u1879\u187a\7\u0184\2\2\u187a\u187b\7\u0178\2\2\u187b\u187c\5"+
		"\u04cc\u0267\2\u187c\u18a0\3\2\2\2\u187d\u187e\7]\2\2\u187e\u187f\7\u01c7"+
		"\2\2\u187f\u1880\7\u00ea\2\2\u1880\u1881\7\u00cb\2\2\u1881\u1882\5\u04c8"+
		"\u0265\2\u1882\u1883\7\u0184\2\2\u1883\u1884\7\u0178\2\2\u1884\u1885\5"+
		"\u04cc\u0267\2\u1885\u18a0\3\2\2\2\u1886\u1887\7]\2\2\u1887\u1888\7\u00d8"+
		"\2\2\u1888\u1889\7\u019b\2\2\u1889\u188a\5\u040c\u0207\2\u188a\u188b\7"+
		"\u0184\2\2\u188b\u188c\7\u0178\2\2\u188c\u188d\5\u04cc\u0267\2\u188d\u18a0"+
		"\3\2\2\2\u188e\u188f\7]\2\2\u188f\u1890\7\u00d8\2\2\u1890\u1891\7\u019b"+
		"\2\2\u1891\u1892\7\u00ea\2\2\u1892\u1893\7\u00cb\2\2\u1893\u1894\5\u040c"+
		"\u0207\2\u1894\u1895\7\u0184\2\2\u1895\u1896\7\u0178\2\2\u1896\u1897\5"+
		"\u04cc\u0267\2\u1897\u18a0\3\2\2\2\u1898\u1899\7]\2\2\u1899\u189a\7\u01ae"+
		"\2\2\u189a\u189b\5\u025e\u0130\2\u189b\u189c\7\u0184\2\2\u189c\u189d\7"+
		"\u0178\2\2\u189d\u189e\5\u04cc\u0267\2\u189e\u18a0\3\2\2\2\u189f\u17eb"+
		"\3\2\2\2\u189f\u17f3\3\2\2\2\u189f\u17fb\3\2\2\2\u189f\u1805\3\2\2\2\u189f"+
		"\u180f\3\2\2\2\u189f\u1816\3\2\2\2\u189f\u181d\3\2\2\2\u189f\u1824\3\2"+
		"\2\2\u189f\u182b\3\2\2\2\u189f\u1832\3\2\2\2\u189f\u1839\3\2\2\2\u189f"+
		"\u1842\3\2\2\2\u189f\u184b\3\2\2\2\u189f\u1854\3\2\2\2\u189f\u185d\3\2"+
		"\2\2\u189f\u1866\3\2\2\2\u189f\u186d\3\2\2\2\u189f\u1876\3\2\2\2\u189f"+
		"\u187d\3\2\2\2\u189f\u1886\3\2\2\2\u189f\u188e\3\2\2\2\u189f\u1898\3\2"+
		"\2\2\u18a0\u030b\3\2\2\2\u18a1\u18a2\7]\2\2\u18a2\u18a3\7Z\2\2\u18a3\u18a4"+
		"\5\u04d8\u026d\2\u18a4\u18a5\5\u022c\u0117\2\u18a5\u18a6\7\u0148\2\2\u18a6"+
		"\u18a7\7\u01a5\2\2\u18a7\u18a8\5\u04e0\u0271\2\u18a8\u1930\3\2\2\2\u18a9"+
		"\u18aa\7]\2\2\u18aa\u18ab\5\u01b2\u00da\2\u18ab\u18ac\7\u010a\2\2\u18ac"+
		"\u18ad\5\u04cc\u0267\2\u18ad\u18ae\7\u0148\2\2\u18ae\u18af\7\u01a5\2\2"+
		"\u18af\u18b0\5\u04e0\u0271\2\u18b0\u1930\3\2\2\2\u18b1\u18b2\7]\2\2\u18b2"+
		"\u18b3\7\u013d\2\2\u18b3\u18b4\5\u02ee\u0178\2\u18b4\u18b5\5\u02ec\u0177"+
		"\2\u18b5\u18b6\7\u0148\2\2\u18b6\u18b7\7\u01a5\2\2\u18b7\u18b8\5\u04e0"+
		"\u0271\2\u18b8\u1930\3\2\2\2\u18b9\u18ba\7]\2\2\u18ba\u18bb\7\u013d\2"+
		"\2\u18bb\u18bc\7\u0083\2\2\u18bc\u18bd\5\u025e\u0130\2\u18bd\u18be\7\u01bb"+
		"\2\2\u18be\u18bf\5\u04d0\u0269\2\u18bf\u18c0\7\u0148\2\2\u18c0\u18c1\7"+
		"\u01a5\2\2\u18c1\u18c2\5\u04e0\u0271\2\u18c2\u1930\3\2\2\2\u18c3\u18c4"+
		"\7]\2\2\u18c4\u18c5\7\u013d\2\2\u18c5\u18c6\7\u00d1\2\2\u18c6\u18c7\5"+
		"\u025e\u0130\2\u18c7\u18c8\7\u01bb\2\2\u18c8\u18c9\5\u04d0\u0269\2\u18c9"+
		"\u18ca\7\u0148\2\2\u18ca\u18cb\7\u01a5\2\2\u18cb\u18cc\5\u04e0\u0271\2"+
		"\u18cc\u1930\3\2\2\2\u18cd\u18ce\7]\2\2\u18ce\u18cf\7\u0088\2\2\u18cf"+
		"\u18d0\5\u025e\u0130\2\u18d0\u18d1\7\u0148\2\2\u18d1\u18d2\7\u01a5\2\2"+
		"\u18d2\u18d3\5\u04e0\u0271\2\u18d3\u1930\3\2\2\2\u18d4\u18d5\7]\2\2\u18d5"+
		"\u18d6\7\u0095\2\2\u18d6\u18d7\5\u025e\u0130\2\u18d7\u18d8\7\u0148\2\2"+
		"\u18d8\u18d9\7\u01a5\2\2\u18d9\u18da\5\u04e0\u0271\2\u18da\u1930\3\2\2"+
		"\2\u18db\u18dc\7]\2\2\u18dc\u18dd\7\u00a6\2\2\u18dd\u18de\5\u04ce\u0268"+
		"\2\u18de\u18df\7\u0148\2\2\u18df\u18e0\7\u01a5\2\2\u18e0\u18e1\5\u04e0"+
		"\u0271\2\u18e1\u1930\3\2\2\2\u18e2\u18e3\7]\2\2\u18e3\u18e4\7\u00bb\2"+
		"\2\u18e4\u18e5\5\u025e\u0130\2\u18e5\u18e6\7\u0148\2\2\u18e6\u18e7\7\u01a5"+
		"\2\2\u18e7\u18e8\5\u04e0\u0271\2\u18e8\u1930\3\2\2\2\u18e9\u18ea\7]\2"+
		"\2\u18ea\u18eb\7\u00dd\2\2\u18eb\u18ec\5\u0290\u0149\2\u18ec\u18ed\7\u0148"+
		"\2\2\u18ed\u18ee\7\u01a5\2\2\u18ee\u18ef\5\u04e0\u0271\2\u18ef\u1930\3"+
		"\2\2\2\u18f0\u18f1\7]\2\2\u18f1\u18f2\7\u010b\2\2\u18f2\u18f3\7\u0136"+
		"\2\2\u18f3\u18f4\5\u01a0\u00d1\2\u18f4\u18f5\7\u0148\2\2\u18f5\u18f6\7"+
		"\u01a5\2\2\u18f6\u18f7\5\u04e0\u0271\2\u18f7\u1930\3\2\2\2\u18f8\u18f9"+
		"\7]\2\2\u18f9\u18fa\7\u0178\2\2\u18fa\u18fb\5\u04cc\u0267\2\u18fb\u18fc"+
		"\7\u0148\2\2\u18fc\u18fd\7\u01a5\2\2\u18fd\u18fe\5\u04e0\u0271\2\u18fe"+
		"\u1930\3\2\2\2\u18ff\u1900\7]\2\2\u1900\u1901\7\u01ae\2\2\u1901\u1902"+
		"\5\u025e\u0130\2\u1902\u1903\7\u0148\2\2\u1903\u1904\7\u01a5\2\2\u1904"+
		"\u1905\5\u04e0\u0271\2\u1905\u1930\3\2\2\2\u1906\u1907\7]\2\2\u1907\u1908"+
		"\7\u019d\2\2\u1908\u1909\5\u04cc\u0267\2\u1909\u190a\7\u0148\2\2\u190a"+
		"\u190b\7\u01a5\2\2\u190b\u190c\5\u04e0\u0271\2\u190c\u1930\3\2\2\2\u190d"+
		"\u190e\7]\2\2\u190e\u190f\7\u01a1\2\2\u190f\u1910\7\u017a\2\2\u1910\u1911"+
		"\7\u00b5\2\2\u1911\u1912\5\u025e\u0130\2\u1912\u1913\7\u0148\2\2\u1913"+
		"\u1914\7\u01a5\2\2\u1914\u1915\5\u04e0\u0271\2\u1915\u1930\3\2\2\2\u1916"+
		"\u1917\7]\2\2\u1917\u1918\7\u01a1\2\2\u1918\u1919\7\u017a\2\2\u1919\u191a"+
		"\7\u008f\2\2\u191a\u191b\5\u025e\u0130\2\u191b\u191c\7\u0148\2\2\u191c"+
		"\u191d\7\u01a5\2\2\u191d\u191e\5\u04e0\u0271\2\u191e\u1930\3\2\2\2\u191f"+
		"\u1920\7]\2\2\u1920\u1921\7\u00d8\2\2\u1921\u1922\7\u00a5\2\2\u1922\u1923"+
		"\7\u01d0\2\2\u1923\u1924\5\u04cc\u0267\2\u1924\u1925\7\u0148\2\2\u1925"+
		"\u1926\7\u01a5\2\2\u1926\u1927\5\u04e0\u0271\2\u1927\u1930\3\2\2\2\u1928"+
		"\u1929\7]\2\2\u1929\u192a\7\u0181\2\2\u192a\u192b\5\u04cc\u0267\2\u192b"+
		"\u192c\7\u0148\2\2\u192c\u192d\7\u01a5\2\2\u192d\u192e\5\u04e0\u0271\2"+
		"\u192e\u1930\3\2\2\2\u192f\u18a1\3\2\2\2\u192f\u18a9\3\2\2\2\u192f\u18b1"+
		"\3\2\2\2\u192f\u18b9\3\2\2\2\u192f\u18c3\3\2\2\2\u192f\u18cd\3\2\2\2\u192f"+
		"\u18d4\3\2\2\2\u192f\u18db\3\2\2\2\u192f\u18e2\3\2\2\2\u192f\u18e9\3\2"+
		"\2\2\u192f\u18f0\3\2\2\2\u192f\u18f8\3\2\2\2\u192f\u18ff\3\2\2\2\u192f"+
		"\u1906\3\2\2\2\u192f\u190d\3\2\2\2\u192f\u1916\3\2\2\2\u192f\u191f\3\2"+
		"\2\2\u192f\u1928\3\2\2\2\u1930\u030d\3\2\2\2\u1931\u1932\7\u0098\2\2\u1932"+
		"\u1933\5\u02bc\u015f\2\u1933\u1934\7\u0176\2\2\u1934\u1935\5\u04cc\u0267"+
		"\2\u1935\u1936\7d\2\2\u1936\u1937\7\u013b\2\2\u1937\u1938\5\u0318\u018d"+
		"\2\u1938\u1939\7\u01a5\2\2\u1939\u193a\5\u04c8\u0265\2\u193a\u193b\5\u0414"+
		"\u020b\2\u193b\u193c\7\u00b9\2\2\u193c\u193d\5\u031a\u018e\2\u193d\u193e"+
		"\5\u0310\u0189\2\u193e\u030f\3\2\2\2\u193f\u1940\7\5\2\2\u1940\u1941\5"+
		"\u0312\u018a\2\u1941\u1942\7\6\2\2\u1942\u1946\3\2\2\2\u1943\u1946\5\u0314"+
		"\u018b\2\u1944\u1946\7\u012e\2\2\u1945\u193f\3\2\2\2\u1945\u1943\3\2\2"+
		"\2\u1945\u1944\3\2\2\2\u1946\u0311\3\2\2\2\u1947\u1948\b\u018a\1\2\u1948"+
		"\u1949\5\u0316\u018c\2\u1949\u194f\3\2\2\2\u194a\u194b\f\4\2\2\u194b\u194c"+
		"\7\4\2\2\u194c\u194e\5\u0316\u018c\2\u194d\u194a\3\2\2\2\u194e\u1951\3"+
		"\2\2\2\u194f\u194d\3\2\2\2\u194f\u1950\3\2\2\2\u1950\u0313\3\2\2\2\u1951"+
		"\u194f\3\2\2\2\u1952\u1958\5\u03ae\u01d8\2\u1953\u1958\5\u0382\u01c2\2"+
		"\u1954\u1958\5\u0398\u01cd\2\u1955\u1958\5\u038c\u01c7\2\u1956\u1958\5"+
		"\u031e\u0190\2\u1957\u1952\3\2\2\2\u1957\u1953\3\2\2\2\u1957\u1954\3\2"+
		"\2\2\u1957\u1955\3\2\2\2\u1957\u1956\3\2\2\2\u1958\u0315\3\2\2\2\u1959"+
		"\u195c\5\u0314\u018b\2\u195a\u195c\3\2\2\2\u195b\u1959\3\2\2\2\u195b\u195a"+
		"\3\2\2\2\u195c\u0317\3\2\2\2\u195d\u195e\t\16\2\2\u195e\u0319\3\2\2\2"+
		"\u195f\u1963\7\u00fd\2\2\u1960\u1963\7\\\2\2\u1961\u1963\3\2\2\2\u1962"+
		"\u195f\3\2\2\2\u1962\u1960\3\2\2\2\u1962\u1961\3\2\2\2\u1963\u031b\3\2"+
		"\2\2\u1964\u1965\7\u00bd\2\2\u1965\u1966\7\u0176\2\2\u1966\u1967\5\u04cc"+
		"\u0267\2\u1967\u1968\7\u013b\2\2\u1968\u1969\5\u025e\u0130\2\u1969\u196a"+
		"\5\u0110\u0089\2\u196a\u1975\3\2\2\2\u196b\u196c\7\u00bd\2\2\u196c\u196d"+
		"\7\u0176\2\2\u196d\u196e\7\u00ea\2\2\u196e\u196f\7\u00cb\2\2\u196f\u1970"+
		"\5\u04cc\u0267\2\u1970\u1971\7\u013b\2\2\u1971\u1972\5\u025e\u0130\2\u1972"+
		"\u1973\5\u0110\u0089\2\u1973\u1975\3\2\2\2\u1974\u1964\3\2\2\2\u1974\u196b"+
		"\3\2\2\2\u1975\u031d\3\2\2\2\u1976\u1977\7\u012f\2\2\u1977\u1978\5\u04e4"+
		"\u0273\2\u1978\u1979\5\u0320\u0191\2\u1979\u031f\3\2\2\2\u197a\u197b\7"+
		"\7\2\2\u197b\u197e\5\u04de\u0270\2\u197c\u197e\3\2\2\2\u197d\u197a\3\2"+
		"\2\2\u197d\u197c\3\2\2\2\u197e\u0321\3\2\2\2\u197f\u1980\7\u0116\2\2\u1980"+
		"\u1981\5\u04e4\u0273\2\u1981\u0323\3\2\2\2\u1982\u1983\7\u01b6\2\2\u1983"+
		"\u1987\7\r\2\2\u1984\u1985\7\u01b6\2\2\u1985\u1987\5\u04e4\u0273\2\u1986"+
		"\u1982\3\2\2\2\u1986\u1984\3\2\2\2\u1987\u0325\3\2\2\2\u1988\u1989\7n"+
		"\2\2\u1989\u198a\5\u0328\u0195\2\u198a\u198b\5\u032e\u0198\2\u198b\u19b3"+
		"\3\2\2\2\u198c\u198d\7\u0173\2\2\u198d\u198e\5\u0328\u0195\2\u198e\u198f"+
		"\7\u01a5\2\2\u198f\u1990\7\u0177\2\2\u1990\u1991\5\u04e4\u0273\2\u1991"+
		"\u19b3\3\2\2\2\u1992\u1993\7\u0173\2\2\u1993\u1994\5\u0328\u0195\2\u1994"+
		"\u1995\7\u01a5\2\2\u1995\u1996\5\u04e4\u0273\2\u1996\u19b3\3\2\2\2\u1997"+
		"\u1998\7S\2\2\u1998\u19b3\5\u0328\u0195\2\u1999\u199a\7\u018f\2\2\u199a"+
		"\u199b\7\u01a7\2\2\u199b\u19b3\5\u032e\u0198\2\u199c\u199d\7\u008c\2\2"+
		"\u199d\u19b3\5\u0328\u0195\2\u199e\u199f\7\u00c3\2\2\u199f\u19b3\5\u0328"+
		"\u0195\2\u19a0\u19a1\7\u0173\2\2\u19a1\u19b3\5\u0328\u0195\2\u19a2\u19a3"+
		"\7\u0177\2\2\u19a3\u19b3\5\u04e4\u0273\2\u19a4\u19a5\7\u0166\2\2\u19a5"+
		"\u19a6\7\u0177\2\2\u19a6\u19b3\5\u04e4\u0273\2\u19a7\u19a8\7\u0166\2\2"+
		"\u19a8\u19b3\5\u04e4\u0273\2\u19a9\u19aa\7\u0153\2\2\u19aa\u19ab\7\u01a7"+
		"\2\2\u19ab\u19b3\5\u04de\u0270\2\u19ac\u19ad\7\u008c\2\2\u19ad\u19ae\7"+
		"\u0154\2\2\u19ae\u19b3\5\u04de\u0270\2\u19af\u19b0\7\u0173\2\2\u19b0\u19b1"+
		"\7\u0154\2\2\u19b1\u19b3\5\u04de\u0270\2\u19b2\u1988\3\2\2\2\u19b2\u198c"+
		"\3\2\2\2\u19b2\u1992\3\2\2\2\u19b2\u1997\3\2\2\2\u19b2\u1999\3\2\2\2\u19b2"+
		"\u199c\3\2\2\2\u19b2\u199e\3\2\2\2\u19b2\u19a0\3\2\2\2\u19b2\u19a2\3\2"+
		"\2\2\u19b2\u19a4\3\2\2\2\u19b2\u19a7\3\2\2\2\u19b2\u19a9\3\2\2\2\u19b2"+
		"\u19ac\3\2\2\2\u19b2\u19af\3\2\2\2\u19b3\u0327\3\2\2\2\u19b4\u19b8\7\u01cf"+
		"\2\2\u19b5\u19b8\7\u01a7\2\2\u19b6\u19b8\3\2\2\2\u19b7\u19b4\3\2\2\2\u19b7"+
		"\u19b5\3\2\2\2\u19b7\u19b6\3\2\2\2\u19b8\u0329\3\2\2\2\u19b9\u19ba\7\u0106"+
		"\2\2\u19ba\u19bb\7\u0113\2\2\u19bb\u19c4\5\u00ecw\2\u19bc\u19bd\7\u015d"+
		"\2\2\u19bd\u19c4\7\u013c\2\2\u19be\u19bf\7\u015d\2\2\u19bf\u19c4\7\u01d1"+
		"\2\2\u19c0\u19c4\7\u00ae\2\2\u19c1\u19c2\7\u012d\2\2\u19c2\u19c4\7\u00ae"+
		"\2\2\u19c3\u19b9\3\2\2\2\u19c3\u19bc\3\2\2\2\u19c3\u19be\3\2\2\2\u19c3"+
		"\u19c0\3\2\2\2\u19c3\u19c1\3\2\2\2\u19c4\u032b\3\2\2\2\u19c5\u19c6\b\u0197"+
		"\1\2\u19c6\u19c7\5\u032a\u0196\2\u19c7\u19cf\3\2\2\2\u19c8\u19c9\f\5\2"+
		"\2\u19c9\u19ca\7\7\2\2\u19ca\u19ce\5\u032a\u0196\2\u19cb\u19cc\f\4\2\2"+
		"\u19cc\u19ce\5\u032a\u0196\2\u19cd\u19c8\3\2\2\2\u19cd\u19cb\3\2\2\2\u19ce"+
		"\u19d1\3\2\2\2\u19cf\u19cd\3\2\2\2\u19cf\u19d0\3\2\2\2\u19d0\u032d\3\2"+
		"\2\2\u19d1\u19cf\3\2\2\2\u19d2\u19d5\5\u032c\u0197\2\u19d3\u19d5\3\2\2"+
		"\2\u19d4\u19d2\3\2\2\2\u19d4\u19d3\3\2\2\2\u19d5\u032f\3\2\2\2\u19d6\u19d7"+
		"\7\u0098\2\2\u19d7\u19d8\5\u0146\u00a4\2\u19d8\u19d9\7\u01c7\2\2\u19d9"+
		"\u19da\5\u04c8\u0265\2\u19da\u19db\5\u016c\u00b7\2\u19db\u19dc\5\u0118"+
		"\u008d\2\u19dc\u19dd\7d\2\2\u19dd\u19de\5\u03ae\u01d8\2\u19de\u19df\5"+
		"\u0332\u019a\2\u19df\u19ed\3\2\2\2\u19e0\u19e1\7\u0098\2\2\u19e1\u19e2"+
		"\7\u0140\2\2\u19e2\u19e3\7\u0169\2\2\u19e3\u19e4\5\u0146\u00a4\2\u19e4"+
		"\u19e5\7\u01c7\2\2\u19e5\u19e6\5\u04c8\u0265\2\u19e6\u19e7\5\u016c\u00b7"+
		"\2\u19e7\u19e8\5\u0118\u008d\2\u19e8\u19e9\7d\2\2\u19e9\u19ea\5\u03ae"+
		"\u01d8\2\u19ea\u19eb\5\u0332\u019a\2\u19eb\u19ed\3\2\2\2\u19ec\u19d6\3"+
		"\2\2\2\u19ec\u19e0\3\2\2\2\u19ed\u0331\3\2\2\2\u19ee\u19ef\7\u01cd\2\2"+
		"\u19ef\u19f0\7\u0081\2\2\u19f0\u19fb\7\u013e\2\2\u19f1\u19f2\7\u01cd\2"+
		"\2\u19f2\u19f3\7y\2\2\u19f3\u19f4\7\u0081\2\2\u19f4\u19fb\7\u013e\2\2"+
		"\u19f5\u19f6\7\u01cd\2\2\u19f6\u19f7\7\u0118\2\2\u19f7\u19f8\7\u0081\2"+
		"\2\u19f8\u19fb\7\u013e\2\2\u19f9\u19fb\3\2\2\2\u19fa\u19ee\3\2\2\2\u19fa"+
		"\u19f1\3\2\2\2\u19fa\u19f5\3\2\2\2\u19fa\u19f9\3\2\2\2\u19fb\u0333\3\2"+
		"\2\2\u19fc\u19fd\7\u0117\2\2\u19fd\u19fe\5\u04d6\u026c\2\u19fe\u0335\3"+
		"\2\2\2\u19ff\u1a00\7\u0098\2\2\u1a00\u1a01\7\u00a6\2\2\u1a01\u1a02\5\u04ce"+
		"\u0268\2\u1a02\u1a03\5\u00b6\\\2\u1a03\u1a04\5\u0338\u019d\2\u1a04\u0337"+
		"\3\2\2\2\u1a05\u1a0a\b\u019d\1\2\u1a06\u1a07\f\4\2\2\u1a07\u1a09\5\u033a"+
		"\u019e\2\u1a08\u1a06\3\2\2\2\u1a09\u1a0c\3\2\2\2\u1a0a\u1a08\3\2\2\2\u1a0a"+
		"\u1a0b\3\2\2\2\u1a0b\u0339\3\2\2\2\u1a0c\u1a0a\3\2\2\2\u1a0d\u1a0e\7\u019d"+
		"\2\2\u1a0e\u1a0f\5\u033c\u019f\2\u1a0f\u1a10\5\u04cc\u0267\2\u1a10\u1a4f"+
		"\3\2\2\2\u1a11\u1a12\7\u011b\2\2\u1a12\u1a13\5\u033c\u019f\2\u1a13\u1a14"+
		"\5\u04de\u0270\2\u1a14\u1a4f\3\2\2\2\u1a15\u1a16\7\u019f\2\2\u1a16\u1a17"+
		"\5\u033c\u019f\2\u1a17\u1a18\5\u04cc\u0267\2\u1a18\u1a4f\3\2\2\2\u1a19"+
		"\u1a1a\7\u00c1\2\2\u1a1a\u1a1b\5\u033c\u019f\2\u1a1b\u1a1c\5\u04de\u0270"+
		"\2\u1a1c\u1a4f\3\2\2\2\u1a1d\u1a1e\7\u00c1\2\2\u1a1e\u1a1f\5\u033c\u019f"+
		"\2\u1a1f\u1a20\5\u04dc\u026f\2\u1a20\u1a4f\3\2\2\2\u1a21\u1a22\7\u010d"+
		"\2\2\u1a22\u1a23\5\u033c\u019f\2\u1a23\u1a24\5\u04de\u0270\2\u1a24\u1a4f"+
		"\3\2\2\2\u1a25\u1a26\7\u010e\2\2\u1a26\u1a27\5\u033c\u019f\2\u1a27\u1a28"+
		"\5\u04de\u0270\2\u1a28\u1a4f\3\2\2\2\u1a29\u1a2a\7\u0090\2\2\u1a2a\u1a2b"+
		"\7\u0115\2\2\u1a2b\u1a2c\5\u033c\u019f\2\u1a2c\u1a2d\5\u04e2\u0272\2\u1a2d"+
		"\u1a4f\3\2\2\2\u1a2e\u1a2f\7\u0148\2\2\u1a2f\u1a30\5\u033c\u019f\2\u1a30"+
		"\u1a31\5\u04cc\u0267\2\u1a31\u1a4f\3\2\2\2\u1a32\u1a33\7\u019d\2\2\u1a33"+
		"\u1a34\5\u033c\u019f\2\u1a34\u1a35\7\u00ac\2\2\u1a35\u1a4f\3\2\2\2\u1a36"+
		"\u1a37\7\u011b\2\2\u1a37\u1a38\5\u033c\u019f\2\u1a38\u1a39\7\u00ac\2\2"+
		"\u1a39\u1a4f\3\2\2\2\u1a3a\u1a3b\7\u019f\2\2\u1a3b\u1a3c\5\u033c\u019f"+
		"\2\u1a3c\u1a3d\7\u00ac\2\2\u1a3d\u1a4f\3\2\2\2\u1a3e\u1a3f\7\u00c1\2\2"+
		"\u1a3f\u1a40\5\u033c\u019f\2\u1a40\u1a41\7\u00ac\2\2\u1a41\u1a4f\3\2\2"+
		"\2\u1a42\u1a43\7\u010d\2\2\u1a43\u1a44\5\u033c\u019f\2\u1a44\u1a45\7\u00ac"+
		"\2\2\u1a45\u1a4f\3\2\2\2\u1a46\u1a47\7\u010e\2\2\u1a47\u1a48\5\u033c\u019f"+
		"\2\u1a48\u1a49\7\u00ac\2\2\u1a49\u1a4f\3\2\2\2\u1a4a\u1a4b\7\u0148\2\2"+
		"\u1a4b\u1a4c\5\u033c\u019f\2\u1a4c\u1a4d\7\u00ac\2\2\u1a4d\u1a4f\3\2\2"+
		"\2\u1a4e\u1a0d\3\2\2\2\u1a4e\u1a11\3\2\2\2\u1a4e\u1a15\3\2\2\2\u1a4e\u1a19"+
		"\3\2\2\2\u1a4e\u1a1d\3\2\2\2\u1a4e\u1a21\3\2\2\2\u1a4e\u1a25\3\2\2\2\u1a4e"+
		"\u1a29\3\2\2\2\u1a4e\u1a2e\3\2\2\2\u1a4e\u1a32\3\2\2\2\u1a4e\u1a36\3\2"+
		"\2\2\u1a4e\u1a3a\3\2\2\2\u1a4e\u1a3e\3\2\2\2\u1a4e\u1a42\3\2\2\2\u1a4e"+
		"\u1a46\3\2\2\2\u1a4e\u1a4a\3\2\2\2\u1a4f\u033b\3\2\2\2\u1a50\u1a53\7\t"+
		"\2\2\u1a51\u1a53\3\2\2\2\u1a52\u1a50\3\2\2\2\u1a52\u1a51\3\2\2\2\u1a53"+
		"\u033d\3\2\2\2\u1a54\u1a55\7]\2\2\u1a55\u1a56\7\u00a6\2\2\u1a56\u1a57"+
		"\5\u04ce\u0268\2\u1a57\u1a58\5\u00b6\\\2\u1a58\u1a59\5\u0342\u01a2\2\u1a59"+
		"\u1a62\3\2\2\2\u1a5a\u1a5b\7]\2\2\u1a5b\u1a5c\7\u00a6\2\2\u1a5c\u1a5d"+
		"\5\u04ce\u0268\2\u1a5d\u1a5e\7\u0184\2\2\u1a5e\u1a5f\7\u019d\2\2\u1a5f"+
		"\u1a60\5\u04cc\u0267\2\u1a60\u1a62\3\2\2\2\u1a61\u1a54\3\2\2\2\u1a61\u1a5a"+
		"\3\2\2\2\u1a62\u033f\3\2\2\2\u1a63\u1a64\7]\2\2\u1a64\u1a65\7\u00a6\2"+
		"\2\u1a65\u1a66\5\u04ce\u0268\2\u1a66\u1a67\5\u00f8}\2\u1a67\u0341\3\2"+
		"\2\2\u1a68\u1a6d\b\u01a2\1\2\u1a69\u1a6a\f\4\2\2\u1a6a\u1a6c\5\u0344\u01a3"+
		"\2\u1a6b\u1a69\3\2\2\2\u1a6c\u1a6f\3\2\2\2\u1a6d\u1a6b\3\2\2\2\u1a6d\u1a6e"+
		"\3\2\2\2\u1a6e\u0343\3\2\2\2\u1a6f\u1a6d\3\2\2\2\u1a70\u1a71\7\u0090\2"+
		"\2\u1a71\u1a72\7\u0115\2\2\u1a72\u1a73\5\u033c\u019f\2\u1a73\u1a74\5\u04e2"+
		"\u0272\2\u1a74\u0345\3\2\2\2\u1a75\u1a76\7\u00bd\2\2\u1a76\u1a77\7\u00a6"+
		"\2\2\u1a77\u1a7e\5\u04ce\u0268\2\u1a78\u1a79\7\u00bd\2\2\u1a79\u1a7a\7"+
		"\u00a6\2\2\u1a7a\u1a7b\7\u00ea\2\2\u1a7b\u1a7c\7\u00cb\2\2\u1a7c\u1a7e"+
		"\5\u04ce\u0268\2\u1a7d\u1a75\3\2\2\2\u1a7d\u1a78\3\2\2\2\u1a7e\u0347\3"+
		"\2\2\2\u1a7f\u1a80\7\u0098\2\2\u1a80\u1a81\7\u00bb\2\2\u1a81\u1a82\5\u025e"+
		"\u0130\2\u1a82\u1a83\5\u034c\u01a7\2\u1a83\u1a84\5\u041e\u0210\2\u1a84"+
		"\u1a85\5\u0158\u00ad\2\u1a85\u0349\3\2\2\2\u1a86\u1a87\7]\2\2\u1a87\u1a88"+
		"\7\u00bb\2\2\u1a88\u1a89\5\u025e\u0130\2\u1a89\u1a8a\7\u00bd\2\2\u1a8a"+
		"\u1a8b\7\u0091\2\2\u1a8b\u1a8c\5\u04cc\u0267\2\u1a8c\u1a8d\5\u0110\u0089"+
		"\2\u1a8d\u1ab9\3\2\2\2\u1a8e\u1a8f\7]\2\2\u1a8f\u1a90\7\u00bb\2\2\u1a90"+
		"\u1a91\5\u025e\u0130\2\u1a91\u1a92\7\u00bd\2\2\u1a92\u1a93\7\u0091\2\2"+
		"\u1a93\u1a94\7\u00ea\2\2\u1a94\u1a95\7\u00cb\2\2\u1a95\u1a96\5\u04cc\u0267"+
		"\2\u1a96\u1a97\5\u0110\u0089\2\u1a97\u1ab9\3\2\2\2\u1a98\u1a99\7]\2\2"+
		"\u1a99\u1a9a\7\u00bb\2\2\u1a9a\u1a9b\5\u025e\u0130\2\u1a9b\u1a9c\5\u010e"+
		"\u0088\2\u1a9c\u1ab9\3\2\2\2\u1a9d\u1a9e\7]\2\2\u1a9e\u1a9f\7\u00bb\2"+
		"\2\u1a9f\u1aa0\5\u025e\u0130\2\u1aa0\u1aa1\7W\2\2\u1aa1\u1aa2\5\u0166"+
		"\u00b4\2\u1aa2\u1ab9\3\2\2\2\u1aa3\u1aa4\7]\2\2\u1aa4\u1aa5\7\u00bb\2"+
		"\2\u1aa5\u1aa6\5\u025e\u0130\2\u1aa6\u1aa7\7\u01be\2\2\u1aa7\u1aa8\7\u0091"+
		"\2\2\u1aa8\u1aa9\5\u04cc\u0267\2\u1aa9\u1ab9\3\2\2\2\u1aaa\u1aab\7]\2"+
		"\2\u1aab\u1aac\7\u00bb\2\2\u1aac\u1aad\5\u025e\u0130\2\u1aad\u1aae\7\u00bd"+
		"\2\2\u1aae\u1aaf\7\u012d\2\2\u1aaf\u1ab0\7\u0132\2\2\u1ab0\u1ab9\3\2\2"+
		"\2\u1ab1\u1ab2\7]\2\2\u1ab2\u1ab3\7\u00bb\2\2\u1ab3\u1ab4\5\u025e\u0130"+
		"\2\u1ab4\u1ab5\7\u0184\2\2\u1ab5\u1ab6\7\u012d\2\2\u1ab6\u1ab7\7\u0132"+
		"\2\2\u1ab7\u1ab9\3\2\2\2\u1ab8\u1a86\3\2\2\2\u1ab8\u1a8e\3\2\2\2\u1ab8"+
		"\u1a98\3\2\2\2\u1ab8\u1a9d\3\2\2\2\u1ab8\u1aa3\3\2\2\2\u1ab8\u1aaa\3\2"+
		"\2\2\u1ab8\u1ab1\3\2\2\2\u1ab9\u034b\3\2\2\2\u1aba\u1abd\7d\2\2\u1abb"+
		"\u1abd\3\2\2\2\u1abc\u1aba\3\2\2\2\u1abc\u1abb\3\2\2\2\u1abd\u034d\3\2"+
		"\2\2\u1abe\u1abf\7]\2\2\u1abf\u1ac0\7\u01a1\2\2\u1ac0\u1ac1\7\u017a\2"+
		"\2\u1ac1\u1ac2\7\u00b5\2\2\u1ac2\u1ac3\5\u025e\u0130\2\u1ac3\u1ac4\5\u0224"+
		"\u0113\2\u1ac4\u034f\3\2\2\2\u1ac5\u1ac6\7]\2\2\u1ac6\u1ac7\7\u01a1\2"+
		"\2\u1ac7\u1ac8\7\u017a\2\2\u1ac8\u1ac9\7\u008f\2\2\u1ac9\u1aca\5\u025e"+
		"\u0130\2\u1aca\u1acb\7]\2\2\u1acb\u1acc\7\u011d\2\2\u1acc\u1acd\7\u00d6"+
		"\2\2\u1acd\u1ace\5\u04ca\u0266\2\u1ace\u1acf\7\u0169\2\2\u1acf\u1ad0\5"+
		"\u025e\u0130\2\u1ad0\u1ad1\7\u01cd\2\2\u1ad1\u1ad2\5\u025e\u0130\2\u1ad2"+
		"\u1b0e\3\2\2\2\u1ad3\u1ad4\7]\2\2\u1ad4\u1ad5\7\u01a1\2\2\u1ad5\u1ad6"+
		"\7\u017a\2\2\u1ad6\u1ad7\7\u008f\2\2\u1ad7\u1ad8\5\u025e\u0130\2\u1ad8"+
		"\u1ad9\7W\2\2\u1ad9\u1ada\7\u011d\2\2\u1ada\u1adb\7\u00d6\2\2\u1adb\u1adc"+
		"\5\u04ca\u0266\2\u1adc\u1add\7\u01cd\2\2\u1add\u1ade\5\u025c\u012f\2\u1ade"+
		"\u1b0e\3\2\2\2\u1adf\u1ae0\7]\2\2\u1ae0\u1ae1\7\u01a1\2\2\u1ae1\u1ae2"+
		"\7\u017a\2\2\u1ae2\u1ae3\7\u008f\2\2\u1ae3\u1ae4\5\u025e\u0130\2\u1ae4"+
		"\u1ae5\7]\2\2\u1ae5\u1ae6\7\u011d\2\2\u1ae6\u1ae7\7\u00d6\2\2\u1ae7\u1ae8"+
		"\5\u04ca\u0266\2\u1ae8\u1ae9\7\u01cd\2\2\u1ae9\u1aea\5\u025c\u012f\2\u1aea"+
		"\u1b0e\3\2\2\2\u1aeb\u1aec\7]\2\2\u1aec\u1aed\7\u01a1\2\2\u1aed\u1aee"+
		"\7\u017a\2\2\u1aee\u1aef\7\u008f\2\2\u1aef\u1af0\5\u025e\u0130\2\u1af0"+
		"\u1af1\7]\2\2\u1af1\u1af2\7\u011d\2\2\u1af2\u1af3\7\u0169\2\2\u1af3\u1af4"+
		"\5\u025e\u0130\2\u1af4\u1af5\7\u01cd\2\2\u1af5\u1af6\5\u025e\u0130\2\u1af6"+
		"\u1b0e\3\2\2\2\u1af7\u1af8\7]\2\2\u1af8\u1af9\7\u01a1\2\2\u1af9\u1afa"+
		"\7\u017a\2\2\u1afa\u1afb\7\u008f\2\2\u1afb\u1afc\5\u025e\u0130\2\u1afc"+
		"\u1afd\7\u00bd\2\2\u1afd\u1afe\7\u011d\2\2\u1afe\u1aff\7\u00d6\2\2\u1aff"+
		"\u1b00\5\u04ca\u0266\2\u1b00\u1b0e\3\2\2\2\u1b01\u1b02\7]\2\2\u1b02\u1b03"+
		"\7\u01a1\2\2\u1b03\u1b04\7\u017a\2\2\u1b04\u1b05\7\u008f\2\2\u1b05\u1b06"+
		"\5\u025e\u0130\2\u1b06\u1b07\7\u00bd\2\2\u1b07\u1b08\7\u011d\2\2\u1b08"+
		"\u1b09\7\u00ea\2\2\u1b09\u1b0a\7\u00cb\2\2\u1b0a\u1b0b\7\u00d6\2\2\u1b0b"+
		"\u1b0c\5\u04ca\u0266\2\u1b0c\u1b0e\3\2\2\2\u1b0d\u1ac5\3\2\2\2\u1b0d\u1ad3"+
		"\3\2\2\2\u1b0d\u1adf\3\2\2\2\u1b0d\u1aeb\3\2\2\2\u1b0d\u1af7\3\2\2\2\u1b0d"+
		"\u1b01\3\2\2\2\u1b0e\u0351\3\2\2\2\u1b0f\u1b10\7\u0098\2\2\u1b10\u1b11"+
		"\5\u0240\u0121\2\u1b11\u1b12\7\u0095\2\2\u1b12\u1b13\5\u025e\u0130\2\u1b13"+
		"\u1b14\7\u00d6\2\2\u1b14\u1b15\5\u04de\u0270\2\u1b15\u1b16\7\u01a5\2\2"+
		"\u1b16\u1b17\5\u04de\u0270\2\u1b17\u1b18\7\u00db\2\2\u1b18\u1b19\5\u025e"+
		"\u0130\2\u1b19\u0353\3\2\2\2\u1b1a\u1b1b\7\u0085\2\2\u1b1b\u1b1c\5\u0362"+
		"\u01b2\2\u1b1c\u1b1d\5\u04c8\u0265\2\u1b1d\u1b1e\5\u0356\u01ac\2\u1b1e"+
		"\u1b28\3\2\2\2\u1b1f\u1b20\7\u0085\2\2\u1b20\u1b21\5\u0362\u01b2\2\u1b21"+
		"\u1b22\5\u04d4\u026b\2\u1b22\u1b23\7\u013b\2\2\u1b23\u1b24\5\u04c8\u0265"+
		"\2\u1b24\u1b28\3\2\2\2\u1b25\u1b26\7\u0085\2\2\u1b26\u1b28\5\u0362\u01b2"+
		"\2\u1b27\u1b1a\3\2\2\2\u1b27\u1b1f\3\2\2\2\u1b27\u1b25\3\2\2\2\u1b28\u0355"+
		"\3\2\2\2\u1b29\u1b2a\7\u01bb\2\2\u1b2a\u1b2d\5\u04d4\u026b\2\u1b2b\u1b2d"+
		"\3\2\2\2\u1b2c\u1b29\3\2\2\2\u1b2c\u1b2b\3\2\2\2\u1b2d\u0357\3\2\2\2\u1b2e"+
		"\u1b2f\7\u01bc\2\2\u1b2f\u1b30\7\5\2\2\u1b30\u1b31\5\u035a\u01ae\2\u1b31"+
		"\u1b32\7\6\2\2\u1b32\u1b33\5\u04c8\u0265\2\u1b33\u1b34\5\u0368\u01b5\2"+
		"\u1b34\u1b4c\3\2\2\2\u1b35\u1b36\7\u01bc\2\2\u1b36\u1b37\7\5\2\2\u1b37"+
		"\u1b38\5\u035a\u01ae\2\u1b38\u1b39\7\6\2\2\u1b39\u1b4c\3\2\2\2\u1b3a\u1b3b"+
		"\7\u01bc\2\2\u1b3b\u1b3c\5\u0364\u01b3\2\u1b3c\u1b3d\5\u0366\u01b4\2\u1b3d"+
		"\u1b3e\5\u0362\u01b2\2\u1b3e\u1b3f\5\u04c8\u0265\2\u1b3f\u1b4c\3\2\2\2"+
		"\u1b40\u1b41\7\u01bc\2\2\u1b41\u1b42\5\u0364\u01b3\2\u1b42\u1b43\5\u0366"+
		"\u01b4\2\u1b43\u1b44\5\u0362\u01b2\2\u1b44\u1b45\5\u035e\u01b0\2\u1b45"+
		"\u1b4c\3\2\2\2\u1b46\u1b47\7\u01bc\2\2\u1b47\u1b48\5\u0364\u01b3\2\u1b48"+
		"\u1b49\5\u0366\u01b4\2\u1b49\u1b4a\5\u0362\u01b2\2\u1b4a\u1b4c\3\2\2\2"+
		"\u1b4b\u1b2e\3\2\2\2\u1b4b\u1b35\3\2\2\2\u1b4b\u1b3a\3\2\2\2\u1b4b\u1b40"+
		"\3\2\2\2\u1b4b\u1b46\3\2\2\2\u1b4c\u0359\3\2\2\2\u1b4d\u1b4e\b\u01ae\1"+
		"\2\u1b4e\u1b4f\5\u035c\u01af\2\u1b4f\u1b55\3\2\2\2\u1b50\u1b51\f\4\2\2"+
		"\u1b51\u1b52\7\7\2\2\u1b52\u1b54\5\u035c\u01af\2\u1b53\u1b50\3\2\2\2\u1b54"+
		"\u1b57\3\2\2\2\u1b55\u1b53\3\2\2\2\u1b55\u1b56\3\2\2\2\u1b56\u035b\3\2"+
		"\2\2\u1b57\u1b55\3\2\2\2\u1b58\u1b5d\5\u0360\u01b1\2\u1b59\u1b5d\7\u01c5"+
		"\2\2\u1b5a\u1b5d\7\u00da\2\2\u1b5b\u1b5d\7\u00dc\2\2\u1b5c\u1b58\3\2\2"+
		"\2\u1b5c\u1b59\3\2\2\2\u1b5c\u1b5a\3\2\2\2\u1b5c\u1b5b\3\2\2\2\u1b5d\u035d"+
		"\3\2\2\2\u1b5e\u1b5f\5\u0360\u01b1\2\u1b5f\u1b60\5\u0362\u01b2\2\u1b60"+
		"\u1b61\5\u04c8\u0265\2\u1b61\u1b62\5\u0368\u01b5\2\u1b62\u1b67\3\2\2\2"+
		"\u1b63\u1b64\5\u0360\u01b1\2\u1b64\u1b65\5\u0362\u01b2\2\u1b65\u1b67\3"+
		"\2\2\2\u1b66\u1b5e\3\2\2\2\u1b66\u1b63\3\2\2\2\u1b67\u035f\3\2\2\2\u1b68"+
		"\u1b69\t\17\2\2\u1b69\u0361\3\2\2\2\u1b6a\u1b6d\7\u01c5\2\2\u1b6b\u1b6d"+
		"\3\2\2\2\u1b6c\u1b6a\3\2\2\2\u1b6c\u1b6b\3\2\2\2\u1b6d\u0363\3\2\2\2\u1b6e"+
		"\u1b71\7\u00dc\2\2\u1b6f\u1b71\3\2\2\2\u1b70\u1b6e\3\2\2\2\u1b70\u1b6f"+
		"\3\2\2\2\u1b71\u0365\3\2\2\2\u1b72\u1b75\7\u00da\2\2\u1b73\u1b75\3\2\2"+
		"\2\u1b74\u1b72\3\2\2\2\u1b74\u1b73\3\2\2\2\u1b75\u0367\3\2\2\2\u1b76\u1b77"+
		"\7\5\2\2\u1b77\u1b78\5\u04ca\u0266\2\u1b78\u1b79\7\6\2\2\u1b79\u1b7c\3"+
		"\2\2\2\u1b7a\u1b7c\3\2\2\2\u1b7b\u1b76\3\2\2\2\u1b7b\u1b7a\3\2\2\2\u1b7c"+
		"\u0369\3\2\2\2\u1b7d\u1b7e\7\u00cc\2\2\u1b7e\u1b7f\7\5\2\2\u1b7f\u1b80"+
		"\5\u036e\u01b8\2\u1b80\u1b81\7\6\2\2\u1b81\u1b82\5\u036c\u01b7\2\u1b82"+
		"\u1b8e\3\2\2\2\u1b83\u1b84\7\u00cc\2\2\u1b84\u1b85\5\u0360\u01b1\2\u1b85"+
		"\u1b86\5\u0362\u01b2\2\u1b86\u1b87\5\u036c\u01b7\2\u1b87\u1b8e\3\2\2\2"+
		"\u1b88\u1b89\7\u00cc\2\2\u1b89\u1b8e\5\u036c\u01b7\2\u1b8a\u1b8b\7\u00cc"+
		"\2\2\u1b8b\u1b8c\7\u01c5\2\2\u1b8c\u1b8e\5\u036c\u01b7\2\u1b8d\u1b7d\3"+
		"\2\2\2\u1b8d\u1b83\3\2\2\2\u1b8d\u1b88\3\2\2\2\u1b8d\u1b8a\3\2\2\2\u1b8e"+
		"\u036b\3\2\2\2\u1b8f\u1b97\5\u03ae\u01d8\2\u1b90\u1b97\5\u0382\u01c2\2"+
		"\u1b91\u1b97\5\u0398\u01cd\2\u1b92\u1b97\5\u038c\u01c7\2\u1b93\u1b97\5"+
		"\u03a6\u01d4\2\u1b94\u1b97\5\u018e\u00c8\2\u1b95\u1b97\5\u037c\u01bf\2"+
		"\u1b96\u1b8f";
	private static final String _serializedATNSegment3 =
		"\3\2\2\2\u1b96\u1b90\3\2\2\2\u1b96\u1b91\3\2\2\2\u1b96\u1b92\3\2\2\2\u1b96"+
		"\u1b93\3\2\2\2\u1b96\u1b94\3\2\2\2\u1b96\u1b95\3\2\2\2\u1b97\u036d\3\2"+
		"\2\2\u1b98\u1b99\b\u01b8\1\2\u1b99\u1b9a\5\u0370\u01b9\2\u1b9a\u1ba0\3"+
		"\2\2\2\u1b9b\u1b9c\f\4\2\2\u1b9c\u1b9d\7\7\2\2\u1b9d\u1b9f\5\u0370\u01b9"+
		"\2\u1b9e\u1b9b\3\2\2\2\u1b9f\u1ba2\3\2\2\2\u1ba0\u1b9e\3\2\2\2\u1ba0\u1ba1"+
		"\3\2\2\2\u1ba1\u036f\3\2\2\2\u1ba2\u1ba0\3\2\2\2\u1ba3\u1ba4\5\u0372\u01ba"+
		"\2\u1ba4\u1ba5\5\u0374\u01bb\2\u1ba5\u0371\3\2\2\2\u1ba6\u1baa\5\u04e4"+
		"\u0273\2\u1ba7\u1baa\5\u0360\u01b1\2\u1ba8\u1baa\7\u01c5\2\2\u1ba9\u1ba6"+
		"\3\2\2\2\u1ba9\u1ba7\3\2\2\2\u1ba9\u1ba8\3\2\2\2\u1baa\u0373\3\2\2\2\u1bab"+
		"\u1baf\5\u00eex\2\u1bac\u1baf\5\u01a0\u00d1\2\u1bad\u1baf\3\2\2\2\u1bae"+
		"\u1bab\3\2\2\2\u1bae\u1bac\3\2\2\2\u1bae\u1bad\3\2\2\2\u1baf\u0375\3\2"+
		"\2\2\u1bb0\u1bb1\7\u0153\2\2\u1bb1\u1bb2\5\u04cc\u0267\2\u1bb2\u1bb3\5"+
		"\u0378\u01bd\2\u1bb3\u1bb4\7d\2\2\u1bb4\u1bb5\5\u037a\u01be\2\u1bb5\u0377"+
		"\3\2\2\2\u1bb6\u1bb7\7\5\2\2\u1bb7\u1bb8\5\u048e\u0248\2\u1bb8\u1bb9\7"+
		"\6\2\2\u1bb9\u1bbc\3\2\2\2\u1bba\u1bbc\3\2\2\2\u1bbb\u1bb6\3\2\2\2\u1bbb"+
		"\u1bba\3\2\2\2\u1bbc\u0379\3\2\2\2\u1bbd\u1bc2\5\u03ae\u01d8\2\u1bbe\u1bc2"+
		"\5\u0382\u01c2\2\u1bbf\u1bc2\5\u0398\u01cd\2\u1bc0\u1bc2\5\u038c\u01c7"+
		"\2\u1bc1\u1bbd\3\2\2\2\u1bc1\u1bbe\3\2\2\2\u1bc1\u1bbf\3\2\2\2\u1bc1\u1bc0"+
		"\3\2\2\2\u1bc2\u037b\3\2\2\2\u1bc3\u1bc4\7\u0098\2\2\u1bc4\u1bc5\5\u0146"+
		"\u00a4\2\u1bc5\u1bc6\7\u019b\2\2\u1bc6\u1bc7\5\u0190\u00c9\2\u1bc7\u1bc8"+
		"\7d\2\2\u1bc8\u1bc9\7\u00ca\2\2\u1bc9\u1bca\5\u04cc\u0267\2\u1bca\u1bcb"+
		"\5\u037e\u01c0\2\u1bcb\u1bcc\5\u0192\u00ca\2\u1bcc\u1bd2\3\2\2\2\u1bcd"+
		"\u1bce\7\u00ca\2\2\u1bce\u1bcf\5\u04cc\u0267\2\u1bcf\u1bd0\5\u037e\u01c0"+
		"\2\u1bd0\u1bd2\3\2\2\2\u1bd1\u1bc3\3\2\2\2\u1bd1\u1bcd\3\2\2\2\u1bd2\u037d"+
		"\3\2\2\2\u1bd3\u1bd4\7\5\2\2\u1bd4\u1bd5\5\u0488\u0245\2\u1bd5\u1bd6\7"+
		"\6\2\2\u1bd6\u1bd9\3\2\2\2\u1bd7\u1bd9\3\2\2\2\u1bd8\u1bd3\3\2\2\2\u1bd8"+
		"\u1bd7\3\2\2\2\u1bd9\u037f\3\2\2\2\u1bda\u1bdb\7\u00a8\2\2\u1bdb\u1be5"+
		"\5\u04cc\u0267\2\u1bdc\u1bdd\7\u00a8\2\2\u1bdd\u1bde\7\u0153\2\2\u1bde"+
		"\u1be5\5\u04cc\u0267\2\u1bdf\u1be0\7\u00a8\2\2\u1be0\u1be5\7[\2\2\u1be1"+
		"\u1be2\7\u00a8\2\2\u1be2\u1be3\7\u0153\2\2\u1be3\u1be5\7[\2\2\u1be4\u1bda"+
		"\3\2\2\2\u1be4\u1bdc\3\2\2\2\u1be4\u1bdf\3\2\2\2\u1be4\u1be1\3\2\2\2\u1be5"+
		"\u0381\3\2\2\2\u1be6\u1be7\5\u03be\u01e0\2\u1be7\u1be8\7\u00fc\2\2\u1be8"+
		"\u1be9\7\u0102\2\2\u1be9\u1bea\5\u04c8\u0265\2\u1bea\u1beb\5\u0384\u01c3"+
		"\2\u1beb\u1bec\5\u038a\u01c6\2\u1bec\u0383\3\2\2\2\u1bed\u1bee\7\5\2\2"+
		"\u1bee\u1bef\5\u0386\u01c4\2\u1bef\u1bf0\7\6\2\2\u1bf0\u1bf1\5\u03ae\u01d8"+
		"\2\u1bf1\u1bf6\3\2\2\2\u1bf2\u1bf6\5\u03ae\u01d8\2\u1bf3\u1bf4\7\u00ac"+
		"\2\2\u1bf4\u1bf6\7\u01c1\2\2\u1bf5\u1bed\3\2\2\2\u1bf5\u1bf2\3\2\2\2\u1bf5"+
		"\u1bf3\3\2\2\2\u1bf6\u0385\3\2\2\2\u1bf7\u1bf8\b\u01c4\1\2\u1bf8\u1bf9"+
		"\5\u0388\u01c5\2\u1bf9\u1bff\3\2\2\2\u1bfa\u1bfb\f\4\2\2\u1bfb\u1bfc\7"+
		"\7\2\2\u1bfc\u1bfe\5\u0388\u01c5\2\u1bfd\u1bfa\3\2\2\2\u1bfe\u1c01\3\2"+
		"\2\2\u1bff\u1bfd\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00\u0387\3\2\2\2\u1c01"+
		"\u1bff\3\2\2\2\u1c02\u1c03\5\u04e4\u0273\2\u1c03\u1c04\5\u04b8\u025d\2"+
		"\u1c04\u0389\3\2\2\2\u1c05\u1c06\7\u016e\2\2\u1c06\u1c07\5\u04c2\u0262"+
		"\2\u1c07\u1c08\5\u03c0\u01e1\2\u1c08\u1c0b\3\2\2\2\u1c09\u1c0b\3\2\2\2"+
		"\u1c0a\u1c05\3\2\2\2\u1c0a\u1c09\3\2\2\2\u1c0b\u038b\3\2\2\2\u1c0c\u1c0d"+
		"\5\u03be\u01e0\2\u1c0d\u1c0e\7\u00b1\2\2\u1c0e\u1c0f\7\u00db\2\2\u1c0f"+
		"\u1c10\5\u0410\u0209\2\u1c10\u1c11\5\u038e\u01c8\2\u1c11\u1c12\5\u0416"+
		"\u020c\2\u1c12\u1c13\5\u038a\u01c6\2\u1c13\u1c14\5\u03c0\u01e1\2\u1c14"+
		"\u038d\3\2\2\2\u1c15\u1c16\7\u01bb\2\2\u1c16\u1c19\5\u03fc\u01ff\2\u1c17"+
		"\u1c19\3\2\2\2\u1c18\u1c15\3\2\2\2\u1c18\u1c17\3\2\2\2\u1c19\u038f\3\2"+
		"\2\2\u1c1a\u1c1b\7\u011c\2\2\u1c1b\u1c1c\5\u03c8\u01e5\2\u1c1c\u1c1d\5"+
		"\u040e\u0208\2\u1c1d\u1c1e\5\u0392\u01ca\2\u1c1e\u1c1f\5\u0396\u01cc\2"+
		"\u1c1f\u0391\3\2\2\2\u1c20\u1c21\7\u00ef\2\2\u1c21\u1c22\5\u0394\u01cb"+
		"\2\u1c22\u1c23\7\u0122\2\2\u1c23\u1c26\3\2\2\2\u1c24\u1c26\3\2\2\2\u1c25"+
		"\u1c20\3\2\2\2\u1c25\u1c24\3\2\2\2\u1c26\u0393\3\2\2\2\u1c27\u1c28\7U"+
		"\2\2\u1c28\u1c38\7\u0186\2\2\u1c29\u1c2a\7\u0174\2\2\u1c2a\u1c38\7\u0186"+
		"\2\2\u1c2b\u1c2c\7\u0174\2\2\u1c2c\u1c38\7\u00c9\2\2\u1c2d\u1c2e\7\u0186"+
		"\2\2\u1c2e\u1c2f\7\u01b9\2\2\u1c2f\u1c38\7\u00c9\2\2\u1c30\u1c38\7\u0186"+
		"\2\2\u1c31\u1c32\7\u0186\2\2\u1c32\u1c33\7\u0174\2\2\u1c33\u1c38\7\u00c9"+
		"\2\2\u1c34\u1c38\7\u00c9\2\2\u1c35\u1c36\7U\2\2\u1c36\u1c38\7\u00c9\2"+
		"\2\u1c37\u1c27\3\2\2\2\u1c37\u1c29\3\2\2\2\u1c37\u1c2b\3\2\2\2\u1c37\u1c2d"+
		"\3\2\2\2\u1c37\u1c30\3\2\2\2\u1c37\u1c31\3\2\2\2\u1c37\u1c34\3\2\2\2\u1c37"+
		"\u1c35\3\2\2\2\u1c38\u0395\3\2\2\2\u1c39\u1c3c\7\u0131\2\2\u1c3a\u1c3c"+
		"\3\2\2\2\u1c3b\u1c39\3\2\2\2\u1c3b\u1c3a\3\2\2\2\u1c3c\u0397\3\2\2\2\u1c3d"+
		"\u1c3e\5\u03be\u01e0\2\u1c3e\u1c3f\7\u01b9\2\2\u1c3f\u1c40\5\u0410\u0209"+
		"\2\u1c40\u1c41\7\u0184\2\2\u1c41\u1c42\5\u039a\u01ce\2\u1c42\u1c43\5\u03fa"+
		"\u01fe\2\u1c43\u1c44\5\u0416\u020c\2\u1c44\u1c45\5\u038a\u01c6\2\u1c45"+
		"\u1c46\5\u03c0\u01e1\2\u1c46\u0399\3\2\2\2\u1c47\u1c48\b\u01ce\1\2\u1c48"+
		"\u1c49\5\u039c\u01cf\2\u1c49\u1c4f\3\2\2\2\u1c4a\u1c4b\f\4\2\2\u1c4b\u1c4c"+
		"\7\7\2\2\u1c4c\u1c4e\5\u039c\u01cf\2\u1c4d\u1c4a\3\2\2\2\u1c4e\u1c51\3"+
		"\2\2\2\u1c4f\u1c4d\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u039b\3\2\2\2\u1c51"+
		"\u1c4f\3\2\2\2\u1c52\u1c55\5\u039e\u01d0\2\u1c53\u1c55\5\u03a0\u01d1\2"+
		"\u1c54\u1c52\3\2\2\2\u1c54\u1c53\3\2\2\2\u1c55\u039d\3\2\2\2\u1c56\u1c57"+
		"\5\u03a2\u01d2\2\u1c57\u1c58\7\t\2\2\u1c58\u1c59\5\u04bc\u025f\2\u1c59"+
		"\u039f\3\2\2\2\u1c5a\u1c5b\7\5\2\2\u1c5b\u1c5c\5\u03a4\u01d3\2\u1c5c\u1c5d"+
		"\7\6\2\2\u1c5d\u1c5e\7\t\2\2\u1c5e\u1c5f\5\u04c0\u0261\2\u1c5f\u03a1\3"+
		"\2\2\2\u1c60\u1c61\5\u04e4\u0273\2\u1c61\u1c62\5\u04b8\u025d\2\u1c62\u03a3"+
		"\3\2\2\2\u1c63\u1c64\b\u01d3\1\2\u1c64\u1c65\5\u03a2\u01d2\2\u1c65\u1c6b"+
		"\3\2\2\2\u1c66\u1c67\f\4\2\2\u1c67\u1c68\7\7\2\2\u1c68\u1c6a\5\u03a2\u01d2"+
		"\2\u1c69\u1c66\3\2\2\2\u1c6a\u1c6d\3\2\2\2\u1c6b\u1c69\3\2\2\2\u1c6b\u1c6c"+
		"\3\2\2\2\u1c6c\u03a5\3\2\2\2\u1c6d\u1c6b\3\2\2\2\u1c6e\u1c6f\7\u00ab\2"+
		"\2\u1c6f\u1c70\5\u03a8\u01d5\2\u1c70\u1c71\5\u03aa\u01d6\2\u1c71\u1c72"+
		"\7\u00a3\2\2\u1c72\u1c73\5\u03ac\u01d7\2\u1c73\u1c74\7\u00d6\2\2\u1c74"+
		"\u1c75\5\u03ae\u01d8\2\u1c75\u03a7\3\2\2\2\u1c76\u1c77\5\u04cc\u0267\2"+
		"\u1c77\u03a9\3\2\2\2\u1c78\u1c84\b\u01d6\1\2\u1c79\u1c7a\f\7\2\2\u1c7a"+
		"\u1c7b\7\u012b\2\2\u1c7b\u1c83\7\u0179\2\2\u1c7c\u1c7d\f\6\2\2\u1c7d\u1c83"+
		"\7\u0179\2\2\u1c7e\u1c7f\f\5\2\2\u1c7f\u1c83\7q\2\2\u1c80\u1c81\f\4\2"+
		"\2\u1c81\u1c83\7\u00fb\2\2\u1c82\u1c79\3\2\2\2\u1c82\u1c7c\3\2\2\2\u1c82"+
		"\u1c7e\3\2\2\2\u1c82\u1c80\3\2\2\2\u1c83\u1c86\3\2\2\2\u1c84\u1c82\3\2"+
		"\2\2\u1c84\u1c85\3\2\2\2\u1c85\u03ab\3\2\2\2\u1c86\u1c84\3\2\2\2\u1c87"+
		"\u1c8d\3\2\2\2\u1c88\u1c89\7\u01cd\2\2\u1c89\u1c8d\7\u00e7\2\2\u1c8a\u1c8b"+
		"\7\u01ce\2\2\u1c8b\u1c8d\7\u00e7\2\2\u1c8c\u1c87\3\2\2\2\u1c8c\u1c88\3"+
		"\2\2\2\u1c8c\u1c8a\3\2\2\2\u1c8d\u03ad\3\2\2\2\u1c8e\u1c91\5\u03b2\u01da"+
		"\2\u1c8f\u1c91\5\u03b0\u01d9\2\u1c90\u1c8e\3\2\2\2\u1c90\u1c8f\3\2\2\2"+
		"\u1c91\u03af\3\2\2\2\u1c92\u1c93\b\u01d9\1\2\u1c93\u1c94\7\5\2\2\u1c94"+
		"\u1c95\5\u03b2\u01da\2\u1c95\u1c96\7\6\2\2\u1c96\u1c9c\3\2\2\2\u1c97\u1c98"+
		"\7\5\2\2\u1c98\u1c99\5\u03b0\u01d9\2\u1c99\u1c9a\7\6\2\2\u1c9a\u1c9c\3"+
		"\2\2\2\u1c9b\u1c92\3\2\2\2\u1c9b\u1c97\3\2\2\2\u1c9c\u1cae\3\2\2\2\u1c9d"+
		"\u1c9e\f\5\2\2\u1c9e\u1c9f\7\u01b3\2\2\u1c9f\u1ca0\5\u03ca\u01e6\2\u1ca0"+
		"\u1ca1\5\u03b4\u01db\2\u1ca1\u1cad\3\2\2\2\u1ca2\u1ca3\f\4\2\2\u1ca3\u1ca4"+
		"\7\u0100\2\2\u1ca4\u1ca5\5\u03ca\u01e6\2\u1ca5\u1ca6\5\u03b4\u01db\2\u1ca6"+
		"\u1cad\3\2\2\2\u1ca7\u1ca8\f\3\2\2\u1ca8\u1ca9\7\u00c6\2\2\u1ca9\u1caa"+
		"\5\u03ca\u01e6\2\u1caa\u1cab\5\u03b4\u01db\2\u1cab\u1cad\3\2\2\2\u1cac"+
		"\u1c9d\3\2\2\2\u1cac\u1ca2\3\2\2\2\u1cac\u1ca7\3\2\2\2\u1cad\u1cb0\3\2"+
		"\2\2\u1cae\u1cac\3\2\2\2\u1cae\u1caf\3\2\2\2\u1caf\u03b1\3\2\2\2\u1cb0"+
		"\u1cae\3\2\2\2\u1cb1\u1cb2\5\u03b8\u01dd\2\u1cb2\u1cb3\5\u03b4\u01db\2"+
		"\u1cb3\u1cb4\5\u03ce\u01e8\2\u1cb4\u1cb5\5\u03ee\u01f8\2\u1cb5\u1cb6\5"+
		"\u03d8\u01ed\2\u1cb6\u1cb7\5\u03c0\u01e1\2\u1cb7\u1cd6\3\2\2\2\u1cb8\u1cb9"+
		"\5\u03b8\u01dd\2\u1cb9\u1cba\5\u03b4\u01db\2\u1cba\u1cbb\5\u03ce\u01e8"+
		"\2\u1cbb\u1cbc\5\u03d6\u01ec\2\u1cbc\u1cbd\5\u03f0\u01f9\2\u1cbd\u1cd6"+
		"\3\2\2\2\u1cbe\u1cbf\5\u03b4\u01db\2\u1cbf\u1cc0\5\u03ce\u01e8\2\u1cc0"+
		"\u1cc1\5\u03ee\u01f8\2\u1cc1\u1cc2\5\u03d8\u01ed\2\u1cc2\u1cc3\5\u03c0"+
		"\u01e1\2\u1cc3\u1cd6\3\2\2\2\u1cc4\u1cc5\5\u03b4\u01db\2\u1cc5\u1cc6\5"+
		"\u03ce\u01e8\2\u1cc6\u1cc7\5\u03d6\u01ec\2\u1cc7\u1cc8\5\u03c0\u01e1\2"+
		"\u1cc8\u1cc9\5\u03f0\u01f9\2\u1cc9\u1cd6\3\2\2\2\u1cca\u1ccb\5\u03b8\u01dd"+
		"\2\u1ccb\u1ccc\5\u03b4\u01db\2\u1ccc\u1ccd\5\u03d0\u01e9\2\u1ccd\u1cd6"+
		"\3\2\2\2\u1cce\u1ccf\5\u03b4\u01db\2\u1ccf\u1cd0\5\u03d0\u01e9\2\u1cd0"+
		"\u1cd6\3\2\2\2\u1cd1\u1cd2\5\u03b8\u01dd\2\u1cd2\u1cd3\5\u03b4\u01db\2"+
		"\u1cd3\u1cd6\3\2\2\2\u1cd4\u1cd6\5\u03b6\u01dc\2\u1cd5\u1cb1\3\2\2\2\u1cd5"+
		"\u1cb8\3\2\2\2\u1cd5\u1cbe\3\2\2\2\u1cd5\u1cc4\3\2\2\2\u1cd5\u1cca\3\2"+
		"\2\2\u1cd5\u1cce\3\2\2\2\u1cd5\u1cd1\3\2\2\2\u1cd5\u1cd4\3\2\2\2\u1cd6"+
		"\u03b3\3\2\2\2\u1cd7\u1cda\5\u03b6\u01dc\2\u1cd8\u1cda\5\u03b0\u01d9\2"+
		"\u1cd9\u1cd7\3\2\2\2\u1cd9\u1cd8\3\2\2\2\u1cda\u03b5\3\2\2\2\u1cdb\u1cdc"+
		"\b\u01dc\1\2\u1cdc\u1cdd\7\u017d\2\2\u1cdd\u1cde\5\u03cc\u01e7\2\u1cde"+
		"\u1cdf\5\u04c2\u0262\2\u1cdf\u1ce0\5\u03c0\u01e1\2\u1ce0\u1ce1\5\u03fa"+
		"\u01fe\2\u1ce1\u1ce2\5\u0414\u020b\2\u1ce2\u1ce3\5\u03ea\u01f6\2\u1ce3"+
		"\u1ce4\5\u03ec\u01f7\2\u1ce4\u1ce5\5\u0466\u0234\2\u1ce5\u1cfe\3\2\2\2"+
		"\u1ce6\u1ce7\7\u017d\2\2\u1ce7\u1ce8\5\u03cc\u01e7\2\u1ce8\u1ce9\5\u04c2"+
		"\u0262\2\u1ce9\u1cea\5\u03fa\u01fe\2\u1cea\u1ceb\5\u03c0\u01e1\2\u1ceb"+
		"\u1cec\5\u0414\u020b\2\u1cec\u1ced\5\u03ea\u01f6\2\u1ced\u1cee\5\u03ec"+
		"\u01f7\2\u1cee\u1cef\5\u0466\u0234\2\u1cef\u1cfe\3\2\2\2\u1cf0\u1cf1\7"+
		"\u017d\2\2\u1cf1\u1cf2\5\u03cc\u01e7\2\u1cf2\u1cf3\5\u04c2\u0262\2\u1cf3"+
		"\u1cf4\5\u03fa\u01fe\2\u1cf4\u1cf5\5\u0414\u020b\2\u1cf5\u1cf6\5\u03c0"+
		"\u01e1\2\u1cf6\u1cf7\5\u03ea\u01f6\2\u1cf7\u1cf8\5\u03ec\u01f7\2\u1cf8"+
		"\u1cf9\5\u0466\u0234\2\u1cf9\u1cfe\3\2\2\2\u1cfa\u1cfe\5\u03f8\u01fd\2"+
		"\u1cfb\u1cfc\7\u019b\2\2\u1cfc\u1cfe\5\u040c\u0207\2\u1cfd\u1cdb\3\2\2"+
		"\2\u1cfd\u1ce6\3\2\2\2\u1cfd\u1cf0\3\2\2\2\u1cfd\u1cfa\3\2\2\2\u1cfd\u1cfb"+
		"\3\2\2\2\u1cfe\u1d10\3\2\2\2\u1cff\u1d00\f\5\2\2\u1d00\u1d01\7\u01b3\2"+
		"\2\u1d01\u1d02\5\u03ca\u01e6\2\u1d02\u1d03\5\u03b4\u01db\2\u1d03\u1d0f"+
		"\3\2\2\2\u1d04\u1d05\f\4\2\2\u1d05\u1d06\7\u0100\2\2\u1d06\u1d07\5\u03ca"+
		"\u01e6\2\u1d07\u1d08\5\u03b4\u01db\2\u1d08\u1d0f\3\2\2\2\u1d09\u1d0a\f"+
		"\3\2\2\u1d0a\u1d0b\7\u00c6\2\2\u1d0b\u1d0c\5\u03ca\u01e6\2\u1d0c\u1d0d"+
		"\5\u03b4\u01db\2\u1d0d\u1d0f\3\2\2\2\u1d0e\u1cff\3\2\2\2\u1d0e\u1d04\3"+
		"\2\2\2\u1d0e\u1d09\3\2\2\2\u1d0f\u1d12\3\2\2\2\u1d10\u1d0e\3\2\2\2\u1d10"+
		"\u1d11\3\2\2\2\u1d11\u03b7\3\2\2\2\u1d12\u1d10\3\2\2\2\u1d13\u1d14\7\u01cd"+
		"\2\2\u1d14\u1d19\5\u03ba\u01de\2\u1d15\u1d16\7\u01cd\2\2\u1d16\u1d17\7"+
		"\u0161\2\2\u1d17\u1d19\5\u03ba\u01de\2\u1d18\u1d13\3\2\2\2\u1d18\u1d15"+
		"\3\2\2\2\u1d19\u03b9\3\2\2\2\u1d1a\u1d1b\b\u01de\1\2\u1d1b\u1d1c\5\u03bc"+
		"\u01df\2\u1d1c\u1d22\3\2\2\2\u1d1d\u1d1e\f\4\2\2\u1d1e\u1d1f\7\7\2\2\u1d1f"+
		"\u1d21\5\u03bc\u01df\2\u1d20\u1d1d\3\2\2\2\u1d21\u1d24\3\2\2\2\u1d22\u1d20"+
		"\3\2\2\2\u1d22\u1d23\3\2\2\2\u1d23\u03bb\3\2\2\2\u1d24\u1d22\3\2\2\2\u1d25"+
		"\u1d26\5\u04cc\u0267\2\u1d26\u1d27\5\u0368\u01b5\2\u1d27\u1d28\7d\2\2"+
		"\u1d28\u1d29\7\5\2\2\u1d29\u1d2a\5\u037a\u01be\2\u1d2a\u1d2b\7\6\2\2\u1d2b"+
		"\u03bd\3\2\2\2\u1d2c\u1d2f\5\u03b8\u01dd\2\u1d2d\u1d2f\3\2\2\2\u1d2e\u1d2c"+
		"\3\2\2\2\u1d2e\u1d2d\3\2\2\2\u1d2f\u03bf\3\2\2\2\u1d30\u1d32\7\u0102\2"+
		"\2\u1d31\u1d33\7\u0195\2\2\u1d32\u1d31\3\2\2\2\u1d32\u1d33\3\2\2\2\u1d33"+
		"\u1d34\3\2\2\2\u1d34\u1d3c\5\u03c6\u01e4\2\u1d35\u1d37\7\u0102\2\2\u1d36"+
		"\u1d38\7\u0195\2\2\u1d37\u1d36\3\2\2\2\u1d37\u1d38\3\2\2\2\u1d38\u1d39"+
		"\3\2\2\2\u1d39\u1d3c\5\u03c2\u01e2\2\u1d3a\u1d3c\3\2\2\2\u1d3b\u1d30\3"+
		"\2\2\2\u1d3b\u1d35\3\2\2\2\u1d3b\u1d3a\3\2\2\2\u1d3c\u03c1\3\2\2\2\u1d3d"+
		"\u1d42\5\u03c4\u01e3\2\u1d3e\u1d3f\7\7\2\2\u1d3f\u1d41\5\u03c4\u01e3\2"+
		"\u1d40\u1d3e\3\2\2\2\u1d41\u1d44\3\2\2\2\u1d42\u1d40\3\2\2\2\u1d42\u1d43"+
		"\3\2\2\2\u1d43\u03c3\3\2\2\2\u1d44\u1d42\3\2\2\2\u1d45\u1d46\5\u04c8\u0265"+
		"\2\u1d46\u03c5\3\2\2\2\u1d47\u1d48\7\u01a0\2\2\u1d48\u1d49\5\u03c8\u01e5"+
		"\2\u1d49\u1d4a\5\u04c8\u0265\2\u1d4a\u1d6b\3\2\2\2\u1d4b\u1d4c\7\u019e"+
		"\2\2\u1d4c\u1d4d\5\u03c8\u01e5\2\u1d4d\u1d4e\5\u04c8\u0265\2\u1d4e\u1d6b"+
		"\3\2\2\2\u1d4f\u1d50\7\u0118\2\2\u1d50\u1d51\7\u01a0\2\2\u1d51\u1d52\5"+
		"\u03c8\u01e5\2\u1d52\u1d53\5\u04c8\u0265\2\u1d53\u1d6b\3\2\2\2\u1d54\u1d55"+
		"\7\u0118\2\2\u1d55\u1d56\7\u019e\2\2\u1d56\u1d57\5\u03c8\u01e5\2\u1d57"+
		"\u1d58\5\u04c8\u0265\2\u1d58\u1d6b\3\2\2\2\u1d59\u1d5a\7\u00df\2\2\u1d5a"+
		"\u1d5b\7\u01a0\2\2\u1d5b\u1d5c\5\u03c8\u01e5\2\u1d5c\u1d5d\5\u04c8\u0265"+
		"\2\u1d5d\u1d6b\3\2\2\2\u1d5e\u1d5f\7\u00df\2\2\u1d5f\u1d60\7\u019e\2\2"+
		"\u1d60\u1d61\5\u03c8\u01e5\2\u1d61\u1d62\5\u04c8\u0265\2\u1d62\u1d6b\3"+
		"\2\2\2\u1d63\u1d64\7\u01b7\2\2\u1d64\u1d65\5\u03c8\u01e5\2\u1d65\u1d66"+
		"\5\u04c8\u0265\2\u1d66\u1d6b\3\2\2\2\u1d67\u1d68\7\u019b\2\2\u1d68\u1d6b"+
		"\5\u04c8\u0265\2\u1d69\u1d6b\5\u04c8\u0265\2\u1d6a\u1d47\3\2\2\2\u1d6a"+
		"\u1d4b\3\2\2\2\u1d6a\u1d4f\3\2\2\2\u1d6a\u1d54\3\2\2\2\u1d6a\u1d59\3\2"+
		"\2\2\u1d6a\u1d5e\3\2\2\2\u1d6a\u1d63\3\2\2\2\u1d6a\u1d67\3\2\2\2\u1d6a"+
		"\u1d69\3\2\2\2\u1d6b\u03c7\3\2\2\2\u1d6c\u1d6f\7\u019b\2\2\u1d6d\u1d6f"+
		"\3\2\2\2\u1d6e\u1d6c\3\2\2\2\u1d6e\u1d6d\3\2\2\2\u1d6f\u03c9\3\2\2\2\u1d70"+
		"\u1d74\7[\2\2\u1d71\u1d74\7\u00b8\2\2\u1d72\u1d74\3\2\2\2\u1d73\u1d70"+
		"\3\2\2\2\u1d73\u1d71\3\2\2\2\u1d73\u1d72\3\2\2\2\u1d74\u03cb\3\2\2\2\u1d75"+
		"\u1d76\7\u00b8\2\2\u1d76\u1d77\7\u013b\2\2\u1d77\u1d78\7\5\2\2\u1d78\u1d79"+
		"\5\u0488\u0245\2\u1d79\u1d7a\7\6\2\2\u1d7a\u1d7f\3\2\2\2\u1d7b\u1d7f\7"+
		"\u00b8\2\2\u1d7c\u1d7f\7[\2\2\u1d7d\u1d7f\3\2\2\2\u1d7e\u1d75\3\2\2\2"+
		"\u1d7e\u1d7b\3\2\2\2\u1d7e\u1d7c\3\2\2\2\u1d7e\u1d7d\3\2\2\2\u1d7f\u03cd"+
		"\3\2\2\2\u1d80\u1d83\5\u03d0\u01e9\2\u1d81\u1d83\3\2\2\2\u1d82\u1d80\3"+
		"\2\2\2\u1d82\u1d81\3\2\2\2\u1d83\u03cf\3\2\2\2\u1d84\u1d85\7\u0141\2\2"+
		"\u1d85\u1d86\7u\2\2\u1d86\u1d87\5\u03d2\u01ea\2\u1d87\u03d1\3\2\2\2\u1d88"+
		"\u1d89\b\u01ea\1\2\u1d89\u1d8a\5\u03d4\u01eb\2\u1d8a\u1d90\3\2\2\2\u1d8b"+
		"\u1d8c\f\4\2\2\u1d8c\u1d8d\7\7\2\2\u1d8d\u1d8f\5\u03d4\u01eb\2\u1d8e\u1d8b"+
		"\3\2\2\2\u1d8f\u1d92\3\2\2\2\u1d90\u1d8e\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91"+
		"\u03d3\3\2\2\2\u1d92\u1d90\3\2\2\2\u1d93\u1d94\5\u044e\u0228\2\u1d94\u1d95"+
		"\7\u01bb\2\2\u1d95\u1d96\5\u0484\u0243\2\u1d96\u1d97\5\u02b8\u015d\2\u1d97"+
		"\u1d9d\3\2\2\2\u1d98\u1d99\5\u044e\u0228\2\u1d99\u1d9a\5\u02b6\u015c\2"+
		"\u1d9a\u1d9b\5\u02b8\u015d\2\u1d9b\u1d9d\3\2\2\2\u1d9c\u1d93\3\2\2\2\u1d9c"+
		"\u1d98\3\2\2\2\u1d9d\u03d5\3\2\2\2\u1d9e\u1d9f\5\u03da\u01ee\2\u1d9f\u1da0"+
		"\5\u03dc\u01ef\2\u1da0\u1da7\3\2\2\2\u1da1\u1da2\5\u03dc\u01ef\2\u1da2"+
		"\u1da3\5\u03da\u01ee\2\u1da3\u1da7\3\2\2\2\u1da4\u1da7\5\u03da\u01ee\2"+
		"\u1da5\u1da7\5\u03dc\u01ef\2\u1da6\u1d9e\3\2\2\2\u1da6\u1da1\3\2\2\2\u1da6"+
		"\u1da4\3\2\2\2\u1da6\u1da5\3\2\2\2\u1da7\u03d7\3\2\2\2\u1da8\u1dab\5\u03d6"+
		"\u01ec\2\u1da9\u1dab\3\2\2\2\u1daa\u1da8\3\2\2\2\u1daa\u1da9\3\2\2\2\u1dab"+
		"\u03d9\3\2\2\2\u1dac\u1dad\7\u0115\2\2\u1dad\u1dae\5\u03de\u01f0\2\u1dae"+
		"\u1daf\7\7\2\2\u1daf\u1db0\5\u03e0\u01f1\2\u1db0\u1dba\3\2\2\2\u1db1\u1db2"+
		"\7\u00d2\2\2\u1db2\u1db3\5\u03e8\u01f5\2\u1db3\u1db4\5\u03e2\u01f2\2\u1db4"+
		"\u1db5\5\u03e6\u01f4\2\u1db5\u1db6\7\u013c\2\2\u1db6\u1dba\3\2\2\2\u1db7"+
		"\u1db8\7\u0115\2\2\u1db8\u1dba\5\u03de\u01f0\2\u1db9\u1dac\3\2\2\2\u1db9"+
		"\u1db1\3\2\2\2\u1db9\u1db7\3\2\2\2\u1dba\u03db\3\2\2\2\u1dbb\u1dbc\7\u0139"+
		"\2\2\u1dbc\u1dbd\5\u03e4\u01f3\2\u1dbd\u1dbe\5\u03e6\u01f4\2\u1dbe\u1dc2"+
		"\3\2\2\2\u1dbf\u1dc0\7\u0139\2\2\u1dc0\u1dc2\5\u03e0\u01f1\2\u1dc1\u1dbb"+
		"\3\2\2\2\u1dc1\u1dbf\3\2\2\2\u1dc2\u03dd\3\2\2\2\u1dc3\u1dc6\5\u044e\u0228"+
		"\2\u1dc4\u1dc6\7[\2\2\u1dc5\u1dc3\3\2\2\2\u1dc5\u1dc4\3\2\2\2\u1dc6\u03df"+
		"\3\2\2\2\u1dc7\u1dc8\5\u044e\u0228\2\u1dc8\u03e1\3\2\2\2\u1dc9\u1dca\7"+
		"\5\2\2\u1dca\u1dcb\5\u044e\u0228\2\u1dcb\u1dcc\7\6\2\2\u1dcc\u1dd0\3\2"+
		"\2\2\u1dcd\u1dd0\5\u04e2\u0272\2\u1dce\u1dd0\3\2\2\2\u1dcf\u1dc9\3\2\2"+
		"\2\u1dcf\u1dcd\3\2\2\2\u1dcf\u1dce\3\2\2\2\u1dd0\u03e3\3\2\2\2\u1dd1\u1dd2"+
		"\5\u0452\u022a\2\u1dd2\u03e5\3\2\2\2\u1dd3\u1dd4\t\20\2\2\u1dd4\u03e7"+
		"\3\2\2\2\u1dd5\u1dd6\t\21\2\2\u1dd6\u03e9\3\2\2\2\u1dd7\u1dd8\7\u00e3"+
		"\2\2\u1dd8\u1dd9\7u\2\2\u1dd9\u1ddc\5\u0488\u0245\2\u1dda\u1ddc\3\2\2"+
		"\2\u1ddb\u1dd7\3\2\2\2\u1ddb\u1dda\3\2\2\2\u1ddc\u03eb\3\2\2\2\u1ddd\u1dde"+
		"\7\u00e5\2\2\u1dde\u1de1\5\u044e\u0228\2\u1ddf\u1de1\3\2\2\2\u1de0\u1ddd"+
		"\3\2\2\2\u1de0\u1ddf\3\2\2\2\u1de1\u03ed\3\2\2\2\u1de2\u1de7\5\u03f2\u01fa"+
		"\2\u1de3\u1de4\7\u00d6\2\2\u1de4\u1de5\7\u015d\2\2\u1de5\u1de7\7\u013c"+
		"\2\2\u1de6\u1de2\3\2\2\2\u1de6\u1de3\3\2\2\2\u1de7\u03ef\3\2\2\2\u1de8"+
		"\u1deb\5\u03ee\u01f8\2\u1de9\u1deb\3\2\2\2\u1dea\u1de8\3\2\2\2\u1dea\u1de9"+
		"\3\2\2\2\u1deb\u03f1\3\2\2\2\u1dec\u1ded\b\u01fa\1\2\u1ded\u1dee\5\u03f4"+
		"\u01fb\2\u1dee\u1df3\3\2\2\2\u1def\u1df0\f\4\2\2\u1df0\u1df2\5\u03f4\u01fb"+
		"\2\u1df1\u1def\3\2\2\2\u1df2\u1df5\3\2\2\2\u1df3\u1df1\3\2\2\2\u1df3\u1df4"+
		"\3\2\2\2\u1df4\u03f3\3\2\2\2\u1df5\u1df3\3\2\2\2\u1df6\u1df7\7\u00d6\2"+
		"\2\u1df7\u1df8\7\u01b9\2\2\u1df8\u1df9\5\u03f6\u01fc\2\u1df9\u1dfa\5\u0396"+
		"\u01cc\2\u1dfa\u1e01\3\2\2\2\u1dfb\u1dfc\7\u00d6\2\2\u1dfc\u1dfd\7\u0186"+
		"\2\2\u1dfd\u1dfe\5\u03f6\u01fc\2\u1dfe\u1dff\5\u0396\u01cc\2\u1dff\u1e01"+
		"\3\2\2\2\u1e00\u1df6\3\2\2\2\u1e00\u1dfb\3\2\2\2\u1e01\u03f5\3\2\2\2\u1e02"+
		"\u1e03\7\u0137\2\2\u1e03\u1e06\5\u04c6\u0264\2\u1e04\u1e06\3\2\2\2\u1e05"+
		"\u1e02\3\2\2\2\u1e05\u1e04\3\2\2\2\u1e06\u03f7\3\2\2\2\u1e07\u1e08\b\u01fd"+
		"\1\2\u1e08\u1e09\7\u01c1\2\2\u1e09\u1e0a\5\u04c0\u0261\2\u1e0a\u1e10\3"+
		"\2\2\2\u1e0b\u1e0c\f\4\2\2\u1e0c\u1e0d\7\7\2\2\u1e0d\u1e0f\5\u04c0\u0261"+
		"\2\u1e0e\u1e0b\3\2\2\2\u1e0f\u1e12\3\2\2\2\u1e10\u1e0e\3\2\2\2\u1e10\u1e11"+
		"\3\2\2\2\u1e11\u03f9\3\2\2\2\u1e12\u1e10\3\2\2\2\u1e13\u1e14\7\u00db\2"+
		"\2\u1e14\u1e17\5\u03fc\u01ff\2\u1e15\u1e17\3\2\2\2\u1e16\u1e13\3\2\2\2"+
		"\u1e16\u1e15\3\2\2\2\u1e17\u03fb\3\2\2\2\u1e18\u1e19\b\u01ff\1\2\u1e19"+
		"\u1e1a\5\u03fe\u0200\2\u1e1a\u1e20\3\2\2\2\u1e1b\u1e1c\f\4\2\2\u1e1c\u1e1d"+
		"\7\7\2\2\u1e1d\u1e1f\5\u03fe\u0200\2\u1e1e\u1e1b\3\2\2\2\u1e1f\u1e22\3"+
		"\2\2\2\u1e20\u1e1e\3\2\2\2\u1e20\u1e21\3\2\2\2\u1e21\u03fd\3\2\2\2\u1e22"+
		"\u1e20\3\2\2\2\u1e23\u1e26\5\u0402\u0202\2\u1e24\u1e26\5\u0400\u0201\2"+
		"\u1e25\u1e23\3\2\2\2\u1e25\u1e24\3\2\2\2\u1e26\u03ff\3\2\2\2\u1e27\u1e47"+
		"\5\u040c\u0207\2\u1e28\u1e29\5\u040c\u0207\2\u1e29\u1e2a\5\u0404\u0203"+
		"\2\u1e2a\u1e47\3\2\2\2\u1e2b\u1e47\5\u0412\u020a\2\u1e2c\u1e2d\5\u0412"+
		"\u020a\2\u1e2d\u1e2e\5\u0404\u0203\2\u1e2e\u1e47\3\2\2\2\u1e2f\u1e30\5"+
		"\u0412\u020a\2\u1e30\u1e31\7d\2\2\u1e31\u1e32\7\5\2\2\u1e32\u1e33\5\u041a"+
		"\u020e\2\u1e33\u1e34\7\6\2\2\u1e34\u1e47\3\2\2\2\u1e35\u1e36\5\u0412\u020a"+
		"\2\u1e36\u1e37\7d\2\2\u1e37\u1e38\5\u04e4\u0273\2\u1e38\u1e39\7\5\2\2"+
		"\u1e39\u1e3a\5\u041a\u020e\2\u1e3a\u1e3b\7\6\2\2\u1e3b\u1e47\3\2\2\2\u1e3c"+
		"\u1e3d\5\u0412\u020a\2\u1e3d\u1e3e\5\u04e4\u0273\2\u1e3e\u1e3f\7\5\2\2"+
		"\u1e3f\u1e40\5\u041a\u020e\2\u1e40\u1e41\7\6\2\2\u1e41\u1e47\3\2\2\2\u1e42"+
		"\u1e47\5\u03b0\u01d9\2\u1e43\u1e44\5\u03b0\u01d9\2\u1e44\u1e45\5\u0404"+
		"\u0203\2\u1e45\u1e47\3\2\2\2\u1e46\u1e27\3\2\2\2\u1e46\u1e28\3\2\2\2\u1e46"+
		"\u1e2b\3\2\2\2\u1e46\u1e2c\3\2\2\2\u1e46\u1e2f\3\2\2\2\u1e46\u1e35\3\2"+
		"\2\2\u1e46\u1e3c\3\2\2\2\u1e46\u1e42\3\2\2\2\u1e46\u1e43\3\2\2\2\u1e47"+
		"\u0401\3\2\2\2\u1e48\u1e49\b\u0202\1\2\u1e49\u1e4a\7\5\2\2\u1e4a\u1e4b"+
		"\5\u03fe\u0200\2\u1e4b\u1e4d\7\6\2\2\u1e4c\u1e4e\5\u0404\u0203\2\u1e4d"+
		"\u1e4c\3\2\2\2\u1e4d\u1e4e\3\2\2\2\u1e4e\u1e6b\3\2\2\2\u1e4f\u1e50\5\u0400"+
		"\u0201\2\u1e50\u1e51\7\u0099\2\2\u1e51\u1e52\7\u0107\2\2\u1e52\u1e53\5"+
		"\u03fe\u0200\2\u1e53\u1e6b\3\2\2\2\u1e54\u1e55\5\u0400\u0201\2\u1e55\u1e56"+
		"\5\u0406\u0204\2\u1e56\u1e57\7\u0107\2\2\u1e57\u1e58\5\u03fe\u0200\2\u1e58"+
		"\u1e59\5\u040a\u0206\2\u1e59\u1e6b\3\2\2\2\u1e5a\u1e5b\5\u0400\u0201\2"+
		"\u1e5b\u1e5c\7\u0107\2\2\u1e5c\u1e5d\5\u03fe\u0200\2\u1e5d\u1e5e\5\u040a"+
		"\u0206\2\u1e5e\u1e6b\3\2\2\2\u1e5f\u1e60\5\u0400\u0201\2\u1e60\u1e61\7"+
		"\u0128\2\2\u1e61\u1e62\5\u0406\u0204\2\u1e62\u1e63\7\u0107\2\2\u1e63\u1e64"+
		"\5\u03fe\u0200\2\u1e64\u1e6b\3\2\2\2\u1e65\u1e66\5\u0400\u0201\2\u1e66"+
		"\u1e67\7\u0128\2\2\u1e67\u1e68\7\u0107\2\2\u1e68\u1e69\5\u03fe\u0200\2"+
		"\u1e69\u1e6b\3\2\2\2\u1e6a\u1e48\3\2\2\2\u1e6a\u1e4f\3\2\2\2\u1e6a\u1e54"+
		"\3\2\2\2\u1e6a\u1e5a\3\2\2\2\u1e6a\u1e5f\3\2\2\2\u1e6a\u1e65\3\2\2\2\u1e6b"+
		"\u1e87\3\2\2\2\u1e6c\u1e6d\f\7\2\2\u1e6d\u1e6e\7\u0099\2\2\u1e6e\u1e6f"+
		"\7\u0107\2\2\u1e6f\u1e86\5\u03fe\u0200\2\u1e70\u1e71\f\6\2\2\u1e71\u1e72"+
		"\5\u0406\u0204\2\u1e72\u1e73\7\u0107\2\2\u1e73\u1e74\5\u03fe\u0200\2\u1e74"+
		"\u1e75\5\u040a\u0206\2\u1e75\u1e86\3\2\2\2\u1e76\u1e77\f\5\2\2\u1e77\u1e78"+
		"\7\u0107\2\2\u1e78\u1e79\5\u03fe\u0200\2\u1e79\u1e7a\5\u040a\u0206\2\u1e7a"+
		"\u1e86\3\2\2\2\u1e7b\u1e7c\f\4\2\2\u1e7c\u1e7d\7\u0128\2\2\u1e7d\u1e7e"+
		"\5\u0406\u0204\2\u1e7e\u1e7f\7\u0107\2\2\u1e7f\u1e80\5\u03fe\u0200\2\u1e80"+
		"\u1e86\3\2\2\2\u1e81\u1e82\f\3\2\2\u1e82\u1e83\7\u0128\2\2\u1e83\u1e84"+
		"\7\u0107\2\2\u1e84\u1e86\5\u03fe\u0200\2\u1e85\u1e6c\3\2\2\2\u1e85\u1e70"+
		"\3\2\2\2\u1e85\u1e76\3\2\2\2\u1e85\u1e7b\3\2\2\2\u1e85\u1e81\3\2\2\2\u1e86"+
		"\u1e89\3\2\2\2\u1e87\u1e85\3\2\2\2\u1e87\u1e88\3\2\2\2\u1e88\u0403\3\2"+
		"\2\2\u1e89\u1e87\3\2\2\2\u1e8a\u1e8b\7d\2\2\u1e8b\u1e8c\5\u04e4\u0273"+
		"\2\u1e8c\u1e8d\7\5\2\2\u1e8d\u1e8e\5\u04ca\u0266\2\u1e8e\u1e8f\7\6\2\2"+
		"\u1e8f\u1e99\3\2\2\2\u1e90\u1e91\5\u04e4\u0273\2\u1e91\u1e92\7\5\2\2\u1e92"+
		"\u1e93\5\u04ca\u0266\2\u1e93\u1e94\7\6\2\2\u1e94\u1e99\3\2\2\2\u1e95\u1e96"+
		"\7d\2\2\u1e96\u1e99\5\u04e4\u0273\2\u1e97\u1e99\5\u04e4\u0273\2\u1e98"+
		"\u1e8a\3\2\2\2\u1e98\u1e90\3\2\2\2\u1e98\u1e95\3\2\2\2\u1e98\u1e97\3\2"+
		"\2\2\u1e99\u0405\3\2\2\2\u1e9a\u1e9b\7\u00dc\2\2\u1e9b\u1ea2\5\u0408\u0205"+
		"\2\u1e9c\u1e9d\7\u0112\2\2\u1e9d\u1ea2\5\u0408\u0205\2\u1e9e\u1e9f\7\u0171"+
		"\2\2\u1e9f\u1ea2\5\u0408\u0205\2\u1ea0\u1ea2\7\u00f8\2\2\u1ea1\u1e9a\3"+
		"\2\2\2\u1ea1\u1e9c\3\2\2\2\u1ea1\u1e9e\3\2\2\2\u1ea1\u1ea0\3\2\2\2\u1ea2"+
		"\u0407\3\2\2\2\u1ea3\u1ea6\7\u0143\2\2\u1ea4\u1ea6\3\2\2\2\u1ea5\u1ea3"+
		"\3\2\2\2\u1ea5\u1ea4\3\2\2\2\u1ea6\u0409\3\2\2\2\u1ea7\u1ea8\7\u01bb\2"+
		"\2\u1ea8\u1ea9\7\5\2\2\u1ea9\u1eaa\5\u04ca\u0266\2\u1eaa\u1eab\7\6\2\2"+
		"\u1eab\u1eaf\3\2\2\2\u1eac\u1ead\7\u013b\2\2\u1ead\u1eaf\5\u044e\u0228"+
		"\2\u1eae\u1ea7\3\2\2\2\u1eae\u1eac\3\2\2\2\u1eaf\u040b\3\2\2\2\u1eb0\u1eb1"+
		"\7\u013c\2\2\u1eb1\u1eb2\7\5\2\2\u1eb2\u1eb3\5\u04c8\u0265\2\u1eb3\u1eb4"+
		"\7\6\2\2\u1eb4\u1ebc\3\2\2\2\u1eb5\u1eb6\5\u04c8\u0265\2\u1eb6\u1eb7\7"+
		"\r\2\2\u1eb7\u1ebc\3\2\2\2\u1eb8\u1ebc\5\u04c8\u0265\2\u1eb9\u1eba\7\u013c"+
		"\2\2\u1eba\u1ebc\5\u04c8\u0265\2\u1ebb\u1eb0\3\2\2\2\u1ebb\u1eb5\3\2\2"+
		"\2\u1ebb\u1eb8\3\2\2\2\u1ebb\u1eb9\3\2\2\2\u1ebc\u040d\3\2\2\2\u1ebd\u1ebe"+
		"\b\u0208\1\2\u1ebe\u1ebf\5\u040c\u0207\2\u1ebf\u1ec5\3\2\2\2\u1ec0\u1ec1"+
		"\f\4\2\2\u1ec1\u1ec2\7\7\2\2\u1ec2\u1ec4\5\u040c\u0207\2\u1ec3\u1ec0\3"+
		"\2\2\2\u1ec4\u1ec7\3\2\2\2\u1ec5\u1ec3\3\2\2\2\u1ec5\u1ec6\3\2\2\2\u1ec6"+
		"\u040f\3\2\2\2\u1ec7\u1ec5\3\2\2\2\u1ec8\u1ec9\5\u040c\u0207\2\u1ec9\u1eca"+
		"\5\u04e4\u0273\2\u1eca\u1ed1\3\2\2\2\u1ecb\u1ecc\5\u040c\u0207\2\u1ecc"+
		"\u1ecd\7d\2\2\u1ecd\u1ece\5\u04e4\u0273\2\u1ece\u1ed1\3\2\2\2\u1ecf\u1ed1"+
		"\5\u040c\u0207\2\u1ed0\u1ec8\3\2\2\2\u1ed0\u1ecb\3\2\2\2\u1ed0\u1ecf\3"+
		"\2\2\2\u1ed1\u0411\3\2\2\2\u1ed2\u1ed3\5\u0454\u022b\2\u1ed3\u0413\3\2"+
		"\2\2\u1ed4\u1ed5\7\u01ca\2\2\u1ed5\u1ed8\5\u044e\u0228\2\u1ed6\u1ed8\3"+
		"\2\2\2\u1ed7\u1ed4\3\2\2\2\u1ed7\u1ed6\3\2\2\2\u1ed8\u0415\3\2\2\2\u1ed9"+
		"\u1eda\7\u01ca\2\2\u1eda\u1ee1\5\u044e\u0228\2\u1edb\u1edc\7\u01ca\2\2"+
		"\u1edc\u1edd\7\u009b\2\2\u1edd\u1ede\7\u0137\2\2\u1ede\u1ee1\5\u03a8\u01d5"+
		"\2\u1edf\u1ee1\3\2\2\2\u1ee0\u1ed9\3\2\2\2\u1ee0\u1edb\3\2\2\2\u1ee0\u1edf"+
		"\3\2\2\2\u1ee1\u0417\3\2\2\2\u1ee2\u1ee5\5\u041a\u020e\2\u1ee3\u1ee5\3"+
		"\2\2\2\u1ee4\u1ee2\3\2\2\2\u1ee4\u1ee3\3\2\2\2\u1ee5\u0419\3\2\2\2\u1ee6"+
		"\u1ee7\b\u020e\1\2\u1ee7\u1ee8\5\u041c\u020f\2\u1ee8\u1eee\3\2\2\2\u1ee9"+
		"\u1eea\f\4\2\2\u1eea\u1eeb\7\7\2\2\u1eeb\u1eed\5\u041c\u020f\2\u1eec\u1ee9"+
		"\3\2\2\2\u1eed\u1ef0\3\2\2\2\u1eee\u1eec\3\2\2\2\u1eee\u1eef\3\2\2\2\u1eef"+
		"\u041b\3\2\2\2\u1ef0\u1eee\3\2\2\2\u1ef1\u1ef2\5\u04e4\u0273\2\u1ef2\u1ef3"+
		"\5\u041e\u0210\2\u1ef3\u1ef4\5\u0112\u008a\2\u1ef4\u041d\3\2\2\2\u1ef5"+
		"\u1ef6\5\u0422\u0212\2\u1ef6\u1ef7\7c\2\2\u1ef7\u1ef8\7\n\2\2\u1ef8\u1ef9"+
		"\5\u04dc\u026f\2\u1ef9\u1efa\7\13\2\2\u1efa\u1f11\3\2\2\2\u1efb\u1efc"+
		"\7\u0185\2\2\u1efc\u1efd\5\u0422\u0212\2\u1efd\u1efe\7c\2\2\u1efe\u1eff"+
		"\7\n\2\2\u1eff\u1f00\5\u04dc\u026f\2\u1f00\u1f01\7\13\2\2\u1f01\u1f11"+
		"\3\2\2\2\u1f02\u1f03\5\u0422\u0212\2\u1f03\u1f04\5\u0420\u0211\2\u1f04"+
		"\u1f11\3\2\2\2\u1f05\u1f06\7\u0185\2\2\u1f06\u1f07\5\u0422\u0212\2\u1f07"+
		"\u1f08\5\u0420\u0211\2\u1f08\u1f11\3\2\2\2\u1f09\u1f0a\5\u0422\u0212\2"+
		"\u1f0a\u1f0b\7c\2\2\u1f0b\u1f11\3\2\2\2\u1f0c\u1f0d\7\u0185\2\2\u1f0d"+
		"\u1f0e\5\u0422\u0212\2\u1f0e\u1f0f\7c\2\2\u1f0f\u1f11\3\2\2\2\u1f10\u1ef5"+
		"\3\2\2\2\u1f10\u1efb\3\2\2\2\u1f10\u1f02\3\2\2\2\u1f10\u1f05\3\2\2\2\u1f10"+
		"\u1f09\3\2\2\2\u1f10\u1f0c\3\2\2\2\u1f11\u041f\3\2\2\2\u1f12\u1f1d\b\u0211"+
		"\1\2\u1f13\u1f14\f\5\2\2\u1f14\u1f15\7\n\2\2\u1f15\u1f1c\7\13\2\2\u1f16"+
		"\u1f17\f\4\2\2\u1f17\u1f18\7\n\2\2\u1f18\u1f19\5\u04dc\u026f\2\u1f19\u1f1a"+
		"\7\13\2\2\u1f1a\u1f1c\3\2\2\2\u1f1b\u1f13\3\2\2\2\u1f1b\u1f16\3\2\2\2"+
		"\u1f1c\u1f1f\3\2\2\2\u1f1d\u1f1b\3\2\2\2\u1f1d\u1f1e\3\2\2\2\u1f1e\u0421"+
		"\3\2\2\2\u1f1f\u1f1d\3\2\2\2\u1f20\u1f21\5\u0446\u0224\2\u1f21\u1f22\7"+
		"\5\2\2\u1f22\u1f23\5\u04dc\u026f\2\u1f23\u1f24\7\6\2\2\u1f24\u1f25\5\u044a"+
		"\u0226\2\u1f25\u1f2f\3\2\2\2\u1f26\u1f27\5\u0446\u0224\2\u1f27\u1f28\5"+
		"\u044a\u0226\2\u1f28\u1f2f\3\2\2\2\u1f29\u1f2f\5\u0426\u0214\2\u1f2a\u1f2f"+
		"\5\u042a\u0216\2\u1f2b\u1f2f\5\u042e\u0218\2\u1f2c\u1f2f\5\u0436\u021c"+
		"\2\u1f2d\u1f2f\5\u0444\u0223\2\u1f2e\u1f20\3\2\2\2\u1f2e\u1f26\3\2\2\2"+
		"\u1f2e\u1f29\3\2\2\2\u1f2e\u1f2a\3\2\2\2\u1f2e\u1f2b\3\2\2\2\u1f2e\u1f2c"+
		"\3\2\2\2\u1f2e\u1f2d\3\2\2\2\u1f2f\u0423\3\2\2\2\u1f30\u1f35\5\u042a\u0216"+
		"\2\u1f31\u1f35\5\u0430\u0219\2\u1f32\u1f35\5\u0438\u021d\2\u1f33\u1f35"+
		"\5\u0444\u0223\2\u1f34\u1f30\3\2\2\2\u1f34\u1f31\3\2\2\2\u1f34\u1f32\3"+
		"\2\2\2\u1f34\u1f33\3\2\2\2\u1f35\u0425\3\2\2\2\u1f36\u1f37\5\u04e6\u0274"+
		"\2\u1f37\u1f38\5\u0260\u0131\2\u1f38\u1f39\5\u0428\u0215\2\u1f39\u1f3e"+
		"\3\2\2\2\u1f3a\u1f3b\5\u04e6\u0274\2\u1f3b\u1f3c\5\u0428\u0215\2\u1f3c"+
		"\u1f3e\3\2\2\2\u1f3d\u1f36\3\2\2\2\u1f3d\u1f3a\3\2\2\2\u1f3e\u0427\3\2"+
		"\2\2\u1f3f\u1f40\7\5\2\2\u1f40\u1f41\5\u0488\u0245\2\u1f41\u1f42\7\6\2"+
		"\2\u1f42\u1f45\3\2\2\2\u1f43\u1f45\3\2\2\2\u1f44\u1f3f\3\2\2\2\u1f44\u1f43"+
		"\3\2\2\2\u1f45\u0429\3\2\2\2\u1f46\u1f47\7\u00d4\2\2\u1f47\u1f57\5\u042c"+
		"\u0217\2\u1f48\u1f49\7\u00aa\2\2\u1f49\u1f57\5\u0428\u0215\2\u1f4a\u1f4b"+
		"\7\u00a9\2\2\u1f4b\u1f57\5\u0428\u0215\2\u1f4c\u1f4d\7\u0135\2\2\u1f4d"+
		"\u1f57\5\u0428\u0215\2\u1f4e\u1f57\7\u00fe\2\2\u1f4f\u1f57\7\u00ff\2\2"+
		"\u1f50\u1f57\7\u018a\2\2\u1f51\u1f57\7p\2\2\u1f52\u1f57\7\u015e\2\2\u1f53"+
		"\u1f54\7\u00bc\2\2\u1f54\u1f57\7\u0152\2\2\u1f55\u1f57\7s\2\2\u1f56\u1f46"+
		"\3\2\2\2\u1f56\u1f48\3\2\2\2\u1f56\u1f4a\3\2\2\2\u1f56\u1f4c\3\2\2\2\u1f56"+
		"\u1f4e\3\2\2\2\u1f56\u1f4f\3\2\2\2\u1f56\u1f50\3\2\2\2\u1f56\u1f51\3\2"+
		"\2\2\u1f56\u1f52\3\2\2\2\u1f56\u1f53\3\2\2\2\u1f56\u1f55\3\2\2\2\u1f57"+
		"\u042b\3\2\2\2\u1f58\u1f59\7\5\2\2\u1f59\u1f5a\5\u04dc\u026f\2\u1f5a\u1f5b"+
		"\7\6\2\2\u1f5b\u1f5e\3\2\2\2\u1f5c\u1f5e\3\2\2\2\u1f5d\u1f58\3\2\2\2\u1f5d"+
		"\u1f5c\3\2\2\2\u1f5e\u042d\3\2\2\2\u1f5f\u1f62\5\u0432\u021a\2\u1f60\u1f62"+
		"\5\u0434\u021b\2\u1f61\u1f5f\3\2\2\2\u1f61\u1f60\3\2\2\2\u1f62\u042f\3"+
		"\2\2\2\u1f63\u1f66\5\u0432\u021a\2\u1f64\u1f66\5\u0434\u021b\2\u1f65\u1f63"+
		"\3\2\2\2\u1f65\u1f64\3\2\2\2\u1f66\u0431\3\2\2\2\u1f67\u1f68\7r\2\2\u1f68"+
		"\u1f69\5\u0440\u0221\2\u1f69\u1f6a\7\5\2\2\u1f6a\u1f6b\5\u0488\u0245\2"+
		"\u1f6b\u1f6c\7\6\2\2\u1f6c\u0433\3\2\2\2\u1f6d\u1f6e\7r\2\2\u1f6e\u1f6f"+
		"\5\u0440\u0221\2\u1f6f\u0435\3\2\2\2\u1f70\u1f73\5\u043a\u021e\2\u1f71"+
		"\u1f73\5\u043c\u021f\2\u1f72\u1f70\3\2\2\2\u1f72\u1f71\3\2\2\2\u1f73\u0437"+
		"\3\2\2\2\u1f74\u1f77\5\u043a\u021e\2\u1f75\u1f77\5\u043c\u021f\2\u1f76"+
		"\u1f74\3\2\2\2\u1f76\u1f75\3\2\2\2\u1f77\u0439\3\2\2\2\u1f78\u1f79\5\u043e"+
		"\u0220\2\u1f79\u1f7a\7\5\2\2\u1f7a\u1f7b\5\u04dc\u026f\2\u1f7b\u1f7c\7"+
		"\6\2\2\u1f7c\u1f7d\5\u0442\u0222\2\u1f7d\u043b\3\2\2\2\u1f7e\u1f7f\5\u043e"+
		"\u0220\2\u1f7f\u1f80\5\u0442\u0222\2\u1f80\u043d\3\2\2\2\u1f81\u1f82\7"+
		"\177\2\2\u1f82\u1f8f\5\u0440\u0221\2\u1f83\u1f84\7~\2\2\u1f84\u1f8f\5"+
		"\u0440\u0221\2\u1f85\u1f86\7\u0127\2\2\u1f86\u1f87\7\177\2\2\u1f87\u1f8f"+
		"\5\u0440\u0221\2\u1f88\u1f89\7\u0127\2\2\u1f89\u1f8a\7~\2\2\u1f8a\u1f8f"+
		"\5\u0440\u0221\2\u1f8b\u1f8c\7\u0129\2\2\u1f8c\u1f8f\5\u0440\u0221\2\u1f8d"+
		"\u1f8f\7\u01c2\2\2\u1f8e\u1f81\3\2\2\2\u1f8e\u1f83\3\2\2\2\u1f8e\u1f85"+
		"\3\2\2\2\u1f8e\u1f88\3\2\2\2\u1f8e\u1f8b\3\2\2\2\u1f8e\u1f8d\3\2\2\2\u1f8f"+
		"\u043f\3\2\2\2\u1f90\u1f93\7\u01c4\2\2\u1f91\u1f93\3\2\2\2\u1f92\u1f90"+
		"\3\2\2\2\u1f92\u1f91\3\2\2\2\u1f93\u0441\3\2\2\2\u1f94\u1f95\7\177\2\2"+
		"\u1f95\u1f96\7\u0184\2\2\u1f96\u1f99\5\u04e4\u0273\2\u1f97\u1f99\3\2\2"+
		"\2\u1f98\u1f94\3\2\2\2\u1f98\u1f97\3\2\2\2\u1f99\u0443\3\2\2\2\u1f9a\u1f9b"+
		"\7\u01a4\2\2\u1f9b\u1f9c\7\5\2\2\u1f9c\u1f9d\5\u04dc\u026f\2\u1f9d\u1f9e"+
		"\7\6\2\2\u1f9e\u1f9f\5\u0448\u0225\2\u1f9f\u1fab\3\2\2\2\u1fa0\u1fa1\7"+
		"\u01a3\2\2\u1fa1\u1fa2\7\5\2\2\u1fa2\u1fa3\5\u04dc\u026f\2\u1fa3\u1fa4"+
		"\7\6\2\2\u1fa4\u1fa5\5\u0448\u0225\2\u1fa5\u1fab\3\2\2\2\u1fa6\u1fa7\7"+
		"\u01a4\2\2\u1fa7\u1fab\5\u0448\u0225\2\u1fa8\u1fa9\7\u01a3\2\2\u1fa9\u1fab"+
		"\5\u0448\u0225\2\u1faa\u1f9a\3\2\2\2\u1faa\u1fa0\3\2\2\2\u1faa\u1fa6\3"+
		"\2\2\2\u1faa\u1fa8\3\2\2\2\u1fab\u0445\3\2\2\2\u1fac\u1fad\7\u0101\2\2"+
		"\u1fad\u0447\3\2\2\2\u1fae\u1faf\7R\2\2\u1faf\u1fb5\7\u01de\2\2\u1fb0"+
		"\u1fb1\7\u01ce\2\2\u1fb1\u1fb2\7\u01a3\2\2\u1fb2\u1fb5\7\u01de\2\2\u1fb3"+
		"\u1fb5\3\2\2\2\u1fb4\u1fae\3\2\2\2\u1fb4\u1fb0\3\2\2\2\u1fb4\u1fb3\3\2"+
		"\2\2\u1fb5\u0449\3\2\2\2\u1fb6\u1fd3\5\u044c\u0227\2\u1fb7\u1fb8\7\u00a7"+
		"\2\2\u1fb8\u1fb9\7\u01a5\2\2\u1fb9\u1fd3\5\u044c\u0227\2\u1fba\u1fbb\7"+
		"\u00e8\2\2\u1fbb\u1fbc\7\u01a5\2\2\u1fbc\u1fd3\5\u044c\u0227\2\u1fbd\u1fbe"+
		"\7\u0120\2\2\u1fbe\u1fbf\7\u01a5\2\2\u1fbf\u1fd3\5\u044c\u0227\2\u1fc0"+
		"\u1fd3\7\u01dc\2\2\u1fc1\u1fd3\7\u0123\2\2\u1fc2\u1fd3\7\u00a7\2\2\u1fc3"+
		"\u1fd3\7\u00e8\2\2\u1fc4\u1fd3\7\u0120\2\2\u1fc5\u1fc6\7\u01dc\2\2\u1fc6"+
		"\u1fc7\7\u01a5\2\2\u1fc7\u1fd3\7\u0123\2\2\u1fc8\u1fc9\7\u00a7\2\2\u1fc9"+
		"\u1fca\7\u01a5\2\2\u1fca\u1fd3\7\u00e8\2\2\u1fcb\u1fcc\7\u00a7\2\2\u1fcc"+
		"\u1fcd\7\u01a5\2\2\u1fcd\u1fd3\7\u0120\2\2\u1fce\u1fcf\7\u00e8\2\2\u1fcf"+
		"\u1fd0\7\u01a5\2\2\u1fd0\u1fd3\7\u0120\2\2\u1fd1\u1fd3\3\2\2\2\u1fd2\u1fb6"+
		"\3\2\2\2\u1fd2\u1fb7\3\2\2\2\u1fd2\u1fba\3\2\2\2\u1fd2\u1fbd\3\2\2\2\u1fd2"+
		"\u1fc0\3\2\2\2\u1fd2\u1fc1\3\2\2\2\u1fd2\u1fc2\3\2\2\2\u1fd2\u1fc3\3\2"+
		"\2\2\u1fd2\u1fc4\3\2\2\2\u1fd2\u1fc5\3\2\2\2\u1fd2\u1fc8\3\2\2\2\u1fd2"+
		"\u1fcb\3\2\2\2\u1fd2\u1fce\3\2\2\2\u1fd2\u1fd1\3\2\2\2\u1fd3\u044b\3\2"+
		"\2\2\u1fd4\u1fd5\7\u017b\2\2\u1fd5\u1fd6\7\5\2\2\u1fd6\u1fd7\5\u04dc\u026f"+
		"\2\u1fd7\u1fd8\7\6\2\2\u1fd8\u1fdb\3\2\2\2\u1fd9\u1fdb\7\u017b\2\2\u1fda"+
		"\u1fd4\3\2\2\2\u1fda\u1fd9\3\2\2\2\u1fdb\u044d\3\2\2\2\u1fdc\u1fdd\b\u0228"+
		"\1\2\u1fdd\u1fde\7\21\2\2\u1fde\u1fee\5\u044e\u0228!\u1fdf\u1fe0\7\16"+
		"\2\2\u1fe0\u1fee\5\u044e\u0228 \u1fe1\u1fe2\5\u0482\u0242\2\u1fe2\u1fe3"+
		"\5\u044e\u0228\36\u1fe3\u1fee\3\2\2\2\u1fe4\u1fe5\7\u012d\2\2\u1fe5\u1fee"+
		"\5\u044e\u0228\34\u1fe6\u1fe7\5\u047a\u023e\2\u1fe7\u1fe8\7\u0145\2\2"+
		"\u1fe8\u1fe9\5\u047a\u023e\2\u1fe9\u1fee\3\2\2\2\u1fea\u1fee\5\u0452\u022a"+
		"\2\u1feb\u1fec\7\u01b4\2\2\u1fec\u1fee\5\u03b0\u01d9\2\u1fed\u1fdc\3\2"+
		"\2\2\u1fed\u1fdf\3\2\2\2\u1fed\u1fe1\3\2\2\2\u1fed\u1fe4\3\2\2\2\u1fed"+
		"\u1fe6\3\2\2\2\u1fed\u1fea\3\2\2\2\u1fed\u1feb\3\2\2\2\u1fee\u20d8\3\2"+
		"\2\2\u1fef\u1ff0\f>\2\2\u1ff0\u1ff1\7\17\2\2\u1ff1\u20d7\5\u044e\u0228"+
		"?\u1ff2\u1ff3\f=\2\2\u1ff3\u1ff4\7\r\2\2\u1ff4\u20d7\5\u044e\u0228>\u1ff5"+
		"\u1ff6\f<\2\2\u1ff6\u1ff7\7\20\2\2\u1ff7\u20d7\5\u044e\u0228=\u1ff8\u1ff9"+
		"\f;\2\2\u1ff9\u1ffa\7\b\2\2\u1ffa\u20d7\5\u044e\u0228<\u1ffb\u1ffc\f:"+
		"\2\2\u1ffc\u1ffd\7\21\2\2\u1ffd\u20d7\5\u044e\u0228;\u1ffe\u1fff\f9\2"+
		"\2\u1fff\u2000\7\16\2\2\u2000\u20d7\5\u044e\u0228:\u2001\u2002\f8\2\2"+
		"\u2002\u2003\7\t\2\2\u2003\u20d7\5\u044e\u02289\u2004\u2005\f\67\2\2\u2005"+
		"\u2006\7\22\2\2\u2006\u20d7\5\u044e\u02288\u2007\u2008\f\66\2\2\u2008"+
		"\u2009\7\23\2\2\u2009\u20d7\5\u044e\u0228\67\u200a\u200b\f\65\2\2\u200b"+
		"\u200c\7\24\2\2\u200c\u20d7\5\u044e\u0228\66\u200d\u200e\f\64\2\2\u200e"+
		"\u200f\7\u0114\2\2\u200f\u2010\5\u044e\u0228\2\u2010\u2011\7\u00c5\2\2"+
		"\u2011\u2012\5\u044e\u0228\65\u2012\u20d7\3\2\2\2\u2013\u2014\f\63\2\2"+
		"\u2014\u2015\7\u012d\2\2\u2015\u2016\7\u0114\2\2\u2016\u2017\5\u044e\u0228"+
		"\2\u2017\u2018\7\u00c5\2\2\u2018\u2019\5\u044e\u0228\64\u2019\u20d7\3"+
		"\2\2\2\u201a\u201b\f\62\2\2\u201b\u201c\7\u00eb\2\2\u201c\u201d\5\u044e"+
		"\u0228\2\u201d\u201e\7\u00c5\2\2\u201e\u201f\5\u044e\u0228\63\u201f\u20d7"+
		"\3\2\2\2\u2020\u2021\f\61\2\2\u2021\u2022\7\u012d\2\2\u2022\u2023\7\u00eb"+
		"\2\2\u2023\u2024\5\u044e\u0228\2\u2024\u2025\7\u00c5\2\2\u2025\u2026\5"+
		"\u044e\u0228\62\u2026\u20d7\3\2\2\2\u2027\u2028\f\60\2\2\u2028\u2029\7"+
		"\u0188\2\2\u2029\u202a\7\u01a5\2\2\u202a\u202b\5\u044e\u0228\2\u202b\u202c"+
		"\7\u00c5\2\2\u202c\u202d\5\u044e\u0228\61\u202d\u20d7\3\2\2\2\u202e\u202f"+
		"\f/\2\2\u202f\u2030\7\u012d\2\2\u2030\u2031\7\u0188\2\2\u2031\u2032\7"+
		"\u01a5\2\2\u2032\u2033\5\u044e\u0228\2\u2033\u2034\7\u00c5\2\2\u2034\u2035"+
		"\5\u044e\u0228\60\u2035\u20d7\3\2\2\2\u2036\u2037\f,\2\2\u2037\u2038\7"+
		"a\2\2\u2038\u20d7\5\u044e\u0228-\u2039\u203a\f+\2\2\u203a\u203b\7\u0140"+
		"\2\2\u203b\u20d7\5\u044e\u0228,\u203c\u203d\f*\2\2\u203d\u203e\7\u0114"+
		"\2\2\u203e\u20d7\5\u044e\u0228+\u203f\u2040\f)\2\2\u2040\u2041\7\u012d"+
		"\2\2\u2041\u2042\7\u0114\2\2\u2042\u20d7\5\u044e\u0228*\u2043\u2044\f"+
		"(\2\2\u2044\u2045\7\u00eb\2\2\u2045\u20d7\5\u044e\u0228)\u2046\u2047\f"+
		"\'\2\2\u2047\u2048\7\u012d\2\2\u2048\u2049\7\u00eb\2\2\u2049\u20d7\5\u044e"+
		"\u0228(\u204a\u204b\f\"\2\2\u204b\u204c\7i\2\2\u204c\u204d\7\u01a3\2\2"+
		"\u204d\u204e\7\u01de\2\2\u204e\u20d7\5\u044e\u0228#\u204f\u2050\f\37\2"+
		"\2\u2050\u2051\5\u0482\u0242\2\u2051\u2052\5\u044e\u0228 \u2052\u20d7"+
		"\3\2\2\2\u2053\u2054\f\33\2\2\u2054\u2055\7\u0188\2\2\u2055\u2056\7\u01a5"+
		"\2\2\u2056\u20d7\5\u044e\u0228\34\u2057\u2058\f\32\2\2\u2058\u2059\7\u012d"+
		"\2\2\u2059\u205a\7\u0188\2\2\u205a\u205b\7\u01a5\2\2\u205b\u20d7\5\u044e"+
		"\u0228\33\u205c\u205d\f\17\2\2\u205d\u205e\7\u0104\2\2\u205e\u205f\7\u00b8"+
		"\2\2\u205f\u2060\7\u00db\2\2\u2060\u20d7\5\u044e\u0228\20\u2061\u2062"+
		"\f\16\2\2\u2062\u2063\7\u0104\2\2\u2063\u2064\7\u012d\2\2\u2064\u2065"+
		"\7\u00b8\2\2\u2065\u2066\7\u00db\2\2\u2066\u20d7\5\u044e\u0228\17\u2067"+
		"\u2068\f.\2\2\u2068\u2069\7\u01e1\2\2\u2069\u20d7\5\u041e\u0210\2\u206a"+
		"\u206b\f-\2\2\u206b\u206c\7\u0087\2\2\u206c\u20d7\5\u025e\u0130\2\u206d"+
		"\u206e\f%\2\2\u206e\u206f\7\u00ef\2\2\u206f\u20d7\5\u04a6\u0254\2\u2070"+
		"\u2071\f$\2\2\u2071\u2072\7\u012d\2\2\u2072\u2073\7\u00ef\2\2\u2073\u20d7"+
		"\5\u04a6\u0254\2\u2074\u2075\f\35\2\2\u2075\u20d7\5\u0482\u0242\2\u2076"+
		"\u2077\f\31\2\2\u2077\u2078\7\u0104\2\2\u2078\u20d7\7\u0132\2\2\u2079"+
		"\u207a\f\30\2\2\u207a\u20d7\7\u0105\2\2\u207b\u207c\f\27\2\2\u207c\u207d"+
		"\7\u0104\2\2\u207d\u207e\7\u012d\2\2\u207e\u20d7\7\u0132\2\2\u207f\u2080"+
		"\f\26\2\2\u2080\u20d7\7\u0130\2\2\u2081\u2082\f\25\2\2\u2082\u2083\7\u0104"+
		"\2\2\u2083\u20d7\7\u01ab\2\2\u2084\u2085\f\24\2\2\u2085\u2086\7\u0104"+
		"\2\2\u2086\u2087\7\u012d\2\2\u2087\u20d7\7\u01ab\2\2\u2088\u2089\f\23"+
		"\2\2\u2089\u208a\7\u0104\2\2\u208a\u20d7\7\u00d0\2\2\u208b\u208c\f\22"+
		"\2\2\u208c\u208d\7\u0104\2\2\u208d\u208e\7\u012d\2\2\u208e\u20d7\7\u00d0"+
		"\2\2\u208f\u2090\f\21\2\2\u2090\u2091\7\u0104\2\2\u2091\u20d7\7\u01b5"+
		"\2\2\u2092\u2093\f\20\2\2\u2093\u2094\7\u0104\2\2\u2094\u2095\7\u012d"+
		"\2\2\u2095\u20d7\7\u01b5\2\2\u2096\u2097\f\r\2\2\u2097\u2098\7\u0104\2"+
		"\2\u2098\u2099\7\u0137\2\2\u2099\u209a\7\5\2\2\u209a\u209b\5\u048e\u0248"+
		"\2\u209b\u209c\7\6\2\2\u209c\u20d7\3\2\2\2\u209d\u209e\f\f\2\2\u209e\u209f"+
		"\7\u0104\2\2\u209f\u20a0\7\u012d\2\2\u20a0\u20a1\7\u0137\2\2\u20a1\u20a2"+
		"\7\5\2\2\u20a2\u20a3\5\u048e\u0248\2\u20a3\u20a4\7\6\2\2\u20a4\u20d7\3"+
		"\2\2\2\u20a5\u20a6\f\13\2\2\u20a6\u20a7\7o\2\2\u20a7\u20a8\5\u04ba\u025e"+
		"\2\u20a8\u20a9\5\u0450\u0229\2\u20a9\u20aa\7a\2\2\u20aa\u20ab\5\u0450"+
		"\u0229\2\u20ab\u20d7\3\2\2\2\u20ac\u20ad\f\n\2\2\u20ad\u20ae\7\u012d\2"+
		"\2\u20ae\u20af\7o\2\2\u20af\u20b0\5\u04ba\u025e\2\u20b0\u20b1\5\u0450"+
		"\u0229\2\u20b1\u20b2\7a\2\2\u20b2\u20b3\5\u0450\u0229\2\u20b3\u20d7\3"+
		"\2\2\2\u20b4\u20b5\f\t\2\2\u20b5\u20b6\7o\2\2\u20b6\u20b7\7\u0198\2\2"+
		"\u20b7\u20b8\5\u0450\u0229\2\u20b8\u20b9\7a\2\2\u20b9\u20ba\5\u0450\u0229"+
		"\2\u20ba\u20d7\3\2\2\2\u20bb\u20bc\f\b\2\2\u20bc\u20bd\7\u012d\2\2\u20bd"+
		"\u20be\7o\2\2\u20be\u20bf\7\u0198\2\2\u20bf\u20c0\5\u0450\u0229\2\u20c0"+
		"\u20c1\7a\2\2\u20c1\u20c2\5\u0450\u0229\2\u20c2\u20d7\3\2\2\2\u20c3\u20c4"+
		"\f\7\2\2\u20c4\u20c5\5\u0486\u0244\2\u20c5\u20c6\5\u047c\u023f\2\u20c6"+
		"\u20c7\5\u03b0\u01d9\2\u20c7\u20d7\3\2\2\2\u20c8\u20c9\f\6\2\2\u20c9\u20ca"+
		"\5\u0486\u0244\2\u20ca\u20cb\5\u047c\u023f\2\u20cb\u20cc\7\5\2\2\u20cc"+
		"\u20cd\5\u044e\u0228\2\u20cd\u20ce\7\6\2\2\u20ce\u20d7\3\2\2\2\u20cf\u20d0"+
		"\f\4\2\2\u20d0\u20d1\7\u0104\2\2\u20d1\u20d7\7\u00ba\2\2\u20d2\u20d3\f"+
		"\3\2\2\u20d3\u20d4\7\u0104\2\2\u20d4\u20d5\7\u012d\2\2\u20d5\u20d7\7\u00ba"+
		"\2\2\u20d6\u1fef\3\2\2\2\u20d6\u1ff2\3\2\2\2\u20d6\u1ff5\3\2\2\2\u20d6"+
		"\u1ff8\3\2\2\2\u20d6\u1ffb\3\2\2\2\u20d6\u1ffe\3\2\2\2\u20d6\u2001\3\2"+
		"\2\2\u20d6\u2004\3\2\2\2\u20d6\u2007\3\2\2\2\u20d6\u200a\3\2\2\2\u20d6"+
		"\u200d\3\2\2\2\u20d6\u2013\3\2\2\2\u20d6\u201a\3\2\2\2\u20d6\u2020\3\2"+
		"\2\2\u20d6\u2027\3\2\2\2\u20d6\u202e\3\2\2\2\u20d6\u2036\3\2\2\2\u20d6"+
		"\u2039\3\2\2\2\u20d6\u203c\3\2\2\2\u20d6\u203f\3\2\2\2\u20d6\u2043\3\2"+
		"\2\2\u20d6\u2046\3\2\2\2\u20d6\u204a\3\2\2\2\u20d6\u204f\3\2\2\2\u20d6"+
		"\u2053\3\2\2\2\u20d6\u2057\3\2\2\2\u20d6\u205c\3\2\2\2\u20d6\u2061\3\2"+
		"\2\2\u20d6\u2067\3\2\2\2\u20d6\u206a\3\2\2\2\u20d6\u206d\3\2\2\2\u20d6"+
		"\u2070\3\2\2\2\u20d6\u2074\3\2\2\2\u20d6\u2076\3\2\2\2\u20d6\u2079\3\2"+
		"\2\2\u20d6\u207b\3\2\2\2\u20d6\u207f\3\2\2\2\u20d6\u2081\3\2\2\2\u20d6"+
		"\u2084\3\2\2\2\u20d6\u2088\3\2\2\2\u20d6\u208b\3\2\2\2\u20d6\u208f\3\2"+
		"\2\2\u20d6\u2092\3\2\2\2\u20d6\u2096\3\2\2\2\u20d6\u209d\3\2\2\2\u20d6"+
		"\u20a5\3\2\2\2\u20d6\u20ac\3\2\2\2\u20d6\u20b4\3\2\2\2\u20d6\u20bb\3\2"+
		"\2\2\u20d6\u20c3\3\2\2\2\u20d6\u20c8\3\2\2\2\u20d6\u20cf\3\2\2\2\u20d6"+
		"\u20d2\3\2\2\2\u20d7\u20da\3\2\2\2\u20d8\u20d6\3\2\2\2\u20d8\u20d9\3\2"+
		"\2\2\u20d9\u044f\3\2\2\2\u20da\u20d8\3\2\2\2\u20db\u20dc\b\u0229\1\2\u20dc"+
		"\u20dd\7\21\2\2\u20dd\u20e5\5\u0450\u0229\r\u20de\u20df\7\16\2\2\u20df"+
		"\u20e5\5\u0450\u0229\f\u20e0\u20e1\5\u0482\u0242\2\u20e1\u20e2\5\u0450"+
		"\u0229\n\u20e2\u20e5\3\2\2\2\u20e3\u20e5\5\u0452\u022a\2\u20e4\u20db\3"+
		"\2\2\2\u20e4\u20de\3\2\2\2\u20e4\u20e0\3\2\2\2\u20e4\u20e3\3\2\2\2\u20e5"+
		"\u212d\3\2\2\2\u20e6\u20e7\f\30\2\2\u20e7\u20e8\7\17\2\2\u20e8\u212c\5"+
		"\u0450\u0229\31\u20e9\u20ea\f\27\2\2\u20ea\u20eb\7\r\2\2\u20eb\u212c\5"+
		"\u0450\u0229\30\u20ec\u20ed\f\26\2\2\u20ed\u20ee\7\20\2\2\u20ee\u212c"+
		"\5\u0450\u0229\27\u20ef\u20f0\f\25\2\2\u20f0\u20f1\7\b\2\2\u20f1\u212c"+
		"\5\u0450\u0229\26\u20f2\u20f3\f\24\2\2\u20f3\u20f4\7\21\2\2\u20f4\u212c"+
		"\5\u0450\u0229\25\u20f5\u20f6\f\23\2\2\u20f6\u20f7\7\16\2\2\u20f7\u212c"+
		"\5\u0450\u0229\24\u20f8\u20f9\f\22\2\2\u20f9\u20fa\7\t\2\2\u20fa\u212c"+
		"\5\u0450\u0229\23\u20fb\u20fc\f\21\2\2\u20fc\u20fd\7\22\2\2\u20fd\u212c"+
		"\5\u0450\u0229\22\u20fe\u20ff\f\20\2\2\u20ff\u2100\7\23\2\2\u2100\u212c"+
		"\5\u0450\u0229\21\u2101\u2102\f\13\2\2\u2102\u2103\5\u0482\u0242\2\u2103"+
		"\u2104\5\u0450\u0229\f\u2104\u212c\3\2\2\2\u2105\u2106\f\b\2\2\u2106\u2107"+
		"\7\u0104\2\2\u2107\u2108\7\u00b8\2\2\u2108\u2109\7\u00db\2\2\u2109\u212c"+
		"\5\u0450\u0229\t\u210a\u210b\f\7\2\2\u210b\u210c\7\u0104\2\2\u210c\u210d"+
		"\7\u012d\2\2\u210d\u210e\7\u00b8\2\2\u210e\u210f\7\u00db\2\2\u210f\u212c"+
		"\5\u0450\u0229\b\u2110\u2111\f\17\2\2\u2111\u2112\7\u01e1\2\2\u2112\u212c"+
		"\5\u041e\u0210\2\u2113\u2114\f\t\2\2\u2114\u212c\5\u0482\u0242\2\u2115"+
		"\u2116\f\6\2\2\u2116\u2117\7\u0104\2\2\u2117\u2118\7\u0137\2\2\u2118\u2119"+
		"\7\5\2\2\u2119\u211a\5\u048e\u0248\2\u211a\u211b\7\6\2\2\u211b\u212c\3"+
		"\2\2\2\u211c\u211d\f\5\2\2\u211d\u211e\7\u0104\2\2\u211e\u211f\7\u012d"+
		"\2\2\u211f\u2120\7\u0137\2\2\u2120\u2121\7\5\2\2\u2121\u2122\5\u048e\u0248"+
		"\2\u2122\u2123\7\6\2\2\u2123\u212c\3\2\2\2\u2124\u2125\f\4\2\2\u2125\u2126"+
		"\7\u0104\2\2\u2126\u212c\7\u00ba\2\2\u2127\u2128\f\3\2\2\u2128\u2129\7"+
		"\u0104\2\2\u2129\u212a\7\u012d\2\2\u212a\u212c\7\u00ba\2\2\u212b\u20e6"+
		"\3\2\2\2\u212b\u20e9\3\2\2\2\u212b\u20ec\3\2\2\2\u212b\u20ef\3\2\2\2\u212b"+
		"\u20f2\3\2\2\2\u212b\u20f5\3\2\2\2\u212b\u20f8\3\2\2\2\u212b\u20fb\3\2"+
		"\2\2\u212b\u20fe\3\2\2\2\u212b\u2101\3\2\2\2\u212b\u2105\3\2\2\2\u212b"+
		"\u210a\3\2\2\2\u212b\u2110\3\2\2\2\u212b\u2113\3\2\2\2\u212b\u2115\3\2"+
		"\2\2\u212b\u211c\3\2\2\2\u212b\u2124\3\2\2\2\u212b\u2127\3\2\2\2\u212c"+
		"\u212f\3\2\2\2\u212d\u212b\3\2\2\2\u212d\u212e\3\2\2\2\u212e\u0451\3\2"+
		"\2\2\u212f\u212d\3\2\2\2\u2130\u2131\7\5\2\2\u2131\u2132\5\u044e\u0228"+
		"\2\u2132\u2133\7\6\2\2\u2133\u2134\5\u04b8\u025d\2\u2134\u2145\3\2\2\2"+
		"\u2135\u2145\5\u04b2\u025a\2\u2136\u2145\5\u04da\u026e\2\u2137\u2138\7"+
		"\u01e8\2\2\u2138\u2145\5\u04b8\u025d\2\u2139\u2145\5\u04a8\u0255\2\u213a"+
		"\u2145\5\u0454\u022b\2\u213b\u2145\5\u03b0\u01d9\2\u213c\u213d\7\u00cb"+
		"\2\2\u213d\u2145\5\u03b0\u01d9\2\u213e\u213f\7c\2\2\u213f\u2145\5\u03b0"+
		"\u01d9\2\u2140\u2141\7c\2\2\u2141\u2145\5\u0490\u0249\2\u2142\u2145\5"+
		"\u0490\u0249\2\u2143\u2145\5\u047a\u023e\2\u2144\u2130\3\2\2\2\u2144\u2135"+
		"\3\2\2\2\u2144\u2136\3\2\2\2\u2144\u2137\3\2\2\2\u2144\u2139\3\2\2\2\u2144"+
		"\u213a\3\2\2\2\u2144\u213b\3\2\2\2\u2144\u213c\3\2\2\2\u2144\u213e\3\2"+
		"\2\2\u2144\u2140\3\2\2\2\u2144\u2142\3\2\2\2\u2144\u2143\3\2\2\2\u2145"+
		"\u0453\3\2\2\2\u2146\u2147\7\u0088\2\2\u2147\u2148\7\u00d6\2\2\u2148\u2149"+
		"\7\5\2\2\u2149\u214a\5\u044e\u0228\2\u214a\u214b\7\6\2\2\u214b\u2248\3"+
		"\2\2\2\u214c\u214d\7\u00a0\2\2\u214d\u214e\7\5\2\2\u214e\u214f\5\u04dc"+
		"\u026f\2\u214f\u2150\7\6\2\2\u2150\u2248\3\2\2\2\u2151\u2152\7\u00a1\2"+
		"\2\u2152\u2153\7\5\2\2\u2153\u2154\5\u04dc\u026f\2\u2154\u2155\7\6\2\2"+
		"\u2155\u2248\3\2\2\2\u2156\u2157\7\u0119\2\2\u2157\u2158\7\5\2\2\u2158"+
		"\u2159\5\u04dc\u026f\2\u2159\u215a\7\6\2\2\u215a\u2248\3\2\2\2\u215b\u215c"+
		"\7\u011a\2\2\u215c\u215d\7\5\2\2\u215d\u215e\5\u04dc\u026f\2\u215e\u215f"+
		"\7\6\2\2\u215f\u2248\3\2\2\2\u2160\u2161\7\u00cf\2\2\u2161\u2162\7\5\2"+
		"\2\u2162\u2163\5\u0494\u024b\2\u2163\u2164\7\6\2\2\u2164\u2248\3\2\2\2"+
		"\u2165\u2166\7\u0146\2\2\u2166\u2167\7\5\2\2\u2167\u2168\5\u0498\u024d"+
		"\2\u2168\u2169\7\6\2\2\u2169\u2248\3\2\2\2\u216a\u216b\7\u0150\2\2\u216b"+
		"\u216c\7\5\2\2\u216c\u216d\5\u049c\u024f\2\u216d\u216e\7\6\2\2\u216e\u2248"+
		"\3\2\2\2\u216f\u2170\7\u0197\2\2\u2170\u2171\7\5\2\2\u2171\u2172\5\u049e"+
		"\u0250\2\u2172\u2173\7\6\2\2\u2173\u2248\3\2\2\2\u2174\u2175\7\u01aa\2"+
		"\2\u2175\u2176\7\5\2\2\u2176\u2177\7t\2\2\u2177\u2178\5\u04a4\u0253\2"+
		"\u2178\u2179\7\6\2\2\u2179\u2248\3\2\2\2\u217a\u217b\7\u01aa\2\2\u217b"+
		"\u217c\7\5\2\2\u217c\u217d\7\u010f\2\2\u217d\u217e\5\u04a4\u0253\2\u217e"+
		"\u217f\7\6\2\2\u217f\u2248\3\2\2\2\u2180\u2181\7\u01aa\2\2\u2181\u2182"+
		"\7\5\2\2\u2182\u2183\7\u01a6\2\2\u2183\u2184\5\u04a4\u0253\2\u2184\u2185"+
		"\7\6\2\2\u2185\u2248\3\2\2\2\u2186\u2187\7\u01aa\2\2\u2187\u2188\7\5\2"+
		"\2\u2188\u2189\5\u04a4\u0253\2\u2189\u218a\7\6\2\2\u218a\u2248\3\2\2\2"+
		"\u218b\u218c\7\u0086\2\2\u218c\u218d\7\5\2\2\u218d\u218e\5\u0488\u0245"+
		"\2\u218e\u218f\7\6\2\2\u218f\u2248\3\2\2\2\u2190\u2191\7\u00e2\2\2\u2191"+
		"\u2192\7\5\2\2\u2192\u2193\5\u0488\u0245\2\u2193\u2194\7\6\2\2\u2194\u2248"+
		"\3\2\2\2\u2195\u2196\7\u0111\2\2\u2196\u2197\7\5\2\2\u2197\u2198\5\u0488"+
		"\u0245\2\u2198\u2199\7\6\2\2\u2199\u2248\3\2\2\2\u219a\u219b\7\u01d4\2"+
		"\2\u219b\u219c\7\5\2\2\u219c\u219d\5\u0488\u0245\2\u219d\u219e\7\6\2\2"+
		"\u219e\u2248\3\2\2\2\u219f\u21a0\7\u01d5\2\2\u21a0\u21a1\7\5\2\2\u21a1"+
		"\u21a2\7\u0125\2\2\u21a2\u21a3\5\u04e8\u0275\2\u21a3\u21a4\7\6\2\2\u21a4"+
		"\u2248\3\2\2\2\u21a5\u21a6\7\u01d7\2\2\u21a6\u21a7\7\5\2\2\u21a7\u21a8"+
		"\5\u045c\u022f\2\u21a8\u21a9\7\6\2\2\u21a9\u2248\3\2\2\2\u21aa\u21ab\7"+
		"\u01d9\2\2\u21ab\u21ac\7\5\2\2\u21ac\u21ad\7\u0125\2\2\u21ad\u21ae\5\u04e8"+
		"\u0275\2\u21ae\u21af\7\6\2\2\u21af\u2248\3\2\2\2\u21b0\u21b1\7{\2\2\u21b1"+
		"\u21b2\7\5\2\2\u21b2\u21b3\5\u044e\u0228\2\u21b3\u21b4\7d\2\2\u21b4\u21b5"+
		"\5\u041e\u0210\2\u21b5\u21b6\7\6\2\2\u21b6\u2248\3\2\2\2\u21b7\u21b8\7"+
		"\u01a8\2\2\u21b8\u21b9\7\5\2\2\u21b9\u21ba\5\u044e\u0228\2\u21ba\u21bb"+
		"\7d\2\2\u21bb\u21bc\5\u041e\u0210\2\u21bc\u21bd\7\6\2\2\u21bd\u2248\3"+
		"\2\2\2\u21be\u21bf\7\u01d6\2\2\u21bf\u21c0\7\5\2\2\u21c0\u21c1\5\u0452"+
		"\u022a\2\u21c1\u21c2\5\u0464\u0233\2\u21c2\u21c3\7\6\2\2\u21c3\u2248\3"+
		"\2\2\2\u21c4\u21c5\7\u0133\2\2\u21c5\u21c6\7\5\2\2\u21c6\u21c7\5\u044e"+
		"\u0228\2\u21c7\u21c8\7\7\2\2\u21c8\u21c9\5\u044e\u0228\2\u21c9\u21ca\7"+
		"\6\2\2\u21ca\u2248\3\2\2\2\u21cb\u21cc\7\u01d5\2\2\u21cc\u21cd\7\5\2\2"+
		"\u21cd\u21ce\7\u0125\2\2\u21ce\u21cf\5\u04e8\u0275\2\u21cf\u21d0\7\7\2"+
		"\2\u21d0\u21d1\5\u045a\u022e\2\u21d1\u21d2\7\6\2\2\u21d2\u2248\3\2\2\2"+
		"\u21d3\u21d4\7\u01d5\2\2\u21d4\u21d5\7\5\2\2\u21d5\u21d6\7\u0125\2\2\u21d6"+
		"\u21d7\5\u04e8\u0275\2\u21d7\u21d8\7\7\2\2\u21d8\u21d9\5\u0488\u0245\2"+
		"\u21d9\u21da\7\6\2\2\u21da\u2248\3\2\2\2\u21db\u21dc\7\u01d8\2\2\u21dc"+
		"\u21dd\7\5\2\2\u21dd\u21de\5\u0460\u0231\2\u21de\u21df\5\u044e\u0228\2"+
		"\u21df\u21e0\5\u0462\u0232\2\u21e0\u21e1\7\6\2\2\u21e1\u2248\3\2\2\2\u21e2"+
		"\u21e3\7\u01d9\2\2\u21e3\u21e4\7\5\2\2\u21e4\u21e5\7\u0125\2\2\u21e5\u21e6"+
		"\5\u04e8\u0275\2\u21e6\u21e7\7\7\2\2\u21e7\u21e8\5\u044e\u0228\2\u21e8"+
		"\u21e9\7\6\2\2\u21e9\u2248\3\2\2\2\u21ea\u21eb\7\u01db\2\2\u21eb\u21ec"+
		"\7\5\2\2\u21ec\u21ed\5\u0460\u0231\2\u21ed\u21ee\5\u044e\u0228\2\u21ee"+
		"\u21ef\7d\2\2\u21ef\u21f0\5\u0422\u0212\2\u21f0\u21f1\7\6\2\2\u21f1\u2248"+
		"\3\2\2\2\u21f2\u21f3\7\u01da\2\2\u21f3\u21f4\7\5\2\2\u21f4\u21f5\5\u044e"+
		"\u0228\2\u21f5\u21f6\7\7\2\2\u21f6\u21f7\5\u0456\u022c\2\u21f7\u21f8\5"+
		"\u0458\u022d\2\u21f8\u21f9\7\6\2\2\u21f9\u2248\3\2\2\2\u21fa\u21fb\7\u01d5"+
		"\2\2\u21fb\u21fc\7\5\2\2\u21fc\u21fd\7\u0125\2\2\u21fd\u21fe\5\u04e8\u0275"+
		"\2\u21fe\u21ff\7\7\2\2\u21ff\u2200\5\u045a\u022e\2\u2200\u2201\7\7\2\2"+
		"\u2201\u2202\5\u0488\u0245\2\u2202\u2203\7\6\2\2\u2203\u2248\3\2\2\2\u2204"+
		"\u2205\5\u04d8\u026d\2\u2205\u2206\7\5\2\2\u2206\u2207\7\6\2\2\u2207\u2208"+
		"\5\u046c\u0237\2\u2208\u2248\3\2\2\2\u2209\u220a\5\u04d8\u026d\2\u220a"+
		"\u220b\7\5\2\2\u220b\u220c\7\r\2\2\u220c\u220d\7\6\2\2\u220d\u220e\5\u046c"+
		"\u0237\2\u220e\u2248\3\2\2\2\u220f\u2210\5\u04d8\u026d\2\u2210\u2211\7"+
		"\5\2\2\u2211\u2212\5\u048a\u0246\2\u2212\u2213\7\6\2\2\u2213\u2214\5\u046c"+
		"\u0237\2\u2214\u2248\3\2\2\2\u2215\u2216\5\u04d8\u026d\2\u2216\u2217\7"+
		"\5\2\2\u2217\u2218\7\u01c3\2\2\u2218\u2219\5\u048c\u0247\2\u2219\u221a"+
		"\7\6\2\2\u221a\u221b\5\u046c\u0237\2\u221b\u2248\3\2\2\2\u221c\u221d\5"+
		"\u04d8\u026d\2\u221d\u221e\7\5\2\2\u221e\u221f\5\u048a\u0246\2\u221f\u2220"+
		"\5\u03d0\u01e9\2\u2220\u2221\7\6\2\2\u2221\u2222\5\u046c\u0237\2\u2222"+
		"\u2248\3\2\2\2\u2223\u2224\5\u04d8\u026d\2\u2224\u2225\7\5\2\2\u2225\u2226"+
		"\7[\2\2\u2226\u2227\5\u048a\u0246\2\u2227\u2228\5\u03ce\u01e8\2\u2228"+
		"\u2229\7\6\2\2\u2229\u222a\5\u046c\u0237\2\u222a\u2248\3\2\2\2\u222b\u222c"+
		"\5\u04d8\u026d\2\u222c\u222d\7\5\2\2\u222d\u222e\7\u00b8\2\2\u222e\u222f"+
		"\5\u048a\u0246\2\u222f\u2230\5\u03ce\u01e8\2\u2230\u2231\7\6\2\2\u2231"+
		"\u2232\5\u046c\u0237\2\u2232\u2248\3\2\2\2\u2233\u2234\5\u04d8\u026d\2"+
		"\u2234\u2235\7\5\2\2\u2235\u2236\5\u048a\u0246\2\u2236\u2237\7\7\2\2\u2237"+
		"\u2238\7\u01c3\2\2\u2238\u2239\5\u048c\u0247\2\u2239\u223a\7\6\2\2\u223a"+
		"\u223b\5\u046c\u0237\2\u223b\u2248\3\2\2\2\u223c\u2248\7\u009d\2\2\u223d"+
		"\u2248\7\u00a0\2\2\u223e\u2248\7\u00a1\2\2\u223f\u2248\7\u0119\2\2\u2240"+
		"\u2248\7\u011a\2\2\u2241\u2248\7\u009e\2\2\u2242\u2248\7\u00a2\2\2\u2243"+
		"\u2248\7\u0183\2\2\u2244\u2248\7\u01ba\2\2\u2245\u2248\7\u009c\2\2\u2246"+
		"\u2248\7\u009f\2\2\u2247\u2146\3\2\2\2\u2247\u214c\3\2\2\2\u2247\u2151"+
		"\3\2\2\2\u2247\u2156\3\2\2\2\u2247\u215b\3\2\2\2\u2247\u2160\3\2\2\2\u2247"+
		"\u2165\3\2\2\2\u2247\u216a\3\2\2\2\u2247\u216f\3\2\2\2\u2247\u2174\3\2"+
		"\2\2\u2247\u217a\3\2\2\2\u2247\u2180\3\2\2\2\u2247\u2186\3\2\2\2\u2247"+
		"\u218b\3\2\2\2\u2247\u2190\3\2\2\2\u2247\u2195\3\2\2\2\u2247\u219a\3\2"+
		"\2\2\u2247\u219f\3\2\2\2\u2247\u21a5\3\2\2\2\u2247\u21aa\3\2\2\2\u2247"+
		"\u21b0\3\2\2\2\u2247\u21b7\3\2\2\2\u2247\u21be\3\2\2\2\u2247\u21c4\3\2"+
		"\2\2\u2247\u21cb\3\2\2\2\u2247\u21d3\3\2\2\2\u2247\u21db\3\2\2\2\u2247"+
		"\u21e2\3\2\2\2\u2247\u21ea\3\2\2\2\u2247\u21f2\3\2\2\2\u2247\u21fa\3\2"+
		"\2\2\u2247\u2204\3\2\2\2\u2247\u2209\3\2\2\2\u2247\u220f\3\2\2\2\u2247"+
		"\u2215\3\2\2\2\u2247\u221c\3\2\2\2\u2247\u2223\3\2\2\2\u2247\u222b\3\2"+
		"\2\2\u2247\u2233\3\2\2\2\u2247\u223c\3\2\2\2\u2247\u223d\3\2\2\2\u2247"+
		"\u223e\3\2\2\2\u2247\u223f\3\2\2\2\u2247\u2240\3\2\2\2\u2247\u2241\3\2"+
		"\2\2\u2247\u2242\3\2\2\2\u2247\u2243\3\2\2\2\u2247\u2244\3\2\2\2\u2247"+
		"\u2245\3\2\2\2\u2247\u2246\3\2\2\2\u2248\u0455\3\2\2\2\u2249\u224a\7\u01c6"+
		"\2\2\u224a\u224f\5\u044e\u0228\2\u224b\u224c\7\u01c6\2\2\u224c\u224d\7"+
		"\u012b\2\2\u224d\u224f\7\u01c0\2\2\u224e\u2249\3\2\2\2\u224e\u224b\3\2"+
		"\2\2\u224f\u0457\3\2\2\2\u2250\u2251\7\7\2\2\u2251\u2252\7\u018e\2\2\u2252"+
		"\u225c\7\u01dd\2\2\u2253\u2254\7\7\2\2\u2254\u2255\7\u018e\2\2\u2255\u225c"+
		"\7\u012b\2\2\u2256\u2257\7\7\2\2\u2257\u2258\7\u018e\2\2\u2258\u2259\7"+
		"\u012b\2\2\u2259\u225c\7\u01c0\2\2\u225a\u225c\3\2\2\2\u225b\u2250\3\2"+
		"\2\2\u225b\u2253\3\2\2\2\u225b\u2256\3\2\2\2\u225b\u225a\3\2\2\2\u225c"+
		"\u0459\3\2\2\2\u225d\u225e\7\u01d3\2\2\u225e\u225f\7\5\2\2\u225f\u2260"+
		"\5\u045c\u022f\2\u2260\u2261\7\6\2\2\u2261\u045b\3\2\2\2\u2262\u2263\b"+
		"\u022f\1\2\u2263\u2264\5\u045e\u0230\2\u2264\u226a\3\2\2\2\u2265\u2266"+
		"\f\4\2\2\u2266\u2267\7\7\2\2\u2267\u2269\5\u045e\u0230\2\u2268\u2265\3"+
		"\2\2\2\u2269\u226c\3\2\2\2\u226a\u2268\3\2\2\2\u226a\u226b\3\2\2\2\u226b"+
		"\u045d\3\2\2\2\u226c\u226a\3\2\2\2\u226d\u226e\5\u044e\u0228\2\u226e\u226f"+
		"\7d\2\2\u226f\u2270\5\u04e8\u0275\2\u2270\u2273\3\2\2\2\u2271\u2273\5"+
		"\u044e\u0228\2\u2272\u226d\3\2\2\2\u2272\u2271\3\2\2\2\u2273\u045f\3\2"+
		"\2\2\u2274\u2275\t\22\2\2\u2275\u0461\3\2\2\2\u2276\u2277\7\u0155\2\2"+
		"\u2277\u227c\7\u01cb\2\2\u2278\u2279\7\u0196\2\2\u2279\u227c\7\u01cb\2"+
		"\2\u227a\u227c\3\2\2\2\u227b\u2276\3\2\2\2\u227b\u2278\3\2\2\2\u227b\u227a"+
		"\3\2\2\2\u227c\u0463\3\2\2\2\u227d\u227e\7\u014c\2\2\u227e\u2290\5\u0452"+
		"\u022a\2\u227f\u2280\7\u014c\2\2\u2280\u2281\5\u0452\u022a\2\u2281\u2282"+
		"\7u\2\2\u2282\u2283\7\u0162\2\2\u2283\u2290\3\2\2\2\u2284\u2285\7\u014c"+
		"\2\2\u2285\u2286\7u\2\2\u2286\u2287\7\u0162\2\2\u2287\u2290\5\u0452\u022a"+
		"\2\u2288\u2289\7\u014c\2\2\u2289\u228a\7u\2\2\u228a\u228b\7\u0162\2\2"+
		"\u228b\u228c\5\u0452\u022a\2\u228c\u228d\7u\2\2\u228d\u228e\7\u0162\2"+
		"\2\u228e\u2290\3\2\2\2\u228f\u227d\3\2\2\2\u228f\u227f\3\2\2\2\u228f\u2284"+
		"\3\2\2\2\u228f\u2288\3\2\2\2\u2290\u0465\3\2\2\2\u2291\u2292\7\u01cc\2"+
		"\2\u2292\u2295\5\u0468\u0235\2\u2293\u2295\3\2\2\2\u2294\u2291\3\2\2\2"+
		"\u2294\u2293\3\2\2\2\u2295\u0467\3\2\2\2\u2296\u2297\b\u0235\1\2\u2297"+
		"\u2298\5\u046a\u0236\2\u2298\u229e\3\2\2\2\u2299\u229a\f\4\2\2\u229a\u229b"+
		"\7\7\2\2\u229b\u229d\5\u046a\u0236\2\u229c\u2299\3\2\2\2\u229d\u22a0\3"+
		"\2\2\2\u229e\u229c\3\2\2\2\u229e\u229f\3\2\2\2\u229f\u0469\3\2\2\2\u22a0"+
		"\u229e\3\2\2\2\u22a1\u22a2\5\u04e4\u0273\2\u22a2\u22a3\7d\2\2\u22a3\u22a4"+
		"\5\u046e\u0238\2\u22a4\u046b\3\2\2\2\u22a5\u22a6\7\u0144\2\2\u22a6\u22ab"+
		"\5\u046e\u0238\2\u22a7\u22a8\7\u0144\2\2\u22a8\u22ab\5\u04e4\u0273\2\u22a9"+
		"\u22ab\3\2\2\2\u22aa\u22a5\3\2\2\2\u22aa\u22a7\3\2\2\2\u22aa\u22a9\3\2"+
		"\2\2\u22ab\u046d\3\2\2\2\u22ac\u22ad\7\5\2\2\u22ad\u22ae\5\u0470\u0239"+
		"\2\u22ae\u22af\5\u0472\u023a\2\u22af\u22b0\5\u03ce\u01e8\2\u22b0\u22b1"+
		"\5\u0474\u023b\2\u22b1\u22b2\7\6\2\2\u22b2\u046f\3\2\2\2\u22b3\u22b6\5"+
		"\u04e4\u0273\2\u22b4\u22b6\3\2\2\2\u22b5\u22b3\3\2\2\2\u22b5\u22b4\3\2"+
		"\2\2\u22b6\u0471\3\2\2\2\u22b7\u22b8\7\u014b\2\2\u22b8\u22b9\7u\2\2\u22b9"+
		"\u22bc\5\u0488\u0245\2\u22ba\u22bc\3\2\2\2\u22bb\u22b7\3\2\2\2\u22bb\u22ba"+
		"\3\2\2\2\u22bc\u0473\3\2\2\2\u22bd\u22be\7\u015c\2\2\u22be\u22c3\5\u0476"+
		"\u023c\2\u22bf\u22c0\7\u0175\2\2\u22c0\u22c3\5\u0476\u023c\2\u22c1\u22c3"+
		"\3\2\2\2\u22c2\u22bd\3\2\2\2\u22c2\u22bf\3\2\2\2\u22c2\u22c1\3\2\2\2\u22c3"+
		"\u0475\3\2\2\2\u22c4\u22c5\7o\2\2\u22c5\u22c6\5\u0478\u023d\2\u22c6\u22c7"+
		"\7a\2\2\u22c7\u22c8\5\u0478\u023d\2\u22c8\u22cb\3\2\2\2\u22c9\u22cb\5"+
		"\u0478\u023d\2\u22ca\u22c4\3\2\2\2\u22ca\u22c9\3\2\2\2\u22cb\u0477\3\2"+
		"\2\2\u22cc\u22cd\5\u044e\u0228\2\u22cd\u22ce\7\u0151\2\2\u22ce\u22d9\3"+
		"\2\2\2\u22cf\u22d0\5\u044e\u0228\2\u22d0\u22d1\7\u00d5\2\2\u22d1\u22d9"+
		"\3\2\2\2\u22d2\u22d3\7\u01b0\2\2\u22d3\u22d9\7\u0151\2\2\u22d4\u22d5\7"+
		"\u01b0\2\2\u22d5\u22d9\7\u00d5\2\2\u22d6\u22d7\7\u009b\2\2\u22d7\u22d9"+
		"\7\u0174\2\2\u22d8\u22cc\3\2\2\2\u22d8\u22cf\3\2\2\2\u22d8\u22d2\3\2\2"+
		"\2\u22d8\u22d4\3\2\2\2\u22d8\u22d6\3\2\2\2\u22d9\u0479\3\2\2\2\u22da\u22db"+
		"\7\u0174\2\2\u22db\u22dc\7\5\2\2\u22dc\u22e9\7\6\2\2\u22dd\u22de\7\u0174"+
		"\2\2\u22de\u22df\7\5\2\2\u22df\u22e0\5\u0488\u0245\2\u22e0\u22e1\7\6\2"+
		"\2\u22e1\u22e9\3\2\2\2\u22e2\u22e3\7\5\2\2\u22e3\u22e4\5\u0488\u0245\2"+
		"\u22e4\u22e5\7\7\2\2\u22e5\u22e6\5\u044e\u0228\2\u22e6\u22e7\7\6\2\2\u22e7"+
		"\u22e9\3\2\2\2\u22e8\u22da\3\2\2\2\u22e8\u22dd\3\2\2\2\u22e8\u22e2\3\2"+
		"\2\2\u22e9\u047b\3\2\2\2\u22ea\u22eb\t\23\2\2\u22eb\u047d\3\2\2\2\u22ec"+
		"\u22ef\7\u01eb\2\2\u22ed\u22ef\5\u0480\u0241\2\u22ee\u22ec\3\2\2\2\u22ee"+
		"\u22ed\3\2\2\2\u22ef\u047f\3\2\2\2\u22f0\u22f1\t\24\2\2\u22f1\u0481\3"+
		"\2\2\2\u22f2\u22f3\7\u013d\2\2\u22f3\u22f4\7\5\2\2\u22f4\u22f5\5\u02ee"+
		"\u0178\2\u22f5\u22f6\7\6\2\2\u22f6\u22f9\3\2\2\2\u22f7\u22f9\7\u01eb\2"+
		"\2\u22f8\u22f2\3\2\2\2\u22f8\u22f7\3\2\2\2\u22f9\u0483\3\2\2\2\u22fa\u22fb"+
		"\7\u013d\2\2\u22fb\u22fc\7\5\2\2\u22fc\u22fd\5\u02ee\u0178\2\u22fd\u22fe"+
		"\7\6\2\2\u22fe\u2301\3\2\2\2\u22ff\u2301\5\u047e\u0240\2\u2300\u22fa\3"+
		"\2\2\2\u2300\u22ff\3\2\2\2\u2301\u0485\3\2\2\2\u2302\u2303\7\u013d\2\2"+
		"\u2303\u2304\7\5\2\2\u2304\u2305\5\u02ee\u0178\2\u2305\u2306\7\6\2\2\u2306"+
		"\u230f\3\2\2\2\u2307\u230f\5\u047e\u0240\2\u2308\u230f\7\u0114\2\2\u2309"+
		"\u230a\7\u012d\2\2\u230a\u230f\7\u0114\2\2\u230b\u230f\7\u00eb\2\2\u230c"+
		"\u230d\7\u012d\2\2\u230d\u230f\7\u00eb\2\2\u230e\u2302\3\2\2\2\u230e\u2307"+
		"\3\2\2\2\u230e\u2308\3\2\2\2\u230e\u2309\3\2\2\2\u230e\u230b\3\2\2\2\u230e"+
		"\u230c\3\2\2\2\u230f\u0487\3\2\2\2\u2310\u2311\b\u0245\1\2\u2311\u2312"+
		"\5\u044e\u0228\2\u2312\u2318\3\2\2\2\u2313\u2314\f\4\2\2\u2314\u2315\7"+
		"\7\2\2\u2315\u2317\5\u044e\u0228\2\u2316\u2313\3\2\2\2\u2317\u231a\3\2"+
		"\2\2\u2318\u2316\3\2\2\2\u2318\u2319\3\2\2\2\u2319\u0489\3\2\2\2\u231a"+
		"\u2318\3\2\2\2\u231b\u231c\b\u0246\1\2\u231c\u231d\5\u048c\u0247\2\u231d"+
		"\u2323\3\2\2\2\u231e\u231f\f\4\2\2\u231f\u2320\7\7\2\2\u2320\u2322\5\u048c"+
		"\u0247\2\u2321\u231e\3\2\2\2\u2322\u2325\3\2\2\2\u2323\u2321\3\2\2\2\u2323"+
		"\u2324\3\2\2\2\u2324\u048b\3\2\2\2\u2325\u2323\3\2\2\2\u2326\u2327\5\u02ca"+
		"\u0166\2\u2327\u2328\7\u01e3\2\2\u2328\u2329\5\u044e\u0228\2\u2329\u232c"+
		"\3\2\2\2\u232a\u232c\5\u044e\u0228\2\u232b\u2326\3\2\2\2\u232b\u232a\3"+
		"\2\2\2\u232c\u048d\3\2\2\2\u232d\u232e\b\u0248\1\2\u232e\u232f\5\u041e"+
		"\u0210\2\u232f\u2335\3\2\2\2\u2330\u2331\f\4\2\2\u2331\u2332\7\7\2\2\u2332"+
		"\u2334\5\u041e\u0210\2\u2333\u2330\3\2\2\2\u2334\u2337\3\2\2\2\u2335\u2333"+
		"\3\2\2\2\u2335\u2336\3\2\2\2\u2336\u048f\3\2\2\2\u2337\u2335\3\2\2\2\u2338"+
		"\u2339\7\n\2\2\u2339\u2343\7\13\2\2\u233a\u233b\7\n\2\2\u233b\u233c\5"+
		"\u0488\u0245\2\u233c\u233d\7\13\2\2\u233d\u2343\3\2\2\2\u233e\u233f\7"+
		"\n\2\2\u233f\u2340\5\u0492\u024a\2\u2340\u2341\7\13\2\2\u2341\u2343\3"+
		"\2\2\2\u2342\u2338\3\2\2\2\u2342\u233a\3\2\2\2\u2342\u233e\3\2\2\2\u2343"+
		"\u0491\3\2\2\2\u2344\u2345\b\u024a\1\2\u2345\u2346\5\u0490\u0249\2\u2346"+
		"\u234c\3\2\2\2\u2347\u2348\f\4\2\2\u2348\u2349\7\7\2\2\u2349\u234b\5\u0490"+
		"\u0249\2\u234a\u2347\3\2\2\2\u234b\u234e\3\2\2\2\u234c\u234a\3\2\2\2\u234c"+
		"\u234d\3\2\2\2\u234d\u0493\3\2\2\2\u234e\u234c\3\2\2\2\u234f\u2350\5\u0496"+
		"\u024c\2\u2350\u2351\7\u00db\2\2\u2351\u2352\5\u044e\u0228\2\u2352\u2355"+
		"\3\2\2\2\u2353\u2355\3\2\2\2\u2354\u234f\3\2\2\2\u2354\u2353\3\2\2\2\u2355"+
		"\u0495\3\2\2\2\u2356\u235f\5\u04de\u0270\2\u2357\u235f\7\u01e7\2\2\u2358"+
		"\u235f\7\u01dc\2\2\u2359\u235f\7\u0123\2\2\u235a\u235f\7\u00a7\2\2\u235b"+
		"\u235f\7\u00e8\2\2\u235c\u235f\7\u0120\2\2\u235d\u235f\7\u017b\2\2\u235e"+
		"\u2356\3\2\2\2\u235e\u2357\3\2\2\2\u235e\u2358\3\2\2\2\u235e\u2359\3\2"+
		"\2\2\u235e\u235a\3\2\2\2\u235e\u235b\3\2\2\2\u235e\u235c\3\2\2\2\u235e"+
		"\u235d\3\2\2\2\u235f\u0497\3\2\2\2\u2360\u2361\5\u044e\u0228\2\u2361\u2362"+
		"\5\u049a\u024e\2\u2362\u2363\5\u04a0\u0251\2\u2363\u2364\5\u04a2\u0252"+
		"\2\u2364\u236a\3\2\2\2\u2365\u2366\5\u044e\u0228\2\u2366\u2367\5\u049a"+
		"\u024e\2\u2367\u2368\5\u04a0\u0251\2\u2368\u236a\3\2\2\2\u2369\u2360\3"+
		"\2\2\2\u2369\u2365\3\2\2\2\u236a\u0499\3\2\2\2\u236b\u236c\7\u014e\2\2"+
		"\u236c\u236d\5\u044e\u0228\2\u236d\u049b\3\2\2\2\u236e\u236f\5\u0450\u0229"+
		"\2\u236f\u2370\7\u00ef\2\2\u2370\u2371\5\u0450\u0229\2\u2371\u2374\3\2"+
		"\2\2\u2372\u2374\3\2\2\2\u2373\u236e\3\2\2\2\u2373\u2372\3\2\2\2\u2374"+
		"\u049d\3\2\2\2\u2375\u2376\5\u044e\u0228\2\u2376\u2377\5\u04a0\u0251\2"+
		"\u2377\u2378\5\u04a2\u0252\2\u2378\u2386\3\2\2\2\u2379\u237a\5\u044e\u0228"+
		"\2\u237a\u237b\5\u04a2\u0252\2\u237b\u237c\5\u04a0\u0251\2\u237c\u2386"+
		"\3\2\2\2\u237d\u237e\5\u044e\u0228\2\u237e\u237f\5\u04a0\u0251\2\u237f"+
		"\u2386\3\2\2\2\u2380\u2381\5\u044e\u0228\2\u2381\u2382\5\u04a2\u0252\2"+
		"\u2382\u2386\3\2\2\2\u2383\u2386\5\u0488\u0245\2\u2384\u2386\3\2\2\2\u2385"+
		"\u2375\3\2\2\2\u2385\u2379\3\2\2\2\u2385\u237d\3\2\2\2\u2385\u2380\3\2"+
		"\2\2\u2385\u2383\3\2\2\2\u2385\u2384\3\2\2\2\u2386\u049f\3\2\2\2\u2387"+
		"\u2388\7\u00db\2\2\u2388\u2389\5\u044e\u0228\2\u2389\u04a1\3\2\2\2\u238a"+
		"\u238b\7\u00d6\2\2\u238b\u238c\5\u044e\u0228\2\u238c\u04a3\3\2\2\2\u238d"+
		"\u238e\5\u044e\u0228\2\u238e\u238f\7\u00db\2\2\u238f\u2390\5\u0488\u0245"+
		"\2\u2390\u2395\3\2\2\2\u2391\u2392\7\u00db\2\2\u2392\u2395\5\u0488\u0245"+
		"\2\u2393\u2395\5\u0488\u0245\2\u2394\u238d\3\2\2\2\u2394\u2391\3\2\2\2"+
		"\u2394\u2393\3\2\2\2\u2395\u04a5\3\2\2\2\u2396\u2397\7\5\2\2\u2397\u2398"+
		"\5\u0488\u0245\2\u2398\u2399\7\6\2\2\u2399\u239c\3\2\2\2\u239a\u239c\5"+
		"\u03b0\u01d9\2\u239b\u2396\3\2\2\2\u239b\u239a\3\2\2\2\u239c\u04a7\3\2"+
		"\2\2\u239d\u239e\7z\2\2\u239e\u239f\5\u04b0\u0259\2\u239f\u23a0\5\u04aa"+
		"\u0256\2\u23a0\u23a1\5\u04ae\u0258\2\u23a1\u23a2\7\u00c3\2\2\u23a2\u04a9"+
		"\3\2\2\2\u23a3\u23a4\b\u0256\1\2\u23a4\u23a5\5\u04ac\u0257\2\u23a5\u23aa"+
		"\3\2\2\2\u23a6\u23a7\f\4\2\2\u23a7\u23a9\5\u04ac\u0257\2\u23a8\u23a6\3"+
		"\2\2\2\u23a9\u23ac\3\2\2\2\u23aa\u23a8\3\2\2\2\u23aa\u23ab\3\2\2\2\u23ab"+
		"\u04ab\3\2\2\2\u23ac\u23aa\3\2\2\2\u23ad\u23ae\7\u01c9\2\2\u23ae\u23af"+
		"\5\u044e\u0228\2\u23af\u23b0\7\u01a2\2\2\u23b0\u23b1\5\u044e\u0228\2\u23b1"+
		"\u04ad\3\2\2\2\u23b2\u23b3\7\u00bf\2\2\u23b3\u23b6\5\u044e\u0228\2\u23b4"+
		"\u23b6\3\2\2\2\u23b5\u23b2\3\2\2\2\u23b5\u23b4\3\2\2\2\u23b6\u04af\3\2"+
		"\2\2\u23b7\u23ba\5\u044e\u0228\2\u23b8\u23ba\3\2\2\2\u23b9\u23b7\3\2\2"+
		"\2\u23b9\u23b8\3\2\2\2\u23ba\u04b1\3\2\2\2\u23bb\u23bc\5\u04e4\u0273\2"+
		"\u23bc\u23bd\5\u04b6\u025c\2\u23bd\u23c0\3\2\2\2\u23be\u23c0\5\u04e4\u0273"+
		"\2\u23bf\u23bb\3\2\2\2\u23bf\u23be\3\2\2\2\u23c0\u04b3\3\2\2\2\u23c1\u23c2"+
		"\7\f\2\2\u23c2\u23d0\7\r\2\2\u23c3\u23c4\7\f\2\2\u23c4\u23d0\5\u04d2\u026a"+
		"\2\u23c5\u23c6\7\n\2\2\u23c6\u23c7\5\u044e\u0228\2\u23c7\u23c8\7\13\2"+
		"\2\u23c8\u23d0\3\2\2\2\u23c9\u23ca\7\n\2\2\u23ca\u23cb\5\u044e\u0228\2"+
		"\u23cb\u23cc\7\25\2\2\u23cc\u23cd\5\u044e\u0228\2\u23cd\u23ce\7\13\2\2"+
		"\u23ce\u23d0\3\2\2\2\u23cf\u23c1\3\2\2\2\u23cf\u23c3\3\2\2\2\u23cf\u23c5"+
		"\3\2\2\2\u23cf\u23c9\3\2\2\2\u23d0\u04b5\3\2\2\2\u23d1\u23d2\b\u025c\1"+
		"\2\u23d2\u23d3\5\u04b4\u025b\2\u23d3\u23d8\3\2\2\2\u23d4\u23d5\f\4\2\2"+
		"\u23d5\u23d7\5\u04b4\u025b\2\u23d6\u23d4\3\2\2\2\u23d7\u23da\3\2\2\2\u23d8"+
		"\u23d6\3\2\2\2\u23d8\u23d9\3\2\2\2\u23d9\u04b7\3\2\2\2\u23da\u23d8\3\2"+
		"\2\2\u23db\u23e0\b\u025d\1\2\u23dc\u23dd\f\4\2\2\u23dd\u23df\5\u04b4\u025b"+
		"\2\u23de\u23dc\3\2\2\2\u23df\u23e2\3\2\2\2\u23e0\u23de\3\2\2\2\u23e0\u23e1"+
		"\3\2\2\2\u23e1\u04b9\3\2\2\2\u23e2\u23e0\3\2\2\2\u23e3\u23e6\7h\2\2\u23e4"+
		"\u23e6\3\2\2\2\u23e5\u23e3\3\2\2\2\u23e5\u23e4\3\2\2\2\u23e6\u04bb\3\2"+
		"\2\2\u23e7\u23ea\5\u044e\u0228\2\u23e8\u23ea\7\u00ac\2\2\u23e9\u23e7\3"+
		"\2\2\2\u23e9\u23e8\3\2\2\2\u23ea\u04bd\3\2\2\2\u23eb\u23ec\b\u0260\1\2"+
		"\u23ec\u23ed\5\u04bc\u025f\2\u23ed\u23f3\3\2\2\2\u23ee\u23ef\f\4\2\2\u23ef"+
		"\u23f0\7\7\2\2\u23f0\u23f2\5\u04bc\u025f\2\u23f1\u23ee\3\2\2\2\u23f2\u23f5"+
		"\3\2\2\2\u23f3\u23f1\3\2\2\2\u23f3\u23f4\3\2\2\2\u23f4\u04bf\3\2\2\2\u23f5"+
		"\u23f3\3\2\2\2\u23f6\u23f7\7\5\2\2\u23f7\u23f8\5\u04be\u0260\2\u23f8\u23f9"+
		"\7\6\2\2\u23f9\u04c1\3\2\2\2\u23fa\u23fb\b\u0262\1\2\u23fb\u23fc\5\u04c4"+
		"\u0263\2\u23fc\u2402\3\2\2\2\u23fd\u23fe\f\4\2\2\u23fe\u23ff\7\7\2\2\u23ff"+
		"\u2401\5\u04c4\u0263\2\u2400\u23fd\3\2\2\2\u2401\u2404\3\2\2\2\u2402\u2400"+
		"\3\2\2\2\u2402\u2403\3\2\2\2\u2403\u04c3\3\2\2\2\u2404\u2402\3\2\2\2\u2405"+
		"\u240f\7\r\2\2\u2406\u2407\5\u044e\u0228\2\u2407\u2408\7d\2\2\u2408\u2409"+
		"\5\u04e8\u0275\2\u2409\u240f\3\2\2\2\u240a\u240b\5\u044e\u0228\2\u240b"+
		"\u240c\7\u01e7\2\2\u240c\u240f\3\2\2\2\u240d\u240f\5\u044e\u0228\2\u240e"+
		"\u2405\3\2\2\2\u240e\u2406\3\2\2\2\u240e\u240a\3\2\2\2\u240e\u240d\3\2"+
		"\2\2\u240f\u04c5\3\2\2\2\u2410\u2411\b\u0264\1\2\u2411\u2412\5\u04c8\u0265"+
		"\2\u2412\u2418\3\2\2\2\u2413\u2414\f\4\2\2\u2414\u2415\7\7\2\2\u2415\u2417"+
		"\5\u04c8\u0265\2\u2416\u2413\3\2\2\2\u2417\u241a\3\2\2\2\u2418\u2416\3"+
		"\2\2\2\u2418\u2419\3\2\2\2\u2419\u04c7\3\2\2\2\u241a\u2418\3\2\2\2\u241b"+
		"\u241c\5\u04e4\u0273\2\u241c\u241d\5\u04b6\u025c\2\u241d\u2420\3\2\2\2"+
		"\u241e\u2420\5\u04e4\u0273\2\u241f\u241b\3\2\2\2\u241f\u241e\3\2\2\2\u2420"+
		"\u04c9\3\2\2\2\u2421\u2422\b\u0266\1\2\u2422\u2423\5\u04cc\u0267\2\u2423"+
		"\u2429\3\2\2\2\u2424\u2425\f\4\2\2\u2425\u2426\7\7\2\2\u2426\u2428\5\u04cc"+
		"\u0267\2\u2427\u2424\3\2\2\2\u2428\u242b\3\2\2\2\u2429\u2427\3\2\2\2\u2429"+
		"\u242a\3\2\2\2\u242a\u04cb\3\2\2\2\u242b\u2429\3\2\2\2\u242c\u242d\5\u04e4"+
		"\u0273\2\u242d\u04cd\3\2\2\2\u242e\u242f\5\u04e4\u0273\2\u242f\u04cf\3"+
		"\2\2\2\u2430\u2431\5\u04e4\u0273\2\u2431\u04d1\3\2\2\2\u2432\u2433\5\u04e8"+
		"\u0275\2\u2433\u04d3\3\2\2\2\u2434\u2435\5\u04e4\u0273\2\u2435\u04d5\3"+
		"\2\2\2\u2436\u2437\5\u04de\u0270\2\u2437\u04d7\3\2\2\2\u2438\u2439\5\u04e4"+
		"\u0273\2\u2439\u243a\5\u04b6\u025c\2\u243a\u243d\3\2\2\2\u243b\u243d\5"+
		"\u04e6\u0274\2\u243c\u2438\3\2\2\2\u243c\u243b\3\2\2\2\u243d\u04d9\3\2"+
		"\2\2\u243e\u243f\5\u0446\u0224\2\u243f\u2440\7\5\2\2\u2440\u2441\5\u04dc"+
		"\u026f\2\u2441\u2442\7\6\2\2\u2442\u2443\5\u04de\u0270\2\u2443\u2444\5"+
		"\u044a\u0226\2\u2444\u245e\3\2\2\2\u2445\u2446\5\u04d8\u026d\2\u2446\u2447"+
		"\7\5\2\2\u2447\u2448\5\u048a\u0246\2\u2448\u2449\7\6\2\2\u2449\u244a\5"+
		"\u04de\u0270\2\u244a\u245e\3\2\2\2\u244b\u244c\5\u0446\u0224\2\u244c\u244d"+
		"\5\u04de\u0270\2\u244d\u244e\5\u044a\u0226\2\u244e\u245e\3\2\2\2\u244f"+
		"\u2450\5\u04d8\u026d\2\u2450\u2451\5\u04de\u0270\2\u2451\u245e\3\2\2\2"+
		"\u2452\u2453\5\u0424\u0213\2\u2453\u2454\5\u04de\u0270\2\u2454\u245e\3"+
		"\2\2\2\u2455\u245e\5\u04dc\u026f\2\u2456\u245e\5\u04de\u0270\2\u2457\u245e"+
		"\7\u01e9\2\2\u2458\u245e\7\u01e5\2\2\u2459\u245e\7\u01e6\2\2\u245a\u245e"+
		"\7\u01ab\2\2\u245b\u245e\7\u00d0\2\2\u245c\u245e\7\u0132\2\2\u245d\u243e"+
		"\3\2\2\2\u245d\u2445\3\2\2\2\u245d\u244b\3\2\2\2\u245d\u244f\3\2\2\2\u245d"+
		"\u2452\3\2\2\2\u245d\u2455\3\2\2\2\u245d\u2456\3\2\2\2\u245d\u2457\3\2"+
		"\2\2\u245d\u2458\3\2\2\2\u245d\u2459\3\2\2\2\u245d\u245a\3\2\2\2\u245d"+
		"\u245b\3\2\2\2\u245d\u245c\3\2\2\2\u245e\u04db\3\2\2\2\u245f\u2460\7\u01ea"+
		"\2\2\u2460\u04dd\3\2\2\2\u2461\u2462\7\u01e4\2\2\u2462\u04df\3\2\2\2\u2463"+
		"\u2464\5\u04e4\u0273\2\u2464\u04e1\3\2\2\2\u2465\u2466\7\21\2\2\u2466"+
		"\u246b\5\u04dc\u026f\2\u2467\u2468\7\16\2\2\u2468\u246b\5\u04dc\u026f"+
		"\2\u2469\u246b\5\u04dc\u026f\2\u246a\u2465\3\2\2\2\u246a\u2467\3\2\2\2"+
		"\u246a\u2469\3\2\2\2\u246b\u04e3\3\2\2\2\u246c\u2470\5\u04ea\u0276\2\u246d"+
		"\u2470\5\u04ec\u0277\2\u246e\u2470\7\u01e7\2\2\u246f\u246c\3\2\2\2\u246f"+
		"\u246d\3\2\2\2\u246f\u246e\3\2\2\2\u2470\u04e5\3\2\2\2\u2471\u2475\5\u04ea"+
		"\u0276\2\u2472\u2475\5\u04ee\u0278\2\u2473\u2475\7\u01e7\2\2\u2474\u2471"+
		"\3\2\2\2\u2474\u2472\3\2\2\2\u2474\u2473\3\2\2\2\u2475\u04e7\3\2\2\2\u2476"+
		"\u247c\5\u04ea\u0276\2\u2477\u247c\5\u04ec\u0277\2\u2478\u247c\5\u04ee"+
		"\u0278\2\u2479\u247c\5\u04f0\u0279\2\u247a\u247c\7\u01e7\2\2\u247b\u2476"+
		"\3\2\2\2\u247b\u2477\3\2\2\2\u247b\u2478\3\2\2\2\u247b\u2479\3\2\2\2\u247b"+
		"\u247a\3\2\2\2\u247c\u04e9\3\2\2\2\u247d\u247e\t\25\2\2\u247e\u04eb\3"+
		"\2\2\2\u247f\u2480\t\26\2\2\u2480\u04ed\3\2\2\2\u2481\u2482\t\27\2\2\u2482"+
		"\u04ef\3\2\2\2\u2483\u2484\t\30\2\2\u2484\u04f1\3\2\2\2\u01f0\u04fb\u050a"+
		"\u050e\u051f\u052a\u0533\u054a\u0550\u0559\u0563\u0571\u057c\u0581\u0586"+
		"\u0591\u0595\u059b\u05a4\u05bf\u05d1\u05db\u05ee\u05f7\u05fb\u0612\u061b"+
		"\u0625\u0645\u0663\u0673\u0687\u068a\u0693\u0696\u0699\u06a4\u071c\u0721"+
		"\u0725\u0730\u0737\u073c\u0741\u0744\u074c\u074f\u0755\u075f\u0766\u077a"+
		"\u078c\u0795\u07a5\u07ab\u07b7\u07c7\u07cb\u07d0\u07d5\u07e1\u0853\u085d"+
		"\u0864\u086c\u0883\u0892\u08a4\u08bf\u08c9\u08e2\u08f0\u08f4\u08fb\u0904"+
		"\u090e\u0918\u0945\u094f\u095a\u095f\u0968\u096e\u0980\u0985\u0989\u0999"+
		"\u099e\u09a3\u09b3\u09bc\u09ca\u09fc\u0a06\u0aae\u0ab5\u0aba\u0abf\u0ac4"+
		"\u0acd\u0ad7\u0ae9\u0af8\u0b15\u0b1b\u0b2f\u0b36\u0b3d\u0b44\u0b67\u0b6b"+
		"\u0b70\u0b77\u0b7b\u0b85\u0b93\u0b9d\u0bd6\u0be4\u0be8\u0bef\u0bf9\u0c04"+
		"\u0c0a\u0c0e\u0c1f\u0c2a\u0c46\u0c4f\u0c5c\u0c5e\u0c68\u0ca0\u0ca5\u0cac"+
		"\u0cb6\u0cc2\u0ccc\u0cda\u0ce2\u0ced\u0cff\u0d07\u0d10\u0d1e\u0d23\u0d2a"+
		"\u0d44\u0d58\u0d5c\u0d65\u0d85\u0d89\u0d8f\u0d99\u0dae\u0db2\u0db8\u0dbd"+
		"\u0dc3\u0dc7\u0dd7\u0ddb\u0de7\u0df1\u0e02\u0e09\u0e12\u0e1f\u0ed7\u0ee9"+
		"\u0ef2\u0ef7\u0f09\u0f1a\u0f22\u0f2c\u0f3c\u0f46\u0f5d\u0f63\u0f67\u0f75"+
		"\u0f87\u0f9e\u0fa6\u0fb0\u0fc3\u0fd1\u0fe5\u1015\u101b\u1025\u102f\u1036"+
		"\u103a\u1044\u1049\u1050\u1057\u105c\u1063\u1071\u1083\u10ea\u10f8\u1100"+
		"\u1107\u1110\u111e\u1127\u1131\u114d\u1165\u1184\u1188\u118d\u1196\u119a"+
		"\u11b5\u11bf\u11ce\u11e2\u11f6\u121f\u1239\u1243\u124a\u1255\u1263\u12f9"+
		"\u130f\u1313\u1346\u134b\u1359\u135d\u1363\u13a7\u13ad\u13ca\u13db\u13e5"+
		"\u13f1\u141f\u1429\u142f\u1435\u143f\u145d\u1463\u1469\u1476\u1482\u149f"+
		"\u14b4\u14b8\u14bc\u14c1\u14cb\u14e2\u14e7\u14ed\u14f2\u14f7\u1518\u151d"+
		"\u1525\u152f\u1538\u1542\u1554\u155c\u156e\u1579\u1582\u15a4\u15ac\u15b3"+
		"\u15b8\u15c5\u15d5\u15da\u15ea\u15fa\u160a\u1622\u1629\u1635\u163b\u165f"+
		"\u1666\u1675\u1686\u168c\u17e0\u17e4\u17e9\u189f\u192f\u1945\u194f\u1957"+
		"\u195b\u1962\u1974\u197d\u1986\u19b2\u19b7\u19c3\u19cd\u19cf\u19d4\u19ec"+
		"\u19fa\u1a0a\u1a4e\u1a52\u1a61\u1a6d\u1a7d\u1ab8\u1abc\u1b0d\u1b27\u1b2c"+
		"\u1b4b\u1b55\u1b5c\u1b66\u1b6c\u1b70\u1b74\u1b7b\u1b8d\u1b96\u1ba0\u1ba9"+
		"\u1bae\u1bbb\u1bc1\u1bd1\u1bd8\u1be4\u1bf5\u1bff\u1c0a\u1c18\u1c25\u1c37"+
		"\u1c3b\u1c4f\u1c54\u1c6b\u1c82\u1c84\u1c8c\u1c90\u1c9b\u1cac\u1cae\u1cd5"+
		"\u1cd9\u1cfd\u1d0e\u1d10\u1d18\u1d22\u1d2e\u1d32\u1d37\u1d3b\u1d42\u1d6a"+
		"\u1d6e\u1d73\u1d7e\u1d82\u1d90\u1d9c\u1da6\u1daa\u1db9\u1dc1\u1dc5\u1dcf"+
		"\u1ddb\u1de0\u1de6\u1dea\u1df3\u1e00\u1e05\u1e10\u1e16\u1e20\u1e25\u1e46"+
		"\u1e4d\u1e6a\u1e85\u1e87\u1e98\u1ea1\u1ea5\u1eae\u1ebb\u1ec5\u1ed0\u1ed7"+
		"\u1ee0\u1ee4\u1eee\u1f10\u1f1b\u1f1d\u1f2e\u1f34\u1f3d\u1f44\u1f56\u1f5d"+
		"\u1f61\u1f65\u1f72\u1f76\u1f8e\u1f92\u1f98\u1faa\u1fb4\u1fd2\u1fda\u1fed"+
		"\u20d6\u20d8\u20e4\u212b\u212d\u2144\u2247\u224e\u225b\u226a\u2272\u227b"+
		"\u228f\u2294\u229e\u22aa\u22b5\u22bb\u22c2\u22ca\u22d8\u22e8\u22ee\u22f8"+
		"\u2300\u230e\u2318\u2323\u232b\u2335\u2342\u234c\u2354\u235e\u2369\u2373"+
		"\u2385\u2394\u239b\u23aa\u23b5\u23b9\u23bf\u23cf\u23d8\u23e0\u23e5\u23e9"+
		"\u23f3\u2402\u240e\u2418\u241f\u2429\u243c\u245d\u246a\u246f\u2474\u247b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}