// Generated from org\pgcase\xobot\parsers\postgres\Sql.g4 by ANTLR 4.5
package org.pgcase.xobot.parsers.postgres;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, NULLS_FIRST=19, NULLS_LAST=20, WITH_TIME=21, ABORT_P=22, ABSOLUTE_P=23, 
		ACCESS=24, ACTION=25, ADD_P=26, ADMIN=27, AFTER=28, AGGREGATE=29, ALL=30, 
		ALSO=31, ALTER=32, ALWAYS=33, ANALYSE=34, ANALYZE=35, AND=36, ANY=37, 
		ARRAY=38, AS=39, ASC=40, ASSERTION=41, ASSIGNMENT=42, ASYMMETRIC=43, AT=44, 
		ATTRIBUTE=45, AUTHORIZATION=46, BACKWARD=47, BEFORE=48, BEGIN_P=49, BETWEEN=50, 
		BIGINT=51, BINARY=52, BIT=53, BOOLEAN_P=54, BOTH=55, BY=56, CACHE=57, 
		CALLED=58, CASCADE=59, CASCADED=60, CASE=61, CAST=62, CATALOG_P=63, CHAIN=64, 
		CHAR_P=65, CHARACTER=66, CHARACTERISTICS=67, CHECK=68, CHECKPOINT=69, 
		CLASS=70, CLOSE=71, CLUSTER=72, COALESCE=73, COLLATE=74, COLLATION=75, 
		COLUMN=76, COMMENT=77, COMMENTS=78, COMMIT=79, COMMITTED=80, CONCURRENTLY=81, 
		CONFIGURATION=82, CONNECTION=83, CONSTRAINT=84, CONSTRAINTS=85, CONTENT_P=86, 
		CONTINUE_P=87, CONVERSION_P=88, COPY=89, COST=90, CREATE=91, CROSS=92, 
		CSV=93, CURRENT_P=94, CURRENT_CATALOG=95, CURRENT_DATE=96, CURRENT_ROLE=97, 
		CURRENT_SCHEMA=98, CURRENT_TIME=99, CURRENT_TIMESTAMP=100, CURRENT_USER=101, 
		CURSOR=102, CYCLE=103, DATA_P=104, DATABASE=105, DAY_P=106, DEALLOCATE=107, 
		DEC=108, DECIMAL_P=109, DECLARE=110, DEFAULT=111, DEFAULTS=112, DEFERRABLE=113, 
		DEFERRED=114, DEFINER=115, DELETE_P=116, DELIMITER=117, DELIMITERS=118, 
		DESC=119, DICTIONARY=120, DISABLE_P=121, DISCARD=122, DISTINCT=123, DO=124, 
		DOCUMENT_P=125, DOMAIN_P=126, DOUBLE_P=127, DROP=128, EACH=129, ELSE=130, 
		ENABLE_P=131, ENCODING=132, ENCRYPTED=133, END_P=134, ENUM_P=135, ESCAPE=136, 
		EXCEPT=137, EXCLUDE=138, EXCLUDING=139, EXCLUSIVE=140, EXECUTE=141, EXISTS=142, 
		EXPLAIN=143, EXTENSION=144, EXTERNAL=145, EXTRACT=146, FALSE_P=147, FAMILY=148, 
		FETCH=149, FIRST_P=150, FLOAT_P=151, FOLLOWING=152, FOR=153, FORCE=154, 
		FOREIGN=155, FORWARD=156, FREEZE=157, FROM=158, FULL=159, FUNCTION=160, 
		FUNCTIONS=161, GLOBAL=162, GRANT=163, GRANTED=164, GREATEST=165, GROUP_P=166, 
		HANDLER=167, HAVING=168, HEADER_P=169, HOLD=170, HOUR_P=171, IDENTITY_P=172, 
		IF_P=173, ILIKE=174, IMMEDIATE=175, IMMUTABLE=176, IMPLICIT_P=177, IN_P=178, 
		INCLUDING=179, INCREMENT=180, INDEX=181, INDEXES=182, INHERIT=183, INHERITS=184, 
		INITIALLY=185, INLINE_P=186, INNER_P=187, INOUT=188, INPUT_P=189, INSENSITIVE=190, 
		INSERT=191, INSTEAD=192, INT_P=193, INTEGER=194, INTERSECT=195, INTERVAL=196, 
		INTO=197, INVOKER=198, IS=199, ISNULL=200, ISOLATION=201, JOIN=202, KEY=203, 
		LABEL=204, LANGUAGE=205, LARGE_P=206, LAST_P=207, LC_COLLATE_P=208, LC_CTYPE_P=209, 
		LEADING=210, LEAKPROOF=211, LEAST=212, LEFT=213, LEVEL=214, LIKE=215, 
		LIMIT=216, LISTEN=217, LOAD=218, LOCAL=219, LOCALTIME=220, LOCALTIMESTAMP=221, 
		LOCATION=222, LOCK_P=223, MAPPING=224, MATCH=225, MAXVALUE=226, MINUTE_P=227, 
		MINVALUE=228, MODE=229, MONTH_P=230, MOVE=231, NAME_P=232, NAMES=233, 
		NATIONAL=234, NATURAL=235, NCHAR=236, NEXT=237, NO=238, NONE=239, NOT=240, 
		NOTHING=241, NOTIFY=242, NOTNULL=243, NOWAIT=244, NULL_P=245, NULLIF=246, 
		NULLS_P=247, NUMERIC=248, OBJECT_P=249, OF=250, OFF=251, OFFSET=252, OIDS=253, 
		ON=254, ONLY=255, OPERATOR=256, OPTION=257, OPTIONS=258, OR=259, ORDER=260, 
		OUT_P=261, OUTER_P=262, OVER=263, OVERLAPS=264, OVERLAY=265, OWNED=266, 
		OWNER=267, PARSER=268, PARTIAL=269, PARTITION=270, PASSING=271, PASSWORD=272, 
		PLACING=273, PLANS=274, POSITION=275, PRECEDING=276, PRECISION=277, PREPARE=278, 
		PREPARED=279, PRESERVE=280, PRIMARY=281, PRIOR=282, PRIVILEGES=283, PROCEDURAL=284, 
		PROCEDURE=285, QUOTE=286, RANGE=287, READ=288, REAL=289, REASSIGN=290, 
		RECHECK=291, RECURSIVE=292, REF=293, REFERENCES=294, REINDEX=295, RELATIVE_P=296, 
		RELEASE=297, RENAME=298, REPEATABLE=299, REPLACE=300, REPLICA=301, RESET=302, 
		RESTART=303, RESTRICT=304, RETURNING=305, RETURNS=306, REVOKE=307, RIGHT=308, 
		ROLE=309, ROLLBACK=310, ROW=311, ROWS=312, RULE=313, SAVEPOINT=314, SCHEMA=315, 
		SCROLL=316, SEARCH=317, SECOND_P=318, SECURITY=319, SELECT=320, SEQUENCE=321, 
		SEQUENCES=322, SERIALIZABLE=323, SERVER=324, SESSION=325, SESSION_USER=326, 
		SET=327, SETOF=328, SHARE=329, SHOW=330, SIMILAR=331, SIMPLE=332, SMALLINT=333, 
		SNAPSHOT=334, SOME=335, STABLE=336, STANDALONE_P=337, START=338, STATEMENT=339, 
		STATISTICS=340, STDIN=341, STDOUT=342, STORAGE=343, STRICT_P=344, STRIP_P=345, 
		SUBSTRING=346, SYMMETRIC=347, SYSID=348, SYSTEM_P=349, TABLE=350, TABLES=351, 
		TABLESPACE=352, TEMP=353, TEMPLATE=354, TEMPORARY=355, TEXT_P=356, THEN=357, 
		TIME=358, TIMESTAMP=359, TO=360, TRAILING=361, TRANSACTION=362, TREAT=363, 
		TRIGGER=364, TRIM=365, TRUE_P=366, TRUNCATE=367, TRUSTED=368, TYPE_P=369, 
		TYPES_P=370, UNBOUNDED=371, UNCOMMITTED=372, UNENCRYPTED=373, UNION=374, 
		UNIQUE=375, UNKNOWN=376, UNLISTEN=377, UNLOGGED=378, UNTIL=379, UPDATE=380, 
		USER=381, USING=382, VACUUM=383, VALID=384, VALIDATE=385, VALIDATOR=386, 
		VALUE_P=387, VALUES=388, VARCHAR=389, VARIADIC=390, VARYING=391, VERBOSE=392, 
		VERSION_P=393, VIEW=394, VOLATILE=395, WHEN=396, WHERE=397, WHITESPACE_P=398, 
		WINDOW=399, WITH=400, WITHOUT=401, WORK=402, WRAPPER=403, WRITE=404, XML_P=405, 
		XMLATTRIBUTES=406, XMLCONCAT=407, XMLELEMENT=408, XMLEXISTS=409, XMLFOREST=410, 
		XMLPARSE=411, XMLPI=412, XMLROOT=413, XMLSERIALIZE=414, YEAR_P=415, YES_P=416, 
		ZONE=417, LESS_LESS=418, GREATER_GREATER=419, TYPECAST=420, DOT_DOT=421, 
		COLON_EQUALS=422, SCONST=423, BCONST=424, XCONST=425, IDENT=426, PARAM=427, 
		FCONST=428, ICONST=429, Op=430, T_comment=431, T_ccomment=432, T_space=433, 
		T_newline=434, T_whitespace=435, T_special_whitespace=436, T_horiz_whitespace=437, 
		T_whitespace_with_newline=438, T_horiz_space=439, PSQL_COMMAND=440, K_MESSAGE=441, 
		K_NEXT=442, K_MESSAGE_TEXT=443, K_STACKED=444, K_DIAGNOSTICS=445, K_PG_EXCEPTION_CONTEXT=446, 
		K_LOOP=447, K_USE_COLUMN=448, K_DUMP=449, K_SLICE=450, K_EXECUTE=451, 
		K_COLLATE=452, K_RESULT_OID=453, K_WHILE=454, K_ERROR=455, K_FORWARD=456, 
		K_FOREACH=457, K_RETURNED_SQLSTATE=458, K_BACKWARD=459, K_EXCEPTION=460, 
		K_HINT=461, K_CURRENT=462, K_RAISE=463, K_OPEN=464, K_DETAIL=465, K_RETURN=466, 
		K_CLOSE=467, K_SCROLL=468, K_MOVE=469, K_USE_VARIABLE=470, K_ALIAS=471, 
		K_INFO=472, K_NO=473, K_RELATIVE=474, K_LOG=475, K_QUERY=476, K_GET=477, 
		K_CONTINUE=478, K_FETCH=479, K_ROW_COUNT=480, K_DEBUG=481, K_CONSTANT=482, 
		K_CURSOR=483, K_PG_EXCEPTION_DETAIL=484, K_ELSIF=485, K_PRIOR=486, K_EXIT=487, 
		K_ABSOLUTE=488, K_FIRST=489, K_LAST=490, K_ROWTYPE=491, K_VARIABLE_CONFLICT=492, 
		K_PG_EXCEPTION_HINT=493, K_OPTION=494, K_NOTICE=495, K_PERFORM=496, K_WARNING=497, 
		K_REVERSE=498;
	public static final int
		RULE_stmtblock = 0, RULE_stmtmulti = 1, RULE_stmt = 2, RULE_createRoleStmt = 3, 
		RULE_opt_with = 4, RULE_optRoleList = 5, RULE_alterOptRoleList = 6, RULE_alterOptRoleElem = 7, 
		RULE_createOptRoleElem = 8, RULE_createUserStmt = 9, RULE_alterRoleStmt = 10, 
		RULE_opt_in_database = 11, RULE_alterRoleSetStmt = 12, RULE_alterUserStmt = 13, 
		RULE_alterUserSetStmt = 14, RULE_dropRoleStmt = 15, RULE_dropUserStmt = 16, 
		RULE_createGroupStmt = 17, RULE_alterGroupStmt = 18, RULE_add_drop = 19, 
		RULE_dropGroupStmt = 20, RULE_createSchemaStmt = 21, RULE_optSchemaName = 22, 
		RULE_optSchemaEltList = 23, RULE_schema_stmt = 24, RULE_variableSetStmt = 25, 
		RULE_set_rest = 26, RULE_set_rest_more = 27, RULE_var_name = 28, RULE_var_list = 29, 
		RULE_var_value = 30, RULE_iso_level = 31, RULE_opt_boolean_or_string = 32, 
		RULE_zone_value = 33, RULE_opt_encoding = 34, RULE_colId_or_Sconst = 35, 
		RULE_variableResetStmt = 36, RULE_setResetClause = 37, RULE_functionSetResetClause = 38, 
		RULE_variableShowStmt = 39, RULE_constraintsSetStmt = 40, RULE_constraints_set_list = 41, 
		RULE_constraints_set_mode = 42, RULE_checkPointStmt = 43, RULE_discardStmt = 44, 
		RULE_alterTableStmt = 45, RULE_alter_table_cmds = 46, RULE_alter_table_cmd = 47, 
		RULE_alter_column_default = 48, RULE_opt_drop_behavior = 49, RULE_opt_collate_clause = 50, 
		RULE_alter_using = 51, RULE_reloptions = 52, RULE_opt_reloptions = 53, 
		RULE_reloption_list = 54, RULE_reloption_elem = 55, RULE_alterCompositeTypeStmt = 56, 
		RULE_alter_type_cmds = 57, RULE_alter_type_cmd = 58, RULE_closePortalStmt = 59, 
		RULE_copyStmt = 60, RULE_copy_from = 61, RULE_copy_file_name = 62, RULE_copy_options = 63, 
		RULE_copy_opt_list = 64, RULE_copy_opt_item = 65, RULE_opt_binary = 66, 
		RULE_opt_oids = 67, RULE_copy_delimiter = 68, RULE_opt_using = 69, RULE_copy_generic_opt_list = 70, 
		RULE_copy_generic_opt_elem = 71, RULE_copy_generic_opt_arg = 72, RULE_copy_generic_opt_arg_list = 73, 
		RULE_copy_generic_opt_arg_list_item = 74, RULE_createStmt = 75, RULE_optTemp = 76, 
		RULE_optTableElementList = 77, RULE_optTypedTableElementList = 78, RULE_tableElementList = 79, 
		RULE_typedTableElementList = 80, RULE_tableElement = 81, RULE_typedTableElement = 82, 
		RULE_columnDef = 83, RULE_columnOptions = 84, RULE_colQualList = 85, RULE_colConstraint = 86, 
		RULE_colConstraintElem = 87, RULE_constraintAttr = 88, RULE_tableLikeClause = 89, 
		RULE_tableLikeOptionList = 90, RULE_tableLikeOption = 91, RULE_tableConstraint = 92, 
		RULE_constraintElem = 93, RULE_opt_no_inherit = 94, RULE_opt_column_list = 95, 
		RULE_columnList = 96, RULE_columnElem = 97, RULE_key_match = 98, RULE_exclusionConstraintList = 99, 
		RULE_exclusionConstraintElem = 100, RULE_exclusionWhereClause = 101, RULE_key_actions = 102, 
		RULE_key_update = 103, RULE_key_delete = 104, RULE_key_action = 105, RULE_optInherit = 106, 
		RULE_optWith = 107, RULE_onCommitOption = 108, RULE_optTableSpace = 109, 
		RULE_optConsTableSpace = 110, RULE_existingIndex = 111, RULE_createAsStmt = 112, 
		RULE_create_as_target = 113, RULE_opt_with_data = 114, RULE_createSeqStmt = 115, 
		RULE_alterSeqStmt = 116, RULE_optSeqOptList = 117, RULE_seqOptList = 118, 
		RULE_seqOptElem = 119, RULE_opt_by = 120, RULE_numericOnly = 121, RULE_numericOnly_list = 122, 
		RULE_createPLangStmt = 123, RULE_opt_trusted = 124, RULE_handler_name = 125, 
		RULE_opt_inline_handler = 126, RULE_validator_clause = 127, RULE_opt_validator = 128, 
		RULE_dropPLangStmt = 129, RULE_opt_procedural = 130, RULE_createTableSpaceStmt = 131, 
		RULE_optTableSpaceOwner = 132, RULE_dropTableSpaceStmt = 133, RULE_createExtensionStmt = 134, 
		RULE_create_extension_opt_list = 135, RULE_create_extension_opt_item = 136, 
		RULE_alterExtensionStmt = 137, RULE_alter_extension_opt_list = 138, RULE_alter_extension_opt_item = 139, 
		RULE_alterExtensionContentsStmt = 140, RULE_createFdwStmt = 141, RULE_fdw_option = 142, 
		RULE_fdw_options = 143, RULE_opt_fdw_options = 144, RULE_dropFdwStmt = 145, 
		RULE_alterFdwStmt = 146, RULE_create_generic_options = 147, RULE_generic_option_list = 148, 
		RULE_alter_generic_options = 149, RULE_alter_generic_option_list = 150, 
		RULE_alter_generic_option_elem = 151, RULE_generic_option_elem = 152, 
		RULE_generic_option_name = 153, RULE_generic_option_arg = 154, RULE_createForeignServerStmt = 155, 
		RULE_opt_type = 156, RULE_foreign_server_version = 157, RULE_opt_foreign_server_version = 158, 
		RULE_dropForeignServerStmt = 159, RULE_alterForeignServerStmt = 160, RULE_createForeignTableStmt = 161, 
		RULE_optForeignTableElementList = 162, RULE_foreignTableElementList = 163, 
		RULE_foreignTableElement = 164, RULE_alterForeignTableStmt = 165, RULE_createUserMappingStmt = 166, 
		RULE_auth_ident = 167, RULE_dropUserMappingStmt = 168, RULE_alterUserMappingStmt = 169, 
		RULE_createTrigStmt = 170, RULE_triggerActionTime = 171, RULE_triggerEvents = 172, 
		RULE_triggerOneEvent = 173, RULE_triggerForSpec = 174, RULE_triggerForOptEach = 175, 
		RULE_triggerForType = 176, RULE_triggerWhen = 177, RULE_triggerFuncArgs = 178, 
		RULE_triggerFuncArg = 179, RULE_optConstrFromTable = 180, RULE_constraintAttributeSpec = 181, 
		RULE_constraintAttributeElem = 182, RULE_dropTrigStmt = 183, RULE_createAssertStmt = 184, 
		RULE_dropAssertStmt = 185, RULE_defineStmt = 186, RULE_definition = 187, 
		RULE_def_list = 188, RULE_def_elem = 189, RULE_def_arg = 190, RULE_aggr_args = 191, 
		RULE_old_aggr_definition = 192, RULE_old_aggr_list = 193, RULE_old_aggr_elem = 194, 
		RULE_opt_enum_val_list = 195, RULE_enum_val_list = 196, RULE_alterEnumStmt = 197, 
		RULE_createOpClassStmt = 198, RULE_opclass_item_list = 199, RULE_opclass_item = 200, 
		RULE_opt_default = 201, RULE_opt_opfamily = 202, RULE_opclass_purpose = 203, 
		RULE_opt_recheck = 204, RULE_createOpFamilyStmt = 205, RULE_alterOpFamilyStmt = 206, 
		RULE_opclass_drop_list = 207, RULE_opclass_drop = 208, RULE_dropOpClassStmt = 209, 
		RULE_dropOpFamilyStmt = 210, RULE_dropOwnedStmt = 211, RULE_reassignOwnedStmt = 212, 
		RULE_dropStmt = 213, RULE_drop_type = 214, RULE_any_name_list = 215, RULE_any_name = 216, 
		RULE_attrs = 217, RULE_truncateStmt = 218, RULE_opt_restart_seqs = 219, 
		RULE_commentStmt = 220, RULE_comment_type = 221, RULE_comment_text = 222, 
		RULE_secLabelStmt = 223, RULE_opt_provider = 224, RULE_security_label_type = 225, 
		RULE_security_label = 226, RULE_fetchStmt = 227, RULE_fetch_args = 228, 
		RULE_from_in = 229, RULE_opt_from_in = 230, RULE_grantStmt = 231, RULE_revokeStmt = 232, 
		RULE_privileges = 233, RULE_privilege_list = 234, RULE_privilege = 235, 
		RULE_privilege_target = 236, RULE_grantee_list = 237, RULE_grantee = 238, 
		RULE_opt_grant_grant_option = 239, RULE_function_with_argtypes_list = 240, 
		RULE_function_with_argtypes = 241, RULE_grantRoleStmt = 242, RULE_revokeRoleStmt = 243, 
		RULE_opt_grant_admin_option = 244, RULE_opt_granted_by = 245, RULE_alterDefaultPrivilegesStmt = 246, 
		RULE_defACLOptionList = 247, RULE_defACLOption = 248, RULE_defACLAction = 249, 
		RULE_defacl_privilege_target = 250, RULE_indexStmt = 251, RULE_opt_unique = 252, 
		RULE_opt_concurrently = 253, RULE_opt_index_name = 254, RULE_access_method_clause = 255, 
		RULE_index_params = 256, RULE_index_elem = 257, RULE_opt_collate = 258, 
		RULE_opt_class = 259, RULE_opt_asc_desc = 260, RULE_opt_nulls_order = 261, 
		RULE_createFunctionStmt = 262, RULE_opt_or_replace = 263, RULE_func_args = 264, 
		RULE_func_args_list = 265, RULE_func_args_with_defaults = 266, RULE_func_args_with_defaults_list = 267, 
		RULE_func_arg = 268, RULE_arg_class = 269, RULE_param_name = 270, RULE_func_return = 271, 
		RULE_func_type = 272, RULE_func_arg_with_default = 273, RULE_createfunc_opt_list = 274, 
		RULE_common_func_opt_item = 275, RULE_createfunc_opt_item = 276, RULE_func_as = 277, 
		RULE_opt_definition = 278, RULE_table_func_column = 279, RULE_table_func_column_list = 280, 
		RULE_alterFunctionStmt = 281, RULE_alterfunc_opt_list = 282, RULE_opt_restrict = 283, 
		RULE_removeFuncStmt = 284, RULE_removeAggrStmt = 285, RULE_removeOperStmt = 286, 
		RULE_oper_argtypes = 287, RULE_any_operator = 288, RULE_doStmt = 289, 
		RULE_dostmt_opt_list = 290, RULE_dostmt_opt_item = 291, RULE_createCastStmt = 292, 
		RULE_cast_context = 293, RULE_dropCastStmt = 294, RULE_opt_if_exists = 295, 
		RULE_reindexStmt = 296, RULE_reindex_type = 297, RULE_opt_force = 298, 
		RULE_renameStmt = 299, RULE_opt_column = 300, RULE_opt_set_data = 301, 
		RULE_alterObjectSchemaStmt = 302, RULE_alterOwnerStmt = 303, RULE_ruleStmt = 304, 
		RULE_ruleActionList = 305, RULE_ruleActionMulti = 306, RULE_ruleActionStmt = 307, 
		RULE_ruleActionStmtOrEmpty = 308, RULE_event = 309, RULE_opt_instead = 310, 
		RULE_dropRuleStmt = 311, RULE_notifyStmt = 312, RULE_notify_payload = 313, 
		RULE_listenStmt = 314, RULE_unlistenStmt = 315, RULE_transactionStmt = 316, 
		RULE_opt_transaction = 317, RULE_transaction_mode_item = 318, RULE_transaction_mode_list = 319, 
		RULE_transaction_mode_list_or_empty = 320, RULE_viewStmt = 321, RULE_opt_check_option = 322, 
		RULE_loadStmt = 323, RULE_createdbStmt = 324, RULE_createdb_opt_list = 325, 
		RULE_createdb_opt_item = 326, RULE_opt_equal = 327, RULE_alterDatabaseStmt = 328, 
		RULE_alterDatabaseSetStmt = 329, RULE_alterdb_opt_list = 330, RULE_alterdb_opt_item = 331, 
		RULE_dropdbStmt = 332, RULE_createDomainStmt = 333, RULE_alterDomainStmt = 334, 
		RULE_opt_as = 335, RULE_alterTSDictionaryStmt = 336, RULE_alterTSConfigurationStmt = 337, 
		RULE_createConversionStmt = 338, RULE_clusterStmt = 339, RULE_cluster_index_specification = 340, 
		RULE_vacuumStmt = 341, RULE_vacuum_option_list = 342, RULE_vacuum_option_elem = 343, 
		RULE_analyzeStmt = 344, RULE_analyze_keyword = 345, RULE_opt_verbose = 346, 
		RULE_opt_full = 347, RULE_opt_freeze = 348, RULE_opt_name_list = 349, 
		RULE_explainStmt = 350, RULE_explainableStmt = 351, RULE_explain_option_list = 352, 
		RULE_explain_option_elem = 353, RULE_explain_option_name = 354, RULE_explain_option_arg = 355, 
		RULE_prepareStmt = 356, RULE_prep_type_clause = 357, RULE_preparableStmt = 358, 
		RULE_executeStmt = 359, RULE_execute_param_clause = 360, RULE_deallocateStmt = 361, 
		RULE_insertStmt = 362, RULE_insert_rest = 363, RULE_insert_column_list = 364, 
		RULE_insert_column_item = 365, RULE_returning_clause = 366, RULE_deleteStmt = 367, 
		RULE_using_clause = 368, RULE_lockStmt = 369, RULE_opt_lock = 370, RULE_lock_type = 371, 
		RULE_opt_nowait = 372, RULE_updateStmt = 373, RULE_set_clause_list = 374, 
		RULE_set_clause = 375, RULE_single_set_clause = 376, RULE_multiple_set_clause = 377, 
		RULE_set_target = 378, RULE_set_target_list = 379, RULE_declareCursorStmt = 380, 
		RULE_cursor_name = 381, RULE_cursor_options = 382, RULE_opt_hold = 383, 
		RULE_selectStmt = 384, RULE_select_with_parens = 385, RULE_select_no_parens = 386, 
		RULE_select_clause = 387, RULE_simple_select = 388, RULE_with_clause = 389, 
		RULE_cte_list = 390, RULE_common_table_expr = 391, RULE_opt_with_clause = 392, 
		RULE_into_clause = 393, RULE_into_clause_arguments = 394, RULE_into_clause_argument = 395, 
		RULE_optTempTableName = 396, RULE_opt_table = 397, RULE_opt_all = 398, 
		RULE_opt_distinct = 399, RULE_opt_sort_clause = 400, RULE_sort_clause = 401, 
		RULE_sortby_list = 402, RULE_sortby = 403, RULE_select_limit = 404, RULE_opt_select_limit = 405, 
		RULE_limit_clause = 406, RULE_offset_clause = 407, RULE_select_limit_value = 408, 
		RULE_select_offset_value = 409, RULE_opt_select_fetch_first_value = 410, 
		RULE_select_offset_value2 = 411, RULE_row_or_rows = 412, RULE_first_or_next = 413, 
		RULE_group_clause = 414, RULE_having_clause = 415, RULE_for_locking_clause = 416, 
		RULE_opt_for_locking_clause = 417, RULE_for_locking_items = 418, RULE_for_locking_item = 419, 
		RULE_locked_rels_list = 420, RULE_values_clause = 421, RULE_from_clause = 422, 
		RULE_from_list = 423, RULE_table_ref = 424, RULE_table_ref2 = 425, RULE_joined_table = 426, 
		RULE_alias_clause = 427, RULE_join_type = 428, RULE_join_outer = 429, 
		RULE_join_qual = 430, RULE_relation_expr = 431, RULE_relation_expr_list = 432, 
		RULE_relation_expr_opt_alias = 433, RULE_func_table = 434, RULE_where_clause = 435, 
		RULE_where_or_current_clause = 436, RULE_optTableFuncElementList = 437, 
		RULE_tableFuncElementList = 438, RULE_tableFuncElement = 439, RULE_typename = 440, 
		RULE_opt_array_bounds = 441, RULE_simpleTypename = 442, RULE_constTypename = 443, 
		RULE_genericType = 444, RULE_opt_type_modifiers = 445, RULE_numeric = 446, 
		RULE_opt_float = 447, RULE_bit = 448, RULE_constBit = 449, RULE_bitWithLength = 450, 
		RULE_bitWithoutLength = 451, RULE_character_ = 452, RULE_constCharacter = 453, 
		RULE_characterWithLength = 454, RULE_characterWithoutLength = 455, RULE_character = 456, 
		RULE_opt_varying = 457, RULE_opt_charset = 458, RULE_constDatetime = 459, 
		RULE_constInterval = 460, RULE_opt_timezone = 461, RULE_opt_interval = 462, 
		RULE_interval_second = 463, RULE_a_expr = 464, RULE_b_expr = 465, RULE_c_expr = 466, 
		RULE_func_expr = 467, RULE_xml_root_version = 468, RULE_opt_xml_root_standalone = 469, 
		RULE_xml_attributes = 470, RULE_xml_attribute_list = 471, RULE_xml_attribute_el = 472, 
		RULE_document_or_content = 473, RULE_xml_whitespace_option = 474, RULE_xmlexists_argument = 475, 
		RULE_window_clause = 476, RULE_window_definition_list = 477, RULE_window_definition = 478, 
		RULE_over_clause = 479, RULE_window_specification = 480, RULE_opt_existing_window_name = 481, 
		RULE_opt_partition_clause = 482, RULE_opt_frame_clause = 483, RULE_frame_extent = 484, 
		RULE_frame_bound = 485, RULE_row = 486, RULE_sub_type = 487, RULE_all_Op = 488, 
		RULE_mathOp = 489, RULE_qual_Op = 490, RULE_qual_all_Op = 491, RULE_subquery_Op = 492, 
		RULE_expr_list = 493, RULE_func_arg_list = 494, RULE_func_arg_expr = 495, 
		RULE_type_list = 496, RULE_array_expr = 497, RULE_array_expr_list = 498, 
		RULE_extract_list = 499, RULE_extract_arg = 500, RULE_overlay_list = 501, 
		RULE_overlay_placing = 502, RULE_position_list = 503, RULE_substr_list = 504, 
		RULE_substr_from = 505, RULE_substr_for = 506, RULE_trim_list = 507, RULE_in_expr = 508, 
		RULE_case_expr = 509, RULE_when_clause_list = 510, RULE_when_clause = 511, 
		RULE_case_default = 512, RULE_case_arg = 513, RULE_columnref = 514, RULE_indirection_el = 515, 
		RULE_indirection = 516, RULE_opt_indirection = 517, RULE_opt_asymmetric = 518, 
		RULE_ctext_expr = 519, RULE_ctext_expr_list = 520, RULE_ctext_row = 521, 
		RULE_target_list = 522, RULE_target_el = 523, RULE_qualified_name_list = 524, 
		RULE_qualified_name = 525, RULE_name_list = 526, RULE_name = 527, RULE_database_name = 528, 
		RULE_access_method = 529, RULE_attr_name = 530, RULE_index_name = 531, 
		RULE_file_name = 532, RULE_func_name = 533, RULE_aexprConst = 534, RULE_iconst = 535, 
		RULE_sconst = 536, RULE_roleId = 537, RULE_signedIconst = 538, RULE_colId = 539, 
		RULE_type_function_name = 540, RULE_colLabel = 541, RULE_unreserved_keyword = 542, 
		RULE_col_name_keyword = 543, RULE_type_func_name_keyword = 544, RULE_reserved_keyword = 545;
	public static final String[] ruleNames = {
		"stmtblock", "stmtmulti", "stmt", "createRoleStmt", "opt_with", "optRoleList", 
		"alterOptRoleList", "alterOptRoleElem", "createOptRoleElem", "createUserStmt", 
		"alterRoleStmt", "opt_in_database", "alterRoleSetStmt", "alterUserStmt", 
		"alterUserSetStmt", "dropRoleStmt", "dropUserStmt", "createGroupStmt", 
		"alterGroupStmt", "add_drop", "dropGroupStmt", "createSchemaStmt", "optSchemaName", 
		"optSchemaEltList", "schema_stmt", "variableSetStmt", "set_rest", "set_rest_more", 
		"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
		"zone_value", "opt_encoding", "colId_or_Sconst", "variableResetStmt", 
		"setResetClause", "functionSetResetClause", "variableShowStmt", "constraintsSetStmt", 
		"constraints_set_list", "constraints_set_mode", "checkPointStmt", "discardStmt", 
		"alterTableStmt", "alter_table_cmds", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "reloptions", 
		"opt_reloptions", "reloption_list", "reloption_elem", "alterCompositeTypeStmt", 
		"alter_type_cmds", "alter_type_cmd", "closePortalStmt", "copyStmt", "copy_from", 
		"copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", 
		"opt_oids", "copy_delimiter", "opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", 
		"copy_generic_opt_arg", "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", 
		"createStmt", "optTemp", "optTableElementList", "optTypedTableElementList", 
		"tableElementList", "typedTableElementList", "tableElement", "typedTableElement", 
		"columnDef", "columnOptions", "colQualList", "colConstraint", "colConstraintElem", 
		"constraintAttr", "tableLikeClause", "tableLikeOptionList", "tableLikeOption", 
		"tableConstraint", "constraintElem", "opt_no_inherit", "opt_column_list", 
		"columnList", "columnElem", "key_match", "exclusionConstraintList", "exclusionConstraintElem", 
		"exclusionWhereClause", "key_actions", "key_update", "key_delete", "key_action", 
		"optInherit", "optWith", "onCommitOption", "optTableSpace", "optConsTableSpace", 
		"existingIndex", "createAsStmt", "create_as_target", "opt_with_data", 
		"createSeqStmt", "alterSeqStmt", "optSeqOptList", "seqOptList", "seqOptElem", 
		"opt_by", "numericOnly", "numericOnly_list", "createPLangStmt", "opt_trusted", 
		"handler_name", "opt_inline_handler", "validator_clause", "opt_validator", 
		"dropPLangStmt", "opt_procedural", "createTableSpaceStmt", "optTableSpaceOwner", 
		"dropTableSpaceStmt", "createExtensionStmt", "create_extension_opt_list", 
		"create_extension_opt_item", "alterExtensionStmt", "alter_extension_opt_list", 
		"alter_extension_opt_item", "alterExtensionContentsStmt", "createFdwStmt", 
		"fdw_option", "fdw_options", "opt_fdw_options", "dropFdwStmt", "alterFdwStmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createForeignServerStmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "dropForeignServerStmt", 
		"alterForeignServerStmt", "createForeignTableStmt", "optForeignTableElementList", 
		"foreignTableElementList", "foreignTableElement", "alterForeignTableStmt", 
		"createUserMappingStmt", "auth_ident", "dropUserMappingStmt", "alterUserMappingStmt", 
		"createTrigStmt", "triggerActionTime", "triggerEvents", "triggerOneEvent", 
		"triggerForSpec", "triggerForOptEach", "triggerForType", "triggerWhen", 
		"triggerFuncArgs", "triggerFuncArg", "optConstrFromTable", "constraintAttributeSpec", 
		"constraintAttributeElem", "dropTrigStmt", "createAssertStmt", "dropAssertStmt", 
		"defineStmt", "definition", "def_list", "def_elem", "def_arg", "aggr_args", 
		"old_aggr_definition", "old_aggr_list", "old_aggr_elem", "opt_enum_val_list", 
		"enum_val_list", "alterEnumStmt", "createOpClassStmt", "opclass_item_list", 
		"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
		"createOpFamilyStmt", "alterOpFamilyStmt", "opclass_drop_list", "opclass_drop", 
		"dropOpClassStmt", "dropOpFamilyStmt", "dropOwnedStmt", "reassignOwnedStmt", 
		"dropStmt", "drop_type", "any_name_list", "any_name", "attrs", "truncateStmt", 
		"opt_restart_seqs", "commentStmt", "comment_type", "comment_text", "secLabelStmt", 
		"opt_provider", "security_label_type", "security_label", "fetchStmt", 
		"fetch_args", "from_in", "opt_from_in", "grantStmt", "revokeStmt", "privileges", 
		"privilege_list", "privilege", "privilege_target", "grantee_list", "grantee", 
		"opt_grant_grant_option", "function_with_argtypes_list", "function_with_argtypes", 
		"grantRoleStmt", "revokeRoleStmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterDefaultPrivilegesStmt", "defACLOptionList", "defACLOption", "defACLAction", 
		"defacl_privilege_target", "indexStmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem", 
		"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createFunctionStmt", 
		"opt_or_replace", "func_args", "func_args_list", "func_args_with_defaults", 
		"func_args_with_defaults_list", "func_arg", "arg_class", "param_name", 
		"func_return", "func_type", "func_arg_with_default", "createfunc_opt_list", 
		"common_func_opt_item", "createfunc_opt_item", "func_as", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterFunctionStmt", "alterfunc_opt_list", 
		"opt_restrict", "removeFuncStmt", "removeAggrStmt", "removeOperStmt", 
		"oper_argtypes", "any_operator", "doStmt", "dostmt_opt_list", "dostmt_opt_item", 
		"createCastStmt", "cast_context", "dropCastStmt", "opt_if_exists", "reindexStmt", 
		"reindex_type", "opt_force", "renameStmt", "opt_column", "opt_set_data", 
		"alterObjectSchemaStmt", "alterOwnerStmt", "ruleStmt", "ruleActionList", 
		"ruleActionMulti", "ruleActionStmt", "ruleActionStmtOrEmpty", "event", 
		"opt_instead", "dropRuleStmt", "notifyStmt", "notify_payload", "listenStmt", 
		"unlistenStmt", "transactionStmt", "opt_transaction", "transaction_mode_item", 
		"transaction_mode_list", "transaction_mode_list_or_empty", "viewStmt", 
		"opt_check_option", "loadStmt", "createdbStmt", "createdb_opt_list", "createdb_opt_item", 
		"opt_equal", "alterDatabaseStmt", "alterDatabaseSetStmt", "alterdb_opt_list", 
		"alterdb_opt_item", "dropdbStmt", "createDomainStmt", "alterDomainStmt", 
		"opt_as", "alterTSDictionaryStmt", "alterTSConfigurationStmt", "createConversionStmt", 
		"clusterStmt", "cluster_index_specification", "vacuumStmt", "vacuum_option_list", 
		"vacuum_option_elem", "analyzeStmt", "analyze_keyword", "opt_verbose", 
		"opt_full", "opt_freeze", "opt_name_list", "explainStmt", "explainableStmt", 
		"explain_option_list", "explain_option_elem", "explain_option_name", "explain_option_arg", 
		"prepareStmt", "prep_type_clause", "preparableStmt", "executeStmt", "execute_param_clause", 
		"deallocateStmt", "insertStmt", "insert_rest", "insert_column_list", "insert_column_item", 
		"returning_clause", "deleteStmt", "using_clause", "lockStmt", "opt_lock", 
		"lock_type", "opt_nowait", "updateStmt", "set_clause_list", "set_clause", 
		"single_set_clause", "multiple_set_clause", "set_target", "set_target_list", 
		"declareCursorStmt", "cursor_name", "cursor_options", "opt_hold", "selectStmt", 
		"select_with_parens", "select_no_parens", "select_clause", "simple_select", 
		"with_clause", "cte_list", "common_table_expr", "opt_with_clause", "into_clause", 
		"into_clause_arguments", "into_clause_argument", "optTempTableName", "opt_table", 
		"opt_all", "opt_distinct", "opt_sort_clause", "sort_clause", "sortby_list", 
		"sortby", "select_limit", "opt_select_limit", "limit_clause", "offset_clause", 
		"select_limit_value", "select_offset_value", "opt_select_fetch_first_value", 
		"select_offset_value2", "row_or_rows", "first_or_next", "group_clause", 
		"having_clause", "for_locking_clause", "opt_for_locking_clause", "for_locking_items", 
		"for_locking_item", "locked_rels_list", "values_clause", "from_clause", 
		"from_list", "table_ref", "table_ref2", "joined_table", "alias_clause", 
		"join_type", "join_outer", "join_qual", "relation_expr", "relation_expr_list", 
		"relation_expr_opt_alias", "func_table", "where_clause", "where_or_current_clause", 
		"optTableFuncElementList", "tableFuncElementList", "tableFuncElement", 
		"typename", "opt_array_bounds", "simpleTypename", "constTypename", "genericType", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constBit", "bitWithLength", 
		"bitWithoutLength", "character_", "constCharacter", "characterWithLength", 
		"characterWithoutLength", "character", "opt_varying", "opt_charset", "constDatetime", 
		"constInterval", "opt_timezone", "opt_interval", "interval_second", "a_expr", 
		"b_expr", "c_expr", "func_expr", "xml_root_version", "opt_xml_root_standalone", 
		"xml_attributes", "xml_attribute_list", "xml_attribute_el", "document_or_content", 
		"xml_whitespace_option", "xmlexists_argument", "window_clause", "window_definition_list", 
		"window_definition", "over_clause", "window_specification", "opt_existing_window_name", 
		"opt_partition_clause", "opt_frame_clause", "frame_extent", "frame_bound", 
		"row", "sub_type", "all_Op", "mathOp", "qual_Op", "qual_all_Op", "subquery_Op", 
		"expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
		"array_expr_list", "extract_list", "extract_arg", "overlay_list", "overlay_placing", 
		"position_list", "substr_list", "substr_from", "substr_for", "trim_list", 
		"in_expr", "case_expr", "when_clause_list", "when_clause", "case_default", 
		"case_arg", "columnref", "indirection_el", "indirection", "opt_indirection", 
		"opt_asymmetric", "ctext_expr", "ctext_expr_list", "ctext_row", "target_list", 
		"target_el", "qualified_name_list", "qualified_name", "name_list", "name", 
		"database_name", "access_method", "attr_name", "index_name", "file_name", 
		"func_name", "aexprConst", "iconst", "sconst", "roleId", "signedIconst", 
		"colId", "type_function_name", "colLabel", "unreserved_keyword", "col_name_keyword", 
		"type_func_name_keyword", "reserved_keyword"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "';'", "'='", "'.'", "','", "'('", "')'", "'*'", "'-'", "'%'", "'['", 
		"']'", "'^'", "'/'", "'+'", "'<'", "'>'", "'||'", "':'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'<<'", "'>>'", "'::'", "'..'", "':='"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NULLS_FIRST", "NULLS_LAST", 
		"WITH_TIME", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", 
		"AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", 
		"AND", "ANY", "ARRAY", "AS", "ASC", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", 
		"AT", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", 
		"BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALLED", 
		"CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", 
		"CHARACTER", "CHARACTERISTICS", "CHECK", "CHECKPOINT", "CLASS", "CLOSE", 
		"CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COMMENT", "COMMENTS", 
		"COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION", "CONNECTION", 
		"CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", 
		"COPY", "COST", "CREATE", "CROSS", "CSV", "CURRENT_P", "CURRENT_CATALOG", 
		"CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", 
		"DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", 
		"DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DESC", "DICTIONARY", 
		"DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", 
		"DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", 
		"ENUM_P", "ESCAPE", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
		"EXISTS", "EXPLAIN", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", 
		"FETCH", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", 
		"FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", 
		"GRANT", "GRANTED", "GREATEST", "GROUP_P", "HANDLER", "HAVING", "HEADER_P", 
		"HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", 
		"IMPLICIT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
		"INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", 
		"INSERT", "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", 
		"INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", 
		"LARGE_P", "LAST_P", "LC_COLLATE_P", "LC_CTYPE_P", "LEADING", "LEAKPROOF", 
		"LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", 
		"LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "MAPPING", "MATCH", 
		"MAXVALUE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", 
		"NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT", "NO", "NONE", "NOT", 
		"NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", 
		"NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "ON", "ONLY", "OPERATOR", 
		"OPTION", "OPTIONS", "OR", "ORDER", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", 
		"OVERLAY", "OWNED", "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
		"PASSWORD", "PLACING", "PLANS", "POSITION", "PRECEDING", "PRECISION", 
		"PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
		"PROCEDURE", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", 
		"RECURSIVE", "REF", "REFERENCES", "REINDEX", "RELATIVE_P", "RELEASE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", 
		"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROW", 
		"ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND_P", 
		"SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SESSION_USER", "SET", "SETOF", "SHARE", "SHOW", "SIMILAR", 
		"SIMPLE", "SMALLINT", "SNAPSHOT", "SOME", "STABLE", "STANDALONE_P", "START", 
		"STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
		"SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESPACE", 
		"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME", "TIMESTAMP", 
		"TO", "TRAILING", "TRANSACTION", "TREAT", "TRIGGER", "TRIM", "TRUE_P", 
		"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
		"UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
		"UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", 
		"VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", 
		"VIEW", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
		"XMLSERIALIZE", "YEAR_P", "YES_P", "ZONE", "LESS_LESS", "GREATER_GREATER", 
		"TYPECAST", "DOT_DOT", "COLON_EQUALS", "SCONST", "BCONST", "XCONST", "IDENT", 
		"PARAM", "FCONST", "ICONST", "Op", "T_comment", "T_ccomment", "T_space", 
		"T_newline", "T_whitespace", "T_special_whitespace", "T_horiz_whitespace", 
		"T_whitespace_with_newline", "T_horiz_space", "PSQL_COMMAND", "K_MESSAGE", 
		"K_NEXT", "K_MESSAGE_TEXT", "K_STACKED", "K_DIAGNOSTICS", "K_PG_EXCEPTION_CONTEXT", 
		"K_LOOP", "K_USE_COLUMN", "K_DUMP", "K_SLICE", "K_EXECUTE", "K_COLLATE", 
		"K_RESULT_OID", "K_WHILE", "K_ERROR", "K_FORWARD", "K_FOREACH", "K_RETURNED_SQLSTATE", 
		"K_BACKWARD", "K_EXCEPTION", "K_HINT", "K_CURRENT", "K_RAISE", "K_OPEN", 
		"K_DETAIL", "K_RETURN", "K_CLOSE", "K_SCROLL", "K_MOVE", "K_USE_VARIABLE", 
		"K_ALIAS", "K_INFO", "K_NO", "K_RELATIVE", "K_LOG", "K_QUERY", "K_GET", 
		"K_CONTINUE", "K_FETCH", "K_ROW_COUNT", "K_DEBUG", "K_CONSTANT", "K_CURSOR", 
		"K_PG_EXCEPTION_DETAIL", "K_ELSIF", "K_PRIOR", "K_EXIT", "K_ABSOLUTE", 
		"K_FIRST", "K_LAST", "K_ROWTYPE", "K_VARIABLE_CONFLICT", "K_PG_EXCEPTION_HINT", 
		"K_OPTION", "K_NOTICE", "K_PERFORM", "K_WARNING", "K_REVERSE"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Sql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			stmtmulti(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		return stmtmulti(0);
	}

	private StmtmultiContext stmtmulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, _parentState);
		StmtmultiContext _prevctx = _localctx;
		int _startState = 2;
		enterRecursionRule(_localctx, 2, RULE_stmtmulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1095);
			stmt();
			}
			_ctx.stop = _input.LT(-1);
			setState(1102);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StmtmultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_stmtmulti);
					setState(1097);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1098);
					match(T__0);
					setState(1099);
					stmt();
					}
					} 
				}
				setState(1104);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public AlterDatabaseStmtContext alterDatabaseStmt() {
			return getRuleContext(AlterDatabaseStmtContext.class,0);
		}
		public AlterDatabaseSetStmtContext alterDatabaseSetStmt() {
			return getRuleContext(AlterDatabaseSetStmtContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() {
			return getRuleContext(AlterDefaultPrivilegesStmtContext.class,0);
		}
		public AlterDomainStmtContext alterDomainStmt() {
			return getRuleContext(AlterDomainStmtContext.class,0);
		}
		public AlterEnumStmtContext alterEnumStmt() {
			return getRuleContext(AlterEnumStmtContext.class,0);
		}
		public AlterExtensionStmtContext alterExtensionStmt() {
			return getRuleContext(AlterExtensionStmtContext.class,0);
		}
		public AlterExtensionContentsStmtContext alterExtensionContentsStmt() {
			return getRuleContext(AlterExtensionContentsStmtContext.class,0);
		}
		public AlterFdwStmtContext alterFdwStmt() {
			return getRuleContext(AlterFdwStmtContext.class,0);
		}
		public AlterForeignServerStmtContext alterForeignServerStmt() {
			return getRuleContext(AlterForeignServerStmtContext.class,0);
		}
		public AlterForeignTableStmtContext alterForeignTableStmt() {
			return getRuleContext(AlterForeignTableStmtContext.class,0);
		}
		public AlterFunctionStmtContext alterFunctionStmt() {
			return getRuleContext(AlterFunctionStmtContext.class,0);
		}
		public AlterGroupStmtContext alterGroupStmt() {
			return getRuleContext(AlterGroupStmtContext.class,0);
		}
		public AlterObjectSchemaStmtContext alterObjectSchemaStmt() {
			return getRuleContext(AlterObjectSchemaStmtContext.class,0);
		}
		public AlterOwnerStmtContext alterOwnerStmt() {
			return getRuleContext(AlterOwnerStmtContext.class,0);
		}
		public AlterSeqStmtContext alterSeqStmt() {
			return getRuleContext(AlterSeqStmtContext.class,0);
		}
		public AlterTableStmtContext alterTableStmt() {
			return getRuleContext(AlterTableStmtContext.class,0);
		}
		public AlterCompositeTypeStmtContext alterCompositeTypeStmt() {
			return getRuleContext(AlterCompositeTypeStmtContext.class,0);
		}
		public AlterRoleSetStmtContext alterRoleSetStmt() {
			return getRuleContext(AlterRoleSetStmtContext.class,0);
		}
		public AlterRoleStmtContext alterRoleStmt() {
			return getRuleContext(AlterRoleStmtContext.class,0);
		}
		public AlterTSConfigurationStmtContext alterTSConfigurationStmt() {
			return getRuleContext(AlterTSConfigurationStmtContext.class,0);
		}
		public AlterTSDictionaryStmtContext alterTSDictionaryStmt() {
			return getRuleContext(AlterTSDictionaryStmtContext.class,0);
		}
		public AlterUserMappingStmtContext alterUserMappingStmt() {
			return getRuleContext(AlterUserMappingStmtContext.class,0);
		}
		public AlterUserSetStmtContext alterUserSetStmt() {
			return getRuleContext(AlterUserSetStmtContext.class,0);
		}
		public AlterUserStmtContext alterUserStmt() {
			return getRuleContext(AlterUserStmtContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public CheckPointStmtContext checkPointStmt() {
			return getRuleContext(CheckPointStmtContext.class,0);
		}
		public ClosePortalStmtContext closePortalStmt() {
			return getRuleContext(ClosePortalStmtContext.class,0);
		}
		public ClusterStmtContext clusterStmt() {
			return getRuleContext(ClusterStmtContext.class,0);
		}
		public CommentStmtContext commentStmt() {
			return getRuleContext(CommentStmtContext.class,0);
		}
		public ConstraintsSetStmtContext constraintsSetStmt() {
			return getRuleContext(ConstraintsSetStmtContext.class,0);
		}
		public CopyStmtContext copyStmt() {
			return getRuleContext(CopyStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public CreateAssertStmtContext createAssertStmt() {
			return getRuleContext(CreateAssertStmtContext.class,0);
		}
		public CreateCastStmtContext createCastStmt() {
			return getRuleContext(CreateCastStmtContext.class,0);
		}
		public CreateConversionStmtContext createConversionStmt() {
			return getRuleContext(CreateConversionStmtContext.class,0);
		}
		public CreateDomainStmtContext createDomainStmt() {
			return getRuleContext(CreateDomainStmtContext.class,0);
		}
		public CreateExtensionStmtContext createExtensionStmt() {
			return getRuleContext(CreateExtensionStmtContext.class,0);
		}
		public CreateFdwStmtContext createFdwStmt() {
			return getRuleContext(CreateFdwStmtContext.class,0);
		}
		public CreateForeignServerStmtContext createForeignServerStmt() {
			return getRuleContext(CreateForeignServerStmtContext.class,0);
		}
		public CreateForeignTableStmtContext createForeignTableStmt() {
			return getRuleContext(CreateForeignTableStmtContext.class,0);
		}
		public CreateFunctionStmtContext createFunctionStmt() {
			return getRuleContext(CreateFunctionStmtContext.class,0);
		}
		public CreateGroupStmtContext createGroupStmt() {
			return getRuleContext(CreateGroupStmtContext.class,0);
		}
		public CreateOpClassStmtContext createOpClassStmt() {
			return getRuleContext(CreateOpClassStmtContext.class,0);
		}
		public CreateOpFamilyStmtContext createOpFamilyStmt() {
			return getRuleContext(CreateOpFamilyStmtContext.class,0);
		}
		public AlterOpFamilyStmtContext alterOpFamilyStmt() {
			return getRuleContext(AlterOpFamilyStmtContext.class,0);
		}
		public CreatePLangStmtContext createPLangStmt() {
			return getRuleContext(CreatePLangStmtContext.class,0);
		}
		public CreateSchemaStmtContext createSchemaStmt() {
			return getRuleContext(CreateSchemaStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public CreateTableSpaceStmtContext createTableSpaceStmt() {
			return getRuleContext(CreateTableSpaceStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public CreateRoleStmtContext createRoleStmt() {
			return getRuleContext(CreateRoleStmtContext.class,0);
		}
		public CreateUserStmtContext createUserStmt() {
			return getRuleContext(CreateUserStmtContext.class,0);
		}
		public CreateUserMappingStmtContext createUserMappingStmt() {
			return getRuleContext(CreateUserMappingStmtContext.class,0);
		}
		public CreatedbStmtContext createdbStmt() {
			return getRuleContext(CreatedbStmtContext.class,0);
		}
		public DeallocateStmtContext deallocateStmt() {
			return getRuleContext(DeallocateStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public DefineStmtContext defineStmt() {
			return getRuleContext(DefineStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public DiscardStmtContext discardStmt() {
			return getRuleContext(DiscardStmtContext.class,0);
		}
		public DoStmtContext doStmt() {
			return getRuleContext(DoStmtContext.class,0);
		}
		public DropAssertStmtContext dropAssertStmt() {
			return getRuleContext(DropAssertStmtContext.class,0);
		}
		public DropCastStmtContext dropCastStmt() {
			return getRuleContext(DropCastStmtContext.class,0);
		}
		public DropFdwStmtContext dropFdwStmt() {
			return getRuleContext(DropFdwStmtContext.class,0);
		}
		public DropForeignServerStmtContext dropForeignServerStmt() {
			return getRuleContext(DropForeignServerStmtContext.class,0);
		}
		public DropGroupStmtContext dropGroupStmt() {
			return getRuleContext(DropGroupStmtContext.class,0);
		}
		public DropOpClassStmtContext dropOpClassStmt() {
			return getRuleContext(DropOpClassStmtContext.class,0);
		}
		public DropOpFamilyStmtContext dropOpFamilyStmt() {
			return getRuleContext(DropOpFamilyStmtContext.class,0);
		}
		public DropOwnedStmtContext dropOwnedStmt() {
			return getRuleContext(DropOwnedStmtContext.class,0);
		}
		public DropPLangStmtContext dropPLangStmt() {
			return getRuleContext(DropPLangStmtContext.class,0);
		}
		public DropRuleStmtContext dropRuleStmt() {
			return getRuleContext(DropRuleStmtContext.class,0);
		}
		public DropStmtContext dropStmt() {
			return getRuleContext(DropStmtContext.class,0);
		}
		public DropTableSpaceStmtContext dropTableSpaceStmt() {
			return getRuleContext(DropTableSpaceStmtContext.class,0);
		}
		public DropTrigStmtContext dropTrigStmt() {
			return getRuleContext(DropTrigStmtContext.class,0);
		}
		public DropRoleStmtContext dropRoleStmt() {
			return getRuleContext(DropRoleStmtContext.class,0);
		}
		public DropUserStmtContext dropUserStmt() {
			return getRuleContext(DropUserStmtContext.class,0);
		}
		public DropUserMappingStmtContext dropUserMappingStmt() {
			return getRuleContext(DropUserMappingStmtContext.class,0);
		}
		public DropdbStmtContext dropdbStmt() {
			return getRuleContext(DropdbStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainStmtContext explainStmt() {
			return getRuleContext(ExplainStmtContext.class,0);
		}
		public FetchStmtContext fetchStmt() {
			return getRuleContext(FetchStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public GrantRoleStmtContext grantRoleStmt() {
			return getRuleContext(GrantRoleStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public ListenStmtContext listenStmt() {
			return getRuleContext(ListenStmtContext.class,0);
		}
		public LoadStmtContext loadStmt() {
			return getRuleContext(LoadStmtContext.class,0);
		}
		public LockStmtContext lockStmt() {
			return getRuleContext(LockStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public PrepareStmtContext prepareStmt() {
			return getRuleContext(PrepareStmtContext.class,0);
		}
		public ReassignOwnedStmtContext reassignOwnedStmt() {
			return getRuleContext(ReassignOwnedStmtContext.class,0);
		}
		public ReindexStmtContext reindexStmt() {
			return getRuleContext(ReindexStmtContext.class,0);
		}
		public RemoveAggrStmtContext removeAggrStmt() {
			return getRuleContext(RemoveAggrStmtContext.class,0);
		}
		public RemoveFuncStmtContext removeFuncStmt() {
			return getRuleContext(RemoveFuncStmtContext.class,0);
		}
		public RemoveOperStmtContext removeOperStmt() {
			return getRuleContext(RemoveOperStmtContext.class,0);
		}
		public RenameStmtContext renameStmt() {
			return getRuleContext(RenameStmtContext.class,0);
		}
		public RevokeStmtContext revokeStmt() {
			return getRuleContext(RevokeStmtContext.class,0);
		}
		public RevokeRoleStmtContext revokeRoleStmt() {
			return getRuleContext(RevokeRoleStmtContext.class,0);
		}
		public RuleStmtContext ruleStmt() {
			return getRuleContext(RuleStmtContext.class,0);
		}
		public SecLabelStmtContext secLabelStmt() {
			return getRuleContext(SecLabelStmtContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TransactionStmtContext transactionStmt() {
			return getRuleContext(TransactionStmtContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public UnlistenStmtContext unlistenStmt() {
			return getRuleContext(UnlistenStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public VacuumStmtContext vacuumStmt() {
			return getRuleContext(VacuumStmtContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public VariableSetStmtContext variableSetStmt() {
			return getRuleContext(VariableSetStmtContext.class,0);
		}
		public VariableShowStmtContext variableShowStmt() {
			return getRuleContext(VariableShowStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmt);
		try {
			setState(1216);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1105);
				alterDatabaseStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1106);
				alterDatabaseSetStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1107);
				alterDefaultPrivilegesStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1108);
				alterDomainStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1109);
				alterEnumStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1110);
				alterExtensionStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1111);
				alterExtensionContentsStmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1112);
				alterFdwStmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1113);
				alterForeignServerStmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1114);
				alterForeignTableStmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1115);
				alterFunctionStmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1116);
				alterGroupStmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1117);
				alterObjectSchemaStmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1118);
				alterOwnerStmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1119);
				alterSeqStmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1120);
				alterTableStmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1121);
				alterCompositeTypeStmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1122);
				alterRoleSetStmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1123);
				alterRoleStmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1124);
				alterTSConfigurationStmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1125);
				alterTSDictionaryStmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1126);
				alterUserMappingStmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1127);
				alterUserSetStmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1128);
				alterUserStmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1129);
				analyzeStmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1130);
				checkPointStmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1131);
				closePortalStmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1132);
				clusterStmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1133);
				commentStmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1134);
				constraintsSetStmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1135);
				copyStmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1136);
				createAsStmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1137);
				createAssertStmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1138);
				createCastStmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1139);
				createConversionStmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1140);
				createDomainStmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1141);
				createExtensionStmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1142);
				createFdwStmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1143);
				createForeignServerStmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1144);
				createForeignTableStmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1145);
				createFunctionStmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1146);
				createGroupStmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1147);
				createOpClassStmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1148);
				createOpFamilyStmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1149);
				alterOpFamilyStmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1150);
				createPLangStmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1151);
				createSchemaStmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1152);
				createSeqStmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1153);
				createStmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1154);
				createTableSpaceStmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1155);
				createTrigStmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1156);
				createRoleStmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1157);
				createUserStmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1158);
				createUserMappingStmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1159);
				createdbStmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1160);
				deallocateStmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1161);
				declareCursorStmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1162);
				defineStmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1163);
				deleteStmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1164);
				discardStmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1165);
				doStmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1166);
				dropAssertStmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1167);
				dropCastStmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1168);
				dropFdwStmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1169);
				dropForeignServerStmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1170);
				dropGroupStmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1171);
				dropOpClassStmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1172);
				dropOpFamilyStmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1173);
				dropOwnedStmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1174);
				dropPLangStmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1175);
				dropRuleStmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1176);
				dropStmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1177);
				dropTableSpaceStmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1178);
				dropTrigStmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1179);
				dropRoleStmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1180);
				dropUserStmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1181);
				dropUserMappingStmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1182);
				dropdbStmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1183);
				executeStmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1184);
				explainStmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1185);
				fetchStmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1186);
				grantStmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1187);
				grantRoleStmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1188);
				indexStmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1189);
				insertStmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1190);
				listenStmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1191);
				loadStmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1192);
				lockStmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1193);
				notifyStmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1194);
				prepareStmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1195);
				reassignOwnedStmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1196);
				reindexStmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1197);
				removeAggrStmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1198);
				removeFuncStmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1199);
				removeOperStmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1200);
				renameStmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1201);
				revokeStmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1202);
				revokeRoleStmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1203);
				ruleStmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1204);
				secLabelStmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1205);
				selectStmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1206);
				transactionStmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1207);
				truncateStmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1208);
				unlistenStmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1209);
				updateStmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1210);
				vacuumStmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1211);
				variableResetStmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1212);
				variableSetStmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1213);
				variableShowStmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1214);
				viewStmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStmtContext createRoleStmt() throws RecognitionException {
		CreateRoleStmtContext _localctx = new CreateRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_createRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1218);
			match(CREATE);
			setState(1219);
			match(ROLE);
			setState(1220);
			roleId();
			setState(1221);
			opt_with();
			setState(1222);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_opt_with);
		try {
			setState(1226);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1224);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptRoleListContext extends ParserRuleContext {
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateOptRoleElemContext createOptRoleElem() {
			return getRuleContext(CreateOptRoleElemContext.class,0);
		}
		public OptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optRoleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptRoleListContext optRoleList() throws RecognitionException {
		return optRoleList(0);
	}

	private OptRoleListContext optRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptRoleListContext _localctx = new OptRoleListContext(_ctx, _parentState);
		OptRoleListContext _prevctx = _localctx;
		int _startState = 10;
		enterRecursionRule(_localctx, 10, RULE_optRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1233);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optRoleList);
					setState(1229);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1230);
					createOptRoleElem();
					}
					} 
				}
				setState(1235);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleListContext extends ParserRuleContext {
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public AlterOptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleListContext alterOptRoleList() throws RecognitionException {
		return alterOptRoleList(0);
	}

	private AlterOptRoleListContext alterOptRoleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AlterOptRoleListContext _localctx = new AlterOptRoleListContext(_ctx, _parentState);
		AlterOptRoleListContext _prevctx = _localctx;
		int _startState = 12;
		enterRecursionRule(_localctx, 12, RULE_alterOptRoleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1241);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AlterOptRoleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterOptRoleList);
					setState(1237);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1238);
					alterOptRoleElem();
					}
					} 
				}
				setState(1243);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterOptRoleElemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SqlParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode ENCRYPTED() { return getToken(SqlParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(SqlParser.UNENCRYPTED, 0); }
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(SqlParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public AlterOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOptRoleElemContext alterOptRoleElem() throws RecognitionException {
		AlterOptRoleElemContext _localctx = new AlterOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterOptRoleElem);
		try {
			setState(1264);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1244);
				match(PASSWORD);
				setState(1245);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1246);
				match(ENCRYPTED);
				setState(1247);
				match(PASSWORD);
				setState(1248);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1249);
				match(UNENCRYPTED);
				setState(1250);
				match(PASSWORD);
				setState(1251);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1252);
				match(CONNECTION);
				setState(1253);
				match(LIMIT);
				setState(1254);
				signedIconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1255);
				match(VALID);
				setState(1256);
				match(UNTIL);
				setState(1257);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1258);
				match(USER);
				setState(1259);
				name_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1260);
				match(PASSWORD);
				setState(1261);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1262);
				match(INHERIT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1263);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOptRoleElemContext extends ParserRuleContext {
		public AlterOptRoleElemContext alterOptRoleElem() {
			return getRuleContext(AlterOptRoleElemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(SqlParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public CreateOptRoleElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOptRoleElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOptRoleElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOptRoleElemContext createOptRoleElem() throws RecognitionException {
		CreateOptRoleElemContext _localctx = new CreateOptRoleElemContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_createOptRoleElem);
		try {
			setState(1279);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1266);
				alterOptRoleElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1267);
				match(SYSID);
				setState(1268);
				iconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1269);
				match(ADMIN);
				setState(1270);
				name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1271);
				match(ROLE);
				setState(1272);
				name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1273);
				match(IN_P);
				setState(1274);
				match(ROLE);
				setState(1275);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1276);
				match(IN_P);
				setState(1277);
				match(GROUP_P);
				setState(1278);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStmtContext createUserStmt() throws RecognitionException {
		CreateUserStmtContext _localctx = new CreateUserStmtContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_createUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1281);
			match(CREATE);
			setState(1282);
			match(USER);
			setState(1283);
			roleId();
			setState(1284);
			opt_with();
			setState(1285);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleStmtContext alterRoleStmt() throws RecognitionException {
		AlterRoleStmtContext _localctx = new AlterRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(ALTER);
			setState(1288);
			match(ROLE);
			setState(1289);
			roleId();
			setState(1290);
			opt_with();
			setState(1291);
			alterOptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_opt_in_database);
		try {
			setState(1297);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(1293);
				match(IN_P);
				setState(1294);
				match(DATABASE);
				setState(1295);
				database_name();
				}
				break;
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoleSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterRoleSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoleSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterRoleSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoleSetStmtContext alterRoleSetStmt() throws RecognitionException {
		AlterRoleSetStmtContext _localctx = new AlterRoleSetStmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterRoleSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299);
			match(ALTER);
			setState(1300);
			match(ROLE);
			setState(1301);
			roleId();
			setState(1302);
			opt_in_database();
			setState(1303);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlterOptRoleListContext alterOptRoleList() {
			return getRuleContext(AlterOptRoleListContext.class,0);
		}
		public AlterUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStmtContext alterUserStmt() throws RecognitionException {
		AlterUserStmtContext _localctx = new AlterUserStmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alterUserStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1305);
			match(ALTER);
			setState(1306);
			match(USER);
			setState(1307);
			roleId();
			setState(1308);
			opt_with();
			setState(1309);
			alterOptRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterUserSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserSetStmtContext alterUserSetStmt() throws RecognitionException {
		AlterUserSetStmtContext _localctx = new AlterUserSetStmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterUserSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			match(ALTER);
			setState(1312);
			match(USER);
			setState(1313);
			roleId();
			setState(1314);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleStmtContext dropRoleStmt() throws RecognitionException {
		DropRoleStmtContext _localctx = new DropRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_dropRoleStmt);
		try {
			setState(1324);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1316);
				match(DROP);
				setState(1317);
				match(ROLE);
				setState(1318);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1319);
				match(DROP);
				setState(1320);
				match(ROLE);
				setState(1321);
				match(IF_P);
				setState(1322);
				match(EXISTS);
				setState(1323);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropUserStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropUserStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStmtContext dropUserStmt() throws RecognitionException {
		DropUserStmtContext _localctx = new DropUserStmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_dropUserStmt);
		try {
			setState(1334);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1326);
				match(DROP);
				setState(1327);
				match(USER);
				setState(1328);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1329);
				match(DROP);
				setState(1330);
				match(USER);
				setState(1331);
				match(IF_P);
				setState(1332);
				match(EXISTS);
				setState(1333);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptRoleListContext optRoleList() {
			return getRuleContext(OptRoleListContext.class,0);
		}
		public CreateGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupStmtContext createGroupStmt() throws RecognitionException {
		CreateGroupStmtContext _localctx = new CreateGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(CREATE);
			setState(1337);
			match(GROUP_P);
			setState(1338);
			roleId();
			setState(1339);
			opt_with();
			setState(1340);
			optRoleList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public AlterGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupStmtContext alterGroupStmt() throws RecognitionException {
		AlterGroupStmtContext _localctx = new AlterGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterGroupStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(ALTER);
			setState(1343);
			match(GROUP_P);
			setState(1344);
			roleId();
			setState(1345);
			add_drop();
			setState(1346);
			match(USER);
			setState(1347);
			name_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1349);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropGroupStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropGroupStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGroupStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropGroupStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropGroupStmtContext dropGroupStmt() throws RecognitionException {
		DropGroupStmtContext _localctx = new DropGroupStmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_dropGroupStmt);
		try {
			setState(1359);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1351);
				match(DROP);
				setState(1352);
				match(GROUP_P);
				setState(1353);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1354);
				match(DROP);
				setState(1355);
				match(GROUP_P);
				setState(1356);
				match(IF_P);
				setState(1357);
				match(EXISTS);
				setState(1358);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public OptSchemaNameContext optSchemaName() {
			return getRuleContext(OptSchemaNameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CreateSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStmtContext createSchemaStmt() throws RecognitionException {
		CreateSchemaStmtContext _localctx = new CreateSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createSchemaStmt);
		try {
			setState(1373);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1361);
				match(CREATE);
				setState(1362);
				match(SCHEMA);
				setState(1363);
				optSchemaName();
				setState(1364);
				match(AUTHORIZATION);
				setState(1365);
				roleId();
				setState(1366);
				optSchemaEltList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1368);
				match(CREATE);
				setState(1369);
				match(SCHEMA);
				setState(1370);
				colId();
				setState(1371);
				optSchemaEltList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptSchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaNameContext optSchemaName() throws RecognitionException {
		OptSchemaNameContext _localctx = new OptSchemaNameContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_optSchemaName);
		try {
			setState(1377);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1375);
				colId();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSchemaEltListContext extends ParserRuleContext {
		public OptSchemaEltListContext optSchemaEltList() {
			return getRuleContext(OptSchemaEltListContext.class,0);
		}
		public Schema_stmtContext schema_stmt() {
			return getRuleContext(Schema_stmtContext.class,0);
		}
		public OptSchemaEltListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSchemaEltList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptSchemaEltList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSchemaEltListContext optSchemaEltList() throws RecognitionException {
		return optSchemaEltList(0);
	}

	private OptSchemaEltListContext optSchemaEltList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptSchemaEltListContext _localctx = new OptSchemaEltListContext(_ctx, _parentState);
		OptSchemaEltListContext _prevctx = _localctx;
		int _startState = 46;
		enterRecursionRule(_localctx, 46, RULE_optSchemaEltList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1384);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptSchemaEltListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optSchemaEltList);
					setState(1380);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1381);
					schema_stmt();
					}
					} 
				}
				setState(1386);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public CreateStmtContext createStmt() {
			return getRuleContext(CreateStmtContext.class,0);
		}
		public IndexStmtContext indexStmt() {
			return getRuleContext(IndexStmtContext.class,0);
		}
		public CreateSeqStmtContext createSeqStmt() {
			return getRuleContext(CreateSeqStmtContext.class,0);
		}
		public CreateTrigStmtContext createTrigStmt() {
			return getRuleContext(CreateTrigStmtContext.class,0);
		}
		public GrantStmtContext grantStmt() {
			return getRuleContext(GrantStmtContext.class,0);
		}
		public ViewStmtContext viewStmt() {
			return getRuleContext(ViewStmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_schema_stmt);
		try {
			setState(1393);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1387);
				createStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1388);
				indexStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1389);
				createSeqStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1390);
				createTrigStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1391);
				grantStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1392);
				viewStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public VariableSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableSetStmtContext variableSetStmt() throws RecognitionException {
		VariableSetStmtContext _localctx = new VariableSetStmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_variableSetStmt);
		try {
			setState(1403);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1395);
				match(SET);
				setState(1396);
				set_rest();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1397);
				match(SET);
				setState(1398);
				match(LOCAL);
				setState(1399);
				set_rest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1400);
				match(SET);
				setState(1401);
				match(SESSION);
				setState(1402);
				set_rest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SqlParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest);
		try {
			setState(1413);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1405);
				match(TRANSACTION);
				setState(1406);
				transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1407);
				match(SESSION);
				setState(1408);
				match(CHARACTERISTICS);
				setState(1409);
				match(AS);
				setState(1410);
				match(TRANSACTION);
				setState(1411);
				transaction_mode_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1412);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG_P() { return getToken(SqlParser.CATALOG_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(SqlParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(SqlParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SqlParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_set_rest_more);
		try {
			setState(1458);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1415);
				var_name(0);
				setState(1416);
				match(T__1);
				setState(1417);
				var_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1419);
				var_name(0);
				setState(1420);
				match(T__1);
				setState(1421);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1423);
				var_name(0);
				setState(1424);
				match(TO);
				setState(1425);
				var_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1427);
				var_name(0);
				setState(1428);
				match(TO);
				setState(1429);
				match(DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1431);
				var_name(0);
				setState(1432);
				match(FROM);
				setState(1433);
				match(CURRENT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1435);
				match(TIME);
				setState(1436);
				match(ZONE);
				setState(1437);
				zone_value();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1438);
				match(CATALOG_P);
				setState(1439);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1440);
				match(SCHEMA);
				setState(1441);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1442);
				match(NAMES);
				setState(1443);
				opt_encoding();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1444);
				match(ROLE);
				setState(1445);
				colId_or_Sconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1446);
				match(SESSION);
				setState(1447);
				match(AUTHORIZATION);
				setState(1448);
				colId_or_Sconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1449);
				match(XML_P);
				setState(1450);
				match(OPTION);
				setState(1451);
				document_or_content();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1452);
				match(TRANSACTION);
				setState(1453);
				match(SNAPSHOT);
				setState(1454);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1455);
				match(SESSION);
				setState(1456);
				match(AUTHORIZATION);
				setState(1457);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		return var_name(0);
	}

	private Var_nameContext var_name(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_nameContext _localctx = new Var_nameContext(_ctx, _parentState);
		Var_nameContext _prevctx = _localctx;
		int _startState = 56;
		enterRecursionRule(_localctx, 56, RULE_var_name, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1461);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(1468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_nameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_name);
					setState(1463);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1464);
					match(T__2);
					setState(1465);
					colId();
					}
					} 
				}
				setState(1470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public Var_valueContext var_value() {
			return getRuleContext(Var_valueContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		return var_list(0);
	}

	private Var_listContext var_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Var_listContext _localctx = new Var_listContext(_ctx, _parentState);
		Var_listContext _prevctx = _localctx;
		int _startState = 58;
		enterRecursionRule(_localctx, 58, RULE_var_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1472);
			var_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(1479);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Var_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_var_list);
					setState(1474);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1475);
					match(T__3);
					setState(1476);
					var_value();
					}
					} 
				}
				setState(1481);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_var_value);
		try {
			setState(1484);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1482);
				opt_boolean_or_string();
				}
				break;
			case T__7:
			case T__13:
			case FCONST:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1483);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(SqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SqlParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_iso_level);
		try {
			setState(1493);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1486);
				match(READ);
				setState(1487);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1488);
				match(READ);
				setState(1489);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1490);
				match(REPEATABLE);
				setState(1491);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1492);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_opt_boolean_or_string);
		try {
			setState(1499);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1495);
				colId_or_Sconst();
				}
				break;
			case TRUE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1496);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(1497);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 4);
				{
				setState(1498);
				match(ON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_zone_value);
		try {
			setState(1517);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1501);
				constInterval();
				setState(1502);
				match(T__4);
				setState(1503);
				iconst();
				setState(1504);
				match(T__5);
				setState(1505);
				sconst();
				setState(1506);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1508);
				constInterval();
				setState(1509);
				sconst();
				setState(1510);
				opt_interval();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1512);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1513);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1514);
				match(IDENT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1515);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1516);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_opt_encoding);
		try {
			setState(1522);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1519);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1520);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColId_or_SconstContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public ColId_or_SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId_or_Sconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColId_or_Sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColId_or_SconstContext colId_or_Sconst() throws RecognitionException {
		ColId_or_SconstContext _localctx = new ColId_or_SconstContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_colId_or_Sconst);
		try {
			setState(1526);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1524);
				colId();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1525);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_variableResetStmt);
		try {
			setState(1542);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1528);
				match(RESET);
				setState(1529);
				var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1530);
				match(RESET);
				setState(1531);
				match(TIME);
				setState(1532);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1533);
				match(RESET);
				setState(1534);
				match(TRANSACTION);
				setState(1535);
				match(ISOLATION);
				setState(1536);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1537);
				match(RESET);
				setState(1538);
				match(SESSION);
				setState(1539);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1540);
				match(RESET);
				setState(1541);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_setResetClause);
		try {
			setState(1547);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1544);
				match(SET);
				setState(1545);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1546);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_functionSetResetClause);
		try {
			setState(1552);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1549);
				match(SET);
				setState(1550);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableShowStmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SqlParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public VariableShowStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableShowStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVariableShowStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableShowStmtContext variableShowStmt() throws RecognitionException {
		VariableShowStmtContext _localctx = new VariableShowStmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_variableShowStmt);
		try {
			setState(1568);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1554);
				match(SHOW);
				setState(1555);
				var_name(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1556);
				match(SHOW);
				setState(1557);
				match(TIME);
				setState(1558);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1559);
				match(SHOW);
				setState(1560);
				match(TRANSACTION);
				setState(1561);
				match(ISOLATION);
				setState(1562);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1563);
				match(SHOW);
				setState(1564);
				match(SESSION);
				setState(1565);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1566);
				match(SHOW);
				setState(1567);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintsSetStmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintsSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintsSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintsSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintsSetStmtContext constraintsSetStmt() throws RecognitionException {
		ConstraintsSetStmtContext _localctx = new ConstraintsSetStmtContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_constraintsSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1570);
			match(SET);
			setState(1571);
			match(CONSTRAINTS);
			setState(1572);
			constraints_set_list();
			setState(1573);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_constraints_set_list);
		try {
			setState(1577);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1575);
				qualified_name_list(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1576);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckPointStmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(SqlParser.CHECKPOINT, 0); }
		public CheckPointStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkPointStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCheckPointStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckPointStmtContext checkPointStmt() throws RecognitionException {
		CheckPointStmtContext _localctx = new CheckPointStmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_checkPointStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1581);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardStmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(SqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(SqlParser.PLANS, 0); }
		public DiscardStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDiscardStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardStmtContext discardStmt() throws RecognitionException {
		DiscardStmtContext _localctx = new DiscardStmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_discardStmt);
		try {
			setState(1591);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1583);
				match(DISCARD);
				setState(1584);
				match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1585);
				match(DISCARD);
				setState(1586);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1587);
				match(DISCARD);
				setState(1588);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1589);
				match(DISCARD);
				setState(1590);
				match(PLANS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public AlterTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStmtContext alterTableStmt() throws RecognitionException {
		AlterTableStmtContext _localctx = new AlterTableStmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alterTableStmt);
		try {
			setState(1641);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1593);
				match(ALTER);
				setState(1594);
				match(TABLE);
				setState(1595);
				relation_expr();
				setState(1596);
				alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1598);
				match(ALTER);
				setState(1599);
				match(TABLE);
				setState(1600);
				match(IF_P);
				setState(1601);
				match(EXISTS);
				setState(1602);
				relation_expr();
				setState(1603);
				alter_table_cmds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1605);
				match(ALTER);
				setState(1606);
				match(INDEX);
				setState(1607);
				qualified_name();
				setState(1608);
				alter_table_cmds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1610);
				match(ALTER);
				setState(1611);
				match(INDEX);
				setState(1612);
				match(IF_P);
				setState(1613);
				match(EXISTS);
				setState(1614);
				qualified_name();
				setState(1615);
				alter_table_cmds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1617);
				match(ALTER);
				setState(1618);
				match(SEQUENCE);
				setState(1619);
				qualified_name();
				setState(1620);
				alter_table_cmds(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1622);
				match(ALTER);
				setState(1623);
				match(SEQUENCE);
				setState(1624);
				match(IF_P);
				setState(1625);
				match(EXISTS);
				setState(1626);
				qualified_name();
				setState(1627);
				alter_table_cmds(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1629);
				match(ALTER);
				setState(1630);
				match(VIEW);
				setState(1631);
				qualified_name();
				setState(1632);
				alter_table_cmds(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1634);
				match(ALTER);
				setState(1635);
				match(VIEW);
				setState(1636);
				match(IF_P);
				setState(1637);
				match(EXISTS);
				setState(1638);
				qualified_name();
				setState(1639);
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public Alter_table_cmdContext alter_table_cmd() {
			return getRuleContext(Alter_table_cmdContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		return alter_table_cmds(0);
	}

	private Alter_table_cmdsContext alter_table_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, _parentState);
		Alter_table_cmdsContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_alter_table_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1644);
			alter_table_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(1651);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_cmds);
					setState(1646);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1647);
					match(T__3);
					setState(1648);
					alter_table_cmd();
					}
					} 
				}
				setState(1653);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode ENABLE_P() { return getToken(SqlParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(SqlParser.REPLICA, 0); }
		public TerminalNode DISABLE_P() { return getToken(SqlParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_table_cmd);
		try {
			setState(1819);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1654);
				match(ALTER);
				setState(1655);
				opt_column();
				setState(1656);
				colId();
				setState(1657);
				opt_set_data();
				setState(1658);
				match(TYPE_P);
				setState(1659);
				typename();
				setState(1660);
				opt_collate_clause();
				setState(1661);
				alter_using();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1663);
				match(ALTER);
				setState(1664);
				opt_column();
				setState(1665);
				colId();
				setState(1666);
				alter_column_default();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1668);
				match(ALTER);
				setState(1669);
				opt_column();
				setState(1670);
				colId();
				setState(1671);
				match(SET);
				setState(1672);
				match(STATISTICS);
				setState(1673);
				signedIconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1675);
				match(ALTER);
				setState(1676);
				opt_column();
				setState(1677);
				colId();
				setState(1678);
				match(SET);
				setState(1679);
				reloptions();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1681);
				match(ALTER);
				setState(1682);
				opt_column();
				setState(1683);
				colId();
				setState(1684);
				match(RESET);
				setState(1685);
				reloptions();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1687);
				match(ALTER);
				setState(1688);
				opt_column();
				setState(1689);
				colId();
				setState(1690);
				match(SET);
				setState(1691);
				match(STORAGE);
				setState(1692);
				colId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1694);
				match(DROP);
				setState(1695);
				opt_column();
				setState(1696);
				match(IF_P);
				setState(1697);
				match(EXISTS);
				setState(1698);
				colId();
				setState(1699);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1701);
				match(DROP);
				setState(1702);
				opt_column();
				setState(1703);
				colId();
				setState(1704);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1706);
				match(ALTER);
				setState(1707);
				opt_column();
				setState(1708);
				colId();
				setState(1709);
				alter_generic_options();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1711);
				match(ALTER);
				setState(1712);
				opt_column();
				setState(1713);
				colId();
				setState(1714);
				match(DROP);
				setState(1715);
				match(NOT);
				setState(1716);
				match(NULL_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1718);
				match(ALTER);
				setState(1719);
				opt_column();
				setState(1720);
				colId();
				setState(1721);
				match(SET);
				setState(1722);
				match(NOT);
				setState(1723);
				match(NULL_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1725);
				match(DROP);
				setState(1726);
				match(CONSTRAINT);
				setState(1727);
				match(IF_P);
				setState(1728);
				match(EXISTS);
				setState(1729);
				name();
				setState(1730);
				opt_drop_behavior();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1732);
				match(DROP);
				setState(1733);
				match(CONSTRAINT);
				setState(1734);
				name();
				setState(1735);
				opt_drop_behavior();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1737);
				match(ADD_P);
				setState(1738);
				columnDef();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1739);
				match(ADD_P);
				setState(1740);
				match(COLUMN);
				setState(1741);
				columnDef();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1742);
				match(ADD_P);
				setState(1743);
				tableConstraint();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1744);
				match(VALIDATE);
				setState(1745);
				match(CONSTRAINT);
				setState(1746);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1747);
				match(CLUSTER);
				setState(1748);
				match(ON);
				setState(1749);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1750);
				match(ENABLE_P);
				setState(1751);
				match(TRIGGER);
				setState(1752);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1753);
				match(ENABLE_P);
				setState(1754);
				match(ALWAYS);
				setState(1755);
				match(TRIGGER);
				setState(1756);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1757);
				match(ENABLE_P);
				setState(1758);
				match(REPLICA);
				setState(1759);
				match(TRIGGER);
				setState(1760);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1761);
				match(DISABLE_P);
				setState(1762);
				match(TRIGGER);
				setState(1763);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1764);
				match(ENABLE_P);
				setState(1765);
				match(RULE);
				setState(1766);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1767);
				match(ENABLE_P);
				setState(1768);
				match(ALWAYS);
				setState(1769);
				match(RULE);
				setState(1770);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1771);
				match(ENABLE_P);
				setState(1772);
				match(REPLICA);
				setState(1773);
				match(RULE);
				setState(1774);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1775);
				match(DISABLE_P);
				setState(1776);
				match(RULE);
				setState(1777);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1778);
				match(INHERIT);
				setState(1779);
				qualified_name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1780);
				match(NO);
				setState(1781);
				match(INHERIT);
				setState(1782);
				qualified_name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1783);
				match(OF);
				setState(1784);
				any_name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1785);
				match(OWNER);
				setState(1786);
				match(TO);
				setState(1787);
				roleId();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1788);
				match(SET);
				setState(1789);
				match(TABLESPACE);
				setState(1790);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1791);
				match(SET);
				setState(1792);
				reloptions();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1793);
				match(RESET);
				setState(1794);
				reloptions();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1795);
				alter_generic_options();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1796);
				match(SET);
				setState(1797);
				match(WITH);
				setState(1798);
				match(OIDS);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1799);
				match(SET);
				setState(1800);
				match(WITHOUT);
				setState(1801);
				match(OIDS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1802);
				match(SET);
				setState(1803);
				match(WITHOUT);
				setState(1804);
				match(CLUSTER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1805);
				match(ENABLE_P);
				setState(1806);
				match(TRIGGER);
				setState(1807);
				match(ALL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1808);
				match(ENABLE_P);
				setState(1809);
				match(TRIGGER);
				setState(1810);
				match(USER);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1811);
				match(DISABLE_P);
				setState(1812);
				match(TRIGGER);
				setState(1813);
				match(ALL);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1814);
				match(DISABLE_P);
				setState(1815);
				match(TRIGGER);
				setState(1816);
				match(USER);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1817);
				match(NOT);
				setState(1818);
				match(OF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_column_default);
		try {
			setState(1826);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1821);
				match(SET);
				setState(1822);
				match(DEFAULT);
				setState(1823);
				a_expr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1824);
				match(DROP);
				setState(1825);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_opt_drop_behavior);
		try {
			setState(1831);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				match(CASCADE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1829);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_opt_collate_clause);
		try {
			setState(1836);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1833);
				match(COLLATE);
				setState(1834);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_using);
		try {
			setState(1841);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1838);
				match(USING);
				setState(1839);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1843);
			match(T__4);
			setState(1844);
			reloption_list(0);
			setState(1845);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_opt_reloptions);
		try {
			setState(1850);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1847);
				match(WITH);
				setState(1848);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public Reloption_elemContext reloption_elem() {
			return getRuleContext(Reloption_elemContext.class,0);
		}
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		return reloption_list(0);
	}

	private Reloption_listContext reloption_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, _parentState);
		Reloption_listContext _prevctx = _localctx;
		int _startState = 108;
		enterRecursionRule(_localctx, 108, RULE_reloption_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1853);
			reloption_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reloption_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_reloption_list);
					setState(1855);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1856);
					match(T__3);
					setState(1857);
					reloption_elem();
					}
					} 
				}
				setState(1862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_reloption_elem);
		try {
			setState(1878);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1863);
				colLabel();
				setState(1864);
				match(T__2);
				setState(1865);
				colLabel();
				setState(1866);
				match(T__1);
				setState(1867);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1869);
				colLabel();
				setState(1870);
				match(T__2);
				setState(1871);
				colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1873);
				colLabel();
				setState(1874);
				match(T__1);
				setState(1875);
				def_arg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1877);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCompositeTypeStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AlterCompositeTypeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCompositeTypeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterCompositeTypeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCompositeTypeStmtContext alterCompositeTypeStmt() throws RecognitionException {
		AlterCompositeTypeStmtContext _localctx = new AlterCompositeTypeStmtContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterCompositeTypeStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			match(ALTER);
			setState(1881);
			match(TYPE_P);
			setState(1882);
			any_name();
			setState(1883);
			alter_type_cmds(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public Alter_type_cmdContext alter_type_cmd() {
			return getRuleContext(Alter_type_cmdContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		return alter_type_cmds(0);
	}

	private Alter_type_cmdsContext alter_type_cmds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, _parentState);
		Alter_type_cmdsContext _prevctx = _localctx;
		int _startState = 114;
		enterRecursionRule(_localctx, 114, RULE_alter_type_cmds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1886);
			alter_type_cmd();
			}
			_ctx.stop = _input.LT(-1);
			setState(1893);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_type_cmdsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_type_cmds);
					setState(1888);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1889);
					match(T__3);
					setState(1890);
					alter_type_cmd();
					}
					} 
				}
				setState(1895);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_type_cmd);
		try {
			setState(1922);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1896);
				match(ALTER);
				setState(1897);
				match(ATTRIBUTE);
				setState(1898);
				colId();
				setState(1899);
				opt_set_data();
				setState(1900);
				match(TYPE_P);
				setState(1901);
				typename();
				setState(1902);
				opt_collate_clause();
				setState(1903);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1905);
				match(ADD_P);
				setState(1906);
				match(ATTRIBUTE);
				setState(1907);
				tableFuncElement();
				setState(1908);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1910);
				match(DROP);
				setState(1911);
				match(ATTRIBUTE);
				setState(1912);
				match(IF_P);
				setState(1913);
				match(EXISTS);
				setState(1914);
				colId();
				setState(1915);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1917);
				match(DROP);
				setState(1918);
				match(ATTRIBUTE);
				setState(1919);
				colId();
				setState(1920);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClosePortalStmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(SqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public ClosePortalStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closePortalStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitClosePortalStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClosePortalStmtContext closePortalStmt() throws RecognitionException {
		ClosePortalStmtContext _localctx = new ClosePortalStmtContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_closePortalStmt);
		try {
			setState(1928);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1924);
				match(CLOSE);
				setState(1925);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1926);
				match(CLOSE);
				setState(1927);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyStmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SqlParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_oidsContext opt_oids() {
			return getRuleContext(Opt_oidsContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public CopyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyStmtContext copyStmt() throws RecognitionException {
		CopyStmtContext _localctx = new CopyStmtContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_copyStmt);
		try {
			setState(1948);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1930);
				match(COPY);
				setState(1931);
				opt_binary();
				setState(1932);
				qualified_name();
				setState(1933);
				opt_column_list();
				setState(1934);
				opt_oids();
				setState(1935);
				copy_from();
				setState(1936);
				copy_file_name();
				setState(1937);
				copy_delimiter();
				setState(1938);
				opt_with();
				setState(1939);
				copy_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1941);
				match(COPY);
				setState(1942);
				select_with_parens(0);
				setState(1943);
				match(TO);
				setState(1944);
				copy_file_name();
				setState(1945);
				opt_with();
				setState(1946);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1950);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(SqlParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(SqlParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_copy_file_name);
		try {
			setState(1955);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1952);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1953);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1954);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_copy_options);
		try {
			setState(1962);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1957);
				match(T__4);
				setState(1958);
				copy_generic_opt_list(0);
				setState(1959);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1961);
				copy_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public Copy_opt_itemContext copy_opt_item() {
			return getRuleContext(Copy_opt_itemContext.class,0);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		return copy_opt_list(0);
	}

	private Copy_opt_listContext copy_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, _parentState);
		Copy_opt_listContext _prevctx = _localctx;
		int _startState = 128;
		enterRecursionRule(_localctx, 128, RULE_copy_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(1969);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_opt_list);
					setState(1965);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1966);
					copy_opt_item();
					}
					} 
				}
				setState(1971);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public TerminalNode QUOTE() { return getToken(SqlParser.QUOTE, 0); }
		public TerminalNode DELIMITER() { return getToken(SqlParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode CSV() { return getToken(SqlParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(SqlParser.HEADER_P, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_copy_opt_item);
		try {
			setState(2004);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1972);
				match(FORCE);
				setState(1973);
				match(QUOTE);
				setState(1974);
				match(T__6);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1975);
				match(DELIMITER);
				setState(1976);
				opt_as();
				setState(1977);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1979);
				match(NULL_P);
				setState(1980);
				opt_as();
				setState(1981);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1983);
				match(QUOTE);
				setState(1984);
				opt_as();
				setState(1985);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1987);
				match(ESCAPE);
				setState(1988);
				opt_as();
				setState(1989);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1991);
				match(FORCE);
				setState(1992);
				match(QUOTE);
				setState(1993);
				columnList(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1994);
				match(FORCE);
				setState(1995);
				match(NOT);
				setState(1996);
				match(NULL_P);
				setState(1997);
				columnList(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1998);
				match(ENCODING);
				setState(1999);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2000);
				match(BINARY);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2001);
				match(OIDS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2002);
				match(CSV);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2003);
				match(HEADER_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_opt_binary);
		try {
			setState(2008);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2006);
				match(BINARY);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_oidsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public Opt_oidsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_oids; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_oids(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_oidsContext opt_oids() throws RecognitionException {
		Opt_oidsContext _localctx = new Opt_oidsContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_opt_oids);
		try {
			setState(2013);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2010);
				match(WITH);
				setState(2011);
				match(OIDS);
				}
				break;
			case FROM:
			case TO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(SqlParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_copy_delimiter);
		try {
			setState(2020);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2015);
				opt_using();
				setState(2016);
				match(DELIMITERS);
				setState(2017);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_opt_using);
		try {
			setState(2024);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2022);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public Copy_generic_opt_elemContext copy_generic_opt_elem() {
			return getRuleContext(Copy_generic_opt_elemContext.class,0);
		}
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		return copy_generic_opt_list(0);
	}

	private Copy_generic_opt_listContext copy_generic_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, _parentState);
		Copy_generic_opt_listContext _prevctx = _localctx;
		int _startState = 140;
		enterRecursionRule(_localctx, 140, RULE_copy_generic_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2027);
			copy_generic_opt_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2034);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_list);
					setState(2029);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2030);
					match(T__3);
					setState(2031);
					copy_generic_opt_elem();
					}
					} 
				}
				setState(2036);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2037);
			colLabel();
			setState(2038);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_copy_generic_opt_arg);
		try {
			setState(2048);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2040);
				match(T__4);
				setState(2041);
				copy_generic_opt_arg_list(0);
				setState(2042);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2044);
				match(T__6);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2045);
				opt_boolean_or_string();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2046);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,0);
		}
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		return copy_generic_opt_arg_list(0);
	}

	private Copy_generic_opt_arg_listContext copy_generic_opt_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, _parentState);
		Copy_generic_opt_arg_listContext _prevctx = _localctx;
		int _startState = 146;
		enterRecursionRule(_localctx, 146, RULE_copy_generic_opt_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2051);
			copy_generic_opt_arg_list_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(2058);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Copy_generic_opt_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_copy_generic_opt_arg_list);
					setState(2053);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2054);
					match(T__3);
					setState(2055);
					copy_generic_opt_arg_list_item();
					}
					} 
				}
				setState(2060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2061);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptTableElementListContext optTableElementList() {
			return getRuleContext(OptTableElementListContext.class,0);
		}
		public OptInheritContext optInherit() {
			return getRuleContext(OptInheritContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OptTypedTableElementListContext optTypedTableElementList() {
			return getRuleContext(OptTypedTableElementListContext.class,0);
		}
		public CreateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStmtContext createStmt() throws RecognitionException {
		CreateStmtContext _localctx = new CreateStmtContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_createStmt);
		try {
			setState(2115);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2063);
				match(CREATE);
				setState(2064);
				optTemp();
				setState(2065);
				match(TABLE);
				setState(2066);
				qualified_name();
				setState(2067);
				match(T__4);
				setState(2068);
				optTableElementList();
				setState(2069);
				match(T__5);
				setState(2070);
				optInherit();
				setState(2071);
				optWith();
				setState(2072);
				onCommitOption();
				setState(2073);
				optTableSpace();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2075);
				match(CREATE);
				setState(2076);
				optTemp();
				setState(2077);
				match(TABLE);
				setState(2078);
				match(IF_P);
				setState(2079);
				match(NOT);
				setState(2080);
				match(EXISTS);
				setState(2081);
				qualified_name();
				setState(2082);
				match(T__4);
				setState(2083);
				optTableElementList();
				setState(2084);
				match(T__5);
				setState(2085);
				optInherit();
				setState(2086);
				optWith();
				setState(2087);
				onCommitOption();
				setState(2088);
				optTableSpace();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2090);
				match(CREATE);
				setState(2091);
				optTemp();
				setState(2092);
				match(TABLE);
				setState(2093);
				qualified_name();
				setState(2094);
				match(OF);
				setState(2095);
				any_name();
				setState(2096);
				optTypedTableElementList();
				setState(2097);
				optWith();
				setState(2098);
				onCommitOption();
				setState(2099);
				optTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2101);
				match(CREATE);
				setState(2102);
				optTemp();
				setState(2103);
				match(TABLE);
				setState(2104);
				match(IF_P);
				setState(2105);
				match(NOT);
				setState(2106);
				match(EXISTS);
				setState(2107);
				qualified_name();
				setState(2108);
				match(OF);
				setState(2109);
				any_name();
				setState(2110);
				optTypedTableElementList();
				setState(2111);
				optWith();
				setState(2112);
				onCommitOption();
				setState(2113);
				optTableSpace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public OptTempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTemp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempContext optTemp() throws RecognitionException {
		OptTempContext _localctx = new OptTempContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_optTemp);
		try {
			setState(2129);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2117);
				match(TEMPORARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2118);
				match(TEMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2119);
				match(LOCAL);
				setState(2120);
				match(TEMPORARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2121);
				match(LOCAL);
				setState(2122);
				match(TEMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2123);
				match(GLOBAL);
				setState(2124);
				match(TEMPORARY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2125);
				match(GLOBAL);
				setState(2126);
				match(TEMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2127);
				match(UNLOGGED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableElementListContext extends ParserRuleContext {
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public OptTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableElementListContext optTableElementList() throws RecognitionException {
		OptTableElementListContext _localctx = new OptTableElementListContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_optTableElementList);
		try {
			setState(2133);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2131);
				tableElementList(0);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTypedTableElementListContext extends ParserRuleContext {
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public OptTypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTypedTableElementListContext optTypedTableElementList() throws RecognitionException {
		OptTypedTableElementListContext _localctx = new OptTypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_optTypedTableElementList);
		try {
			setState(2140);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2135);
				match(T__4);
				setState(2136);
				typedTableElementList(0);
				setState(2137);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public TableElementContext tableElement() {
			return getRuleContext(TableElementContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		return tableElementList(0);
	}

	private TableElementListContext tableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableElementListContext _localctx = new TableElementListContext(_ctx, _parentState);
		TableElementListContext _prevctx = _localctx;
		int _startState = 158;
		enterRecursionRule(_localctx, 158, RULE_tableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2143);
			tableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2150);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,61,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableElementList);
					setState(2145);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2146);
					match(T__3);
					setState(2147);
					tableElement();
					}
					} 
				}
				setState(2152);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,61,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypedTableElementListContext extends ParserRuleContext {
		public TypedTableElementContext typedTableElement() {
			return getRuleContext(TypedTableElementContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		return typedTableElementList(0);
	}

	private TypedTableElementListContext typedTableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, _parentState);
		TypedTableElementListContext _prevctx = _localctx;
		int _startState = 160;
		enterRecursionRule(_localctx, 160, RULE_typedTableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2154);
			typedTableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(2161);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypedTableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typedTableElementList);
					setState(2156);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2157);
					match(T__3);
					setState(2158);
					typedTableElement();
					}
					} 
				}
				setState(2163);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_tableElement);
		try {
			setState(2167);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2164);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2165);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2166);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_typedTableElement);
		try {
			setState(2171);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2169);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2170);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2173);
			colId();
			setState(2174);
			typename();
			setState(2175);
			create_generic_options();
			setState(2176);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_columnOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			colId();
			setState(2179);
			match(WITH);
			setState(2180);
			match(OPTIONS);
			setState(2181);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public ColConstraintContext colConstraint() {
			return getRuleContext(ColConstraintContext.class,0);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		return colQualList(0);
	}

	private ColQualListContext colQualList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColQualListContext _localctx = new ColQualListContext(_ctx, _parentState);
		ColQualListContext _prevctx = _localctx;
		int _startState = 170;
		enterRecursionRule(_localctx, 170, RULE_colQualList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2188);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,65,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColQualListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_colQualList);
					setState(2184);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2185);
					colConstraint();
					}
					} 
				}
				setState(2190);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,65,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_colConstraint);
		try {
			setState(2199);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2191);
				match(CONSTRAINT);
				setState(2192);
				name();
				setState(2193);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2195);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2196);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2197);
				match(COLLATE);
				setState(2198);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_colConstraintElem);
		try {
			setState(2227);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2201);
				match(CHECK);
				setState(2202);
				match(T__4);
				setState(2203);
				a_expr(0);
				setState(2204);
				match(T__5);
				setState(2205);
				opt_no_inherit();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(2207);
				match(REFERENCES);
				setState(2208);
				qualified_name();
				setState(2209);
				opt_column_list();
				setState(2210);
				key_match();
				setState(2211);
				key_actions();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2213);
				match(UNIQUE);
				setState(2214);
				opt_definition();
				setState(2215);
				optConsTableSpace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2217);
				match(PRIMARY);
				setState(2218);
				match(KEY);
				setState(2219);
				opt_definition();
				setState(2220);
				optConsTableSpace();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(2222);
				match(DEFAULT);
				setState(2223);
				b_expr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2224);
				match(NOT);
				setState(2225);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(2226);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_constraintAttr);
		try {
			setState(2236);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2229);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2230);
				match(NOT);
				setState(2231);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2232);
				match(INITIALLY);
				setState(2233);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2234);
				match(INITIALLY);
				setState(2235);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			match(LIKE);
			setState(2239);
			qualified_name();
			setState(2240);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(SqlParser.INCLUDING, 0); }
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode EXCLUDING() { return getToken(SqlParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 180;
		enterRecursionRule(_localctx, 180, RULE_tableLikeOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2251);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2249);
					switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
					case 1:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2243);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2244);
						match(INCLUDING);
						setState(2245);
						tableLikeOption();
						}
						break;
					case 2:
						{
						_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
						setState(2246);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2247);
						match(EXCLUDING);
						setState(2248);
						tableLikeOption();
						}
						break;
					}
					} 
				}
				setState(2253);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULTS() { return getToken(SqlParser.DEFAULTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public TerminalNode INDEXES() { return getToken(SqlParser.INDEXES, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TerminalNode COMMENTS() { return getToken(SqlParser.COMMENTS, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (COMMENTS - 78)) | (1L << (CONSTRAINTS - 78)) | (1L << (DEFAULTS - 78)))) != 0) || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintElemContext constraintElem() {
			return getRuleContext(ConstraintElemContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_tableConstraint);
		try {
			setState(2261);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2256);
				match(CONSTRAINT);
				setState(2257);
				name();
				setState(2258);
				constraintElem();
				}
				break;
			case CHECK:
			case EXCLUDE:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2260);
				constraintElem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintElemContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptConsTableSpaceContext optConsTableSpace() {
			return getRuleContext(OptConsTableSpaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(SqlParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public ExistingIndexContext existingIndex() {
			return getRuleContext(ExistingIndexContext.class,0);
		}
		public ConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintElemContext constraintElem() throws RecognitionException {
		ConstraintElemContext _localctx = new ConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_constraintElem);
		try {
			setState(2317);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2263);
				match(FOREIGN);
				setState(2264);
				match(KEY);
				setState(2265);
				match(T__4);
				setState(2266);
				columnList(0);
				setState(2267);
				match(T__5);
				setState(2268);
				match(REFERENCES);
				setState(2269);
				qualified_name();
				setState(2270);
				opt_column_list();
				setState(2271);
				key_match();
				setState(2272);
				key_actions();
				setState(2273);
				constraintAttributeSpec(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2275);
				match(UNIQUE);
				setState(2276);
				match(T__4);
				setState(2277);
				columnList(0);
				setState(2278);
				match(T__5);
				setState(2279);
				opt_definition();
				setState(2280);
				optConsTableSpace();
				setState(2281);
				constraintAttributeSpec(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2283);
				match(PRIMARY);
				setState(2284);
				match(KEY);
				setState(2285);
				match(T__4);
				setState(2286);
				columnList(0);
				setState(2287);
				match(T__5);
				setState(2288);
				opt_definition();
				setState(2289);
				optConsTableSpace();
				setState(2290);
				constraintAttributeSpec(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2292);
				match(CHECK);
				setState(2293);
				match(T__4);
				setState(2294);
				a_expr(0);
				setState(2295);
				match(T__5);
				setState(2296);
				constraintAttributeSpec(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2298);
				match(EXCLUDE);
				setState(2299);
				access_method_clause();
				setState(2300);
				match(T__4);
				setState(2301);
				exclusionConstraintList(0);
				setState(2302);
				match(T__5);
				setState(2303);
				opt_definition();
				setState(2304);
				optConsTableSpace();
				setState(2305);
				exclusionWhereClause();
				setState(2306);
				constraintAttributeSpec(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2308);
				match(UNIQUE);
				setState(2309);
				existingIndex();
				setState(2310);
				constraintAttributeSpec(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2312);
				match(PRIMARY);
				setState(2313);
				match(KEY);
				setState(2314);
				existingIndex();
				setState(2315);
				constraintAttributeSpec(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_opt_no_inherit);
		try {
			setState(2322);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2319);
				match(NO);
				setState(2320);
				match(INHERIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_opt_column_list);
		try {
			setState(2329);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2324);
				match(T__4);
				setState(2325);
				columnList(0);
				setState(2326);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public ColumnElemContext columnElem() {
			return getRuleContext(ColumnElemContext.class,0);
		}
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		return columnList(0);
	}

	private ColumnListContext columnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ColumnListContext _localctx = new ColumnListContext(_ctx, _parentState);
		ColumnListContext _prevctx = _localctx;
		int _startState = 192;
		enterRecursionRule(_localctx, 192, RULE_columnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2332);
			columnElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2339);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_columnList);
					setState(2334);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2335);
					match(T__3);
					setState(2336);
					columnElem();
					}
					} 
				}
				setState(2341);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(SqlParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(SqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(SqlParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_key_match);
		try {
			setState(2351);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2344);
				match(MATCH);
				setState(2345);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2346);
				match(MATCH);
				setState(2347);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2348);
				match(MATCH);
				setState(2349);
				match(SIMPLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public ExclusionConstraintElemContext exclusionConstraintElem() {
			return getRuleContext(ExclusionConstraintElemContext.class,0);
		}
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		return exclusionConstraintList(0);
	}

	private ExclusionConstraintListContext exclusionConstraintList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, _parentState);
		ExclusionConstraintListContext _prevctx = _localctx;
		int _startState = 198;
		enterRecursionRule(_localctx, 198, RULE_exclusionConstraintList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2354);
			exclusionConstraintElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2361);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusionConstraintListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exclusionConstraintList);
					setState(2356);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2357);
					match(T__3);
					setState(2358);
					exclusionConstraintElem();
					}
					} 
				}
				setState(2363);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_exclusionConstraintElem);
		try {
			setState(2375);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2364);
				index_elem();
				setState(2365);
				match(WITH);
				setState(2366);
				match(OPERATOR);
				setState(2367);
				match(T__4);
				setState(2368);
				any_operator();
				setState(2369);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2371);
				index_elem();
				setState(2372);
				match(WITH);
				setState(2373);
				any_operator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_exclusionWhereClause);
		try {
			setState(2383);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2377);
				match(WHERE);
				setState(2378);
				match(T__4);
				setState(2379);
				a_expr(0);
				setState(2380);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_key_actions);
		try {
			setState(2394);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2385);
				key_update();
				setState(2386);
				key_delete();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2388);
				key_delete();
				setState(2389);
				key_update();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2391);
				key_update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2392);
				key_delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2396);
			match(ON);
			setState(2397);
			match(UPDATE);
			setState(2398);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2400);
			match(ON);
			setState(2401);
			match(DELETE_P);
			setState(2402);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SqlParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_key_action);
		try {
			setState(2412);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2404);
				match(NO);
				setState(2405);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2406);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2407);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2408);
				match(SET);
				setState(2409);
				match(NULL_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2410);
				match(SET);
				setState(2411);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(SqlParser.INHERITS, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public OptInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInherit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptInheritContext optInherit() throws RecognitionException {
		OptInheritContext _localctx = new OptInheritContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_optInherit);
		try {
			setState(2420);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2414);
				match(INHERITS);
				setState(2415);
				match(T__4);
				setState(2416);
				qualified_name_list(0);
				setState(2417);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public OptWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWith; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWithContext optWith() throws RecognitionException {
		OptWithContext _localctx = new OptWithContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_optWith);
		try {
			setState(2429);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2422);
				match(WITH);
				setState(2423);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2424);
				match(WITH);
				setState(2425);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2426);
				match(WITHOUT);
				setState(2427);
				match(OIDS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_onCommitOption);
		try {
			setState(2443);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2431);
				match(ON);
				setState(2432);
				match(COMMIT);
				setState(2433);
				match(DROP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2434);
				match(ON);
				setState(2435);
				match(COMMIT);
				setState(2436);
				match(DELETE_P);
				setState(2437);
				match(ROWS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2438);
				match(ON);
				setState(2439);
				match(COMMIT);
				setState(2440);
				match(PRESERVE);
				setState(2441);
				match(ROWS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceContext optTableSpace() throws RecognitionException {
		OptTableSpaceContext _localctx = new OptTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_optTableSpace);
		try {
			setState(2448);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2445);
				match(TABLESPACE);
				setState(2446);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConsTableSpace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConsTableSpaceContext optConsTableSpace() throws RecognitionException {
		OptConsTableSpaceContext _localctx = new OptConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_optConsTableSpace);
		try {
			setState(2455);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2450);
				match(USING);
				setState(2451);
				match(INDEX);
				setState(2452);
				match(TABLESPACE);
				setState(2453);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public ExistingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExistingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingIndexContext existingIndex() throws RecognitionException {
		ExistingIndexContext _localctx = new ExistingIndexContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_existingIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			match(USING);
			setState(2458);
			match(INDEX);
			setState(2459);
			index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAsStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public CreateAsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAsStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateAsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAsStmtContext createAsStmt() throws RecognitionException {
		CreateAsStmtContext _localctx = new CreateAsStmtContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_createAsStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2461);
			match(CREATE);
			setState(2462);
			optTemp();
			setState(2463);
			match(TABLE);
			setState(2464);
			create_as_target();
			setState(2465);
			match(AS);
			setState(2466);
			selectStmt();
			setState(2467);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public OptWithContext optWith() {
			return getRuleContext(OptWithContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			qualified_name();
			setState(2470);
			opt_column_list();
			setState(2471);
			optWith();
			setState(2472);
			onCommitOption();
			setState(2473);
			optTableSpace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_opt_with_data);
		try {
			setState(2481);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2475);
				match(WITH);
				setState(2476);
				match(DATA_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2477);
				match(WITH);
				setState(2478);
				match(NO);
				setState(2479);
				match(DATA_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSeqStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptSeqOptListContext optSeqOptList() {
			return getRuleContext(OptSeqOptListContext.class,0);
		}
		public CreateSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSeqStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSeqStmtContext createSeqStmt() throws RecognitionException {
		CreateSeqStmtContext _localctx = new CreateSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_createSeqStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			match(CREATE);
			setState(2484);
			optTemp();
			setState(2485);
			match(SEQUENCE);
			setState(2486);
			qualified_name();
			setState(2487);
			optSeqOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSeqStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public AlterSeqStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSeqStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterSeqStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSeqStmtContext alterSeqStmt() throws RecognitionException {
		AlterSeqStmtContext _localctx = new AlterSeqStmtContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_alterSeqStmt);
		try {
			setState(2501);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2489);
				match(ALTER);
				setState(2490);
				match(SEQUENCE);
				setState(2491);
				qualified_name();
				setState(2492);
				seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2494);
				match(ALTER);
				setState(2495);
				match(SEQUENCE);
				setState(2496);
				match(IF_P);
				setState(2497);
				match(EXISTS);
				setState(2498);
				qualified_name();
				setState(2499);
				seqOptList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSeqOptListContext extends ParserRuleContext {
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public OptSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSeqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptSeqOptListContext optSeqOptList() throws RecognitionException {
		OptSeqOptListContext _localctx = new OptSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_optSeqOptList);
		try {
			setState(2505);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2503);
				seqOptList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		return seqOptList(0);
	}

	private SeqOptListContext seqOptList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, _parentState);
		SeqOptListContext _prevctx = _localctx;
		int _startState = 236;
		enterRecursionRule(_localctx, 236, RULE_seqOptList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2508);
			seqOptElem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2514);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SeqOptListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_seqOptList);
					setState(2510);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2511);
					seqOptElem();
					}
					} 
				}
				setState(2516);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(SqlParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public TerminalNode CACHE() { return getToken(SqlParser.CACHE, 0); }
		public TerminalNode MAXVALUE() { return getToken(SqlParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(SqlParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(SqlParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_seqOptElem);
		try {
			setState(2546);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2517);
				match(INCREMENT);
				setState(2518);
				opt_by();
				setState(2519);
				numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2521);
				match(START);
				setState(2522);
				opt_with();
				setState(2523);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2525);
				match(RESTART);
				setState(2526);
				opt_with();
				setState(2527);
				numericOnly();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2529);
				match(CACHE);
				setState(2530);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2531);
				match(MAXVALUE);
				setState(2532);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2533);
				match(MINVALUE);
				setState(2534);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2535);
				match(OWNED);
				setState(2536);
				match(BY);
				setState(2537);
				any_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2538);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2539);
				match(NO);
				setState(2540);
				match(CYCLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2541);
				match(NO);
				setState(2542);
				match(MAXVALUE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2543);
				match(NO);
				setState(2544);
				match(MINVALUE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2545);
				match(RESTART);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_opt_by);
		try {
			setState(2550);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2548);
				match(BY);
				}
				break;
			case T__7:
			case T__13:
			case FCONST:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_numericOnly);
		try {
			setState(2556);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2552);
				match(T__7);
				setState(2553);
				match(FCONST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2554);
				signedIconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2555);
				match(FCONST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnly_listContext extends ParserRuleContext {
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public NumericOnly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumericOnly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnly_listContext numericOnly_list() throws RecognitionException {
		return numericOnly_list(0);
	}

	private NumericOnly_listContext numericOnly_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NumericOnly_listContext _localctx = new NumericOnly_listContext(_ctx, _parentState);
		NumericOnly_listContext _prevctx = _localctx;
		int _startState = 244;
		enterRecursionRule(_localctx, 244, RULE_numericOnly_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2559);
			numericOnly();
			}
			_ctx.stop = _input.LT(-1);
			setState(2566);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,94,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NumericOnly_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numericOnly_list);
					setState(2561);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2562);
					match(T__3);
					setState(2563);
					numericOnly();
					}
					} 
				}
				setState(2568);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,94,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CreatePLangStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreatePLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPLangStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatePLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePLangStmtContext createPLangStmt() throws RecognitionException {
		CreatePLangStmtContext _localctx = new CreatePLangStmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_createPLangStmt);
		try {
			setState(2587);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2569);
				match(CREATE);
				setState(2570);
				opt_or_replace();
				setState(2571);
				opt_trusted();
				setState(2572);
				opt_procedural();
				setState(2573);
				match(LANGUAGE);
				setState(2574);
				colId_or_Sconst();
				setState(2575);
				match(HANDLER);
				setState(2576);
				handler_name();
				setState(2577);
				opt_inline_handler();
				setState(2578);
				opt_validator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2580);
				match(CREATE);
				setState(2581);
				opt_or_replace();
				setState(2582);
				opt_trusted();
				setState(2583);
				opt_procedural();
				setState(2584);
				match(LANGUAGE);
				setState(2585);
				colId_or_Sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(SqlParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_opt_trusted);
		try {
			setState(2591);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2589);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_handler_name);
		try {
			setState(2597);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2593);
				name();
				setState(2594);
				attrs(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2596);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(SqlParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_opt_inline_handler);
		try {
			setState(2602);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2599);
				match(INLINE_P);
				setState(2600);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_validator_clause);
		try {
			setState(2608);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2604);
				match(VALIDATOR);
				setState(2605);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(2606);
				match(NO);
				setState(2607);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_opt_validator);
		try {
			setState(2612);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2610);
				validator_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPLangStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropPLangStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPLangStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropPLangStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPLangStmtContext dropPLangStmt() throws RecognitionException {
		DropPLangStmtContext _localctx = new DropPLangStmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_dropPLangStmt);
		try {
			setState(2628);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2614);
				match(DROP);
				setState(2615);
				opt_procedural();
				setState(2616);
				match(LANGUAGE);
				setState(2617);
				colId_or_Sconst();
				setState(2618);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2620);
				match(DROP);
				setState(2621);
				opt_procedural();
				setState(2622);
				match(LANGUAGE);
				setState(2623);
				match(IF_P);
				setState(2624);
				match(EXISTS);
				setState(2625);
				colId_or_Sconst();
				setState(2626);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(SqlParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_opt_procedural);
		try {
			setState(2632);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2630);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext optTableSpaceOwner() {
			return getRuleContext(OptTableSpaceOwnerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CreateTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpaceStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpaceStmtContext createTableSpaceStmt() throws RecognitionException {
		CreateTableSpaceStmtContext _localctx = new CreateTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_createTableSpaceStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2634);
			match(CREATE);
			setState(2635);
			match(TABLESPACE);
			setState(2636);
			name();
			setState(2637);
			optTableSpaceOwner();
			setState(2638);
			match(LOCATION);
			setState(2639);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableSpaceOwnerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptTableSpaceOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableSpaceOwner; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableSpaceOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableSpaceOwnerContext optTableSpaceOwner() throws RecognitionException {
		OptTableSpaceOwnerContext _localctx = new OptTableSpaceOwnerContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_optTableSpaceOwner);
		try {
			setState(2644);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2641);
				match(OWNER);
				setState(2642);
				name();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropTableSpaceStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpaceStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropTableSpaceStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceStmtContext dropTableSpaceStmt() throws RecognitionException {
		DropTableSpaceStmtContext _localctx = new DropTableSpaceStmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_dropTableSpaceStmt);
		try {
			setState(2654);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2646);
				match(DROP);
				setState(2647);
				match(TABLESPACE);
				setState(2648);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2649);
				match(DROP);
				setState(2650);
				match(TABLESPACE);
				setState(2651);
				match(IF_P);
				setState(2652);
				match(EXISTS);
				setState(2653);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public CreateExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionStmtContext createExtensionStmt() throws RecognitionException {
		CreateExtensionStmtContext _localctx = new CreateExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_createExtensionStmt);
		try {
			setState(2671);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2656);
				match(CREATE);
				setState(2657);
				match(EXTENSION);
				setState(2658);
				name();
				setState(2659);
				opt_with();
				setState(2660);
				create_extension_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2662);
				match(CREATE);
				setState(2663);
				match(EXTENSION);
				setState(2664);
				match(IF_P);
				setState(2665);
				match(NOT);
				setState(2666);
				match(EXISTS);
				setState(2667);
				name();
				setState(2668);
				opt_with();
				setState(2669);
				create_extension_opt_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public Create_extension_opt_itemContext create_extension_opt_item() {
			return getRuleContext(Create_extension_opt_itemContext.class,0);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		return create_extension_opt_list(0);
	}

	private Create_extension_opt_listContext create_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, _parentState);
		Create_extension_opt_listContext _prevctx = _localctx;
		int _startState = 270;
		enterRecursionRule(_localctx, 270, RULE_create_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2678);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Create_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_create_extension_opt_list);
					setState(2674);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2675);
					create_extension_opt_item();
					}
					} 
				}
				setState(2680);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_extension_opt_item);
		try {
			setState(2687);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2681);
				match(SCHEMA);
				setState(2682);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2683);
				match(VERSION_P);
				setState(2684);
				colId_or_Sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(2685);
				match(FROM);
				setState(2686);
				colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterExtensionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterExtensionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionStmtContext alterExtensionStmt() throws RecognitionException {
		AlterExtensionStmtContext _localctx = new AlterExtensionStmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_alterExtensionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2689);
			match(ALTER);
			setState(2690);
			match(EXTENSION);
			setState(2691);
			name();
			setState(2692);
			match(UPDATE);
			setState(2693);
			alter_extension_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item() {
			return getRuleContext(Alter_extension_opt_itemContext.class,0);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		return alter_extension_opt_list(0);
	}

	private Alter_extension_opt_listContext alter_extension_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, _parentState);
		Alter_extension_opt_listContext _prevctx = _localctx;
		int _startState = 276;
		enterRecursionRule(_localctx, 276, RULE_alter_extension_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2700);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_extension_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_extension_opt_list);
					setState(2696);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2697);
					alter_extension_opt_item();
					}
					} 
				}
				setState(2702);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2703);
			match(TO);
			setState(2704);
			colId_or_Sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContentsStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public AlterExtensionContentsStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionContentsStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterExtensionContentsStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContentsStmtContext alterExtensionContentsStmt() throws RecognitionException {
		AlterExtensionContentsStmtContext _localctx = new AlterExtensionContentsStmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alterExtensionContentsStmt);
		try {
			setState(2884);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				match(ALTER);
				setState(2707);
				match(EXTENSION);
				setState(2708);
				name();
				setState(2709);
				add_drop();
				setState(2710);
				match(CAST);
				setState(2711);
				match(T__4);
				setState(2712);
				typename();
				setState(2713);
				match(AS);
				setState(2714);
				typename();
				setState(2715);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2717);
				match(ALTER);
				setState(2718);
				match(EXTENSION);
				setState(2719);
				name();
				setState(2720);
				add_drop();
				setState(2721);
				match(AGGREGATE);
				setState(2722);
				func_name();
				setState(2723);
				aggr_args();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2725);
				match(ALTER);
				setState(2726);
				match(EXTENSION);
				setState(2727);
				name();
				setState(2728);
				add_drop();
				setState(2729);
				opt_procedural();
				setState(2730);
				match(LANGUAGE);
				setState(2731);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2733);
				match(ALTER);
				setState(2734);
				match(EXTENSION);
				setState(2735);
				name();
				setState(2736);
				add_drop();
				setState(2737);
				match(OPERATOR);
				setState(2738);
				any_operator();
				setState(2739);
				oper_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2741);
				match(ALTER);
				setState(2742);
				match(EXTENSION);
				setState(2743);
				name();
				setState(2744);
				add_drop();
				setState(2745);
				match(OPERATOR);
				setState(2746);
				match(CLASS);
				setState(2747);
				any_name();
				setState(2748);
				match(USING);
				setState(2749);
				access_method();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2751);
				match(ALTER);
				setState(2752);
				match(EXTENSION);
				setState(2753);
				name();
				setState(2754);
				add_drop();
				setState(2755);
				match(OPERATOR);
				setState(2756);
				match(FAMILY);
				setState(2757);
				any_name();
				setState(2758);
				match(USING);
				setState(2759);
				access_method();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2761);
				match(ALTER);
				setState(2762);
				match(EXTENSION);
				setState(2763);
				name();
				setState(2764);
				add_drop();
				setState(2765);
				match(COLLATION);
				setState(2766);
				any_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2768);
				match(ALTER);
				setState(2769);
				match(EXTENSION);
				setState(2770);
				name();
				setState(2771);
				add_drop();
				setState(2772);
				match(CONVERSION_P);
				setState(2773);
				any_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2775);
				match(ALTER);
				setState(2776);
				match(EXTENSION);
				setState(2777);
				name();
				setState(2778);
				add_drop();
				setState(2779);
				match(DOMAIN_P);
				setState(2780);
				any_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2782);
				match(ALTER);
				setState(2783);
				match(EXTENSION);
				setState(2784);
				name();
				setState(2785);
				add_drop();
				setState(2786);
				match(FUNCTION);
				setState(2787);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2789);
				match(ALTER);
				setState(2790);
				match(EXTENSION);
				setState(2791);
				name();
				setState(2792);
				add_drop();
				setState(2793);
				match(SCHEMA);
				setState(2794);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2796);
				match(ALTER);
				setState(2797);
				match(EXTENSION);
				setState(2798);
				name();
				setState(2799);
				add_drop();
				setState(2800);
				match(TABLE);
				setState(2801);
				any_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2803);
				match(ALTER);
				setState(2804);
				match(EXTENSION);
				setState(2805);
				name();
				setState(2806);
				add_drop();
				setState(2807);
				match(TEXT_P);
				setState(2808);
				match(SEARCH);
				setState(2809);
				match(PARSER);
				setState(2810);
				any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2812);
				match(ALTER);
				setState(2813);
				match(EXTENSION);
				setState(2814);
				name();
				setState(2815);
				add_drop();
				setState(2816);
				match(TEXT_P);
				setState(2817);
				match(SEARCH);
				setState(2818);
				match(DICTIONARY);
				setState(2819);
				any_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2821);
				match(ALTER);
				setState(2822);
				match(EXTENSION);
				setState(2823);
				name();
				setState(2824);
				add_drop();
				setState(2825);
				match(TEXT_P);
				setState(2826);
				match(SEARCH);
				setState(2827);
				match(TEMPLATE);
				setState(2828);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2830);
				match(ALTER);
				setState(2831);
				match(EXTENSION);
				setState(2832);
				name();
				setState(2833);
				add_drop();
				setState(2834);
				match(TEXT_P);
				setState(2835);
				match(SEARCH);
				setState(2836);
				match(CONFIGURATION);
				setState(2837);
				any_name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2839);
				match(ALTER);
				setState(2840);
				match(EXTENSION);
				setState(2841);
				name();
				setState(2842);
				add_drop();
				setState(2843);
				match(SEQUENCE);
				setState(2844);
				any_name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2846);
				match(ALTER);
				setState(2847);
				match(EXTENSION);
				setState(2848);
				name();
				setState(2849);
				add_drop();
				setState(2850);
				match(VIEW);
				setState(2851);
				any_name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2853);
				match(ALTER);
				setState(2854);
				match(EXTENSION);
				setState(2855);
				name();
				setState(2856);
				add_drop();
				setState(2857);
				match(FOREIGN);
				setState(2858);
				match(TABLE);
				setState(2859);
				any_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2861);
				match(ALTER);
				setState(2862);
				match(EXTENSION);
				setState(2863);
				name();
				setState(2864);
				add_drop();
				setState(2865);
				match(FOREIGN);
				setState(2866);
				match(DATA_P);
				setState(2867);
				match(WRAPPER);
				setState(2868);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2870);
				match(ALTER);
				setState(2871);
				match(EXTENSION);
				setState(2872);
				name();
				setState(2873);
				add_drop();
				setState(2874);
				match(SERVER);
				setState(2875);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2877);
				match(ALTER);
				setState(2878);
				match(EXTENSION);
				setState(2879);
				name();
				setState(2880);
				add_drop();
				setState(2881);
				match(TYPE_P);
				setState(2882);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFdwStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFdwStmtContext createFdwStmt() throws RecognitionException {
		CreateFdwStmtContext _localctx = new CreateFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_createFdwStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2886);
			match(CREATE);
			setState(2887);
			match(FOREIGN);
			setState(2888);
			match(DATA_P);
			setState(2889);
			match(WRAPPER);
			setState(2890);
			name();
			setState(2891);
			opt_fdw_options();
			setState(2892);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_fdw_option);
		try {
			setState(2902);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2894);
				match(HANDLER);
				setState(2895);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2896);
				match(VALIDATOR);
				setState(2897);
				handler_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2898);
				match(NO);
				setState(2899);
				match(HANDLER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2900);
				match(NO);
				setState(2901);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionContext fdw_option() {
			return getRuleContext(Fdw_optionContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		return fdw_options(0);
	}

	private Fdw_optionsContext fdw_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, _parentState);
		Fdw_optionsContext _prevctx = _localctx;
		int _startState = 286;
		enterRecursionRule(_localctx, 286, RULE_fdw_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2905);
			fdw_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(2911);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,111,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fdw_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fdw_options);
					setState(2907);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2908);
					fdw_option();
					}
					} 
				}
				setState(2913);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,111,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_opt_fdw_options);
		try {
			setState(2916);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2914);
				fdw_options(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFdwStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFdwStmtContext dropFdwStmt() throws RecognitionException {
		DropFdwStmtContext _localctx = new DropFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_dropFdwStmt);
		try {
			setState(2934);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2918);
				match(DROP);
				setState(2919);
				match(FOREIGN);
				setState(2920);
				match(DATA_P);
				setState(2921);
				match(WRAPPER);
				setState(2922);
				name();
				setState(2923);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2925);
				match(DROP);
				setState(2926);
				match(FOREIGN);
				setState(2927);
				match(DATA_P);
				setState(2928);
				match(WRAPPER);
				setState(2929);
				match(IF_P);
				setState(2930);
				match(EXISTS);
				setState(2931);
				name();
				setState(2932);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFdwStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterFdwStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFdwStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterFdwStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFdwStmtContext alterFdwStmt() throws RecognitionException {
		AlterFdwStmtContext _localctx = new AlterFdwStmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alterFdwStmt);
		try {
			setState(2951);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2936);
				match(ALTER);
				setState(2937);
				match(FOREIGN);
				setState(2938);
				match(DATA_P);
				setState(2939);
				match(WRAPPER);
				setState(2940);
				name();
				setState(2941);
				opt_fdw_options();
				setState(2942);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2944);
				match(ALTER);
				setState(2945);
				match(FOREIGN);
				setState(2946);
				match(DATA_P);
				setState(2947);
				match(WRAPPER);
				setState(2948);
				name();
				setState(2949);
				fdw_options(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_create_generic_options);
		try {
			setState(2959);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2953);
				match(OPTIONS);
				setState(2954);
				match(T__4);
				setState(2955);
				generic_option_list(0);
				setState(2956);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		return generic_option_list(0);
	}

	private Generic_option_listContext generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, _parentState);
		Generic_option_listContext _prevctx = _localctx;
		int _startState = 296;
		enterRecursionRule(_localctx, 296, RULE_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2962);
			generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2969);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_generic_option_list);
					setState(2964);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2965);
					match(T__3);
					setState(2966);
					generic_option_elem();
					}
					} 
				}
				setState(2971);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2972);
			match(OPTIONS);
			setState(2973);
			match(T__4);
			setState(2974);
			alter_generic_option_list(0);
			setState(2975);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public Alter_generic_option_elemContext alter_generic_option_elem() {
			return getRuleContext(Alter_generic_option_elemContext.class,0);
		}
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		return alter_generic_option_list(0);
	}

	private Alter_generic_option_listContext alter_generic_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, _parentState);
		Alter_generic_option_listContext _prevctx = _localctx;
		int _startState = 300;
		enterRecursionRule(_localctx, 300, RULE_alter_generic_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2978);
			alter_generic_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(2985);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,117,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_generic_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_generic_option_list);
					setState(2980);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2981);
					match(T__3);
					setState(2982);
					alter_generic_option_elem();
					}
					} 
				}
				setState(2987);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,117,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_alter_generic_option_elem);
		try {
			setState(2995);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2988);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2989);
				match(SET);
				setState(2990);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2991);
				match(ADD_P);
				setState(2992);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2993);
				match(DROP);
				setState(2994);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			generic_option_name();
			setState(2998);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3000);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3002);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignServerStmtContext createForeignServerStmt() throws RecognitionException {
		CreateForeignServerStmtContext _localctx = new CreateForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createForeignServerStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3004);
			match(CREATE);
			setState(3005);
			match(SERVER);
			setState(3006);
			name();
			setState(3007);
			opt_type();
			setState(3008);
			opt_foreign_server_version();
			setState(3009);
			match(FOREIGN);
			setState(3010);
			match(DATA_P);
			setState(3011);
			match(WRAPPER);
			setState(3012);
			name();
			setState(3013);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opt_type);
		try {
			setState(3018);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3015);
				match(TYPE_P);
				setState(3016);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_foreign_server_version);
		try {
			setState(3024);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3020);
				match(VERSION_P);
				setState(3021);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3022);
				match(VERSION_P);
				setState(3023);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_opt_foreign_server_version);
		try {
			setState(3028);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3026);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignServerStmtContext dropForeignServerStmt() throws RecognitionException {
		DropForeignServerStmtContext _localctx = new DropForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_dropForeignServerStmt);
		try {
			setState(3042);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3030);
				match(DROP);
				setState(3031);
				match(SERVER);
				setState(3032);
				name();
				setState(3033);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3035);
				match(DROP);
				setState(3036);
				match(SERVER);
				setState(3037);
				match(IF_P);
				setState(3038);
				match(EXISTS);
				setState(3039);
				name();
				setState(3040);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignServerStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterForeignServerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignServerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterForeignServerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignServerStmtContext alterForeignServerStmt() throws RecognitionException {
		AlterForeignServerStmtContext _localctx = new AlterForeignServerStmtContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alterForeignServerStmt);
		try {
			setState(3060);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3044);
				match(ALTER);
				setState(3045);
				match(SERVER);
				setState(3046);
				name();
				setState(3047);
				foreign_server_version();
				setState(3048);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3050);
				match(ALTER);
				setState(3051);
				match(SERVER);
				setState(3052);
				name();
				setState(3053);
				foreign_server_version();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3055);
				match(ALTER);
				setState(3056);
				match(SERVER);
				setState(3057);
				name();
				setState(3058);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptForeignTableElementListContext optForeignTableElementList() {
			return getRuleContext(OptForeignTableElementListContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public CreateForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableStmtContext createForeignTableStmt() throws RecognitionException {
		CreateForeignTableStmtContext _localctx = new CreateForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_createForeignTableStmt);
		try {
			setState(3083);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3062);
				match(CREATE);
				setState(3063);
				match(FOREIGN);
				setState(3064);
				match(TABLE);
				setState(3065);
				qualified_name();
				setState(3066);
				optForeignTableElementList();
				setState(3067);
				match(SERVER);
				setState(3068);
				name();
				setState(3069);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3071);
				match(CREATE);
				setState(3072);
				match(FOREIGN);
				setState(3073);
				match(TABLE);
				setState(3074);
				match(IF_P);
				setState(3075);
				match(NOT);
				setState(3076);
				match(EXISTS);
				setState(3077);
				qualified_name();
				setState(3078);
				optForeignTableElementList();
				setState(3079);
				match(SERVER);
				setState(3080);
				name();
				setState(3081);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptForeignTableElementListContext extends ParserRuleContext {
		public ForeignTableElementListContext foreignTableElementList() {
			return getRuleContext(ForeignTableElementListContext.class,0);
		}
		public OptForeignTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optForeignTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptForeignTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptForeignTableElementListContext optForeignTableElementList() throws RecognitionException {
		OptForeignTableElementListContext _localctx = new OptForeignTableElementListContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_optForeignTableElementList);
		try {
			setState(3091);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3085);
				match(T__4);
				setState(3086);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3087);
				match(T__4);
				setState(3088);
				foreignTableElementList(0);
				setState(3089);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignTableElementListContext extends ParserRuleContext {
		public ForeignTableElementContext foreignTableElement() {
			return getRuleContext(ForeignTableElementContext.class,0);
		}
		public ForeignTableElementListContext foreignTableElementList() {
			return getRuleContext(ForeignTableElementListContext.class,0);
		}
		public ForeignTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignTableElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeignTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignTableElementListContext foreignTableElementList() throws RecognitionException {
		return foreignTableElementList(0);
	}

	private ForeignTableElementListContext foreignTableElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForeignTableElementListContext _localctx = new ForeignTableElementListContext(_ctx, _parentState);
		ForeignTableElementListContext _prevctx = _localctx;
		int _startState = 326;
		enterRecursionRule(_localctx, 326, RULE_foreignTableElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3094);
			foreignTableElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(3101);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForeignTableElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_foreignTableElementList);
					setState(3096);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3097);
					match(T__3);
					setState(3098);
					foreignTableElement();
					}
					} 
				}
				setState(3103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForeignTableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public ForeignTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitForeignTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignTableElementContext foreignTableElement() throws RecognitionException {
		ForeignTableElementContext _localctx = new ForeignTableElementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_foreignTableElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3104);
			columnDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public AlterForeignTableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterForeignTableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableStmtContext alterForeignTableStmt() throws RecognitionException {
		AlterForeignTableStmtContext _localctx = new AlterForeignTableStmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alterForeignTableStmt);
		try {
			setState(3120);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3106);
				match(ALTER);
				setState(3107);
				match(FOREIGN);
				setState(3108);
				match(TABLE);
				setState(3109);
				relation_expr();
				setState(3110);
				alter_table_cmds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3112);
				match(ALTER);
				setState(3113);
				match(FOREIGN);
				setState(3114);
				match(TABLE);
				setState(3115);
				match(IF_P);
				setState(3116);
				match(EXISTS);
				setState(3117);
				relation_expr();
				setState(3118);
				alter_table_cmds(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreateUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingStmtContext createUserMappingStmt() throws RecognitionException {
		CreateUserMappingStmtContext _localctx = new CreateUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_createUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3122);
			match(CREATE);
			setState(3123);
			match(USER);
			setState(3124);
			match(MAPPING);
			setState(3125);
			match(FOR);
			setState(3126);
			auth_ident();
			setState(3127);
			match(SERVER);
			setState(3128);
			name();
			setState(3129);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_auth_ident);
		try {
			setState(3134);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3131);
				roleId();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3132);
				match(CURRENT_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3133);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingStmtContext dropUserMappingStmt() throws RecognitionException {
		DropUserMappingStmtContext _localctx = new DropUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_dropUserMappingStmt);
		try {
			setState(3154);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3136);
				match(DROP);
				setState(3137);
				match(USER);
				setState(3138);
				match(MAPPING);
				setState(3139);
				match(FOR);
				setState(3140);
				auth_ident();
				setState(3141);
				match(SERVER);
				setState(3142);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3144);
				match(DROP);
				setState(3145);
				match(USER);
				setState(3146);
				match(MAPPING);
				setState(3147);
				match(IF_P);
				setState(3148);
				match(EXISTS);
				setState(3149);
				match(FOR);
				setState(3150);
				auth_ident();
				setState(3151);
				match(SERVER);
				setState(3152);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterUserMappingStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMappingStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterUserMappingStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingStmtContext alterUserMappingStmt() throws RecognitionException {
		AlterUserMappingStmtContext _localctx = new AlterUserMappingStmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterUserMappingStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			match(ALTER);
			setState(3157);
			match(USER);
			setState(3158);
			match(MAPPING);
			setState(3159);
			match(FOR);
			setState(3160);
			auth_ident();
			setState(3161);
			match(SERVER);
			setState(3162);
			name();
			setState(3163);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTrigStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SqlParser.PROCEDURE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public OptConstrFromTableContext optConstrFromTable() {
			return getRuleContext(OptConstrFromTableContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public CreateTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTrigStmtContext createTrigStmt() throws RecognitionException {
		CreateTrigStmtContext _localctx = new CreateTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_createTrigStmt);
		try {
			setState(3202);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3165);
				match(CREATE);
				setState(3166);
				match(TRIGGER);
				setState(3167);
				name();
				setState(3168);
				triggerActionTime();
				setState(3169);
				triggerEvents(0);
				setState(3170);
				match(ON);
				setState(3171);
				qualified_name();
				setState(3172);
				triggerForSpec();
				setState(3173);
				triggerWhen();
				setState(3174);
				match(EXECUTE);
				setState(3175);
				match(PROCEDURE);
				setState(3176);
				func_name();
				setState(3177);
				match(T__4);
				setState(3178);
				triggerFuncArgs(0);
				setState(3179);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3181);
				match(CREATE);
				setState(3182);
				match(CONSTRAINT);
				setState(3183);
				match(TRIGGER);
				setState(3184);
				name();
				setState(3185);
				match(AFTER);
				setState(3186);
				triggerEvents(0);
				setState(3187);
				match(ON);
				setState(3188);
				qualified_name();
				setState(3189);
				optConstrFromTable();
				setState(3190);
				constraintAttributeSpec(0);
				setState(3191);
				match(FOR);
				setState(3192);
				match(EACH);
				setState(3193);
				match(ROW);
				setState(3194);
				triggerWhen();
				setState(3195);
				match(EXECUTE);
				setState(3196);
				match(PROCEDURE);
				setState(3197);
				func_name();
				setState(3198);
				match(T__4);
				setState(3199);
				triggerFuncArgs(0);
				setState(3200);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_triggerActionTime);
		try {
			setState(3208);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3204);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3205);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3206);
				match(INSTEAD);
				setState(3207);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public TriggerOneEventContext triggerOneEvent() {
			return getRuleContext(TriggerOneEventContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		return triggerEvents(0);
	}

	private TriggerEventsContext triggerEvents(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, _parentState);
		TriggerEventsContext _prevctx = _localctx;
		int _startState = 344;
		enterRecursionRule(_localctx, 344, RULE_triggerEvents, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3211);
			triggerOneEvent();
			}
			_ctx.stop = _input.LT(-1);
			setState(3218);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerEventsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerEvents);
					setState(3213);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3214);
					match(OR);
					setState(3215);
					triggerOneEvent();
					}
					} 
				}
				setState(3220);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_triggerOneEvent);
		try {
			setState(3228);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3221);
				match(UPDATE);
				setState(3222);
				match(OF);
				setState(3223);
				columnList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3224);
				match(INSERT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3225);
				match(DELETE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3226);
				match(UPDATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3227);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TriggerForOptEachContext triggerForOptEach() {
			return getRuleContext(TriggerForOptEachContext.class,0);
		}
		public TriggerForTypeContext triggerForType() {
			return getRuleContext(TriggerForTypeContext.class,0);
		}
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_triggerForSpec);
		try {
			setState(3235);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3230);
				match(FOR);
				setState(3231);
				triggerForOptEach();
				setState(3232);
				triggerForType();
				}
				break;
			case EXECUTE:
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForOptEachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public TriggerForOptEachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForOptEach; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForOptEach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForOptEachContext triggerForOptEach() throws RecognitionException {
		TriggerForOptEachContext _localctx = new TriggerForOptEachContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_triggerForOptEach);
		try {
			setState(3239);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3237);
				match(EACH);
				}
				break;
			case ROW:
			case STATEMENT:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForTypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(SqlParser.STATEMENT, 0); }
		public TriggerForTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerForType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForTypeContext triggerForType() throws RecognitionException {
		TriggerForTypeContext _localctx = new TriggerForTypeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_triggerForType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_triggerWhen);
		try {
			setState(3249);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3243);
				match(WHEN);
				setState(3244);
				match(T__4);
				setState(3245);
				a_expr(0);
				setState(3246);
				match(T__5);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public TriggerFuncArgContext triggerFuncArg() {
			return getRuleContext(TriggerFuncArgContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		return triggerFuncArgs(0);
	}

	private TriggerFuncArgsContext triggerFuncArgs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, _parentState);
		TriggerFuncArgsContext _prevctx = _localctx;
		int _startState = 356;
		enterRecursionRule(_localctx, 356, RULE_triggerFuncArgs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(3252);
				triggerFuncArg();
				}
				break;
			case 2:
				{
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3261);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TriggerFuncArgsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_triggerFuncArgs);
					setState(3256);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(3257);
					match(T__3);
					setState(3258);
					triggerFuncArg();
					}
					} 
				}
				setState(3263);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_triggerFuncArg);
		try {
			setState(3268);
			switch (_input.LA(1)) {
			case ICONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3264);
				iconst();
				}
				break;
			case SCONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(3265);
				sconst();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALL:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERTION:
			case ASSIGNMENT:
			case ASYMMETRIC:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BOTH:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECK:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATE:
			case COLLATION:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CREATE:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DESC:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ELSE:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case END_P:
			case ENUM_P:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FETCH:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FOR:
			case FORCE:
			case FOREIGN:
			case FORWARD:
			case FREEZE:
			case FROM:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANT:
			case GRANTED:
			case GREATEST:
			case GROUP_P:
			case HANDLER:
			case HAVING:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case IN_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEADING:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OFFSET:
			case OIDS:
			case ON:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OR:
			case ORDER:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLACING:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIMARY:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCES:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNING:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SELECT:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYMMETRIC:
			case SYSID:
			case SYSTEM_P:
			case TABLE:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRAILING:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case USING:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARIADIC:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case WHITESPACE_P:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3266);
				colLabel();
				}
				break;
			case FCONST:
				enterOuterAlt(_localctx, 4);
				{
				setState(3267);
				match(FCONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConstrFromTableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptConstrFromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConstrFromTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptConstrFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConstrFromTableContext optConstrFromTable() throws RecognitionException {
		OptConstrFromTableContext _localctx = new OptConstrFromTableContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_optConstrFromTable);
		try {
			setState(3273);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3270);
				match(FROM);
				setState(3271);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public ConstraintAttributeElemContext constraintAttributeElem() {
			return getRuleContext(ConstraintAttributeElemContext.class,0);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		return constraintAttributeSpec(0);
	}

	private ConstraintAttributeSpecContext constraintAttributeSpec(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, _parentState);
		ConstraintAttributeSpecContext _prevctx = _localctx;
		int _startState = 362;
		enterRecursionRule(_localctx, 362, RULE_constraintAttributeSpec, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3280);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstraintAttributeSpecContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_constraintAttributeSpec);
					setState(3276);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3277);
					constraintAttributeElem();
					}
					} 
				}
				setState(3282);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_constraintAttributeElem);
		try {
			setState(3294);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3283);
				match(NOT);
				setState(3284);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3285);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3286);
				match(INITIALLY);
				setState(3287);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3288);
				match(INITIALLY);
				setState(3289);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3290);
				match(NOT);
				setState(3291);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3292);
				match(NO);
				setState(3293);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTrigStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropTrigStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropTrigStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTrigStmtContext dropTrigStmt() throws RecognitionException {
		DropTrigStmtContext _localctx = new DropTrigStmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_dropTrigStmt);
		try {
			setState(3312);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3296);
				match(DROP);
				setState(3297);
				match(TRIGGER);
				setState(3298);
				name();
				setState(3299);
				match(ON);
				setState(3300);
				any_name();
				setState(3301);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3303);
				match(DROP);
				setState(3304);
				match(TRIGGER);
				setState(3305);
				match(IF_P);
				setState(3306);
				match(EXISTS);
				setState(3307);
				name();
				setState(3308);
				match(ON);
				setState(3309);
				any_name();
				setState(3310);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAssertStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public CreateAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAssertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAssertStmtContext createAssertStmt() throws RecognitionException {
		CreateAssertStmtContext _localctx = new CreateAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_createAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			match(CREATE);
			setState(3315);
			match(ASSERTION);
			setState(3316);
			name();
			setState(3317);
			match(CHECK);
			setState(3318);
			match(T__4);
			setState(3319);
			a_expr(0);
			setState(3320);
			match(T__5);
			setState(3321);
			constraintAttributeSpec(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAssertStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropAssertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAssertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropAssertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAssertStmtContext dropAssertStmt() throws RecognitionException {
		DropAssertStmtContext _localctx = new DropAssertStmtContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_dropAssertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			match(DROP);
			setState(3324);
			match(ASSERTION);
			setState(3325);
			name();
			setState(3326);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public OptTableFuncElementListContext optTableFuncElementList() {
			return getRuleContext(OptTableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM_P() { return getToken(SqlParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public DefineStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefineStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineStmtContext defineStmt() throws RecognitionException {
		DefineStmtContext _localctx = new DefineStmtContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_defineStmt);
		try {
			setState(3415);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3328);
				match(CREATE);
				setState(3329);
				match(TYPE_P);
				setState(3330);
				any_name();
				setState(3331);
				match(AS);
				setState(3332);
				match(T__4);
				setState(3333);
				optTableFuncElementList();
				setState(3334);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				match(CREATE);
				setState(3337);
				match(TYPE_P);
				setState(3338);
				any_name();
				setState(3339);
				match(AS);
				setState(3340);
				match(ENUM_P);
				setState(3341);
				match(T__4);
				setState(3342);
				opt_enum_val_list();
				setState(3343);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3345);
				match(CREATE);
				setState(3346);
				match(AGGREGATE);
				setState(3347);
				func_name();
				setState(3348);
				aggr_args();
				setState(3349);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3351);
				match(CREATE);
				setState(3352);
				match(AGGREGATE);
				setState(3353);
				func_name();
				setState(3354);
				old_aggr_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3356);
				match(CREATE);
				setState(3357);
				match(OPERATOR);
				setState(3358);
				any_operator();
				setState(3359);
				definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3361);
				match(CREATE);
				setState(3362);
				match(TYPE_P);
				setState(3363);
				any_name();
				setState(3364);
				definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3366);
				match(CREATE);
				setState(3367);
				match(TYPE_P);
				setState(3368);
				any_name();
				setState(3369);
				match(AS);
				setState(3370);
				match(RANGE);
				setState(3371);
				definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3373);
				match(CREATE);
				setState(3374);
				match(TEXT_P);
				setState(3375);
				match(SEARCH);
				setState(3376);
				match(PARSER);
				setState(3377);
				any_name();
				setState(3378);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3380);
				match(CREATE);
				setState(3381);
				match(TEXT_P);
				setState(3382);
				match(SEARCH);
				setState(3383);
				match(DICTIONARY);
				setState(3384);
				any_name();
				setState(3385);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3387);
				match(CREATE);
				setState(3388);
				match(TEXT_P);
				setState(3389);
				match(SEARCH);
				setState(3390);
				match(TEMPLATE);
				setState(3391);
				any_name();
				setState(3392);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3394);
				match(CREATE);
				setState(3395);
				match(TEXT_P);
				setState(3396);
				match(SEARCH);
				setState(3397);
				match(CONFIGURATION);
				setState(3398);
				any_name();
				setState(3399);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3401);
				match(CREATE);
				setState(3402);
				match(COLLATION);
				setState(3403);
				any_name();
				setState(3404);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3406);
				match(CREATE);
				setState(3407);
				match(COLLATION);
				setState(3408);
				any_name();
				setState(3409);
				match(FROM);
				setState(3410);
				any_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3412);
				match(CREATE);
				setState(3413);
				match(TYPE_P);
				setState(3414);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3417);
			match(T__4);
			setState(3418);
			def_list(0);
			setState(3419);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public Def_elemContext def_elem() {
			return getRuleContext(Def_elemContext.class,0);
		}
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		return def_list(0);
	}

	private Def_listContext def_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Def_listContext _localctx = new Def_listContext(_ctx, _parentState);
		Def_listContext _prevctx = _localctx;
		int _startState = 376;
		enterRecursionRule(_localctx, 376, RULE_def_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3422);
			def_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3429);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Def_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_def_list);
					setState(3424);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3425);
					match(T__3);
					setState(3426);
					def_elem();
					}
					} 
				}
				setState(3431);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,145,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_def_elem);
		try {
			setState(3437);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3432);
				colLabel();
				setState(3433);
				match(T__1);
				setState(3434);
				def_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3436);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_def_arg);
		try {
			setState(3444);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3439);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3440);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3441);
				qual_all_Op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3442);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3443);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_aggr_args);
		try {
			setState(3453);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3446);
				match(T__4);
				setState(3447);
				match(T__6);
				setState(3448);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3449);
				match(T__4);
				setState(3450);
				type_list(0);
				setState(3451);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			match(T__4);
			setState(3456);
			old_aggr_list(0);
			setState(3457);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public Old_aggr_elemContext old_aggr_elem() {
			return getRuleContext(Old_aggr_elemContext.class,0);
		}
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		return old_aggr_list(0);
	}

	private Old_aggr_listContext old_aggr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, _parentState);
		Old_aggr_listContext _prevctx = _localctx;
		int _startState = 386;
		enterRecursionRule(_localctx, 386, RULE_old_aggr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3460);
			old_aggr_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(3467);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Old_aggr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_old_aggr_list);
					setState(3462);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3463);
					match(T__3);
					setState(3464);
					old_aggr_elem();
					}
					} 
				}
				setState(3469);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3470);
			match(IDENT);
			setState(3471);
			match(T__1);
			setState(3472);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_opt_enum_val_list);
		try {
			setState(3476);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3474);
				enum_val_list(0);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		return enum_val_list(0);
	}

	private Enum_val_listContext enum_val_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, _parentState);
		Enum_val_listContext _prevctx = _localctx;
		int _startState = 392;
		enterRecursionRule(_localctx, 392, RULE_enum_val_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3479);
			sconst();
			}
			_ctx.stop = _input.LT(-1);
			setState(3486);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Enum_val_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_enum_val_list);
					setState(3481);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3482);
					match(T__3);
					setState(3483);
					sconst();
					}
					} 
				}
				setState(3488);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterEnumStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public AlterEnumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEnumStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterEnumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEnumStmtContext alterEnumStmt() throws RecognitionException {
		AlterEnumStmtContext _localctx = new AlterEnumStmtContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_alterEnumStmt);
		try {
			setState(3514);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3489);
				match(ALTER);
				setState(3490);
				match(TYPE_P);
				setState(3491);
				any_name();
				setState(3492);
				match(ADD_P);
				setState(3493);
				match(VALUE_P);
				setState(3494);
				sconst();
				setState(3495);
				match(BEFORE);
				setState(3496);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3498);
				match(ALTER);
				setState(3499);
				match(TYPE_P);
				setState(3500);
				any_name();
				setState(3501);
				match(ADD_P);
				setState(3502);
				match(VALUE_P);
				setState(3503);
				sconst();
				setState(3504);
				match(AFTER);
				setState(3505);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3507);
				match(ALTER);
				setState(3508);
				match(TYPE_P);
				setState(3509);
				any_name();
				setState(3510);
				match(ADD_P);
				setState(3511);
				match(VALUE_P);
				setState(3512);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpClassStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpClassStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpClassStmtContext createOpClassStmt() throws RecognitionException {
		CreateOpClassStmtContext _localctx = new CreateOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_createOpClassStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3516);
			match(CREATE);
			setState(3517);
			match(OPERATOR);
			setState(3518);
			match(CLASS);
			setState(3519);
			any_name();
			setState(3520);
			opt_default();
			setState(3521);
			match(FOR);
			setState(3522);
			match(TYPE_P);
			setState(3523);
			typename();
			setState(3524);
			match(USING);
			setState(3525);
			access_method();
			setState(3526);
			opt_opfamily();
			setState(3527);
			match(AS);
			setState(3528);
			opclass_item_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public Opclass_itemContext opclass_item() {
			return getRuleContext(Opclass_itemContext.class,0);
		}
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		return opclass_item_list(0);
	}

	private Opclass_item_listContext opclass_item_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, _parentState);
		Opclass_item_listContext _prevctx = _localctx;
		int _startState = 398;
		enterRecursionRule(_localctx, 398, RULE_opclass_item_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3531);
			opclass_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(3538);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_item_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_item_list);
					setState(3533);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3534);
					match(T__3);
					setState(3535);
					opclass_item();
					}
					} 
				}
				setState(3540);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_opclass_item);
		try {
			setState(3569);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3541);
				match(FUNCTION);
				setState(3542);
				iconst();
				setState(3543);
				match(T__4);
				setState(3544);
				type_list(0);
				setState(3545);
				match(T__5);
				setState(3546);
				func_name();
				setState(3547);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3549);
				match(OPERATOR);
				setState(3550);
				iconst();
				setState(3551);
				any_operator();
				setState(3552);
				oper_argtypes();
				setState(3553);
				opclass_purpose();
				setState(3554);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3556);
				match(OPERATOR);
				setState(3557);
				iconst();
				setState(3558);
				any_operator();
				setState(3559);
				opclass_purpose();
				setState(3560);
				opt_recheck();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3562);
				match(FUNCTION);
				setState(3563);
				iconst();
				setState(3564);
				func_name();
				setState(3565);
				func_args();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3567);
				match(STORAGE);
				setState(3568);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_opt_default);
		try {
			setState(3573);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3571);
				match(DEFAULT);
				}
				break;
			case CONVERSION_P:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_opt_opfamily);
		try {
			setState(3578);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575);
				match(FAMILY);
				setState(3576);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_opclass_purpose);
		try {
			setState(3587);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3580);
				match(FOR);
				setState(3581);
				match(ORDER);
				setState(3582);
				match(BY);
				setState(3583);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3584);
				match(FOR);
				setState(3585);
				match(SEARCH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(SqlParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_opt_recheck);
		try {
			setState(3591);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3589);
				match(RECHECK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public CreateOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOpFamilyStmtContext createOpFamilyStmt() throws RecognitionException {
		CreateOpFamilyStmtContext _localctx = new CreateOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_createOpFamilyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			match(CREATE);
			setState(3594);
			match(OPERATOR);
			setState(3595);
			match(FAMILY);
			setState(3596);
			any_name();
			setState(3597);
			match(USING);
			setState(3598);
			access_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlterOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOpFamilyStmtContext alterOpFamilyStmt() throws RecognitionException {
		AlterOpFamilyStmtContext _localctx = new AlterOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_alterOpFamilyStmt);
		try {
			setState(3618);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3600);
				match(ALTER);
				setState(3601);
				match(OPERATOR);
				setState(3602);
				match(FAMILY);
				setState(3603);
				any_name();
				setState(3604);
				match(USING);
				setState(3605);
				access_method();
				setState(3606);
				match(ADD_P);
				setState(3607);
				opclass_item_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3609);
				match(ALTER);
				setState(3610);
				match(OPERATOR);
				setState(3611);
				match(FAMILY);
				setState(3612);
				any_name();
				setState(3613);
				match(USING);
				setState(3614);
				access_method();
				setState(3615);
				match(DROP);
				setState(3616);
				opclass_drop_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public Opclass_dropContext opclass_drop() {
			return getRuleContext(Opclass_dropContext.class,0);
		}
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		return opclass_drop_list(0);
	}

	private Opclass_drop_listContext opclass_drop_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, _parentState);
		Opclass_drop_listContext _prevctx = _localctx;
		int _startState = 414;
		enterRecursionRule(_localctx, 414, RULE_opclass_drop_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3621);
			opclass_drop();
			}
			_ctx.stop = _input.LT(-1);
			setState(3628);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opclass_drop_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opclass_drop_list);
					setState(3623);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3624);
					match(T__3);
					setState(3625);
					opclass_drop();
					}
					} 
				}
				setState(3630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_opclass_drop);
		try {
			setState(3643);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3631);
				match(OPERATOR);
				setState(3632);
				iconst();
				setState(3633);
				match(T__4);
				setState(3634);
				type_list(0);
				setState(3635);
				match(T__5);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3637);
				match(FUNCTION);
				setState(3638);
				iconst();
				setState(3639);
				match(T__4);
				setState(3640);
				type_list(0);
				setState(3641);
				match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpClassStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropOpClassStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpClassStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOpClassStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpClassStmtContext dropOpClassStmt() throws RecognitionException {
		DropOpClassStmtContext _localctx = new DropOpClassStmtContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_dropOpClassStmt);
		try {
			setState(3663);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3645);
				match(DROP);
				setState(3646);
				match(OPERATOR);
				setState(3647);
				match(CLASS);
				setState(3648);
				any_name();
				setState(3649);
				match(USING);
				setState(3650);
				access_method();
				setState(3651);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3653);
				match(DROP);
				setState(3654);
				match(OPERATOR);
				setState(3655);
				match(CLASS);
				setState(3656);
				match(IF_P);
				setState(3657);
				match(EXISTS);
				setState(3658);
				any_name();
				setState(3659);
				match(USING);
				setState(3660);
				access_method();
				setState(3661);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOpFamilyStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropOpFamilyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOpFamilyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOpFamilyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOpFamilyStmtContext dropOpFamilyStmt() throws RecognitionException {
		DropOpFamilyStmtContext _localctx = new DropOpFamilyStmtContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_dropOpFamilyStmt);
		try {
			setState(3683);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3665);
				match(DROP);
				setState(3666);
				match(OPERATOR);
				setState(3667);
				match(FAMILY);
				setState(3668);
				any_name();
				setState(3669);
				match(USING);
				setState(3670);
				access_method();
				setState(3671);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3673);
				match(DROP);
				setState(3674);
				match(OPERATOR);
				setState(3675);
				match(FAMILY);
				setState(3676);
				match(IF_P);
				setState(3677);
				match(EXISTS);
				setState(3678);
				any_name();
				setState(3679);
				match(USING);
				setState(3680);
				access_method();
				setState(3681);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwnedStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedStmtContext dropOwnedStmt() throws RecognitionException {
		DropOwnedStmtContext _localctx = new DropOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_dropOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			match(DROP);
			setState(3686);
			match(OWNED);
			setState(3687);
			match(BY);
			setState(3688);
			name_list(0);
			setState(3689);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignOwnedStmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(SqlParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReassignOwnedStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignOwnedStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReassignOwnedStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignOwnedStmtContext reassignOwnedStmt() throws RecognitionException {
		ReassignOwnedStmtContext _localctx = new ReassignOwnedStmtContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_reassignOwnedStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			match(REASSIGN);
			setState(3692);
			match(OWNED);
			setState(3693);
			match(BY);
			setState(3694);
			name_list(0);
			setState(3695);
			match(TO);
			setState(3696);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public DropStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStmtContext dropStmt() throws RecognitionException {
		DropStmtContext _localctx = new DropStmtContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_dropStmt);
		try {
			setState(3724);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3698);
				match(DROP);
				setState(3699);
				drop_type();
				setState(3700);
				match(IF_P);
				setState(3701);
				match(EXISTS);
				setState(3702);
				any_name_list(0);
				setState(3703);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3705);
				match(DROP);
				setState(3706);
				drop_type();
				setState(3707);
				any_name_list(0);
				setState(3708);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3710);
				match(DROP);
				setState(3711);
				match(INDEX);
				setState(3712);
				match(CONCURRENTLY);
				setState(3713);
				any_name_list(0);
				setState(3714);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3716);
				match(DROP);
				setState(3717);
				match(INDEX);
				setState(3718);
				match(CONCURRENTLY);
				setState(3719);
				match(IF_P);
				setState(3720);
				match(EXISTS);
				setState(3721);
				any_name_list(0);
				setState(3722);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_drop_type);
		try {
			setState(3750);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3726);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3727);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3728);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3729);
				match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3730);
				match(FOREIGN);
				setState(3731);
				match(TABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3732);
				match(TYPE_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3733);
				match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3734);
				match(COLLATION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3735);
				match(CONVERSION_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3736);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3737);
				match(EXTENSION);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3738);
				match(TEXT_P);
				setState(3739);
				match(SEARCH);
				setState(3740);
				match(PARSER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3741);
				match(TEXT_P);
				setState(3742);
				match(SEARCH);
				setState(3743);
				match(DICTIONARY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3744);
				match(TEXT_P);
				setState(3745);
				match(SEARCH);
				setState(3746);
				match(TEMPLATE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3747);
				match(TEXT_P);
				setState(3748);
				match(SEARCH);
				setState(3749);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		return any_name_list(0);
	}

	private Any_name_listContext any_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, _parentState);
		Any_name_listContext _prevctx = _localctx;
		int _startState = 430;
		enterRecursionRule(_localctx, 430, RULE_any_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3753);
			any_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(3760);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Any_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_any_name_list);
					setState(3755);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3756);
					match(T__3);
					setState(3757);
					any_name();
					}
					} 
				}
				setState(3762);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_any_name);
		try {
			setState(3767);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3763);
				colId();
				setState(3764);
				attrs(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3766);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 434;
		enterRecursionRule(_localctx, 434, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3770);
			match(T__2);
			setState(3771);
			attr_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(3778);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(3773);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3774);
					match(T__2);
					setState(3775);
					attr_name();
					}
					} 
				}
				setState(3780);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TruncateStmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTruncateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateStmtContext truncateStmt() throws RecognitionException {
		TruncateStmtContext _localctx = new TruncateStmtContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_truncateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			match(TRUNCATE);
			setState(3782);
			opt_table();
			setState(3783);
			relation_expr_list(0);
			setState(3784);
			opt_restart_seqs();
			setState(3785);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(SqlParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(SqlParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_opt_restart_seqs);
		try {
			setState(3792);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3787);
				match(CONTINUE_P);
				setState(3788);
				match(IDENTITY_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3789);
				match(RESTART);
				setState(3790);
				match(IDENTITY_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentStmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SqlParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(SqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SqlParser.ON, i);
		}
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public Comment_typeContext comment_type() {
			return getRuleContext(Comment_typeContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public CommentStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommentStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentStmtContext commentStmt() throws RecognitionException {
		CommentStmtContext _localctx = new CommentStmtContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_commentStmt);
		try {
			setState(3942);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3794);
				match(COMMENT);
				setState(3795);
				match(ON);
				setState(3796);
				match(CAST);
				setState(3797);
				match(T__4);
				setState(3798);
				typename();
				setState(3799);
				match(AS);
				setState(3800);
				typename();
				setState(3801);
				match(T__5);
				setState(3802);
				match(IS);
				setState(3803);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3805);
				match(COMMENT);
				setState(3806);
				match(ON);
				setState(3807);
				comment_type();
				setState(3808);
				any_name();
				setState(3809);
				match(IS);
				setState(3810);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3812);
				match(COMMENT);
				setState(3813);
				match(ON);
				setState(3814);
				match(AGGREGATE);
				setState(3815);
				func_name();
				setState(3816);
				aggr_args();
				setState(3817);
				match(IS);
				setState(3818);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3820);
				match(COMMENT);
				setState(3821);
				match(ON);
				setState(3822);
				match(FUNCTION);
				setState(3823);
				func_name();
				setState(3824);
				func_args();
				setState(3825);
				match(IS);
				setState(3826);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3828);
				match(COMMENT);
				setState(3829);
				match(ON);
				setState(3830);
				match(OPERATOR);
				setState(3831);
				any_operator();
				setState(3832);
				oper_argtypes();
				setState(3833);
				match(IS);
				setState(3834);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3836);
				match(COMMENT);
				setState(3837);
				match(ON);
				setState(3838);
				match(CONSTRAINT);
				setState(3839);
				name();
				setState(3840);
				match(ON);
				setState(3841);
				any_name();
				setState(3842);
				match(IS);
				setState(3843);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3845);
				match(COMMENT);
				setState(3846);
				match(ON);
				setState(3847);
				match(RULE);
				setState(3848);
				name();
				setState(3849);
				match(ON);
				setState(3850);
				any_name();
				setState(3851);
				match(IS);
				setState(3852);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3854);
				match(COMMENT);
				setState(3855);
				match(ON);
				setState(3856);
				match(TRIGGER);
				setState(3857);
				name();
				setState(3858);
				match(ON);
				setState(3859);
				any_name();
				setState(3860);
				match(IS);
				setState(3861);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3863);
				match(COMMENT);
				setState(3864);
				match(ON);
				setState(3865);
				match(OPERATOR);
				setState(3866);
				match(CLASS);
				setState(3867);
				any_name();
				setState(3868);
				match(USING);
				setState(3869);
				access_method();
				setState(3870);
				match(IS);
				setState(3871);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3873);
				match(COMMENT);
				setState(3874);
				match(ON);
				setState(3875);
				match(OPERATOR);
				setState(3876);
				match(FAMILY);
				setState(3877);
				any_name();
				setState(3878);
				match(USING);
				setState(3879);
				access_method();
				setState(3880);
				match(IS);
				setState(3881);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3883);
				match(COMMENT);
				setState(3884);
				match(ON);
				setState(3885);
				opt_procedural();
				setState(3886);
				match(LANGUAGE);
				setState(3887);
				any_name();
				setState(3888);
				match(IS);
				setState(3889);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3891);
				match(COMMENT);
				setState(3892);
				match(ON);
				setState(3893);
				match(RULE);
				setState(3894);
				name();
				setState(3895);
				match(IS);
				setState(3896);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3898);
				match(COMMENT);
				setState(3899);
				match(ON);
				setState(3900);
				match(LARGE_P);
				setState(3901);
				match(OBJECT_P);
				setState(3902);
				numericOnly();
				setState(3903);
				match(IS);
				setState(3904);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3906);
				match(COMMENT);
				setState(3907);
				match(ON);
				setState(3908);
				match(TEXT_P);
				setState(3909);
				match(SEARCH);
				setState(3910);
				match(PARSER);
				setState(3911);
				any_name();
				setState(3912);
				match(IS);
				setState(3913);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3915);
				match(COMMENT);
				setState(3916);
				match(ON);
				setState(3917);
				match(TEXT_P);
				setState(3918);
				match(SEARCH);
				setState(3919);
				match(DICTIONARY);
				setState(3920);
				any_name();
				setState(3921);
				match(IS);
				setState(3922);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3924);
				match(COMMENT);
				setState(3925);
				match(ON);
				setState(3926);
				match(TEXT_P);
				setState(3927);
				match(SEARCH);
				setState(3928);
				match(TEMPLATE);
				setState(3929);
				any_name();
				setState(3930);
				match(IS);
				setState(3931);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3933);
				match(COMMENT);
				setState(3934);
				match(ON);
				setState(3935);
				match(TEXT_P);
				setState(3936);
				match(SEARCH);
				setState(3937);
				match(CONFIGURATION);
				setState(3938);
				any_name();
				setState(3939);
				match(IS);
				setState(3940);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_typeContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public Comment_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitComment_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_typeContext comment_type() throws RecognitionException {
		Comment_typeContext _localctx = new Comment_typeContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_comment_type);
		try {
			setState(3964);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3944);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3945);
				match(DATABASE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3946);
				match(SCHEMA);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3947);
				match(INDEX);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3948);
				match(SEQUENCE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3949);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3950);
				match(DOMAIN_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3951);
				match(TYPE_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3952);
				match(VIEW);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3953);
				match(COLLATION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3954);
				match(CONVERSION_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3955);
				match(TABLESPACE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3956);
				match(EXTENSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3957);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3958);
				match(FOREIGN);
				setState(3959);
				match(TABLE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3960);
				match(SERVER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3961);
				match(FOREIGN);
				setState(3962);
				match(DATA_P);
				setState(3963);
				match(WRAPPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_comment_text);
		try {
			setState(3968);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3966);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3967);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(SqlParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Security_label_typeContext security_label_type() {
			return getRuleContext(Security_label_typeContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public SecLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_secLabelStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecLabelStmtContext secLabelStmt() throws RecognitionException {
		SecLabelStmtContext _localctx = new SecLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_secLabelStmt);
		try {
			setState(4019);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3970);
				match(SECURITY);
				setState(3971);
				match(LABEL);
				setState(3972);
				opt_provider();
				setState(3973);
				match(ON);
				setState(3974);
				security_label_type();
				setState(3975);
				any_name();
				setState(3976);
				match(IS);
				setState(3977);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3979);
				match(SECURITY);
				setState(3980);
				match(LABEL);
				setState(3981);
				opt_provider();
				setState(3982);
				match(ON);
				setState(3983);
				match(AGGREGATE);
				setState(3984);
				func_name();
				setState(3985);
				aggr_args();
				setState(3986);
				match(IS);
				setState(3987);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3989);
				match(SECURITY);
				setState(3990);
				match(LABEL);
				setState(3991);
				opt_provider();
				setState(3992);
				match(ON);
				setState(3993);
				match(FUNCTION);
				setState(3994);
				func_name();
				setState(3995);
				func_args();
				setState(3996);
				match(IS);
				setState(3997);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3999);
				match(SECURITY);
				setState(4000);
				match(LABEL);
				setState(4001);
				opt_provider();
				setState(4002);
				match(ON);
				setState(4003);
				opt_procedural();
				setState(4004);
				match(LANGUAGE);
				setState(4005);
				any_name();
				setState(4006);
				match(IS);
				setState(4007);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4009);
				match(SECURITY);
				setState(4010);
				match(LABEL);
				setState(4011);
				opt_provider();
				setState(4012);
				match(ON);
				setState(4013);
				match(LARGE_P);
				setState(4014);
				match(OBJECT_P);
				setState(4015);
				numericOnly();
				setState(4016);
				match(IS);
				setState(4017);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_opt_provider);
		try {
			setState(4024);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4021);
				match(FOR);
				setState(4022);
				colId_or_Sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_label_typeContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public Security_label_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecurity_label_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_typeContext security_label_type() throws RecognitionException {
		Security_label_typeContext _localctx = new Security_label_typeContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_security_label_type);
		try {
			setState(4038);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4026);
				match(COLUMN);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4027);
				match(DATABASE);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4028);
				match(FOREIGN);
				setState(4029);
				match(TABLE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 4);
				{
				setState(4030);
				match(SCHEMA);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4031);
				match(SEQUENCE);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4032);
				match(TABLE);
				}
				break;
			case DOMAIN_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(4033);
				match(DOMAIN_P);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4034);
				match(ROLE);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4035);
				match(TABLESPACE);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(4036);
				match(TYPE_P);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 11);
				{
				setState(4037);
				match(VIEW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_security_label);
		try {
			setState(4042);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4040);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4041);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchStmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(SqlParser.MOVE, 0); }
		public FetchStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFetchStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchStmtContext fetchStmt() throws RecognitionException {
		FetchStmtContext _localctx = new FetchStmtContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_fetchStmt);
		try {
			setState(4048);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				match(FETCH);
				setState(4045);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4046);
				match(MOVE);
				setState(4047);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(SqlParser.ABSOLUTE_P, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(SqlParser.RELATIVE_P, 0); }
		public TerminalNode FORWARD() { return getToken(SqlParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(SqlParser.BACKWARD, 0); }
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(SqlParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(SqlParser.LAST_P, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_fetch_args);
		try {
			setState(4116);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4050);
				match(ABSOLUTE_P);
				setState(4051);
				signedIconst();
				setState(4052);
				opt_from_in();
				setState(4053);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4055);
				match(RELATIVE_P);
				setState(4056);
				signedIconst();
				setState(4057);
				opt_from_in();
				setState(4058);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4060);
				signedIconst();
				setState(4061);
				opt_from_in();
				setState(4062);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4064);
				match(FORWARD);
				setState(4065);
				signedIconst();
				setState(4066);
				opt_from_in();
				setState(4067);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4069);
				match(BACKWARD);
				setState(4070);
				signedIconst();
				setState(4071);
				opt_from_in();
				setState(4072);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4074);
				from_in();
				setState(4075);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4077);
				match(NEXT);
				setState(4078);
				opt_from_in();
				setState(4079);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4081);
				match(PRIOR);
				setState(4082);
				opt_from_in();
				setState(4083);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4085);
				match(FIRST_P);
				setState(4086);
				opt_from_in();
				setState(4087);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4089);
				match(LAST_P);
				setState(4090);
				opt_from_in();
				setState(4091);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4093);
				match(ALL);
				setState(4094);
				opt_from_in();
				setState(4095);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4097);
				match(FORWARD);
				setState(4098);
				opt_from_in();
				setState(4099);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4101);
				match(FORWARD);
				setState(4102);
				match(ALL);
				setState(4103);
				opt_from_in();
				setState(4104);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4106);
				match(BACKWARD);
				setState(4107);
				opt_from_in();
				setState(4108);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4110);
				match(BACKWARD);
				setState(4111);
				match(ALL);
				setState(4112);
				opt_from_in();
				setState(4113);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4115);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4118);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_opt_from_in);
		try {
			setState(4122);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4120);
				from_in();
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStmtContext grantStmt() throws RecognitionException {
		GrantStmtContext _localctx = new GrantStmtContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_grantStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4124);
			match(GRANT);
			setState(4125);
			privileges();
			setState(4126);
			match(ON);
			setState(4127);
			privilege_target();
			setState(4128);
			match(TO);
			setState(4129);
			grantee_list(0);
			setState(4130);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public RevokeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRevokeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStmtContext revokeStmt() throws RecognitionException {
		RevokeStmtContext _localctx = new RevokeStmtContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_revokeStmt);
		try {
			setState(4151);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4132);
				match(REVOKE);
				setState(4133);
				privileges();
				setState(4134);
				match(ON);
				setState(4135);
				privilege_target();
				setState(4136);
				match(FROM);
				setState(4137);
				grantee_list(0);
				setState(4138);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4140);
				match(REVOKE);
				setState(4141);
				match(GRANT);
				setState(4142);
				match(OPTION);
				setState(4143);
				match(FOR);
				setState(4144);
				privileges();
				setState(4145);
				match(ON);
				setState(4146);
				privilege_target();
				setState(4147);
				match(FROM);
				setState(4148);
				grantee_list(0);
				setState(4149);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_privileges);
		try {
			setState(4168);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4153);
				match(ALL);
				setState(4154);
				match(T__4);
				setState(4155);
				columnList(0);
				setState(4156);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4158);
				match(ALL);
				setState(4159);
				match(PRIVILEGES);
				setState(4160);
				match(T__4);
				setState(4161);
				columnList(0);
				setState(4162);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4164);
				privilege_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4165);
				match(ALL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4166);
				match(ALL);
				setState(4167);
				match(PRIVILEGES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		return privilege_list(0);
	}

	private Privilege_listContext privilege_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, _parentState);
		Privilege_listContext _prevctx = _localctx;
		int _startState = 468;
		enterRecursionRule(_localctx, 468, RULE_privilege_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4171);
			privilege();
			}
			_ctx.stop = _input.LT(-1);
			setState(4178);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Privilege_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_privilege_list);
					setState(4173);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4174);
					match(T__3);
					setState(4175);
					privilege();
					}
					} 
				}
				setState(4180);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_privilege);
		try {
			setState(4190);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4181);
				colId();
				setState(4182);
				opt_column_list();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4184);
				match(SELECT);
				setState(4185);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4186);
				match(REFERENCES);
				setState(4187);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4188);
				match(CREATE);
				setState(4189);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public NumericOnly_listContext numericOnly_list() {
			return getRuleContext(NumericOnly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_privilege_target);
		try {
			setState(4236);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4192);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4193);
				match(TABLE);
				setState(4194);
				qualified_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4195);
				match(SEQUENCE);
				setState(4196);
				qualified_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4197);
				match(FOREIGN);
				setState(4198);
				match(DATA_P);
				setState(4199);
				match(WRAPPER);
				setState(4200);
				name_list(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4201);
				match(FOREIGN);
				setState(4202);
				match(SERVER);
				setState(4203);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4204);
				match(FUNCTION);
				setState(4205);
				function_with_argtypes_list(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4206);
				match(DATABASE);
				setState(4207);
				name_list(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4208);
				match(DOMAIN_P);
				setState(4209);
				any_name_list(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4210);
				match(LANGUAGE);
				setState(4211);
				name_list(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4212);
				match(LARGE_P);
				setState(4213);
				match(OBJECT_P);
				setState(4214);
				numericOnly_list(0);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4215);
				match(SCHEMA);
				setState(4216);
				name_list(0);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4217);
				match(TABLESPACE);
				setState(4218);
				name_list(0);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4219);
				match(TYPE_P);
				setState(4220);
				any_name_list(0);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4221);
				match(ALL);
				setState(4222);
				match(TABLES);
				setState(4223);
				match(IN_P);
				setState(4224);
				match(SCHEMA);
				setState(4225);
				name_list(0);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4226);
				match(ALL);
				setState(4227);
				match(SEQUENCES);
				setState(4228);
				match(IN_P);
				setState(4229);
				match(SCHEMA);
				setState(4230);
				name_list(0);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4231);
				match(ALL);
				setState(4232);
				match(FUNCTIONS);
				setState(4233);
				match(IN_P);
				setState(4234);
				match(SCHEMA);
				setState(4235);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public GranteeContext grantee() {
			return getRuleContext(GranteeContext.class,0);
		}
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		return grantee_list(0);
	}

	private Grantee_listContext grantee_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, _parentState);
		Grantee_listContext _prevctx = _localctx;
		int _startState = 474;
		enterRecursionRule(_localctx, 474, RULE_grantee_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4239);
			grantee();
			}
			_ctx.stop = _input.LT(-1);
			setState(4246);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Grantee_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_grantee_list);
					setState(4241);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4242);
					match(T__3);
					setState(4243);
					grantee();
					}
					} 
				}
				setState(4248);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_grantee);
		try {
			setState(4252);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4249);
				roleId();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4250);
				match(GROUP_P);
				setState(4251);
				roleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_opt_grant_grant_option);
		try {
			setState(4258);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4254);
				match(WITH);
				setState(4255);
				match(GRANT);
				setState(4256);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		return function_with_argtypes_list(0);
	}

	private Function_with_argtypes_listContext function_with_argtypes_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, _parentState);
		Function_with_argtypes_listContext _prevctx = _localctx;
		int _startState = 480;
		enterRecursionRule(_localctx, 480, RULE_function_with_argtypes_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4261);
			function_with_argtypes();
			}
			_ctx.stop = _input.LT(-1);
			setState(4268);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_with_argtypes_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_function_with_argtypes_list);
					setState(4263);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4264);
					match(T__3);
					setState(4265);
					function_with_argtypes();
					}
					} 
				}
				setState(4270);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_function_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4271);
			func_name();
			setState(4272);
			func_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantRoleStmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGrantRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantRoleStmtContext grantRoleStmt() throws RecognitionException {
		GrantRoleStmtContext _localctx = new GrantRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_grantRoleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4274);
			match(GRANT);
			setState(4275);
			privilege_list(0);
			setState(4276);
			match(TO);
			setState(4277);
			name_list(0);
			setState(4278);
			opt_grant_admin_option();
			setState(4279);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeRoleStmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public RevokeRoleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRoleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRevokeRoleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeRoleStmtContext revokeRoleStmt() throws RecognitionException {
		RevokeRoleStmtContext _localctx = new RevokeRoleStmtContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_revokeRoleStmt);
		try {
			setState(4298);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4281);
				match(REVOKE);
				setState(4282);
				privilege_list(0);
				setState(4283);
				match(FROM);
				setState(4284);
				name_list(0);
				setState(4285);
				opt_granted_by();
				setState(4286);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4288);
				match(REVOKE);
				setState(4289);
				match(ADMIN);
				setState(4290);
				match(OPTION);
				setState(4291);
				match(FOR);
				setState(4292);
				privilege_list(0);
				setState(4293);
				match(FROM);
				setState(4294);
				name_list(0);
				setState(4295);
				opt_granted_by();
				setState(4296);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_grant_admin_option);
		try {
			setState(4304);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4300);
				match(WITH);
				setState(4301);
				match(ADMIN);
				setState(4302);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(SqlParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_opt_granted_by);
		try {
			setState(4310);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4306);
				match(GRANTED);
				setState(4307);
				match(BY);
				setState(4308);
				roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public AlterDefaultPrivilegesStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivilegesStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDefaultPrivilegesStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesStmtContext alterDefaultPrivilegesStmt() throws RecognitionException {
		AlterDefaultPrivilegesStmtContext _localctx = new AlterDefaultPrivilegesStmtContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_alterDefaultPrivilegesStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4312);
			match(ALTER);
			setState(4313);
			match(DEFAULT);
			setState(4314);
			match(PRIVILEGES);
			setState(4315);
			defACLOptionList(0);
			setState(4316);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public DefACLOptionContext defACLOption() {
			return getRuleContext(DefACLOptionContext.class,0);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		return defACLOptionList(0);
	}

	private DefACLOptionListContext defACLOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, _parentState);
		DefACLOptionListContext _prevctx = _localctx;
		int _startState = 494;
		enterRecursionRule(_localctx, 494, RULE_defACLOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4323);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefACLOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_defACLOptionList);
					setState(4319);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4320);
					defACLOption();
					}
					} 
				}
				setState(4325);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_defACLOption);
		try {
			setState(4335);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4326);
				match(IN_P);
				setState(4327);
				match(SCHEMA);
				setState(4328);
				name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4329);
				match(FOR);
				setState(4330);
				match(ROLE);
				setState(4331);
				name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4332);
				match(FOR);
				setState(4333);
				match(USER);
				setState(4334);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_defACLAction);
		try {
			setState(4364);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4337);
				match(GRANT);
				setState(4338);
				privileges();
				setState(4339);
				match(ON);
				setState(4340);
				defacl_privilege_target();
				setState(4341);
				match(TO);
				setState(4342);
				grantee_list(0);
				setState(4343);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4345);
				match(REVOKE);
				setState(4346);
				privileges();
				setState(4347);
				match(ON);
				setState(4348);
				defacl_privilege_target();
				setState(4349);
				match(FROM);
				setState(4350);
				grantee_list(0);
				setState(4351);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4353);
				match(REVOKE);
				setState(4354);
				match(GRANT);
				setState(4355);
				match(OPTION);
				setState(4356);
				match(FOR);
				setState(4357);
				privileges();
				setState(4358);
				match(ON);
				setState(4359);
				defacl_privilege_target();
				setState(4360);
				match(FROM);
				setState(4361);
				grantee_list(0);
				setState(4362);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(SqlParser.TYPES_P, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4366);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (SEQUENCES - 322)) | (1L << (TABLES - 322)) | (1L << (TYPES_P - 322)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OptTableSpaceContext optTableSpace() {
			return getRuleContext(OptTableSpaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public IndexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexStmtContext indexStmt() throws RecognitionException {
		IndexStmtContext _localctx = new IndexStmtContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_indexStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(CREATE);
			setState(4369);
			opt_unique();
			setState(4370);
			match(INDEX);
			setState(4371);
			opt_concurrently();
			setState(4372);
			opt_index_name();
			setState(4373);
			match(ON);
			setState(4374);
			qualified_name();
			setState(4375);
			access_method_clause();
			setState(4376);
			match(T__4);
			setState(4377);
			index_params(0);
			setState(4378);
			match(T__5);
			setState(4379);
			opt_reloptions();
			setState(4380);
			optTableSpace();
			setState(4381);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_opt_unique);
		try {
			setState(4385);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4383);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_opt_concurrently);
		try {
			setState(4389);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4387);
				match(CONCURRENTLY);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ON:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_opt_index_name);
		try {
			setState(4393);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4391);
				index_name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_access_method_clause);
		try {
			setState(4398);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4395);
				match(USING);
				setState(4396);
				access_method();
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		return index_params(0);
	}

	private Index_paramsContext index_params(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, _parentState);
		Index_paramsContext _prevctx = _localctx;
		int _startState = 512;
		enterRecursionRule(_localctx, 512, RULE_index_params, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4401);
			index_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(4408);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,199,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Index_paramsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_index_params);
					setState(4403);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4404);
					match(T__3);
					setState(4405);
					index_elem();
					}
					} 
				}
				setState(4410);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,199,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_index_elem);
		try {
			setState(4431);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4411);
				match(T__4);
				setState(4412);
				a_expr(0);
				setState(4413);
				match(T__5);
				setState(4414);
				opt_collate();
				setState(4415);
				opt_class();
				setState(4416);
				opt_asc_desc();
				setState(4417);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4419);
				colId();
				setState(4420);
				opt_collate();
				setState(4421);
				opt_class();
				setState(4422);
				opt_asc_desc();
				setState(4423);
				opt_nulls_order();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4425);
				func_expr();
				setState(4426);
				opt_collate();
				setState(4427);
				opt_class();
				setState(4428);
				opt_asc_desc();
				setState(4429);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_opt_collate);
		try {
			setState(4436);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4433);
				match(COLLATE);
				setState(4434);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_opt_class);
		try {
			setState(4442);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4438);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4439);
				match(USING);
				setState(4440);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(SqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_opt_asc_desc);
		try {
			setState(4447);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4444);
				match(ASC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4445);
				match(DESC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_FIRST() { return getToken(SqlParser.NULLS_FIRST, 0); }
		public TerminalNode NULLS_LAST() { return getToken(SqlParser.NULLS_LAST, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_opt_nulls_order);
		try {
			setState(4452);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4449);
				match(NULLS_FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4450);
				match(NULLS_LAST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public CreateFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStmtContext createFunctionStmt() throws RecognitionException {
		CreateFunctionStmtContext _localctx = new CreateFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_createFunctionStmt);
		try {
			setState(4485);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4454);
				match(CREATE);
				setState(4455);
				opt_or_replace();
				setState(4456);
				match(FUNCTION);
				setState(4457);
				func_name();
				setState(4458);
				func_args_with_defaults();
				setState(4459);
				match(RETURNS);
				setState(4460);
				match(TABLE);
				setState(4461);
				match(T__4);
				setState(4462);
				table_func_column_list(0);
				setState(4463);
				match(T__5);
				setState(4464);
				createfunc_opt_list(0);
				setState(4465);
				opt_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4467);
				match(CREATE);
				setState(4468);
				opt_or_replace();
				setState(4469);
				match(FUNCTION);
				setState(4470);
				func_name();
				setState(4471);
				func_args_with_defaults();
				setState(4472);
				match(RETURNS);
				setState(4473);
				func_return();
				setState(4474);
				createfunc_opt_list(0);
				setState(4475);
				opt_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4477);
				match(CREATE);
				setState(4478);
				opt_or_replace();
				setState(4479);
				match(FUNCTION);
				setState(4480);
				func_name();
				setState(4481);
				func_args_with_defaults();
				setState(4482);
				createfunc_opt_list(0);
				setState(4483);
				opt_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_opt_or_replace);
		try {
			setState(4490);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4487);
				match(OR);
				setState(4488);
				match(REPLACE);
				}
				break;
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case RULE:
			case TRUSTED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_func_args);
		try {
			setState(4498);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4492);
				match(T__4);
				setState(4493);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4494);
				match(T__4);
				setState(4495);
				func_args_list(0);
				setState(4496);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		return func_args_list(0);
	}

	private Func_args_listContext func_args_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, _parentState);
		Func_args_listContext _prevctx = _localctx;
		int _startState = 530;
		enterRecursionRule(_localctx, 530, RULE_func_args_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4501);
			func_arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(4508);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_list);
					setState(4503);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4504);
					match(T__3);
					setState(4505);
					func_arg();
					}
					} 
				}
				setState(4510);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_func_args_with_defaults);
		try {
			setState(4517);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4511);
				match(T__4);
				setState(4512);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4513);
				match(T__4);
				setState(4514);
				func_args_with_defaults_list(0);
				setState(4515);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public Func_arg_with_defaultContext func_arg_with_default() {
			return getRuleContext(Func_arg_with_defaultContext.class,0);
		}
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		return func_args_with_defaults_list(0);
	}

	private Func_args_with_defaults_listContext func_args_with_defaults_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, _parentState);
		Func_args_with_defaults_listContext _prevctx = _localctx;
		int _startState = 534;
		enterRecursionRule(_localctx, 534, RULE_func_args_with_defaults_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4520);
			func_arg_with_default();
			}
			_ctx.stop = _input.LT(-1);
			setState(4527);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_args_with_defaults_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_args_with_defaults_list);
					setState(4522);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4523);
					match(T__3);
					setState(4524);
					func_arg_with_default();
					}
					} 
				}
				setState(4529);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_func_arg);
		try {
			setState(4545);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4530);
				arg_class();
				setState(4531);
				param_name();
				setState(4532);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4534);
				param_name();
				setState(4535);
				arg_class();
				setState(4536);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4538);
				param_name();
				setState(4539);
				func_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4541);
				arg_class();
				setState(4542);
				func_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4544);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(SqlParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_arg_class);
		try {
			setState(4553);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4547);
				match(IN_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4548);
				match(OUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4549);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4550);
				match(IN_P);
				setState(4551);
				match(OUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4552);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4557);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_func_type);
		try {
			setState(4571);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4559);
				type_function_name();
				setState(4560);
				attrs(0);
				setState(4561);
				match(T__8);
				setState(4562);
				match(TYPE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4564);
				match(SETOF);
				setState(4565);
				type_function_name();
				setState(4566);
				attrs(0);
				setState(4567);
				match(T__8);
				setState(4568);
				match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4570);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_func_arg_with_default);
		try {
			setState(4582);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4573);
				func_arg();
				setState(4574);
				match(T__1);
				setState(4575);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4577);
				func_arg();
				setState(4578);
				match(DEFAULT);
				setState(4579);
				a_expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4581);
				func_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public Createfunc_opt_itemContext createfunc_opt_item() {
			return getRuleContext(Createfunc_opt_itemContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		return createfunc_opt_list(0);
	}

	private Createfunc_opt_listContext createfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, _parentState);
		Createfunc_opt_listContext _prevctx = _localctx;
		int _startState = 548;
		enterRecursionRule(_localctx, 548, RULE_createfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4585);
			createfunc_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4591);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createfunc_opt_list);
					setState(4587);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4588);
					createfunc_opt_item();
					}
					} 
				}
				setState(4593);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(SqlParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(SqlParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(SqlParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(SqlParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(SqlParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(SqlParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SqlParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(SqlParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(SqlParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(SqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(SqlParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SqlParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_common_func_opt_item);
		try {
			setState(4625);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4594);
				match(COST);
				setState(4595);
				numericOnly();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4596);
				match(ROWS);
				setState(4597);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4598);
				functionSetResetClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4599);
				match(CALLED);
				setState(4600);
				match(ON);
				setState(4601);
				match(NULL_P);
				setState(4602);
				match(INPUT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4603);
				match(RETURNS);
				setState(4604);
				match(NULL_P);
				setState(4605);
				match(ON);
				setState(4606);
				match(NULL_P);
				setState(4607);
				match(INPUT_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4608);
				match(STRICT_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4609);
				match(IMMUTABLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4610);
				match(STABLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4611);
				match(VOLATILE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4612);
				match(EXTERNAL);
				setState(4613);
				match(SECURITY);
				setState(4614);
				match(DEFINER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4615);
				match(EXTERNAL);
				setState(4616);
				match(SECURITY);
				setState(4617);
				match(INVOKER);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4618);
				match(SECURITY);
				setState(4619);
				match(DEFINER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4620);
				match(SECURITY);
				setState(4621);
				match(INVOKER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4622);
				match(LEAKPROOF);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4623);
				match(NOT);
				setState(4624);
				match(LEAKPROOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_createfunc_opt_item);
		try {
			setState(4633);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4627);
				match(AS);
				setState(4628);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4629);
				match(LANGUAGE);
				setState(4630);
				colId_or_Sconst();
				}
				break;
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case NOT:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4631);
				common_func_opt_item();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(4632);
				match(WINDOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_func_as);
		try {
			setState(4640);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4635);
				sconst();
				setState(4636);
				match(T__3);
				setState(4637);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4639);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_opt_definition);
		try {
			setState(4645);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4642);
				match(WITH);
				setState(4643);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4647);
			param_name();
			setState(4648);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public Table_func_columnContext table_func_column() {
			return getRuleContext(Table_func_columnContext.class,0);
		}
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		return table_func_column_list(0);
	}

	private Table_func_column_listContext table_func_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, _parentState);
		Table_func_column_listContext _prevctx = _localctx;
		int _startState = 560;
		enterRecursionRule(_localctx, 560, RULE_table_func_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4651);
			table_func_column();
			}
			_ctx.stop = _input.LT(-1);
			setState(4658);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Table_func_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_table_func_column_list);
					setState(4653);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4654);
					match(T__3);
					setState(4655);
					table_func_column();
					}
					} 
				}
				setState(4660);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AlterFunctionStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public AlterFunctionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterFunctionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStmtContext alterFunctionStmt() throws RecognitionException {
		AlterFunctionStmtContext _localctx = new AlterFunctionStmtContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_alterFunctionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			match(ALTER);
			setState(4662);
			match(FUNCTION);
			setState(4663);
			function_with_argtypes();
			setState(4664);
			alterfunc_opt_list(0);
			setState(4665);
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		return alterfunc_opt_list(0);
	}

	private Alterfunc_opt_listContext alterfunc_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, _parentState);
		Alterfunc_opt_listContext _prevctx = _localctx;
		int _startState = 564;
		enterRecursionRule(_localctx, 564, RULE_alterfunc_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4668);
			common_func_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4674);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterfunc_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterfunc_opt_list);
					setState(4670);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4671);
					common_func_opt_item();
					}
					} 
				}
				setState(4676);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_opt_restrict);
		try {
			setState(4679);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4677);
				match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveFuncStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public RemoveFuncStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeFuncStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveFuncStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveFuncStmtContext removeFuncStmt() throws RecognitionException {
		RemoveFuncStmtContext _localctx = new RemoveFuncStmtContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_removeFuncStmt);
		try {
			setState(4695);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4681);
				match(DROP);
				setState(4682);
				match(FUNCTION);
				setState(4683);
				func_name();
				setState(4684);
				func_args();
				setState(4685);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4687);
				match(DROP);
				setState(4688);
				match(FUNCTION);
				setState(4689);
				match(IF_P);
				setState(4690);
				match(EXISTS);
				setState(4691);
				func_name();
				setState(4692);
				func_args();
				setState(4693);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveAggrStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public RemoveAggrStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeAggrStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveAggrStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveAggrStmtContext removeAggrStmt() throws RecognitionException {
		RemoveAggrStmtContext _localctx = new RemoveAggrStmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_removeAggrStmt);
		try {
			setState(4711);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4697);
				match(DROP);
				setState(4698);
				match(AGGREGATE);
				setState(4699);
				func_name();
				setState(4700);
				aggr_args();
				setState(4701);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4703);
				match(DROP);
				setState(4704);
				match(AGGREGATE);
				setState(4705);
				match(IF_P);
				setState(4706);
				match(EXISTS);
				setState(4707);
				func_name();
				setState(4708);
				aggr_args();
				setState(4709);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveOperStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public RemoveOperStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeOperStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRemoveOperStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveOperStmtContext removeOperStmt() throws RecognitionException {
		RemoveOperStmtContext _localctx = new RemoveOperStmtContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_removeOperStmt);
		try {
			setState(4727);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4713);
				match(DROP);
				setState(4714);
				match(OPERATOR);
				setState(4715);
				any_operator();
				setState(4716);
				oper_argtypes();
				setState(4717);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4719);
				match(DROP);
				setState(4720);
				match(OPERATOR);
				setState(4721);
				match(IF_P);
				setState(4722);
				match(EXISTS);
				setState(4723);
				any_operator();
				setState(4724);
				oper_argtypes();
				setState(4725);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SqlParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_oper_argtypes);
		try {
			setState(4751);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4729);
				match(T__4);
				setState(4730);
				typename();
				setState(4731);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4733);
				match(T__4);
				setState(4734);
				match(NONE);
				setState(4735);
				match(T__3);
				setState(4736);
				typename();
				setState(4737);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4739);
				match(T__4);
				setState(4740);
				typename();
				setState(4741);
				match(T__3);
				setState(4742);
				match(NONE);
				setState(4743);
				match(T__5);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4745);
				match(T__4);
				setState(4746);
				typename();
				setState(4747);
				match(T__3);
				setState(4748);
				typename();
				setState(4749);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_any_operator);
		try {
			setState(4758);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4753);
				colId();
				setState(4754);
				match(T__2);
				setState(4755);
				any_operator();
				}
				break;
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(4757);
				all_Op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DoStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDoStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStmtContext doStmt() throws RecognitionException {
		DoStmtContext _localctx = new DoStmtContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_doStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			match(DO);
			setState(4761);
			dostmt_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public Dostmt_opt_itemContext dostmt_opt_item() {
			return getRuleContext(Dostmt_opt_itemContext.class,0);
		}
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		return dostmt_opt_list(0);
	}

	private Dostmt_opt_listContext dostmt_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, _parentState);
		Dostmt_opt_listContext _prevctx = _localctx;
		int _startState = 580;
		enterRecursionRule(_localctx, 580, RULE_dostmt_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4764);
			dostmt_opt_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(4770);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dostmt_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_dostmt_opt_list);
					setState(4766);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4767);
					dostmt_opt_item();
					}
					} 
				}
				setState(4772);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public ColId_or_SconstContext colId_or_Sconst() {
			return getRuleContext(ColId_or_SconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_dostmt_opt_item);
		try {
			setState(4776);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4773);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4774);
				match(LANGUAGE);
				setState(4775);
				colId_or_Sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public CreateCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCastStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastStmtContext createCastStmt() throws RecognitionException {
		CreateCastStmtContext _localctx = new CreateCastStmtContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_createCastStmt);
		try {
			setState(4812);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4778);
				match(CREATE);
				setState(4779);
				match(CAST);
				setState(4780);
				match(T__4);
				setState(4781);
				typename();
				setState(4782);
				match(AS);
				setState(4783);
				typename();
				setState(4784);
				match(T__5);
				setState(4785);
				match(WITH);
				setState(4786);
				match(FUNCTION);
				setState(4787);
				function_with_argtypes();
				setState(4788);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4790);
				match(CREATE);
				setState(4791);
				match(CAST);
				setState(4792);
				match(T__4);
				setState(4793);
				typename();
				setState(4794);
				match(AS);
				setState(4795);
				typename();
				setState(4796);
				match(T__5);
				setState(4797);
				match(WITHOUT);
				setState(4798);
				match(FUNCTION);
				setState(4799);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4801);
				match(CREATE);
				setState(4802);
				match(CAST);
				setState(4803);
				match(T__4);
				setState(4804);
				typename();
				setState(4805);
				match(AS);
				setState(4806);
				typename();
				setState(4807);
				match(T__5);
				setState(4808);
				match(WITH);
				setState(4809);
				match(INOUT);
				setState(4810);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(SqlParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(SqlParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_cast_context);
		try {
			setState(4819);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4814);
				match(AS);
				setState(4815);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4816);
				match(AS);
				setState(4817);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropCastStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCastStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropCastStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastStmtContext dropCastStmt() throws RecognitionException {
		DropCastStmtContext _localctx = new DropCastStmtContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_dropCastStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4821);
			match(DROP);
			setState(4822);
			match(CAST);
			setState(4823);
			opt_if_exists();
			setState(4824);
			match(T__4);
			setState(4825);
			typename();
			setState(4826);
			match(AS);
			setState(4827);
			typename();
			setState(4828);
			match(T__5);
			setState(4829);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_opt_if_exists);
		try {
			setState(4834);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4831);
				match(IF_P);
				setState(4832);
				match(EXISTS);
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexStmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(SqlParser.REINDEX, 0); }
		public Reindex_typeContext reindex_type() {
			return getRuleContext(Reindex_typeContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_forceContext opt_force() {
			return getRuleContext(Opt_forceContext.class,0);
		}
		public TerminalNode SYSTEM_P() { return getToken(SqlParser.SYSTEM_P, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public ReindexStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReindexStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexStmtContext reindexStmt() throws RecognitionException {
		ReindexStmtContext _localctx = new ReindexStmtContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_reindexStmt);
		try {
			setState(4851);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4836);
				match(REINDEX);
				setState(4837);
				reindex_type();
				setState(4838);
				qualified_name();
				setState(4839);
				opt_force();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4841);
				match(REINDEX);
				setState(4842);
				match(SYSTEM_P);
				setState(4843);
				name();
				setState(4844);
				opt_force();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4846);
				match(REINDEX);
				setState(4847);
				match(DATABASE);
				setState(4848);
				name();
				setState(4849);
				opt_force();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Reindex_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReindex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_typeContext reindex_type() throws RecognitionException {
		Reindex_typeContext _localctx = new Reindex_typeContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_reindex_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4853);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_forceContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public Opt_forceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_force; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_force(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_forceContext opt_force() throws RecognitionException {
		Opt_forceContext _localctx = new Opt_forceContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_opt_force);
		try {
			setState(4857);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4855);
				match(FORCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SqlParser.RENAME, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public List<Database_nameContext> database_name() {
			return getRuleContexts(Database_nameContext.class);
		}
		public Database_nameContext database_name(int i) {
			return getRuleContext(Database_nameContext.class,i);
		}
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public List<RoleIdContext> roleId() {
			return getRuleContexts(RoleIdContext.class);
		}
		public RoleIdContext roleId(int i) {
			return getRuleContext(RoleIdContext.class,i);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public RenameStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRenameStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameStmtContext renameStmt() throws RecognitionException {
		RenameStmtContext _localctx = new RenameStmtContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_renameStmt);
		try {
			setState(5197);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4859);
				match(ALTER);
				setState(4860);
				match(TABLE);
				setState(4861);
				relation_expr();
				setState(4862);
				match(RENAME);
				setState(4863);
				opt_column();
				setState(4864);
				name();
				setState(4865);
				match(TO);
				setState(4866);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4868);
				match(ALTER);
				setState(4869);
				match(TABLE);
				setState(4870);
				match(IF_P);
				setState(4871);
				match(EXISTS);
				setState(4872);
				relation_expr();
				setState(4873);
				match(RENAME);
				setState(4874);
				opt_column();
				setState(4875);
				name();
				setState(4876);
				match(TO);
				setState(4877);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4879);
				match(ALTER);
				setState(4880);
				match(FOREIGN);
				setState(4881);
				match(TABLE);
				setState(4882);
				relation_expr();
				setState(4883);
				match(RENAME);
				setState(4884);
				opt_column();
				setState(4885);
				name();
				setState(4886);
				match(TO);
				setState(4887);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4889);
				match(ALTER);
				setState(4890);
				match(FOREIGN);
				setState(4891);
				match(TABLE);
				setState(4892);
				match(IF_P);
				setState(4893);
				match(EXISTS);
				setState(4894);
				relation_expr();
				setState(4895);
				match(RENAME);
				setState(4896);
				opt_column();
				setState(4897);
				name();
				setState(4898);
				match(TO);
				setState(4899);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4901);
				match(ALTER);
				setState(4902);
				match(TYPE_P);
				setState(4903);
				any_name();
				setState(4904);
				match(RENAME);
				setState(4905);
				match(ATTRIBUTE);
				setState(4906);
				name();
				setState(4907);
				match(TO);
				setState(4908);
				name();
				setState(4909);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4911);
				match(ALTER);
				setState(4912);
				match(AGGREGATE);
				setState(4913);
				func_name();
				setState(4914);
				aggr_args();
				setState(4915);
				match(RENAME);
				setState(4916);
				match(TO);
				setState(4917);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4919);
				match(ALTER);
				setState(4920);
				match(DOMAIN_P);
				setState(4921);
				any_name();
				setState(4922);
				match(RENAME);
				setState(4923);
				match(CONSTRAINT);
				setState(4924);
				name();
				setState(4925);
				match(TO);
				setState(4926);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4928);
				match(ALTER);
				setState(4929);
				opt_procedural();
				setState(4930);
				match(LANGUAGE);
				setState(4931);
				name();
				setState(4932);
				match(RENAME);
				setState(4933);
				match(TO);
				setState(4934);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4936);
				match(ALTER);
				setState(4937);
				match(OPERATOR);
				setState(4938);
				match(CLASS);
				setState(4939);
				any_name();
				setState(4940);
				match(USING);
				setState(4941);
				access_method();
				setState(4942);
				match(RENAME);
				setState(4943);
				match(TO);
				setState(4944);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4946);
				match(ALTER);
				setState(4947);
				match(OPERATOR);
				setState(4948);
				match(FAMILY);
				setState(4949);
				any_name();
				setState(4950);
				match(USING);
				setState(4951);
				access_method();
				setState(4952);
				match(RENAME);
				setState(4953);
				match(TO);
				setState(4954);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4956);
				match(ALTER);
				setState(4957);
				match(TABLE);
				setState(4958);
				relation_expr();
				setState(4959);
				match(RENAME);
				setState(4960);
				match(CONSTRAINT);
				setState(4961);
				name();
				setState(4962);
				match(TO);
				setState(4963);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4965);
				match(ALTER);
				setState(4966);
				match(TRIGGER);
				setState(4967);
				name();
				setState(4968);
				match(ON);
				setState(4969);
				qualified_name();
				setState(4970);
				match(RENAME);
				setState(4971);
				match(TO);
				setState(4972);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4974);
				match(ALTER);
				setState(4975);
				match(COLLATION);
				setState(4976);
				any_name();
				setState(4977);
				match(RENAME);
				setState(4978);
				match(TO);
				setState(4979);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4981);
				match(ALTER);
				setState(4982);
				match(CONVERSION_P);
				setState(4983);
				any_name();
				setState(4984);
				match(RENAME);
				setState(4985);
				match(TO);
				setState(4986);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4988);
				match(ALTER);
				setState(4989);
				match(DATABASE);
				setState(4990);
				database_name();
				setState(4991);
				match(RENAME);
				setState(4992);
				match(TO);
				setState(4993);
				database_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4995);
				match(ALTER);
				setState(4996);
				match(DOMAIN_P);
				setState(4997);
				any_name();
				setState(4998);
				match(RENAME);
				setState(4999);
				match(TO);
				setState(5000);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5002);
				match(ALTER);
				setState(5003);
				match(FOREIGN);
				setState(5004);
				match(DATA_P);
				setState(5005);
				match(WRAPPER);
				setState(5006);
				name();
				setState(5007);
				match(RENAME);
				setState(5008);
				match(TO);
				setState(5009);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5011);
				match(ALTER);
				setState(5012);
				match(FUNCTION);
				setState(5013);
				function_with_argtypes();
				setState(5014);
				match(RENAME);
				setState(5015);
				match(TO);
				setState(5016);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5018);
				match(ALTER);
				setState(5019);
				match(GROUP_P);
				setState(5020);
				roleId();
				setState(5021);
				match(RENAME);
				setState(5022);
				match(TO);
				setState(5023);
				roleId();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5025);
				match(ALTER);
				setState(5026);
				match(SCHEMA);
				setState(5027);
				name();
				setState(5028);
				match(RENAME);
				setState(5029);
				match(TO);
				setState(5030);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5032);
				match(ALTER);
				setState(5033);
				match(SERVER);
				setState(5034);
				name();
				setState(5035);
				match(RENAME);
				setState(5036);
				match(TO);
				setState(5037);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5039);
				match(ALTER);
				setState(5040);
				match(TABLE);
				setState(5041);
				relation_expr();
				setState(5042);
				match(RENAME);
				setState(5043);
				match(TO);
				setState(5044);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5046);
				match(ALTER);
				setState(5047);
				match(TABLE);
				setState(5048);
				match(IF_P);
				setState(5049);
				match(EXISTS);
				setState(5050);
				relation_expr();
				setState(5051);
				match(RENAME);
				setState(5052);
				match(TO);
				setState(5053);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5055);
				match(ALTER);
				setState(5056);
				match(SEQUENCE);
				setState(5057);
				qualified_name();
				setState(5058);
				match(RENAME);
				setState(5059);
				match(TO);
				setState(5060);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5062);
				match(ALTER);
				setState(5063);
				match(SEQUENCE);
				setState(5064);
				match(IF_P);
				setState(5065);
				match(EXISTS);
				setState(5066);
				qualified_name();
				setState(5067);
				match(RENAME);
				setState(5068);
				match(TO);
				setState(5069);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5071);
				match(ALTER);
				setState(5072);
				match(VIEW);
				setState(5073);
				qualified_name();
				setState(5074);
				match(RENAME);
				setState(5075);
				match(TO);
				setState(5076);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5078);
				match(ALTER);
				setState(5079);
				match(VIEW);
				setState(5080);
				match(IF_P);
				setState(5081);
				match(EXISTS);
				setState(5082);
				qualified_name();
				setState(5083);
				match(RENAME);
				setState(5084);
				match(TO);
				setState(5085);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5087);
				match(ALTER);
				setState(5088);
				match(INDEX);
				setState(5089);
				qualified_name();
				setState(5090);
				match(RENAME);
				setState(5091);
				match(TO);
				setState(5092);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5094);
				match(ALTER);
				setState(5095);
				match(INDEX);
				setState(5096);
				match(IF_P);
				setState(5097);
				match(EXISTS);
				setState(5098);
				qualified_name();
				setState(5099);
				match(RENAME);
				setState(5100);
				match(TO);
				setState(5101);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5103);
				match(ALTER);
				setState(5104);
				match(FOREIGN);
				setState(5105);
				match(TABLE);
				setState(5106);
				relation_expr();
				setState(5107);
				match(RENAME);
				setState(5108);
				match(TO);
				setState(5109);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5111);
				match(ALTER);
				setState(5112);
				match(FOREIGN);
				setState(5113);
				match(TABLE);
				setState(5114);
				match(IF_P);
				setState(5115);
				match(EXISTS);
				setState(5116);
				relation_expr();
				setState(5117);
				match(RENAME);
				setState(5118);
				match(TO);
				setState(5119);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5121);
				match(ALTER);
				setState(5122);
				match(ROLE);
				setState(5123);
				roleId();
				setState(5124);
				match(RENAME);
				setState(5125);
				match(TO);
				setState(5126);
				roleId();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5128);
				match(ALTER);
				setState(5129);
				match(USER);
				setState(5130);
				roleId();
				setState(5131);
				match(RENAME);
				setState(5132);
				match(TO);
				setState(5133);
				roleId();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5135);
				match(ALTER);
				setState(5136);
				match(TABLESPACE);
				setState(5137);
				name();
				setState(5138);
				match(RENAME);
				setState(5139);
				match(TO);
				setState(5140);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5142);
				match(ALTER);
				setState(5143);
				match(TABLESPACE);
				setState(5144);
				name();
				setState(5145);
				match(SET);
				setState(5146);
				reloptions();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5148);
				match(ALTER);
				setState(5149);
				match(TABLESPACE);
				setState(5150);
				name();
				setState(5151);
				match(RESET);
				setState(5152);
				reloptions();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5154);
				match(ALTER);
				setState(5155);
				match(TEXT_P);
				setState(5156);
				match(SEARCH);
				setState(5157);
				match(PARSER);
				setState(5158);
				any_name();
				setState(5159);
				match(RENAME);
				setState(5160);
				match(TO);
				setState(5161);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5163);
				match(ALTER);
				setState(5164);
				match(TEXT_P);
				setState(5165);
				match(SEARCH);
				setState(5166);
				match(DICTIONARY);
				setState(5167);
				any_name();
				setState(5168);
				match(RENAME);
				setState(5169);
				match(TO);
				setState(5170);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5172);
				match(ALTER);
				setState(5173);
				match(TEXT_P);
				setState(5174);
				match(SEARCH);
				setState(5175);
				match(TEMPLATE);
				setState(5176);
				any_name();
				setState(5177);
				match(RENAME);
				setState(5178);
				match(TO);
				setState(5179);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5181);
				match(ALTER);
				setState(5182);
				match(TEXT_P);
				setState(5183);
				match(SEARCH);
				setState(5184);
				match(CONFIGURATION);
				setState(5185);
				any_name();
				setState(5186);
				match(RENAME);
				setState(5187);
				match(TO);
				setState(5188);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5190);
				match(ALTER);
				setState(5191);
				match(TYPE_P);
				setState(5192);
				any_name();
				setState(5193);
				match(RENAME);
				setState(5194);
				match(TO);
				setState(5195);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_opt_column);
		try {
			setState(5201);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5199);
				match(COLUMN);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_opt_set_data);
		try {
			setState(5206);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(5203);
				match(SET);
				setState(5204);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterObjectSchemaStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public AlterObjectSchemaStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterObjectSchemaStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterObjectSchemaStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterObjectSchemaStmtContext alterObjectSchemaStmt() throws RecognitionException {
		AlterObjectSchemaStmtContext _localctx = new AlterObjectSchemaStmtContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_alterObjectSchemaStmt);
		try {
			setState(5388);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5208);
				match(ALTER);
				setState(5209);
				match(AGGREGATE);
				setState(5210);
				func_name();
				setState(5211);
				aggr_args();
				setState(5212);
				match(SET);
				setState(5213);
				match(SCHEMA);
				setState(5214);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5216);
				match(ALTER);
				setState(5217);
				match(OPERATOR);
				setState(5218);
				any_operator();
				setState(5219);
				oper_argtypes();
				setState(5220);
				match(SET);
				setState(5221);
				match(SCHEMA);
				setState(5222);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5224);
				match(ALTER);
				setState(5225);
				match(OPERATOR);
				setState(5226);
				match(CLASS);
				setState(5227);
				any_name();
				setState(5228);
				match(USING);
				setState(5229);
				access_method();
				setState(5230);
				match(SET);
				setState(5231);
				match(SCHEMA);
				setState(5232);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5234);
				match(ALTER);
				setState(5235);
				match(OPERATOR);
				setState(5236);
				match(FAMILY);
				setState(5237);
				any_name();
				setState(5238);
				match(USING);
				setState(5239);
				access_method();
				setState(5240);
				match(SET);
				setState(5241);
				match(SCHEMA);
				setState(5242);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5244);
				match(ALTER);
				setState(5245);
				match(COLLATION);
				setState(5246);
				any_name();
				setState(5247);
				match(SET);
				setState(5248);
				match(SCHEMA);
				setState(5249);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5251);
				match(ALTER);
				setState(5252);
				match(CONVERSION_P);
				setState(5253);
				any_name();
				setState(5254);
				match(SET);
				setState(5255);
				match(SCHEMA);
				setState(5256);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5258);
				match(ALTER);
				setState(5259);
				match(DOMAIN_P);
				setState(5260);
				any_name();
				setState(5261);
				match(SET);
				setState(5262);
				match(SCHEMA);
				setState(5263);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5265);
				match(ALTER);
				setState(5266);
				match(EXTENSION);
				setState(5267);
				any_name();
				setState(5268);
				match(SET);
				setState(5269);
				match(SCHEMA);
				setState(5270);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5272);
				match(ALTER);
				setState(5273);
				match(FUNCTION);
				setState(5274);
				function_with_argtypes();
				setState(5275);
				match(SET);
				setState(5276);
				match(SCHEMA);
				setState(5277);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5279);
				match(ALTER);
				setState(5280);
				match(TABLE);
				setState(5281);
				relation_expr();
				setState(5282);
				match(SET);
				setState(5283);
				match(SCHEMA);
				setState(5284);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5286);
				match(ALTER);
				setState(5287);
				match(TABLE);
				setState(5288);
				match(IF_P);
				setState(5289);
				match(EXISTS);
				setState(5290);
				relation_expr();
				setState(5291);
				match(SET);
				setState(5292);
				match(SCHEMA);
				setState(5293);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5295);
				match(ALTER);
				setState(5296);
				match(TEXT_P);
				setState(5297);
				match(SEARCH);
				setState(5298);
				match(PARSER);
				setState(5299);
				any_name();
				setState(5300);
				match(SET);
				setState(5301);
				match(SCHEMA);
				setState(5302);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5304);
				match(ALTER);
				setState(5305);
				match(TEXT_P);
				setState(5306);
				match(SEARCH);
				setState(5307);
				match(DICTIONARY);
				setState(5308);
				any_name();
				setState(5309);
				match(SET);
				setState(5310);
				match(SCHEMA);
				setState(5311);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5313);
				match(ALTER);
				setState(5314);
				match(TEXT_P);
				setState(5315);
				match(SEARCH);
				setState(5316);
				match(TEMPLATE);
				setState(5317);
				any_name();
				setState(5318);
				match(SET);
				setState(5319);
				match(SCHEMA);
				setState(5320);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5322);
				match(ALTER);
				setState(5323);
				match(TEXT_P);
				setState(5324);
				match(SEARCH);
				setState(5325);
				match(CONFIGURATION);
				setState(5326);
				any_name();
				setState(5327);
				match(SET);
				setState(5328);
				match(SCHEMA);
				setState(5329);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5331);
				match(ALTER);
				setState(5332);
				match(SEQUENCE);
				setState(5333);
				qualified_name();
				setState(5334);
				match(SET);
				setState(5335);
				match(SCHEMA);
				setState(5336);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5338);
				match(ALTER);
				setState(5339);
				match(SEQUENCE);
				setState(5340);
				match(IF_P);
				setState(5341);
				match(EXISTS);
				setState(5342);
				qualified_name();
				setState(5343);
				match(SET);
				setState(5344);
				match(SCHEMA);
				setState(5345);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5347);
				match(ALTER);
				setState(5348);
				match(VIEW);
				setState(5349);
				qualified_name();
				setState(5350);
				match(SET);
				setState(5351);
				match(SCHEMA);
				setState(5352);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5354);
				match(ALTER);
				setState(5355);
				match(VIEW);
				setState(5356);
				match(IF_P);
				setState(5357);
				match(EXISTS);
				setState(5358);
				qualified_name();
				setState(5359);
				match(SET);
				setState(5360);
				match(SCHEMA);
				setState(5361);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5363);
				match(ALTER);
				setState(5364);
				match(FOREIGN);
				setState(5365);
				match(TABLE);
				setState(5366);
				relation_expr();
				setState(5367);
				match(SET);
				setState(5368);
				match(SCHEMA);
				setState(5369);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5371);
				match(ALTER);
				setState(5372);
				match(FOREIGN);
				setState(5373);
				match(TABLE);
				setState(5374);
				match(IF_P);
				setState(5375);
				match(EXISTS);
				setState(5376);
				relation_expr();
				setState(5377);
				match(SET);
				setState(5378);
				match(SCHEMA);
				setState(5379);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5381);
				match(ALTER);
				setState(5382);
				match(TYPE_P);
				setState(5383);
				any_name();
				setState(5384);
				match(SET);
				setState(5385);
				match(SCHEMA);
				setState(5386);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOwnerStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public RoleIdContext roleId() {
			return getRuleContext(RoleIdContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Access_methodContext access_method() {
			return getRuleContext(Access_methodContext.class,0);
		}
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(SqlParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public AlterOwnerStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOwnerStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterOwnerStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOwnerStmtContext alterOwnerStmt() throws RecognitionException {
		AlterOwnerStmtContext _localctx = new AlterOwnerStmtContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_alterOwnerStmt);
		try {
			setState(5532);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5390);
				match(ALTER);
				setState(5391);
				match(AGGREGATE);
				setState(5392);
				func_name();
				setState(5393);
				aggr_args();
				setState(5394);
				match(OWNER);
				setState(5395);
				match(TO);
				setState(5396);
				roleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5398);
				match(ALTER);
				setState(5399);
				opt_procedural();
				setState(5400);
				match(LANGUAGE);
				setState(5401);
				name();
				setState(5402);
				match(OWNER);
				setState(5403);
				match(TO);
				setState(5404);
				roleId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5406);
				match(ALTER);
				setState(5407);
				match(OPERATOR);
				setState(5408);
				any_operator();
				setState(5409);
				oper_argtypes();
				setState(5410);
				match(OWNER);
				setState(5411);
				match(TO);
				setState(5412);
				roleId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5414);
				match(ALTER);
				setState(5415);
				match(OPERATOR);
				setState(5416);
				match(CLASS);
				setState(5417);
				any_name();
				setState(5418);
				match(USING);
				setState(5419);
				access_method();
				setState(5420);
				match(OWNER);
				setState(5421);
				match(TO);
				setState(5422);
				roleId();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5424);
				match(ALTER);
				setState(5425);
				match(OPERATOR);
				setState(5426);
				match(FAMILY);
				setState(5427);
				any_name();
				setState(5428);
				match(USING);
				setState(5429);
				access_method();
				setState(5430);
				match(OWNER);
				setState(5431);
				match(TO);
				setState(5432);
				roleId();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5434);
				match(ALTER);
				setState(5435);
				match(COLLATION);
				setState(5436);
				any_name();
				setState(5437);
				match(OWNER);
				setState(5438);
				match(TO);
				setState(5439);
				roleId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5441);
				match(ALTER);
				setState(5442);
				match(CONVERSION_P);
				setState(5443);
				any_name();
				setState(5444);
				match(OWNER);
				setState(5445);
				match(TO);
				setState(5446);
				roleId();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5448);
				match(ALTER);
				setState(5449);
				match(DATABASE);
				setState(5450);
				database_name();
				setState(5451);
				match(OWNER);
				setState(5452);
				match(TO);
				setState(5453);
				roleId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5455);
				match(ALTER);
				setState(5456);
				match(DOMAIN_P);
				setState(5457);
				any_name();
				setState(5458);
				match(OWNER);
				setState(5459);
				match(TO);
				setState(5460);
				roleId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5462);
				match(ALTER);
				setState(5463);
				match(FUNCTION);
				setState(5464);
				function_with_argtypes();
				setState(5465);
				match(OWNER);
				setState(5466);
				match(TO);
				setState(5467);
				roleId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5469);
				match(ALTER);
				setState(5470);
				match(LARGE_P);
				setState(5471);
				match(OBJECT_P);
				setState(5472);
				numericOnly();
				setState(5473);
				match(OWNER);
				setState(5474);
				match(TO);
				setState(5475);
				roleId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5477);
				match(ALTER);
				setState(5478);
				match(SCHEMA);
				setState(5479);
				name();
				setState(5480);
				match(OWNER);
				setState(5481);
				match(TO);
				setState(5482);
				roleId();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5484);
				match(ALTER);
				setState(5485);
				match(TYPE_P);
				setState(5486);
				any_name();
				setState(5487);
				match(OWNER);
				setState(5488);
				match(TO);
				setState(5489);
				roleId();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5491);
				match(ALTER);
				setState(5492);
				match(TABLESPACE);
				setState(5493);
				name();
				setState(5494);
				match(OWNER);
				setState(5495);
				match(TO);
				setState(5496);
				roleId();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5498);
				match(ALTER);
				setState(5499);
				match(TEXT_P);
				setState(5500);
				match(SEARCH);
				setState(5501);
				match(DICTIONARY);
				setState(5502);
				any_name();
				setState(5503);
				match(OWNER);
				setState(5504);
				match(TO);
				setState(5505);
				roleId();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5507);
				match(ALTER);
				setState(5508);
				match(TEXT_P);
				setState(5509);
				match(SEARCH);
				setState(5510);
				match(CONFIGURATION);
				setState(5511);
				any_name();
				setState(5512);
				match(OWNER);
				setState(5513);
				match(TO);
				setState(5514);
				roleId();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5516);
				match(ALTER);
				setState(5517);
				match(FOREIGN);
				setState(5518);
				match(DATA_P);
				setState(5519);
				match(WRAPPER);
				setState(5520);
				name();
				setState(5521);
				match(OWNER);
				setState(5522);
				match(TO);
				setState(5523);
				roleId();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5525);
				match(ALTER);
				setState(5526);
				match(SERVER);
				setState(5527);
				name();
				setState(5528);
				match(OWNER);
				setState(5529);
				match(TO);
				setState(5530);
				roleId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleStmtContext ruleStmt() throws RecognitionException {
		RuleStmtContext _localctx = new RuleStmtContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_ruleStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5534);
			match(CREATE);
			setState(5535);
			opt_or_replace();
			setState(5536);
			match(RULE);
			setState(5537);
			name();
			setState(5538);
			match(AS);
			setState(5539);
			match(ON);
			setState(5540);
			event();
			setState(5541);
			match(TO);
			setState(5542);
			qualified_name();
			setState(5543);
			where_clause();
			setState(5544);
			match(DO);
			setState(5545);
			opt_instead();
			setState(5546);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(SqlParser.NOTHING, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_ruleActionList);
		try {
			setState(5554);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				match(T__4);
				setState(5549);
				ruleActionMulti(0);
				setState(5550);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5552);
				ruleActionStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5553);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() {
			return getRuleContext(RuleActionStmtOrEmptyContext.class,0);
		}
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		return ruleActionMulti(0);
	}

	private RuleActionMultiContext ruleActionMulti(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, _parentState);
		RuleActionMultiContext _prevctx = _localctx;
		int _startState = 612;
		enterRecursionRule(_localctx, 612, RULE_ruleActionMulti, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5557);
			ruleActionStmtOrEmpty();
			}
			_ctx.stop = _input.LT(-1);
			setState(5564);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RuleActionMultiContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ruleActionMulti);
					setState(5559);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5560);
					match(T__0);
					setState(5561);
					ruleActionStmtOrEmpty();
					}
					} 
				}
				setState(5566);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_ruleActionStmt);
		try {
			setState(5572);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5567);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5568);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5569);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5570);
				deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5571);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtOrEmptyContext extends ParserRuleContext {
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public RuleActionStmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmtOrEmpty; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRuleActionStmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtOrEmptyContext ruleActionStmtOrEmpty() throws RecognitionException {
		RuleActionStmtOrEmptyContext _localctx = new RuleActionStmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_ruleActionStmtOrEmpty);
		try {
			setState(5576);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5574);
				ruleActionStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5578);
			_la = _input.LA(1);
			if ( !(_la==DELETE_P || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(SqlParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_opt_instead);
		try {
			setState(5583);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5580);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(5581);
				match(ALSO);
				}
				break;
			case T__4:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case SELECT:
			case TABLE:
			case UPDATE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropRuleStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRuleStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropRuleStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleStmtContext dropRuleStmt() throws RecognitionException {
		DropRuleStmtContext _localctx = new DropRuleStmtContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_dropRuleStmt);
		try {
			setState(5601);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5585);
				match(DROP);
				setState(5586);
				match(RULE);
				setState(5587);
				name();
				setState(5588);
				match(ON);
				setState(5589);
				any_name();
				setState(5590);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5592);
				match(DROP);
				setState(5593);
				match(RULE);
				setState(5594);
				match(IF_P);
				setState(5595);
				match(EXISTS);
				setState(5596);
				name();
				setState(5597);
				match(ON);
				setState(5598);
				any_name();
				setState(5599);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(SqlParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_notifyStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			match(NOTIFY);
			setState(5604);
			colId();
			setState(5605);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_notify_payload);
		try {
			setState(5610);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5607);
				match(T__3);
				setState(5608);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenStmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(SqlParser.LISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ListenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitListenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenStmtContext listenStmt() throws RecognitionException {
		ListenStmtContext _localctx = new ListenStmtContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_listenStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5612);
			match(LISTEN);
			setState(5613);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenStmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(SqlParser.UNLISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public UnlistenStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUnlistenStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenStmtContext unlistenStmt() throws RecognitionException {
		UnlistenStmtContext _localctx = new UnlistenStmtContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_unlistenStmt);
		try {
			setState(5619);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5615);
				match(UNLISTEN);
				setState(5616);
				match(T__6);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5617);
				match(UNLISTEN);
				setState(5618);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStmtContext extends ParserRuleContext {
		public TerminalNode BEGIN_P() { return getToken(SqlParser.BEGIN_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode ROLLBACK() { return getToken(SqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SqlParser.SAVEPOINT, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ABORT_P() { return getToken(SqlParser.ABORT_P, 0); }
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public TerminalNode RELEASE() { return getToken(SqlParser.RELEASE, 0); }
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(SqlParser.PREPARED, 0); }
		public TransactionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransactionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStmtContext transactionStmt() throws RecognitionException {
		TransactionStmtContext _localctx = new TransactionStmtContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_transactionStmt);
		try {
			setState(5663);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5621);
				match(BEGIN_P);
				setState(5622);
				opt_transaction();
				setState(5623);
				transaction_mode_list_or_empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5625);
				match(ROLLBACK);
				setState(5626);
				opt_transaction();
				setState(5627);
				match(TO);
				setState(5628);
				match(SAVEPOINT);
				setState(5629);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5631);
				match(ROLLBACK);
				setState(5632);
				opt_transaction();
				setState(5633);
				match(TO);
				setState(5634);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5636);
				match(ABORT_P);
				setState(5637);
				opt_transaction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5638);
				match(START);
				setState(5639);
				match(TRANSACTION);
				setState(5640);
				transaction_mode_list_or_empty();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5641);
				match(COMMIT);
				setState(5642);
				opt_transaction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5643);
				match(END_P);
				setState(5644);
				opt_transaction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5645);
				match(ROLLBACK);
				setState(5646);
				opt_transaction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5647);
				match(SAVEPOINT);
				setState(5648);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5649);
				match(RELEASE);
				setState(5650);
				match(SAVEPOINT);
				setState(5651);
				colId();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5652);
				match(RELEASE);
				setState(5653);
				colId();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5654);
				match(PREPARE);
				setState(5655);
				match(TRANSACTION);
				setState(5656);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5657);
				match(COMMIT);
				setState(5658);
				match(PREPARED);
				setState(5659);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5660);
				match(ROLLBACK);
				setState(5661);
				match(PREPARED);
				setState(5662);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(SqlParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_opt_transaction);
		try {
			setState(5668);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5665);
				match(WORK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5666);
				match(TRANSACTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(SqlParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_transaction_mode_item);
		try {
			setState(5680);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5670);
				match(ISOLATION);
				setState(5671);
				match(LEVEL);
				setState(5672);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5673);
				match(READ);
				setState(5674);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5675);
				match(READ);
				setState(5676);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5677);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5678);
				match(NOT);
				setState(5679);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public Transaction_mode_itemContext transaction_mode_item() {
			return getRuleContext(Transaction_mode_itemContext.class,0);
		}
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		return transaction_mode_list(0);
	}

	private Transaction_mode_listContext transaction_mode_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, _parentState);
		Transaction_mode_listContext _prevctx = _localctx;
		int _startState = 638;
		enterRecursionRule(_localctx, 638, RULE_transaction_mode_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5683);
			transaction_mode_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(5692);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5690);
					switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
					case 1:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(5685);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5686);
						match(T__3);
						setState(5687);
						transaction_mode_item();
						}
						break;
					case 2:
						{
						_localctx = new Transaction_mode_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_transaction_mode_list);
						setState(5688);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5689);
						transaction_mode_item();
						}
						break;
					}
					} 
				}
				setState(5694);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_transaction_mode_list_or_empty);
		try {
			setState(5697);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5695);
				transaction_mode_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public ViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewStmtContext viewStmt() throws RecognitionException {
		ViewStmtContext _localctx = new ViewStmtContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_viewStmt);
		try {
			setState(5721);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5699);
				match(CREATE);
				setState(5700);
				optTemp();
				setState(5701);
				match(VIEW);
				setState(5702);
				qualified_name();
				setState(5703);
				opt_column_list();
				setState(5704);
				opt_reloptions();
				setState(5705);
				match(AS);
				setState(5706);
				selectStmt();
				setState(5707);
				opt_check_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5709);
				match(CREATE);
				setState(5710);
				match(OR);
				setState(5711);
				match(REPLACE);
				setState(5712);
				optTemp();
				setState(5713);
				match(VIEW);
				setState(5714);
				qualified_name();
				setState(5715);
				opt_column_list();
				setState(5716);
				opt_reloptions();
				setState(5717);
				match(AS);
				setState(5718);
				selectStmt();
				setState(5719);
				opt_check_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(SqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_opt_check_option);
		try {
			setState(5735);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5723);
				match(WITH);
				setState(5724);
				match(CHECK);
				setState(5725);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5726);
				match(WITH);
				setState(5727);
				match(CASCADED);
				setState(5728);
				match(CHECK);
				setState(5729);
				match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5730);
				match(WITH);
				setState(5731);
				match(LOCAL);
				setState(5732);
				match(CHECK);
				setState(5733);
				match(OPTION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(SqlParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLoadStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStmtContext loadStmt() throws RecognitionException {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_loadStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5737);
			match(LOAD);
			setState(5738);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbStmtContext createdbStmt() throws RecognitionException {
		CreatedbStmtContext _localctx = new CreatedbStmtContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_createdbStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5740);
			match(CREATE);
			setState(5741);
			match(DATABASE);
			setState(5742);
			database_name();
			setState(5743);
			opt_with();
			setState(5744);
			createdb_opt_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public Createdb_opt_itemContext createdb_opt_item() {
			return getRuleContext(Createdb_opt_itemContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		return createdb_opt_list(0);
	}

	private Createdb_opt_listContext createdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, _parentState);
		Createdb_opt_listContext _prevctx = _localctx;
		int _startState = 650;
		enterRecursionRule(_localctx, 650, RULE_createdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5751);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Createdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_createdb_opt_list);
					setState(5747);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5748);
					createdb_opt_item();
					}
					} 
				}
				setState(5753);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode LC_COLLATE_P() { return getToken(SqlParser.LC_COLLATE_P, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(SqlParser.LC_CTYPE_P, 0); }
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_createdb_opt_item);
		try {
			setState(5819);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5754);
				match(TABLESPACE);
				setState(5755);
				opt_equal();
				setState(5756);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5758);
				match(LOCATION);
				setState(5759);
				opt_equal();
				setState(5760);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5762);
				match(TEMPLATE);
				setState(5763);
				opt_equal();
				setState(5764);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5766);
				match(ENCODING);
				setState(5767);
				opt_equal();
				setState(5768);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5770);
				match(ENCODING);
				setState(5771);
				opt_equal();
				setState(5772);
				iconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5774);
				match(LC_COLLATE_P);
				setState(5775);
				opt_equal();
				setState(5776);
				sconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5778);
				match(LC_CTYPE_P);
				setState(5779);
				opt_equal();
				setState(5780);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5782);
				match(CONNECTION);
				setState(5783);
				match(LIMIT);
				setState(5784);
				opt_equal();
				setState(5785);
				signedIconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5787);
				match(OWNER);
				setState(5788);
				opt_equal();
				setState(5789);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5791);
				match(TABLESPACE);
				setState(5792);
				opt_equal();
				setState(5793);
				match(DEFAULT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5795);
				match(LOCATION);
				setState(5796);
				opt_equal();
				setState(5797);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5799);
				match(TEMPLATE);
				setState(5800);
				opt_equal();
				setState(5801);
				match(DEFAULT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5803);
				match(ENCODING);
				setState(5804);
				opt_equal();
				setState(5805);
				match(DEFAULT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5807);
				match(LC_COLLATE_P);
				setState(5808);
				opt_equal();
				setState(5809);
				match(DEFAULT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5811);
				match(LC_CTYPE_P);
				setState(5812);
				opt_equal();
				setState(5813);
				match(DEFAULT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5815);
				match(OWNER);
				setState(5816);
				opt_equal();
				setState(5817);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_opt_equal);
		try {
			setState(5823);
			switch (_input.LA(1)) {
			case T__1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5821);
				match(T__1);
				}
				break;
			case T__7:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
			case ICONST:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterDatabaseStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDatabaseStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStmtContext alterDatabaseStmt() throws RecognitionException {
		AlterDatabaseStmtContext _localctx = new AlterDatabaseStmtContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_alterDatabaseStmt);
		try {
			setState(5838);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5825);
				match(ALTER);
				setState(5826);
				match(DATABASE);
				setState(5827);
				database_name();
				setState(5828);
				opt_with();
				setState(5829);
				alterdb_opt_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5831);
				match(ALTER);
				setState(5832);
				match(DATABASE);
				setState(5833);
				database_name();
				setState(5834);
				match(SET);
				setState(5835);
				match(TABLESPACE);
				setState(5836);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseSetStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseSetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSetStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDatabaseSetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSetStmtContext alterDatabaseSetStmt() throws RecognitionException {
		AlterDatabaseSetStmtContext _localctx = new AlterDatabaseSetStmtContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_alterDatabaseSetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5840);
			match(ALTER);
			setState(5841);
			match(DATABASE);
			setState(5842);
			database_name();
			setState(5843);
			setResetClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterdb_opt_listContext extends ParserRuleContext {
		public Alterdb_opt_listContext alterdb_opt_list() {
			return getRuleContext(Alterdb_opt_listContext.class,0);
		}
		public Alterdb_opt_itemContext alterdb_opt_item() {
			return getRuleContext(Alterdb_opt_itemContext.class,0);
		}
		public Alterdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterdb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_listContext alterdb_opt_list() throws RecognitionException {
		return alterdb_opt_list(0);
	}

	private Alterdb_opt_listContext alterdb_opt_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alterdb_opt_listContext _localctx = new Alterdb_opt_listContext(_ctx, _parentState);
		Alterdb_opt_listContext _prevctx = _localctx;
		int _startState = 660;
		enterRecursionRule(_localctx, 660, RULE_alterdb_opt_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(5850);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alterdb_opt_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alterdb_opt_list);
					setState(5846);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5847);
					alterdb_opt_item();
					}
					} 
				}
				setState(5852);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alterdb_opt_itemContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Alterdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdb_opt_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterdb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterdb_opt_itemContext alterdb_opt_item() throws RecognitionException {
		Alterdb_opt_itemContext _localctx = new Alterdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_alterdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5853);
			match(CONNECTION);
			setState(5854);
			match(LIMIT);
			setState(5855);
			opt_equal();
			setState(5856);
			signedIconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbStmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public Database_nameContext database_name() {
			return getRuleContext(Database_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public DropdbStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDropdbStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbStmtContext dropdbStmt() throws RecognitionException {
		DropdbStmtContext _localctx = new DropdbStmtContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_dropdbStmt);
		try {
			setState(5866);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5858);
				match(DROP);
				setState(5859);
				match(DATABASE);
				setState(5860);
				database_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5861);
				match(DROP);
				setState(5862);
				match(DATABASE);
				setState(5863);
				match(IF_P);
				setState(5864);
				match(EXISTS);
				setState(5865);
				database_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainStmtContext createDomainStmt() throws RecognitionException {
		CreateDomainStmtContext _localctx = new CreateDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_createDomainStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5868);
			match(CREATE);
			setState(5869);
			match(DOMAIN_P);
			setState(5870);
			any_name();
			setState(5871);
			opt_as();
			setState(5872);
			typename();
			setState(5873);
			colQualList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public AlterDomainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterDomainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainStmtContext alterDomainStmt() throws RecognitionException {
		AlterDomainStmtContext _localctx = new AlterDomainStmtContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_alterDomainStmt);
		try {
			setState(5925);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5875);
				match(ALTER);
				setState(5876);
				match(DOMAIN_P);
				setState(5877);
				any_name();
				setState(5878);
				match(DROP);
				setState(5879);
				match(CONSTRAINT);
				setState(5880);
				name();
				setState(5881);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5883);
				match(ALTER);
				setState(5884);
				match(DOMAIN_P);
				setState(5885);
				any_name();
				setState(5886);
				match(DROP);
				setState(5887);
				match(CONSTRAINT);
				setState(5888);
				match(IF_P);
				setState(5889);
				match(EXISTS);
				setState(5890);
				name();
				setState(5891);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5893);
				match(ALTER);
				setState(5894);
				match(DOMAIN_P);
				setState(5895);
				any_name();
				setState(5896);
				alter_column_default();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5898);
				match(ALTER);
				setState(5899);
				match(DOMAIN_P);
				setState(5900);
				any_name();
				setState(5901);
				match(ADD_P);
				setState(5902);
				tableConstraint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5904);
				match(ALTER);
				setState(5905);
				match(DOMAIN_P);
				setState(5906);
				any_name();
				setState(5907);
				match(VALIDATE);
				setState(5908);
				match(CONSTRAINT);
				setState(5909);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5911);
				match(ALTER);
				setState(5912);
				match(DOMAIN_P);
				setState(5913);
				any_name();
				setState(5914);
				match(DROP);
				setState(5915);
				match(NOT);
				setState(5916);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5918);
				match(ALTER);
				setState(5919);
				match(DOMAIN_P);
				setState(5920);
				any_name();
				setState(5921);
				match(SET);
				setState(5922);
				match(NOT);
				setState(5923);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_opt_as);
		try {
			setState(5929);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5927);
				match(AS);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_SCHEMA:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSDictionaryStmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTSDictionaryStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSDictionaryStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTSDictionaryStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSDictionaryStmtContext alterTSDictionaryStmt() throws RecognitionException {
		AlterTSDictionaryStmtContext _localctx = new AlterTSDictionaryStmtContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alterTSDictionaryStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5931);
			match(ALTER);
			setState(5932);
			match(TEXT_P);
			setState(5933);
			match(SEARCH);
			setState(5934);
			match(DICTIONARY);
			setState(5935);
			any_name();
			setState(5936);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTSConfigurationStmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(SqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(SqlParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public AlterTSConfigurationStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTSConfigurationStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlterTSConfigurationStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTSConfigurationStmtContext alterTSConfigurationStmt() throws RecognitionException {
		AlterTSConfigurationStmtContext _localctx = new AlterTSConfigurationStmtContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_alterTSConfigurationStmt);
		try {
			setState(6010);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5938);
				match(ALTER);
				setState(5939);
				match(TEXT_P);
				setState(5940);
				match(SEARCH);
				setState(5941);
				match(CONFIGURATION);
				setState(5942);
				any_name();
				setState(5943);
				match(ALTER);
				setState(5944);
				match(MAPPING);
				setState(5945);
				match(FOR);
				setState(5946);
				name_list(0);
				setState(5947);
				match(REPLACE);
				setState(5948);
				any_name();
				setState(5949);
				match(WITH);
				setState(5950);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5952);
				match(ALTER);
				setState(5953);
				match(TEXT_P);
				setState(5954);
				match(SEARCH);
				setState(5955);
				match(CONFIGURATION);
				setState(5956);
				any_name();
				setState(5957);
				match(ADD_P);
				setState(5958);
				match(MAPPING);
				setState(5959);
				match(FOR);
				setState(5960);
				name_list(0);
				setState(5961);
				match(WITH);
				setState(5962);
				any_name_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5964);
				match(ALTER);
				setState(5965);
				match(TEXT_P);
				setState(5966);
				match(SEARCH);
				setState(5967);
				match(CONFIGURATION);
				setState(5968);
				any_name();
				setState(5969);
				match(ALTER);
				setState(5970);
				match(MAPPING);
				setState(5971);
				match(FOR);
				setState(5972);
				name_list(0);
				setState(5973);
				match(WITH);
				setState(5974);
				any_name_list(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5976);
				match(ALTER);
				setState(5977);
				match(TEXT_P);
				setState(5978);
				match(SEARCH);
				setState(5979);
				match(CONFIGURATION);
				setState(5980);
				any_name();
				setState(5981);
				match(ALTER);
				setState(5982);
				match(MAPPING);
				setState(5983);
				match(REPLACE);
				setState(5984);
				any_name();
				setState(5985);
				match(WITH);
				setState(5986);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5988);
				match(ALTER);
				setState(5989);
				match(TEXT_P);
				setState(5990);
				match(SEARCH);
				setState(5991);
				match(CONFIGURATION);
				setState(5992);
				any_name();
				setState(5993);
				match(DROP);
				setState(5994);
				match(MAPPING);
				setState(5995);
				match(FOR);
				setState(5996);
				name_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5998);
				match(ALTER);
				setState(5999);
				match(TEXT_P);
				setState(6000);
				match(SEARCH);
				setState(6001);
				match(CONFIGURATION);
				setState(6002);
				any_name();
				setState(6003);
				match(DROP);
				setState(6004);
				match(MAPPING);
				setState(6005);
				match(IF_P);
				setState(6006);
				match(EXISTS);
				setState(6007);
				match(FOR);
				setState(6008);
				name_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public CreateConversionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversionStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCreateConversionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionStmtContext createConversionStmt() throws RecognitionException {
		CreateConversionStmtContext _localctx = new CreateConversionStmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_createConversionStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6012);
			match(CREATE);
			setState(6013);
			opt_default();
			setState(6014);
			match(CONVERSION_P);
			setState(6015);
			any_name();
			setState(6016);
			match(FOR);
			setState(6017);
			sconst();
			setState(6018);
			match(TO);
			setState(6019);
			sconst();
			setState(6020);
			match(FROM);
			setState(6021);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterStmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public ClusterStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitClusterStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterStmtContext clusterStmt() throws RecognitionException {
		ClusterStmtContext _localctx = new ClusterStmtContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_clusterStmt);
		try {
			setState(6036);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6023);
				match(CLUSTER);
				setState(6024);
				opt_verbose();
				setState(6025);
				qualified_name();
				setState(6026);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6028);
				match(CLUSTER);
				setState(6029);
				opt_verbose();
				setState(6030);
				index_name();
				setState(6031);
				match(ON);
				setState(6032);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6034);
				match(CLUSTER);
				setState(6035);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_cluster_index_specification);
		try {
			setState(6041);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6038);
				match(USING);
				setState(6039);
				index_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumStmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(SqlParser.VACUUM, 0); }
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public AnalyzeStmtContext analyzeStmt() {
			return getRuleContext(AnalyzeStmtContext.class,0);
		}
		public VacuumStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuumStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumStmtContext vacuumStmt() throws RecognitionException {
		VacuumStmtContext _localctx = new VacuumStmtContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_vacuumStmt);
		try {
			setState(6072);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6043);
				match(VACUUM);
				setState(6044);
				match(T__4);
				setState(6045);
				vacuum_option_list(0);
				setState(6046);
				match(T__5);
				setState(6047);
				qualified_name();
				setState(6048);
				opt_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6050);
				match(VACUUM);
				setState(6051);
				match(T__4);
				setState(6052);
				vacuum_option_list(0);
				setState(6053);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6055);
				match(VACUUM);
				setState(6056);
				opt_full();
				setState(6057);
				opt_freeze();
				setState(6058);
				opt_verbose();
				setState(6059);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6061);
				match(VACUUM);
				setState(6062);
				opt_full();
				setState(6063);
				opt_freeze();
				setState(6064);
				opt_verbose();
				setState(6065);
				analyzeStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6067);
				match(VACUUM);
				setState(6068);
				opt_full();
				setState(6069);
				opt_freeze();
				setState(6070);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_option_listContext extends ParserRuleContext {
		public Vacuum_option_elemContext vacuum_option_elem() {
			return getRuleContext(Vacuum_option_elemContext.class,0);
		}
		public Vacuum_option_listContext vacuum_option_list() {
			return getRuleContext(Vacuum_option_listContext.class,0);
		}
		public Vacuum_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuum_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_listContext vacuum_option_list() throws RecognitionException {
		return vacuum_option_list(0);
	}

	private Vacuum_option_listContext vacuum_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vacuum_option_listContext _localctx = new Vacuum_option_listContext(_ctx, _parentState);
		Vacuum_option_listContext _prevctx = _localctx;
		int _startState = 684;
		enterRecursionRule(_localctx, 684, RULE_vacuum_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6075);
			vacuum_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6082);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacuum_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_vacuum_option_list);
					setState(6077);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6078);
					match(T__3);
					setState(6079);
					vacuum_option_elem();
					}
					} 
				}
				setState(6084);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Vacuum_option_elemContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public Vacuum_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitVacuum_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_option_elemContext vacuum_option_elem() throws RecognitionException {
		Vacuum_option_elemContext _localctx = new Vacuum_option_elemContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_vacuum_option_elem);
		try {
			setState(6089);
			switch (_input.LA(1)) {
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6085);
				analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6086);
				match(VERBOSE);
				}
				break;
			case FREEZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6087);
				match(FREEZE);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6088);
				match(FULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeStmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public AnalyzeStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAnalyzeStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeStmtContext analyzeStmt() throws RecognitionException {
		AnalyzeStmtContext _localctx = new AnalyzeStmtContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_analyzeStmt);
		try {
			setState(6099);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6091);
				analyze_keyword();
				setState(6092);
				opt_verbose();
				setState(6093);
				qualified_name();
				setState(6094);
				opt_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6096);
				analyze_keyword();
				setState(6097);
				opt_verbose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(SqlParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(SqlParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6101);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_opt_verbose);
		try {
			setState(6105);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6103);
				match(VERBOSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_opt_full);
		try {
			setState(6109);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6107);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_opt_freeze);
		try {
			setState(6113);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6111);
				match(FREEZE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_opt_name_list);
		try {
			setState(6120);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6115);
				match(T__4);
				setState(6116);
				name_list(0);
				setState(6117);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(SqlParser.EXPLAIN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public ExplainableStmtContext explainableStmt() {
			return getRuleContext(ExplainableStmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public ExplainStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplainStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStmtContext explainStmt() throws RecognitionException {
		ExplainStmtContext _localctx = new ExplainStmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_explainStmt);
		try {
			setState(6138);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6122);
				match(EXPLAIN);
				setState(6123);
				match(T__4);
				setState(6124);
				explain_option_list(0);
				setState(6125);
				match(T__5);
				setState(6126);
				explainableStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6128);
				match(EXPLAIN);
				setState(6129);
				analyze_keyword();
				setState(6130);
				opt_verbose();
				setState(6131);
				explainableStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6133);
				match(EXPLAIN);
				setState(6134);
				explainableStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6135);
				match(EXPLAIN);
				setState(6136);
				match(VERBOSE);
				setState(6137);
				explainableStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public DeclareCursorStmtContext declareCursorStmt() {
			return getRuleContext(DeclareCursorStmtContext.class,0);
		}
		public CreateAsStmtContext createAsStmt() {
			return getRuleContext(CreateAsStmtContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ExplainableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplainableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStmtContext explainableStmt() throws RecognitionException {
		ExplainableStmtContext _localctx = new ExplainableStmtContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_explainableStmt);
		try {
			setState(6147);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6140);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6141);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6142);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6143);
				deleteStmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6144);
				declareCursorStmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6145);
				createAsStmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6146);
				executeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public Explain_option_elemContext explain_option_elem() {
			return getRuleContext(Explain_option_elemContext.class,0);
		}
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		return explain_option_list(0);
	}

	private Explain_option_listContext explain_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, _parentState);
		Explain_option_listContext _prevctx = _localctx;
		int _startState = 704;
		enterRecursionRule(_localctx, 704, RULE_explain_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6150);
			explain_option_elem();
			}
			_ctx.stop = _input.LT(-1);
			setState(6157);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Explain_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_explain_option_list);
					setState(6152);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6153);
					match(T__3);
					setState(6154);
					explain_option_elem();
					}
					} 
				}
				setState(6159);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6160);
			explain_option_name();
			setState(6161);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_explain_option_name);
		try {
			setState(6166);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6163);
				colId();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6164);
				analyze_keyword();
				}
				break;
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6165);
				match(VERBOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_explain_option_arg);
		try {
			setState(6171);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6168);
				opt_boolean_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6169);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepareStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrepareStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStmtContext prepareStmt() throws RecognitionException {
		PrepareStmtContext _localctx = new PrepareStmtContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_prepareStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6173);
			match(PREPARE);
			setState(6174);
			name();
			setState(6175);
			prep_type_clause();
			setState(6176);
			match(AS);
			setState(6177);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_prep_type_clause);
		try {
			setState(6184);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179);
				match(T__4);
				setState(6180);
				type_list(0);
				setState(6181);
				match(T__5);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtContext insertStmt() {
			return getRuleContext(InsertStmtContext.class,0);
		}
		public UpdateStmtContext updateStmt() {
			return getRuleContext(UpdateStmtContext.class,0);
		}
		public DeleteStmtContext deleteStmt() {
			return getRuleContext(DeleteStmtContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_preparableStmt);
		try {
			setState(6190);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6186);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6187);
				insertStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6188);
				updateStmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6189);
				deleteStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public OptTempContext optTemp() {
			return getRuleContext(OptTempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_executeStmt);
		try {
			setState(6206);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6192);
				match(CREATE);
				setState(6193);
				optTemp();
				setState(6194);
				match(TABLE);
				setState(6195);
				create_as_target();
				setState(6196);
				match(AS);
				setState(6197);
				match(EXECUTE);
				setState(6198);
				name();
				setState(6199);
				execute_param_clause();
				setState(6200);
				opt_with_data();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6202);
				match(EXECUTE);
				setState(6203);
				name();
				setState(6204);
				execute_param_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_execute_param_clause);
		try {
			setState(6213);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6208);
				match(T__4);
				setState(6209);
				expr_list(0);
				setState(6210);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateStmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(SqlParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public DeallocateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeallocateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateStmtContext deallocateStmt() throws RecognitionException {
		DeallocateStmtContext _localctx = new DeallocateStmtContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_deallocateStmt);
		try {
			setState(6225);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6215);
				match(DEALLOCATE);
				setState(6216);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6217);
				match(DEALLOCATE);
				setState(6218);
				match(PREPARE);
				setState(6219);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6220);
				match(DEALLOCATE);
				setState(6221);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6222);
				match(DEALLOCATE);
				setState(6223);
				match(PREPARE);
				setState(6224);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsertStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmtContext insertStmt() throws RecognitionException {
		InsertStmtContext _localctx = new InsertStmtContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_insertStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6227);
			opt_with_clause();
			setState(6228);
			match(INSERT);
			setState(6229);
			match(INTO);
			setState(6230);
			qualified_name();
			setState(6231);
			insert_rest();
			setState(6232);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_insert_rest);
		try {
			setState(6242);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6234);
				match(T__4);
				setState(6235);
				insert_column_list(0);
				setState(6236);
				match(T__5);
				setState(6237);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6239);
				selectStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6240);
				match(DEFAULT);
				setState(6241);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Insert_column_itemContext insert_column_item() {
			return getRuleContext(Insert_column_itemContext.class,0);
		}
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		return insert_column_list(0);
	}

	private Insert_column_listContext insert_column_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, _parentState);
		Insert_column_listContext _prevctx = _localctx;
		int _startState = 728;
		enterRecursionRule(_localctx, 728, RULE_insert_column_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6245);
			insert_column_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6252);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_column_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_column_list);
					setState(6247);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6248);
					match(T__3);
					setState(6249);
					insert_column_item();
					}
					} 
				}
				setState(6254);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6255);
			colId();
			setState(6256);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(SqlParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_returning_clause);
		try {
			setState(6263);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6258);
				match(RETURNING);
				setState(6259);
				target_list(0);
				setState(6260);
				into_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public DeleteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeleteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStmtContext deleteStmt() throws RecognitionException {
		DeleteStmtContext _localctx = new DeleteStmtContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_deleteStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			opt_with_clause();
			setState(6266);
			match(DELETE_P);
			setState(6267);
			match(FROM);
			setState(6268);
			relation_expr_opt_alias();
			setState(6269);
			using_clause();
			setState(6270);
			where_or_current_clause();
			setState(6271);
			returning_clause();
			setState(6272);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_using_clause);
		try {
			setState(6277);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6274);
				match(USING);
				setState(6275);
				from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(SqlParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLockStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStmtContext lockStmt() throws RecognitionException {
		LockStmtContext _localctx = new LockStmtContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_lockStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6279);
			match(LOCK_P);
			setState(6280);
			opt_table();
			setState(6281);
			relation_expr_list(0);
			setState(6282);
			opt_lock();
			setState(6283);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(SqlParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_opt_lock);
		try {
			setState(6290);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6285);
				match(IN_P);
				setState(6286);
				lock_type();
				setState(6287);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(SqlParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_lock_type);
		try {
			setState(6308);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6292);
				match(ACCESS);
				setState(6293);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6294);
				match(ROW);
				setState(6295);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6296);
				match(ROW);
				setState(6297);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6298);
				match(SHARE);
				setState(6299);
				match(UPDATE);
				setState(6300);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6301);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6302);
				match(SHARE);
				setState(6303);
				match(ROW);
				setState(6304);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6305);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6306);
				match(ACCESS);
				setState(6307);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(SqlParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_opt_nowait);
		try {
			setState(6312);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6310);
				match(NOWAIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public UpdateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUpdateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStmtContext updateStmt() throws RecognitionException {
		UpdateStmtContext _localctx = new UpdateStmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_updateStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6314);
			opt_with_clause();
			setState(6315);
			match(UPDATE);
			setState(6316);
			relation_expr_opt_alias();
			setState(6317);
			match(SET);
			setState(6318);
			set_clause_list(0);
			setState(6319);
			from_clause();
			setState(6320);
			where_or_current_clause();
			setState(6321);
			returning_clause();
			setState(6322);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		return set_clause_list(0);
	}

	private Set_clause_listContext set_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, _parentState);
		Set_clause_listContext _prevctx = _localctx;
		int _startState = 748;
		enterRecursionRule(_localctx, 748, RULE_set_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6325);
			set_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(6332);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_clause_list);
					setState(6327);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6328);
					match(T__3);
					setState(6329);
					set_clause();
					}
					} 
				}
				setState(6334);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Single_set_clauseContext single_set_clause() {
			return getRuleContext(Single_set_clauseContext.class,0);
		}
		public Multiple_set_clauseContext multiple_set_clause() {
			return getRuleContext(Multiple_set_clauseContext.class,0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_set_clause);
		try {
			setState(6337);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6335);
				single_set_clause();
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				setState(6336);
				multiple_set_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Single_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSingle_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_set_clauseContext single_set_clause() throws RecognitionException {
		Single_set_clauseContext _localctx = new Single_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_single_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6339);
			set_target();
			setState(6340);
			match(T__1);
			setState(6341);
			ctext_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_set_clauseContext extends ParserRuleContext {
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Multiple_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_set_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitMultiple_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_set_clauseContext multiple_set_clause() throws RecognitionException {
		Multiple_set_clauseContext _localctx = new Multiple_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_multiple_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6343);
			match(T__4);
			setState(6344);
			set_target_list(0);
			setState(6345);
			match(T__5);
			setState(6346);
			match(T__1);
			setState(6347);
			ctext_row();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6349);
			colId();
			setState(6350);
			opt_indirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		return set_target_list(0);
	}

	private Set_target_listContext set_target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, _parentState);
		Set_target_listContext _prevctx = _localctx;
		int _startState = 758;
		enterRecursionRule(_localctx, 758, RULE_set_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6353);
			set_target();
			}
			_ctx.stop = _input.LT(-1);
			setState(6360);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Set_target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_set_target_list);
					setState(6355);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6356);
					match(T__3);
					setState(6357);
					set_target();
					}
					} 
				}
				setState(6362);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DeclareCursorStmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SqlParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public DeclareCursorStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursorStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDeclareCursorStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorStmtContext declareCursorStmt() throws RecognitionException {
		DeclareCursorStmtContext _localctx = new DeclareCursorStmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_declareCursorStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6363);
			match(DECLARE);
			setState(6364);
			cursor_name();
			setState(6365);
			cursor_options(0);
			setState(6366);
			match(CURSOR);
			setState(6367);
			opt_hold();
			setState(6368);
			match(FOR);
			setState(6369);
			selectStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6371);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(SqlParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(SqlParser.INSENSITIVE, 0); }
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		return cursor_options(0);
	}

	private Cursor_optionsContext cursor_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, _parentState);
		Cursor_optionsContext _prevctx = _localctx;
		int _startState = 764;
		enterRecursionRule(_localctx, 764, RULE_cursor_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6385);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6383);
					switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
					case 1:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6374);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6375);
						match(NO);
						setState(6376);
						match(SCROLL);
						}
						break;
					case 2:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6377);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6378);
						match(SCROLL);
						}
						break;
					case 3:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6379);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6380);
						match(BINARY);
						}
						break;
					case 4:
						{
						_localctx = new Cursor_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_cursor_options);
						setState(6381);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6382);
						match(INSENSITIVE);
						}
						break;
					}
					} 
				}
				setState(6387);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(SqlParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_opt_hold);
		try {
			setState(6393);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(6389);
				match(WITH);
				setState(6390);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6391);
				match(WITHOUT);
				setState(6392);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmt; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelectStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtContext selectStmt() throws RecognitionException {
		SelectStmtContext _localctx = new SelectStmtContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_selectStmt);
		try {
			setState(6397);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6395);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6396);
				select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		return select_with_parens(0);
	}

	private Select_with_parensContext select_with_parens(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, _parentState);
		Select_with_parensContext _prevctx = _localctx;
		int _startState = 770;
		enterRecursionRule(_localctx, 770, RULE_select_with_parens, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6408);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(6400);
				match(T__4);
				setState(6401);
				select_no_parens();
				setState(6402);
				match(T__5);
				}
				break;
			case 2:
				{
				setState(6404);
				match(T__4);
				setState(6405);
				select_with_parens(0);
				setState(6406);
				match(T__5);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6427);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6425);
					switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
					case 1:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6410);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6411);
						match(UNION);
						setState(6412);
						opt_all();
						setState(6413);
						select_clause();
						}
						break;
					case 2:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6415);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6416);
						match(INTERSECT);
						setState(6417);
						opt_all();
						setState(6418);
						select_clause();
						}
						break;
					case 3:
						{
						_localctx = new Select_with_parensContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_select_with_parens);
						setState(6420);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6421);
						match(EXCEPT);
						setState(6422);
						opt_all();
						setState(6423);
						select_clause();
						}
						break;
					}
					} 
				}
				setState(6429);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_select_no_parens);
		try {
			setState(6466);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6430);
				with_clause();
				setState(6431);
				select_clause();
				setState(6432);
				opt_sort_clause();
				setState(6433);
				for_locking_clause();
				setState(6434);
				opt_select_limit();
				setState(6435);
				into_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6437);
				with_clause();
				setState(6438);
				select_clause();
				setState(6439);
				opt_sort_clause();
				setState(6440);
				select_limit();
				setState(6441);
				opt_for_locking_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6443);
				select_clause();
				setState(6444);
				opt_sort_clause();
				setState(6445);
				for_locking_clause();
				setState(6446);
				opt_select_limit();
				setState(6447);
				into_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6449);
				select_clause();
				setState(6450);
				opt_sort_clause();
				setState(6451);
				select_limit();
				setState(6452);
				into_clause();
				setState(6453);
				opt_for_locking_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6455);
				with_clause();
				setState(6456);
				select_clause();
				setState(6457);
				sort_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6459);
				select_clause();
				setState(6460);
				sort_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6462);
				with_clause();
				setState(6463);
				select_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6465);
				simple_select(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_select_clause);
		try {
			setState(6470);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(6468);
				simple_select(0);
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				setState(6469);
				select_with_parens(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public Opt_distinctContext opt_distinct() {
			return getRuleContext(Opt_distinctContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public Opt_allContext opt_all() {
			return getRuleContext(Opt_allContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		return simple_select(0);
	}

	private Simple_selectContext simple_select(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, _parentState);
		Simple_selectContext _prevctx = _localctx;
		int _startState = 776;
		enterRecursionRule(_localctx, 776, RULE_simple_select, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6506);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(6473);
				match(SELECT);
				setState(6474);
				opt_distinct();
				setState(6475);
				target_list(0);
				setState(6476);
				into_clause();
				setState(6477);
				from_clause();
				setState(6478);
				where_clause();
				setState(6479);
				group_clause();
				setState(6480);
				having_clause();
				setState(6481);
				window_clause();
				}
				break;
			case 2:
				{
				setState(6483);
				match(SELECT);
				setState(6484);
				opt_distinct();
				setState(6485);
				target_list(0);
				setState(6486);
				from_clause();
				setState(6487);
				into_clause();
				setState(6488);
				where_clause();
				setState(6489);
				group_clause();
				setState(6490);
				having_clause();
				setState(6491);
				window_clause();
				}
				break;
			case 3:
				{
				setState(6493);
				match(SELECT);
				setState(6494);
				opt_distinct();
				setState(6495);
				target_list(0);
				setState(6496);
				from_clause();
				setState(6497);
				where_clause();
				setState(6498);
				into_clause();
				setState(6499);
				group_clause();
				setState(6500);
				having_clause();
				setState(6501);
				window_clause();
				}
				break;
			case 4:
				{
				setState(6503);
				values_clause(0);
				}
				break;
			case 5:
				{
				setState(6504);
				match(TABLE);
				setState(6505);
				relation_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6525);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6523);
					switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6508);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6509);
						match(UNION);
						setState(6510);
						opt_all();
						setState(6511);
						select_clause();
						}
						break;
					case 2:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6513);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6514);
						match(INTERSECT);
						setState(6515);
						opt_all();
						setState(6516);
						select_clause();
						}
						break;
					case 3:
						{
						_localctx = new Simple_selectContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_select);
						setState(6518);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6519);
						match(EXCEPT);
						setState(6520);
						opt_all();
						setState(6521);
						select_clause();
						}
						break;
					}
					} 
				}
				setState(6527);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(SqlParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_with_clause);
		try {
			setState(6533);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6528);
				match(WITH);
				setState(6529);
				cte_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6530);
				match(WITH);
				setState(6531);
				match(RECURSIVE);
				setState(6532);
				cte_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public Common_table_exprContext common_table_expr() {
			return getRuleContext(Common_table_exprContext.class,0);
		}
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		return cte_list(0);
	}

	private Cte_listContext cte_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Cte_listContext _localctx = new Cte_listContext(_ctx, _parentState);
		Cte_listContext _prevctx = _localctx;
		int _startState = 780;
		enterRecursionRule(_localctx, 780, RULE_cte_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6536);
			common_table_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(6543);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cte_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cte_list);
					setState(6538);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6539);
					match(T__3);
					setState(6540);
					common_table_expr();
					}
					} 
				}
				setState(6545);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6546);
			name();
			setState(6547);
			opt_name_list();
			setState(6548);
			match(AS);
			setState(6549);
			match(T__4);
			setState(6550);
			preparableStmt();
			setState(6551);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_opt_with_clause);
		try {
			setState(6555);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6553);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public TerminalNode STRICT_P() { return getToken(SqlParser.STRICT_P, 0); }
		public Into_clause_argumentsContext into_clause_arguments() {
			return getRuleContext(Into_clause_argumentsContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_into_clause);
		try {
			setState(6568);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6557);
				match(INTO);
				setState(6559);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(6558);
					match(STRICT_P);
					}
					break;
				}
				setState(6561);
				optTempTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6562);
				match(INTO);
				setState(6564);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(6563);
					match(STRICT_P);
					}
					break;
				}
				setState(6566);
				into_clause_arguments();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_argumentsContext extends ParserRuleContext {
		public List<Into_clause_argumentContext> into_clause_argument() {
			return getRuleContexts(Into_clause_argumentContext.class);
		}
		public Into_clause_argumentContext into_clause_argument(int i) {
			return getRuleContext(Into_clause_argumentContext.class,i);
		}
		public Into_clause_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_arguments; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInto_clause_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_argumentsContext into_clause_arguments() throws RecognitionException {
		Into_clause_argumentsContext _localctx = new Into_clause_argumentsContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_into_clause_arguments);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6570);
			into_clause_argument();
			setState(6575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6571);
					match(T__3);
					setState(6572);
					into_clause_argument();
					}
					} 
				}
				setState(6577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_argumentContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Into_clause_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_argument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInto_clause_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_argumentContext into_clause_argument() throws RecognitionException {
		Into_clause_argumentContext _localctx = new Into_clause_argumentContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_into_clause_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6578);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_optTempTableName);
		try {
			setState(6615);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6580);
				match(TEMPORARY);
				setState(6581);
				opt_table();
				setState(6582);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6584);
				match(TEMP);
				setState(6585);
				opt_table();
				setState(6586);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6588);
				match(LOCAL);
				setState(6589);
				match(TEMPORARY);
				setState(6590);
				opt_table();
				setState(6591);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6593);
				match(LOCAL);
				setState(6594);
				match(TEMP);
				setState(6595);
				opt_table();
				setState(6596);
				qualified_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6598);
				match(GLOBAL);
				setState(6599);
				match(TEMPORARY);
				setState(6600);
				opt_table();
				setState(6601);
				qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6603);
				match(GLOBAL);
				setState(6604);
				match(TEMP);
				setState(6605);
				opt_table();
				setState(6606);
				qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6608);
				match(UNLOGGED);
				setState(6609);
				opt_table();
				setState(6610);
				qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6612);
				match(TABLE);
				setState(6613);
				qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6614);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_opt_table);
		try {
			setState(6619);
			switch (_input.LA(1)) {
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6617);
				match(TABLE);
				}
				break;
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case ONLY:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public Opt_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_all(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_allContext opt_all() throws RecognitionException {
		Opt_allContext _localctx = new Opt_allContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_opt_all);
		try {
			setState(6624);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6621);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6622);
				match(DISTINCT);
				}
				break;
			case T__4:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_distinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Opt_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_distinct; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_distinctContext opt_distinct() throws RecognitionException {
		Opt_distinctContext _localctx = new Opt_distinctContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_opt_distinct);
		try {
			setState(6635);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6626);
				match(DISTINCT);
				setState(6627);
				match(ON);
				setState(6628);
				match(T__4);
				setState(6629);
				expr_list(0);
				setState(6630);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6632);
				match(DISTINCT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6633);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_opt_sort_clause);
		try {
			setState(6639);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6637);
				sort_clause();
				}
				break;
			case T__5:
			case FETCH:
			case FOR:
			case LIMIT:
			case OFFSET:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6641);
			match(ORDER);
			setState(6642);
			match(BY);
			setState(6643);
			sortby_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public SortbyContext sortby() {
			return getRuleContext(SortbyContext.class,0);
		}
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		return sortby_list(0);
	}

	private Sortby_listContext sortby_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, _parentState);
		Sortby_listContext _prevctx = _localctx;
		int _startState = 804;
		enterRecursionRule(_localctx, 804, RULE_sortby_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6646);
			sortby();
			}
			_ctx.stop = _input.LT(-1);
			setState(6653);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sortby_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_sortby_list);
					setState(6648);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6649);
					match(T__3);
					setState(6650);
					sortby();
					}
					} 
				}
				setState(6655);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Qual_all_OpContext qual_all_Op() {
			return getRuleContext(Qual_all_OpContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_sortby);
		try {
			setState(6665);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6656);
				a_expr(0);
				setState(6657);
				match(USING);
				setState(6658);
				qual_all_Op();
				setState(6659);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6661);
				a_expr(0);
				setState(6662);
				opt_asc_desc();
				setState(6663);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_select_limit);
		try {
			setState(6675);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6667);
				limit_clause();
				setState(6668);
				offset_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6670);
				offset_clause();
				setState(6671);
				limit_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6673);
				limit_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6674);
				offset_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_opt_select_limit);
		try {
			setState(6679);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6677);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Opt_select_fetch_first_valueContext opt_select_fetch_first_value() {
			return getRuleContext(Opt_select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_limit_clause);
		try {
			setState(6694);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6681);
				match(LIMIT);
				setState(6682);
				select_limit_value();
				setState(6683);
				match(T__3);
				setState(6684);
				select_offset_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6686);
				match(FETCH);
				setState(6687);
				first_or_next();
				setState(6688);
				opt_select_fetch_first_value();
				setState(6689);
				row_or_rows();
				setState(6690);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6692);
				match(LIMIT);
				setState(6693);
				select_limit_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(SqlParser.OFFSET, 0); }
		public Select_offset_value2Context select_offset_value2() {
			return getRuleContext(Select_offset_value2Context.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_offset_clause);
		try {
			setState(6702);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6696);
				match(OFFSET);
				setState(6697);
				select_offset_value2();
				setState(6698);
				row_or_rows();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6700);
				match(OFFSET);
				setState(6701);
				select_offset_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_select_limit_value);
		try {
			setState(6706);
			switch (_input.LA(1)) {
			case T__4:
			case T__7:
			case T__9:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6704);
				a_expr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6705);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6708);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_fetch_first_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public Opt_select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_fetch_first_value; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_select_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_fetch_first_valueContext opt_select_fetch_first_value() throws RecognitionException {
		Opt_select_fetch_first_valueContext _localctx = new Opt_select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_opt_select_fetch_first_value);
		try {
			setState(6716);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(6710);
				match(T__4);
				setState(6711);
				a_expr(0);
				setState(6712);
				match(T__5);
				}
				break;
			case T__7:
			case T__13:
			case ICONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(6714);
				signedIconst();
				}
				break;
			case ROW:
			case ROWS:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_value2Context extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Select_offset_value2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value2; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSelect_offset_value2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_value2Context select_offset_value2() throws RecognitionException {
		Select_offset_value2Context _localctx = new Select_offset_value2Context(_ctx, getState());
		enterRule(_localctx, 822, RULE_select_offset_value2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6718);
			c_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6720);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6722);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_group_clause);
		try {
			setState(6728);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6724);
				match(GROUP_P);
				setState(6725);
				match(BY);
				setState(6726);
				expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SqlParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_having_clause);
		try {
			setState(6733);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6730);
				match(HAVING);
				setState(6731);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_for_locking_clause);
		try {
			setState(6739);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6735);
				for_locking_items(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6736);
				match(FOR);
				setState(6737);
				match(READ);
				setState(6738);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_opt_for_locking_clause);
		try {
			setState(6743);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6741);
				for_locking_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public For_locking_itemContext for_locking_item() {
			return getRuleContext(For_locking_itemContext.class,0);
		}
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		return for_locking_items(0);
	}

	private For_locking_itemsContext for_locking_items(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, _parentState);
		For_locking_itemsContext _prevctx = _localctx;
		int _startState = 836;
		enterRecursionRule(_localctx, 836, RULE_for_locking_items, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6746);
			for_locking_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(6752);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_locking_itemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_for_locking_items);
					setState(6748);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6749);
					for_locking_item();
					}
					} 
				}
				setState(6754);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_for_locking_item);
		try {
			setState(6765);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6755);
				match(FOR);
				setState(6756);
				match(UPDATE);
				setState(6757);
				locked_rels_list();
				setState(6758);
				opt_nowait();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6760);
				match(FOR);
				setState(6761);
				match(SHARE);
				setState(6762);
				locked_rels_list();
				setState(6763);
				opt_nowait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_locked_rels_list);
		try {
			setState(6770);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6767);
				match(OF);
				setState(6768);
				qualified_name_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public Ctext_rowContext ctext_row() {
			return getRuleContext(Ctext_rowContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		return values_clause(0);
	}

	private Values_clauseContext values_clause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, _parentState);
		Values_clauseContext _prevctx = _localctx;
		int _startState = 842;
		enterRecursionRule(_localctx, 842, RULE_values_clause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6773);
			match(VALUES);
			setState(6774);
			ctext_row();
			}
			_ctx.stop = _input.LT(-1);
			setState(6781);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Values_clauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_values_clause);
					setState(6776);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6777);
					match(T__3);
					setState(6778);
					ctext_row();
					}
					} 
				}
				setState(6783);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_from_clause);
		try {
			setState(6787);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6784);
				match(FROM);
				setState(6785);
				from_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		return from_list(0);
	}

	private From_listContext from_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_listContext _localctx = new From_listContext(_ctx, _parentState);
		From_listContext _prevctx = _localctx;
		int _startState = 846;
		enterRecursionRule(_localctx, 846, RULE_from_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6790);
			table_ref();
			}
			_ctx.stop = _input.LT(-1);
			setState(6797);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_list);
					setState(6792);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6793);
					match(T__3);
					setState(6794);
					table_ref();
					}
					} 
				}
				setState(6799);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_table_ref);
		try {
			setState(6802);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6800);
				joined_table(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6801);
				table_ref2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref2Context extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Table_ref2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref2; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTable_ref2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref2Context table_ref2() throws RecognitionException {
		Table_ref2Context _localctx = new Table_ref2Context(_ctx, getState());
		enterRule(_localctx, 850, RULE_table_ref2);
		try {
			setState(6835);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6804);
				relation_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6805);
				relation_expr();
				setState(6806);
				alias_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6808);
				func_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6809);
				func_table();
				setState(6810);
				alias_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6812);
				func_table();
				setState(6813);
				match(AS);
				setState(6814);
				match(T__4);
				setState(6815);
				tableFuncElementList(0);
				setState(6816);
				match(T__5);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6818);
				func_table();
				setState(6819);
				match(AS);
				setState(6820);
				colId();
				setState(6821);
				match(T__4);
				setState(6822);
				tableFuncElementList(0);
				setState(6823);
				match(T__5);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6825);
				func_table();
				setState(6826);
				colId();
				setState(6827);
				match(T__4);
				setState(6828);
				tableFuncElementList(0);
				setState(6829);
				match(T__5);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6831);
				select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6832);
				select_with_parens(0);
				setState(6833);
				alias_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Table_ref2Context table_ref2() {
			return getRuleContext(Table_ref2Context.class,0);
		}
		public TerminalNode CROSS() { return getToken(SqlParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(SqlParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_qualContext join_qual() {
			return getRuleContext(Join_qualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SqlParser.NATURAL, 0); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 852;
		enterRecursionRule(_localctx, 852, RULE_joined_table, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6871);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(6838);
				match(T__4);
				setState(6839);
				table_ref();
				setState(6840);
				match(T__5);
				setState(6842);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(6841);
					alias_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(6844);
				table_ref2();
				setState(6845);
				match(CROSS);
				setState(6846);
				match(JOIN);
				setState(6847);
				table_ref();
				}
				break;
			case 3:
				{
				setState(6849);
				table_ref2();
				setState(6850);
				join_type();
				setState(6851);
				match(JOIN);
				setState(6852);
				table_ref();
				setState(6853);
				join_qual();
				}
				break;
			case 4:
				{
				setState(6855);
				table_ref2();
				setState(6856);
				match(JOIN);
				setState(6857);
				table_ref();
				setState(6858);
				join_qual();
				}
				break;
			case 5:
				{
				setState(6860);
				table_ref2();
				setState(6861);
				match(NATURAL);
				setState(6862);
				join_type();
				setState(6863);
				match(JOIN);
				setState(6864);
				table_ref();
				}
				break;
			case 6:
				{
				setState(6866);
				table_ref2();
				setState(6867);
				match(NATURAL);
				setState(6868);
				match(JOIN);
				setState(6869);
				table_ref();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6900);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6898);
					switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6873);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6874);
						match(CROSS);
						setState(6875);
						match(JOIN);
						setState(6876);
						table_ref();
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6877);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6878);
						join_type();
						setState(6879);
						match(JOIN);
						setState(6880);
						table_ref();
						setState(6881);
						join_qual();
						}
						break;
					case 3:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6883);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6884);
						match(JOIN);
						setState(6885);
						table_ref();
						setState(6886);
						join_qual();
						}
						break;
					case 4:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6888);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6889);
						match(NATURAL);
						setState(6890);
						join_type();
						setState(6891);
						match(JOIN);
						setState(6892);
						table_ref();
						}
						break;
					case 5:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(6894);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6895);
						match(NATURAL);
						setState(6896);
						match(JOIN);
						setState(6897);
						table_ref();
						}
						break;
					}
					} 
				}
				setState(6902);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_alias_clause);
		try {
			setState(6917);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6903);
				match(AS);
				setState(6904);
				colId();
				setState(6905);
				match(T__4);
				setState(6906);
				name_list(0);
				setState(6907);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6909);
				colId();
				setState(6910);
				match(T__4);
				setState(6911);
				name_list(0);
				setState(6912);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6914);
				match(AS);
				setState(6915);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6916);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public Join_outerContext join_outer() {
			return getRuleContext(Join_outerContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(SqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SqlParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(SqlParser.INNER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_join_type);
		try {
			setState(6926);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6919);
				match(FULL);
				setState(6920);
				join_outer();
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6921);
				match(LEFT);
				setState(6922);
				join_outer();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6923);
				match(RIGHT);
				setState(6924);
				join_outer();
				}
				break;
			case INNER_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(6925);
				match(INNER_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_outerContext extends ParserRuleContext {
		public TerminalNode OUTER_P() { return getToken(SqlParser.OUTER_P, 0); }
		public Join_outerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_outer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoin_outer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_outerContext join_outer() throws RecognitionException {
		Join_outerContext _localctx = new Join_outerContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_join_outer);
		try {
			setState(6930);
			switch (_input.LA(1)) {
			case OUTER_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(6928);
				match(OUTER_P);
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_join_qual);
		try {
			setState(6939);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6932);
				match(USING);
				setState(6933);
				match(T__4);
				setState(6934);
				name_list(0);
				setState(6935);
				match(T__5);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6937);
				match(ON);
				setState(6938);
				a_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_relation_expr);
		try {
			setState(6952);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6941);
				match(ONLY);
				setState(6942);
				match(T__4);
				setState(6943);
				qualified_name();
				setState(6944);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6946);
				qualified_name();
				setState(6947);
				match(T__6);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6949);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6950);
				match(ONLY);
				setState(6951);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		return relation_expr_list(0);
	}

	private Relation_expr_listContext relation_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, _parentState);
		Relation_expr_listContext _prevctx = _localctx;
		int _startState = 864;
		enterRecursionRule(_localctx, 864, RULE_relation_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6955);
			relation_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(6962);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relation_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relation_expr_list);
					setState(6957);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6958);
					match(T__3);
					setState(6959);
					relation_expr();
					}
					} 
				}
				setState(6964);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_relation_expr_opt_alias);
		try {
			setState(6973);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6965);
				relation_expr();
				setState(6966);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6968);
				relation_expr();
				setState(6969);
				match(AS);
				setState(6970);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6972);
				relation_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_func_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6975);
			func_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_where_clause);
		try {
			setState(6980);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6977);
				match(WHERE);
				setState(6978);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_where_or_current_clause);
		try {
			setState(6989);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6982);
				match(WHERE);
				setState(6983);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6984);
				match(WHERE);
				setState(6985);
				match(CURRENT_P);
				setState(6986);
				match(OF);
				setState(6987);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public OptTableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTableFuncElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOptTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTableFuncElementListContext optTableFuncElementList() throws RecognitionException {
		OptTableFuncElementListContext _localctx = new OptTableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_optTableFuncElementList);
		try {
			setState(6993);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case IDENT:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6991);
				tableFuncElementList(0);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		return tableFuncElementList(0);
	}

	private TableFuncElementListContext tableFuncElementList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, _parentState);
		TableFuncElementListContext _prevctx = _localctx;
		int _startState = 876;
		enterRecursionRule(_localctx, 876, RULE_tableFuncElementList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6996);
			tableFuncElement();
			}
			_ctx.stop = _input.LT(-1);
			setState(7003);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableFuncElementListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableFuncElementList);
					setState(6998);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6999);
					match(T__3);
					setState(7000);
					tableFuncElement();
					}
					} 
				}
				setState(7005);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_tableFuncElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7006);
			colId();
			setState(7007);
			typename();
			setState(7008);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public SimpleTypenameContext simpleTypename() {
			return getRuleContext(SimpleTypenameContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_typename);
		try {
			setState(7037);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7010);
				simpleTypename();
				setState(7011);
				match(ARRAY);
				setState(7012);
				match(T__9);
				setState(7013);
				iconst();
				setState(7014);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7016);
				match(SETOF);
				setState(7017);
				simpleTypename();
				setState(7018);
				match(ARRAY);
				setState(7019);
				match(T__9);
				setState(7020);
				iconst();
				setState(7021);
				match(T__10);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7023);
				simpleTypename();
				setState(7024);
				opt_array_bounds(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7026);
				match(SETOF);
				setState(7027);
				simpleTypename();
				setState(7028);
				opt_array_bounds(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7030);
				simpleTypename();
				setState(7031);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7033);
				match(SETOF);
				setState(7034);
				simpleTypename();
				setState(7035);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		return opt_array_bounds(0);
	}

	private Opt_array_boundsContext opt_array_bounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, _parentState);
		Opt_array_boundsContext _prevctx = _localctx;
		int _startState = 882;
		enterRecursionRule(_localctx, 882, RULE_opt_array_bounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7050);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7048);
					switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
					case 1:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7040);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7041);
						match(T__9);
						setState(7042);
						match(T__10);
						}
						break;
					case 2:
						{
						_localctx = new Opt_array_boundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_opt_array_bounds);
						setState(7043);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7044);
						match(T__9);
						setState(7045);
						iconst();
						setState(7046);
						match(T__10);
						}
						break;
					}
					} 
				}
				setState(7052);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleTypenameContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public Character_Context character_() {
			return getRuleContext(Character_Context.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public SimpleTypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSimpleTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypenameContext simpleTypename() throws RecognitionException {
		SimpleTypenameContext _localctx = new SimpleTypenameContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_simpleTypename);
		try {
			setState(7067);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7053);
				constInterval();
				setState(7054);
				match(T__4);
				setState(7055);
				iconst();
				setState(7056);
				match(T__5);
				setState(7057);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7059);
				constInterval();
				setState(7060);
				opt_interval();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7062);
				genericType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7063);
				numeric();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7064);
				bit();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7065);
				character_();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7066);
				constDatetime();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstTypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstBitContext constBit() {
			return getRuleContext(ConstBitContext.class,0);
		}
		public ConstCharacterContext constCharacter() {
			return getRuleContext(ConstCharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstTypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constTypename; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstTypenameContext constTypename() throws RecognitionException {
		ConstTypenameContext _localctx = new ConstTypenameContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_constTypename);
		try {
			setState(7073);
			switch (_input.LA(1)) {
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case DOUBLE_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7069);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7070);
				constBit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7071);
				constCharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7072);
				constDatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_genericType);
		try {
			setState(7082);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7075);
				type_function_name();
				setState(7076);
				attrs(0);
				setState(7077);
				opt_type_modifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7079);
				type_function_name();
				setState(7080);
				opt_type_modifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_opt_type_modifiers);
		try {
			setState(7089);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7084);
				match(T__4);
				setState(7085);
				expr_list(0);
				setState(7086);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode FLOAT_P() { return getToken(SqlParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DECIMAL_P() { return getToken(SqlParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(SqlParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlParser.NUMERIC, 0); }
		public TerminalNode INT_P() { return getToken(SqlParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(SqlParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(SqlParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(SqlParser.REAL, 0); }
		public TerminalNode DOUBLE_P() { return getToken(SqlParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(SqlParser.PRECISION, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(SqlParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_numeric);
		try {
			setState(7107);
			switch (_input.LA(1)) {
			case FLOAT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7091);
				match(FLOAT_P);
				setState(7092);
				opt_float();
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7093);
				match(DECIMAL_P);
				setState(7094);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7095);
				match(DEC);
				setState(7096);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(7097);
				match(NUMERIC);
				setState(7098);
				opt_type_modifiers();
				}
				break;
			case INT_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(7099);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 6);
				{
				setState(7100);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(7101);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7102);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 9);
				{
				setState(7103);
				match(REAL);
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 10);
				{
				setState(7104);
				match(DOUBLE_P);
				setState(7105);
				match(PRECISION);
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(7106);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_opt_float);
		try {
			setState(7114);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7109);
				match(T__4);
				setState(7110);
				iconst();
				setState(7111);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_bit);
		try {
			setState(7118);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7116);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7117);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstBitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public ConstBitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constBit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstBitContext constBit() throws RecognitionException {
		ConstBitContext _localctx = new ConstBitContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_constBit);
		try {
			setState(7122);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7120);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7121);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_bitWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7124);
			match(BIT);
			setState(7125);
			opt_varying();
			setState(7126);
			match(T__4);
			setState(7127);
			expr_list(0);
			setState(7128);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7130);
			match(BIT);
			setState(7131);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_Context extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public Character_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacter_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_Context character_() throws RecognitionException {
		Character_Context _localctx = new Character_Context(_ctx, getState());
		enterRule(_localctx, 904, RULE_character_);
		try {
			setState(7135);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7133);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7134);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstCharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public ConstCharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constCharacter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstCharacterContext constCharacter() throws RecognitionException {
		ConstCharacterContext _localctx = new ConstCharacterContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_constCharacter);
		try {
			setState(7139);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7137);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7138);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7141);
			character();
			setState(7142);
			match(T__4);
			setState(7143);
			iconst();
			setState(7144);
			match(T__5);
			setState(7145);
			opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public Opt_charsetContext opt_charset() {
			return getRuleContext(Opt_charsetContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7147);
			character();
			setState(7148);
			opt_charset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHAR_P() { return getToken(SqlParser.CHAR_P, 0); }
		public TerminalNode NATIONAL() { return getToken(SqlParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(SqlParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlParser.VARCHAR, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_character);
		try {
			setState(7163);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7150);
				match(CHARACTER);
				setState(7151);
				opt_varying();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7152);
				match(CHAR_P);
				setState(7153);
				opt_varying();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7154);
				match(NATIONAL);
				setState(7155);
				match(CHARACTER);
				setState(7156);
				opt_varying();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7157);
				match(NATIONAL);
				setState(7158);
				match(CHAR_P);
				setState(7159);
				opt_varying();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7160);
				match(NCHAR);
				setState(7161);
				opt_varying();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7162);
				match(VARCHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SqlParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_opt_varying);
		try {
			setState(7167);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7165);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_charsetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_charsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_charset; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_charset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_charsetContext opt_charset() throws RecognitionException {
		Opt_charsetContext _localctx = new Opt_charsetContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_charset);
		try {
			setState(7173);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7169);
				match(CHARACTER);
				setState(7170);
				match(SET);
				setState(7171);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SqlParser.TIMESTAMP, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_constDatetime);
		try {
			setState(7191);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7175);
				match(TIMESTAMP);
				setState(7176);
				match(T__4);
				setState(7177);
				iconst();
				setState(7178);
				match(T__5);
				setState(7179);
				opt_timezone();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7181);
				match(TIME);
				setState(7182);
				match(T__4);
				setState(7183);
				iconst();
				setState(7184);
				match(T__5);
				setState(7185);
				opt_timezone();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7187);
				match(TIMESTAMP);
				setState(7188);
				opt_timezone();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7189);
				match(TIME);
				setState(7190);
				opt_timezone();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(SqlParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7193);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH_TIME() { return getToken(SqlParser.WITH_TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_opt_timezone);
		try {
			setState(7201);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7195);
				match(WITH_TIME);
				setState(7196);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7197);
				match(WITHOUT);
				setState(7198);
				match(TIME);
				setState(7199);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_opt_interval);
		try {
			setState(7231);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7203);
				interval_second();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7204);
				match(DAY_P);
				setState(7205);
				match(TO);
				setState(7206);
				interval_second();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7207);
				match(HOUR_P);
				setState(7208);
				match(TO);
				setState(7209);
				interval_second();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7210);
				match(MINUTE_P);
				setState(7211);
				match(TO);
				setState(7212);
				interval_second();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7213);
				match(YEAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7214);
				match(MONTH_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7215);
				match(DAY_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7216);
				match(HOUR_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7217);
				match(MINUTE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7218);
				match(YEAR_P);
				setState(7219);
				match(TO);
				setState(7220);
				match(MONTH_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7221);
				match(DAY_P);
				setState(7222);
				match(TO);
				setState(7223);
				match(HOUR_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7224);
				match(DAY_P);
				setState(7225);
				match(TO);
				setState(7226);
				match(MINUTE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7227);
				match(HOUR_P);
				setState(7228);
				match(TO);
				setState(7229);
				match(MINUTE_P);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_interval_second);
		try {
			setState(7239);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7233);
				match(SECOND_P);
				setState(7234);
				match(T__4);
				setState(7235);
				iconst();
				setState(7236);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7238);
				match(SECOND_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(SqlParser.OVERLAPS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(SqlParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode AT() { return getToken(SqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode TYPECAST() { return getToken(SqlParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode ISNULL() { return getToken(SqlParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(SqlParser.NOTNULL, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public Opt_asymmetricContext opt_asymmetric() {
			return getRuleContext(Opt_asymmetricContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode SYMMETRIC() { return getToken(SqlParser.SYMMETRIC, 0); }
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		A_exprContext _localctx = new A_exprContext(_ctx, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 928;
		enterRecursionRule(_localctx, 928, RULE_a_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7258);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				setState(7242);
				match(T__13);
				setState(7243);
				a_expr(31);
				}
				break;
			case 2:
				{
				setState(7244);
				match(T__7);
				setState(7245);
				a_expr(30);
				}
				break;
			case 3:
				{
				setState(7246);
				qual_Op();
				setState(7247);
				a_expr(28);
				}
				break;
			case 4:
				{
				setState(7249);
				match(NOT);
				setState(7250);
				a_expr(26);
				}
				break;
			case 5:
				{
				setState(7251);
				row();
				setState(7252);
				match(OVERLAPS);
				setState(7253);
				row();
				}
				break;
			case 6:
				{
				setState(7255);
				c_expr();
				}
				break;
			case 7:
				{
				setState(7256);
				match(UNIQUE);
				setState(7257);
				select_with_parens(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7493);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,376,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7491);
					switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
					case 1:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7260);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(7261);
						match(T__11);
						setState(7262);
						a_expr(61);
						}
						break;
					case 2:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7263);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(7264);
						match(T__6);
						setState(7265);
						a_expr(60);
						}
						break;
					case 3:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7266);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(7267);
						match(T__12);
						setState(7268);
						a_expr(59);
						}
						break;
					case 4:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7269);
						if (!(precpred(_ctx, 57))) throw new FailedPredicateException(this, "precpred(_ctx, 57)");
						setState(7270);
						match(T__8);
						setState(7271);
						a_expr(58);
						}
						break;
					case 5:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7272);
						if (!(precpred(_ctx, 56))) throw new FailedPredicateException(this, "precpred(_ctx, 56)");
						setState(7273);
						match(T__13);
						setState(7274);
						a_expr(57);
						}
						break;
					case 6:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7275);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(7276);
						match(T__7);
						setState(7277);
						a_expr(56);
						}
						break;
					case 7:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7278);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(7279);
						match(T__1);
						setState(7280);
						a_expr(55);
						}
						break;
					case 8:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7281);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(7282);
						match(T__14);
						setState(7283);
						a_expr(54);
						}
						break;
					case 9:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7284);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(7285);
						match(T__15);
						setState(7286);
						a_expr(53);
						}
						break;
					case 10:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7287);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(7288);
						match(T__16);
						setState(7289);
						a_expr(52);
						}
						break;
					case 11:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7290);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(7291);
						match(LIKE);
						setState(7292);
						a_expr(0);
						setState(7293);
						match(ESCAPE);
						setState(7294);
						a_expr(51);
						}
						break;
					case 12:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7296);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(7297);
						match(NOT);
						setState(7298);
						match(LIKE);
						setState(7299);
						a_expr(0);
						setState(7300);
						match(ESCAPE);
						setState(7301);
						a_expr(50);
						}
						break;
					case 13:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7303);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(7304);
						match(ILIKE);
						setState(7305);
						a_expr(0);
						setState(7306);
						match(ESCAPE);
						setState(7307);
						a_expr(49);
						}
						break;
					case 14:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7309);
						if (!(precpred(_ctx, 47))) throw new FailedPredicateException(this, "precpred(_ctx, 47)");
						setState(7310);
						match(NOT);
						setState(7311);
						match(ILIKE);
						setState(7312);
						a_expr(0);
						setState(7313);
						match(ESCAPE);
						setState(7314);
						a_expr(48);
						}
						break;
					case 15:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7316);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(7317);
						match(SIMILAR);
						setState(7318);
						match(TO);
						setState(7319);
						a_expr(0);
						setState(7320);
						match(ESCAPE);
						setState(7321);
						a_expr(47);
						}
						break;
					case 16:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7323);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(7324);
						match(NOT);
						setState(7325);
						match(SIMILAR);
						setState(7326);
						match(TO);
						setState(7327);
						a_expr(0);
						setState(7328);
						match(ESCAPE);
						setState(7329);
						a_expr(46);
						}
						break;
					case 17:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7331);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(7332);
						match(AND);
						setState(7333);
						a_expr(43);
						}
						break;
					case 18:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7334);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(7335);
						match(OR);
						setState(7336);
						a_expr(42);
						}
						break;
					case 19:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7337);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(7338);
						match(LIKE);
						setState(7339);
						a_expr(41);
						}
						break;
					case 20:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7340);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(7341);
						match(NOT);
						setState(7342);
						match(LIKE);
						setState(7343);
						a_expr(40);
						}
						break;
					case 21:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7344);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(7345);
						match(ILIKE);
						setState(7346);
						a_expr(39);
						}
						break;
					case 22:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7347);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(7348);
						match(NOT);
						setState(7349);
						match(ILIKE);
						setState(7350);
						a_expr(38);
						}
						break;
					case 23:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7351);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(7352);
						match(AT);
						setState(7353);
						match(TIME);
						setState(7354);
						match(ZONE);
						setState(7355);
						a_expr(33);
						}
						break;
					case 24:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7356);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(7357);
						qual_Op();
						setState(7358);
						a_expr(30);
						}
						break;
					case 25:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7360);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(7361);
						match(SIMILAR);
						setState(7362);
						match(TO);
						setState(7363);
						a_expr(26);
						}
						break;
					case 26:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7364);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(7365);
						match(NOT);
						setState(7366);
						match(SIMILAR);
						setState(7367);
						match(TO);
						setState(7368);
						a_expr(25);
						}
						break;
					case 27:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7369);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(7370);
						match(IS);
						setState(7371);
						match(DISTINCT);
						setState(7372);
						match(FROM);
						setState(7373);
						a_expr(14);
						}
						break;
					case 28:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7374);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7375);
						match(IS);
						setState(7376);
						match(NOT);
						setState(7377);
						match(DISTINCT);
						setState(7378);
						match(FROM);
						setState(7379);
						a_expr(13);
						}
						break;
					case 29:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7380);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(7381);
						match(TYPECAST);
						setState(7382);
						typename();
						}
						break;
					case 30:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7383);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(7384);
						match(COLLATE);
						setState(7385);
						any_name();
						}
						break;
					case 31:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7386);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(7387);
						match(IN_P);
						setState(7388);
						in_expr();
						}
						break;
					case 32:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7389);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(7390);
						match(NOT);
						setState(7391);
						match(IN_P);
						setState(7392);
						in_expr();
						}
						break;
					case 33:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7393);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(7394);
						qual_Op();
						}
						break;
					case 34:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7395);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(7396);
						match(IS);
						setState(7397);
						match(NULL_P);
						}
						break;
					case 35:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7398);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(7399);
						match(ISNULL);
						}
						break;
					case 36:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7400);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(7401);
						match(IS);
						setState(7402);
						match(NOT);
						setState(7403);
						match(NULL_P);
						}
						break;
					case 37:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7404);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(7405);
						match(NOTNULL);
						}
						break;
					case 38:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7406);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(7407);
						match(IS);
						setState(7408);
						match(TRUE_P);
						}
						break;
					case 39:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7409);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(7410);
						match(IS);
						setState(7411);
						match(NOT);
						setState(7412);
						match(TRUE_P);
						}
						break;
					case 40:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7413);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(7414);
						match(IS);
						setState(7415);
						match(FALSE_P);
						}
						break;
					case 41:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7416);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(7417);
						match(IS);
						setState(7418);
						match(NOT);
						setState(7419);
						match(FALSE_P);
						}
						break;
					case 42:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7420);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(7421);
						match(IS);
						setState(7422);
						match(UNKNOWN);
						}
						break;
					case 43:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7423);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(7424);
						match(IS);
						setState(7425);
						match(NOT);
						setState(7426);
						match(UNKNOWN);
						}
						break;
					case 44:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7427);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(7428);
						match(IS);
						setState(7429);
						match(OF);
						setState(7430);
						match(T__4);
						setState(7431);
						type_list(0);
						setState(7432);
						match(T__5);
						}
						break;
					case 45:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7434);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7435);
						match(IS);
						setState(7436);
						match(NOT);
						setState(7437);
						match(OF);
						setState(7438);
						match(T__4);
						setState(7439);
						type_list(0);
						setState(7440);
						match(T__5);
						}
						break;
					case 46:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7442);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7443);
						match(BETWEEN);
						setState(7444);
						opt_asymmetric();
						setState(7445);
						b_expr(0);
						setState(7446);
						match(AND);
						setState(7447);
						b_expr(0);
						}
						break;
					case 47:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7449);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(7450);
						match(NOT);
						setState(7451);
						match(BETWEEN);
						setState(7452);
						opt_asymmetric();
						setState(7453);
						b_expr(0);
						setState(7454);
						match(AND);
						setState(7455);
						b_expr(0);
						}
						break;
					case 48:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7457);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7458);
						match(BETWEEN);
						setState(7459);
						match(SYMMETRIC);
						setState(7460);
						b_expr(0);
						setState(7461);
						match(AND);
						setState(7462);
						b_expr(0);
						}
						break;
					case 49:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7464);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7465);
						match(NOT);
						setState(7466);
						match(BETWEEN);
						setState(7467);
						match(SYMMETRIC);
						setState(7468);
						b_expr(0);
						setState(7469);
						match(AND);
						setState(7470);
						b_expr(0);
						}
						break;
					case 50:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7472);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7473);
						subquery_Op();
						setState(7474);
						sub_type();
						setState(7475);
						select_with_parens(0);
						}
						break;
					case 51:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7477);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7478);
						subquery_Op();
						setState(7479);
						sub_type();
						setState(7480);
						match(T__4);
						setState(7481);
						a_expr(0);
						setState(7482);
						match(T__5);
						}
						break;
					case 52:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7484);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7485);
						match(IS);
						setState(7486);
						match(DOCUMENT_P);
						}
						break;
					case 53:
						{
						_localctx = new A_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						setState(7487);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7488);
						match(IS);
						setState(7489);
						match(NOT);
						setState(7490);
						match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(7495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,376,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public Qual_OpContext qual_Op() {
			return getRuleContext(Qual_OpContext.class,0);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode TYPECAST() { return getToken(SqlParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 930;
		enterRecursionRule(_localctx, 930, RULE_b_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7505);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(7497);
				match(T__13);
				setState(7498);
				b_expr(11);
				}
				break;
			case 2:
				{
				setState(7499);
				match(T__7);
				setState(7500);
				b_expr(10);
				}
				break;
			case 3:
				{
				setState(7501);
				qual_Op();
				setState(7502);
				b_expr(8);
				}
				break;
			case 4:
				{
				setState(7504);
				c_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7576);
					switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7507);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(7508);
						match(T__11);
						setState(7509);
						b_expr(23);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7510);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(7511);
						match(T__6);
						setState(7512);
						b_expr(22);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7513);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(7514);
						match(T__12);
						setState(7515);
						b_expr(21);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7516);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(7517);
						match(T__8);
						setState(7518);
						b_expr(20);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7519);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(7520);
						match(T__13);
						setState(7521);
						b_expr(19);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7522);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(7523);
						match(T__7);
						setState(7524);
						b_expr(18);
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7525);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(7526);
						match(T__1);
						setState(7527);
						b_expr(17);
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7528);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(7529);
						match(T__14);
						setState(7530);
						b_expr(16);
						}
						break;
					case 9:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7531);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(7532);
						match(T__15);
						setState(7533);
						b_expr(15);
						}
						break;
					case 10:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7534);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7535);
						qual_Op();
						setState(7536);
						b_expr(10);
						}
						break;
					case 11:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7538);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7539);
						match(IS);
						setState(7540);
						match(DISTINCT);
						setState(7541);
						match(FROM);
						setState(7542);
						b_expr(7);
						}
						break;
					case 12:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7543);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7544);
						match(IS);
						setState(7545);
						match(NOT);
						setState(7546);
						match(DISTINCT);
						setState(7547);
						match(FROM);
						setState(7548);
						b_expr(6);
						}
						break;
					case 13:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7549);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(7550);
						match(TYPECAST);
						setState(7551);
						typename();
						}
						break;
					case 14:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7552);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7553);
						qual_Op();
						}
						break;
					case 15:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7554);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7555);
						match(IS);
						setState(7556);
						match(OF);
						setState(7557);
						match(T__4);
						setState(7558);
						type_list(0);
						setState(7559);
						match(T__5);
						}
						break;
					case 16:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7561);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7562);
						match(IS);
						setState(7563);
						match(NOT);
						setState(7564);
						match(OF);
						setState(7565);
						match(T__4);
						setState(7566);
						type_list(0);
						setState(7567);
						match(T__5);
						}
						break;
					case 17:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7569);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7570);
						match(IS);
						setState(7571);
						match(DOCUMENT_P);
						}
						break;
					case 18:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(7572);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7573);
						match(IS);
						setState(7574);
						match(NOT);
						setState(7575);
						match(DOCUMENT_P);
						}
						break;
					}
					} 
				}
				setState(7580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(SqlParser.PARAM, 0); }
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public RowContext row() {
			return getRuleContext(RowContext.class,0);
		}
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitC_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_c_expr);
		try {
			setState(7601);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7581);
				match(T__4);
				setState(7582);
				a_expr(0);
				setState(7583);
				match(T__5);
				setState(7584);
				opt_indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7586);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7587);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7588);
				match(PARAM);
				setState(7589);
				opt_indirection(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7590);
				case_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7591);
				func_expr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7592);
				select_with_parens(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7593);
				match(EXISTS);
				setState(7594);
				select_with_parens(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7595);
				match(ARRAY);
				setState(7596);
				select_with_parens(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7597);
				match(ARRAY);
				setState(7598);
				array_expr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7599);
				array_expr();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7600);
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CURRENT_TIME() { return getToken(SqlParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(SqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(SqlParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(SqlParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(SqlParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(SqlParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(SqlParser.BOTH, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(SqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SqlParser.TRAILING, 0); }
		public TerminalNode COALESCE() { return getToken(SqlParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(SqlParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(SqlParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(SqlParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(SqlParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(SqlParser.NAME_P, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(SqlParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(SqlParser.XMLPI, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(SqlParser.TREAT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SqlParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode NULLIF() { return getToken(SqlParser.NULLIF, 0); }
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(SqlParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(SqlParser.XMLSERIALIZE, 0); }
		public SimpleTypenameContext simpleTypename() {
			return getRuleContext(SimpleTypenameContext.class,0);
		}
		public TerminalNode XMLROOT() { return getToken(SqlParser.XMLROOT, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(SqlParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(SqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SqlParser.CURRENT_SCHEMA, 0); }
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_func_expr);
		try {
			setState(7860);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7603);
				match(COLLATION);
				setState(7604);
				match(FOR);
				setState(7605);
				match(T__4);
				setState(7606);
				a_expr(0);
				setState(7607);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7609);
				match(CURRENT_TIME);
				setState(7610);
				match(T__4);
				setState(7611);
				iconst();
				setState(7612);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7614);
				match(CURRENT_TIMESTAMP);
				setState(7615);
				match(T__4);
				setState(7616);
				iconst();
				setState(7617);
				match(T__5);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7619);
				match(LOCALTIME);
				setState(7620);
				match(T__4);
				setState(7621);
				iconst();
				setState(7622);
				match(T__5);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7624);
				match(LOCALTIMESTAMP);
				setState(7625);
				match(T__4);
				setState(7626);
				iconst();
				setState(7627);
				match(T__5);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7629);
				match(EXTRACT);
				setState(7630);
				match(T__4);
				setState(7631);
				extract_list();
				setState(7632);
				match(T__5);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7634);
				match(OVERLAY);
				setState(7635);
				match(T__4);
				setState(7636);
				overlay_list();
				setState(7637);
				match(T__5);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7639);
				match(POSITION);
				setState(7640);
				match(T__4);
				setState(7641);
				position_list();
				setState(7642);
				match(T__5);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7644);
				match(SUBSTRING);
				setState(7645);
				match(T__4);
				setState(7646);
				substr_list();
				setState(7647);
				match(T__5);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7649);
				match(TRIM);
				setState(7650);
				match(T__4);
				setState(7651);
				match(BOTH);
				setState(7652);
				trim_list();
				setState(7653);
				match(T__5);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7655);
				match(TRIM);
				setState(7656);
				match(T__4);
				setState(7657);
				match(LEADING);
				setState(7658);
				trim_list();
				setState(7659);
				match(T__5);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7661);
				match(TRIM);
				setState(7662);
				match(T__4);
				setState(7663);
				match(TRAILING);
				setState(7664);
				trim_list();
				setState(7665);
				match(T__5);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7667);
				match(TRIM);
				setState(7668);
				match(T__4);
				setState(7669);
				trim_list();
				setState(7670);
				match(T__5);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7672);
				match(COALESCE);
				setState(7673);
				match(T__4);
				setState(7674);
				expr_list(0);
				setState(7675);
				match(T__5);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7677);
				match(GREATEST);
				setState(7678);
				match(T__4);
				setState(7679);
				expr_list(0);
				setState(7680);
				match(T__5);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7682);
				match(LEAST);
				setState(7683);
				match(T__4);
				setState(7684);
				expr_list(0);
				setState(7685);
				match(T__5);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7687);
				match(XMLCONCAT);
				setState(7688);
				match(T__4);
				setState(7689);
				expr_list(0);
				setState(7690);
				match(T__5);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7692);
				match(XMLELEMENT);
				setState(7693);
				match(T__4);
				setState(7694);
				match(NAME_P);
				setState(7695);
				colLabel();
				setState(7696);
				match(T__5);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7698);
				match(XMLFOREST);
				setState(7699);
				match(T__4);
				setState(7700);
				xml_attribute_list(0);
				setState(7701);
				match(T__5);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7703);
				match(XMLPI);
				setState(7704);
				match(T__4);
				setState(7705);
				match(NAME_P);
				setState(7706);
				colLabel();
				setState(7707);
				match(T__5);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7709);
				match(CAST);
				setState(7710);
				match(T__4);
				setState(7711);
				a_expr(0);
				setState(7712);
				match(AS);
				setState(7713);
				typename();
				setState(7714);
				match(T__5);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7716);
				match(TREAT);
				setState(7717);
				match(T__4);
				setState(7718);
				a_expr(0);
				setState(7719);
				match(AS);
				setState(7720);
				typename();
				setState(7721);
				match(T__5);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7723);
				match(XMLEXISTS);
				setState(7724);
				match(T__4);
				setState(7725);
				c_expr();
				setState(7726);
				xmlexists_argument();
				setState(7727);
				match(T__5);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7729);
				match(NULLIF);
				setState(7730);
				match(T__4);
				setState(7731);
				a_expr(0);
				setState(7732);
				match(T__3);
				setState(7733);
				a_expr(0);
				setState(7734);
				match(T__5);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7736);
				match(XMLELEMENT);
				setState(7737);
				match(T__4);
				setState(7738);
				match(NAME_P);
				setState(7739);
				colLabel();
				setState(7740);
				match(T__3);
				setState(7741);
				xml_attributes();
				setState(7742);
				match(T__5);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7744);
				match(XMLELEMENT);
				setState(7745);
				match(T__4);
				setState(7746);
				match(NAME_P);
				setState(7747);
				colLabel();
				setState(7748);
				match(T__3);
				setState(7749);
				expr_list(0);
				setState(7750);
				match(T__5);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7752);
				match(XMLPARSE);
				setState(7753);
				match(T__4);
				setState(7754);
				document_or_content();
				setState(7755);
				a_expr(0);
				setState(7756);
				xml_whitespace_option();
				setState(7757);
				match(T__5);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7759);
				match(XMLPI);
				setState(7760);
				match(T__4);
				setState(7761);
				match(NAME_P);
				setState(7762);
				colLabel();
				setState(7763);
				match(T__3);
				setState(7764);
				a_expr(0);
				setState(7765);
				match(T__5);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7767);
				match(XMLSERIALIZE);
				setState(7768);
				match(T__4);
				setState(7769);
				document_or_content();
				setState(7770);
				a_expr(0);
				setState(7771);
				match(AS);
				setState(7772);
				simpleTypename();
				setState(7773);
				match(T__5);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7775);
				match(XMLROOT);
				setState(7776);
				match(T__4);
				setState(7777);
				a_expr(0);
				setState(7778);
				match(T__3);
				setState(7779);
				xml_root_version();
				setState(7780);
				opt_xml_root_standalone();
				setState(7781);
				match(T__5);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(7783);
				match(XMLELEMENT);
				setState(7784);
				match(T__4);
				setState(7785);
				match(NAME_P);
				setState(7786);
				colLabel();
				setState(7787);
				match(T__3);
				setState(7788);
				xml_attributes();
				setState(7789);
				match(T__3);
				setState(7790);
				expr_list(0);
				setState(7791);
				match(T__5);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(7793);
				func_name();
				setState(7794);
				match(T__4);
				setState(7795);
				match(T__5);
				setState(7796);
				over_clause();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(7798);
				func_name();
				setState(7799);
				match(T__4);
				setState(7800);
				match(T__6);
				setState(7801);
				match(T__5);
				setState(7802);
				over_clause();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(7804);
				func_name();
				setState(7805);
				match(T__4);
				setState(7806);
				func_arg_list(0);
				setState(7807);
				match(T__5);
				setState(7808);
				over_clause();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(7810);
				func_name();
				setState(7811);
				match(T__4);
				setState(7812);
				match(VARIADIC);
				setState(7813);
				func_arg_expr();
				setState(7814);
				match(T__5);
				setState(7815);
				over_clause();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(7817);
				func_name();
				setState(7818);
				match(T__4);
				setState(7819);
				func_arg_list(0);
				setState(7820);
				sort_clause();
				setState(7821);
				match(T__5);
				setState(7822);
				over_clause();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(7824);
				func_name();
				setState(7825);
				match(T__4);
				setState(7826);
				match(ALL);
				setState(7827);
				func_arg_list(0);
				setState(7828);
				opt_sort_clause();
				setState(7829);
				match(T__5);
				setState(7830);
				over_clause();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(7832);
				func_name();
				setState(7833);
				match(T__4);
				setState(7834);
				match(DISTINCT);
				setState(7835);
				func_arg_list(0);
				setState(7836);
				opt_sort_clause();
				setState(7837);
				match(T__5);
				setState(7838);
				over_clause();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(7840);
				func_name();
				setState(7841);
				match(T__4);
				setState(7842);
				func_arg_list(0);
				setState(7843);
				match(T__3);
				setState(7844);
				match(VARIADIC);
				setState(7845);
				func_arg_expr();
				setState(7846);
				match(T__5);
				setState(7847);
				over_clause();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(7849);
				match(CURRENT_DATE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(7850);
				match(CURRENT_TIME);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(7851);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(7852);
				match(LOCALTIME);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7853);
				match(LOCALTIMESTAMP);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7854);
				match(CURRENT_ROLE);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7855);
				match(CURRENT_USER);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7856);
				match(SESSION_USER);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7857);
				match(USER);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7858);
				match(CURRENT_CATALOG);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7859);
				match(CURRENT_SCHEMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_xml_root_version);
		try {
			setState(7867);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7862);
				match(VERSION_P);
				setState(7863);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7864);
				match(VERSION_P);
				setState(7865);
				match(NO);
				setState(7866);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode STANDALONE_P() { return getToken(SqlParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(SqlParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opt_xml_root_standalone);
		try {
			setState(7880);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7869);
				match(T__3);
				setState(7870);
				match(STANDALONE_P);
				setState(7871);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7872);
				match(T__3);
				setState(7873);
				match(STANDALONE_P);
				setState(7874);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7875);
				match(T__3);
				setState(7876);
				match(STANDALONE_P);
				setState(7877);
				match(NO);
				setState(7878);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(SqlParser.XMLATTRIBUTES, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7882);
			match(XMLATTRIBUTES);
			setState(7883);
			match(T__4);
			setState(7884);
			xml_attribute_list(0);
			setState(7885);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public Xml_attribute_elContext xml_attribute_el() {
			return getRuleContext(Xml_attribute_elContext.class,0);
		}
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		return xml_attribute_list(0);
	}

	private Xml_attribute_listContext xml_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, _parentState);
		Xml_attribute_listContext _prevctx = _localctx;
		int _startState = 942;
		enterRecursionRule(_localctx, 942, RULE_xml_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7888);
			xml_attribute_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(7895);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xml_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xml_attribute_list);
					setState(7890);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7891);
					match(T__3);
					setState(7892);
					xml_attribute_el();
					}
					} 
				}
				setState(7897);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_xml_attribute_el);
		try {
			setState(7903);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7898);
				a_expr(0);
				setState(7899);
				match(AS);
				setState(7900);
				colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7902);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(SqlParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7905);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(SqlParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(SqlParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_xml_whitespace_option);
		try {
			setState(7912);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7907);
				match(PRESERVE);
				setState(7908);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7909);
				match(STRIP_P);
				setState(7910);
				match(WHITESPACE_P);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(SqlParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(SqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlParser.BY, i);
		}
		public List<TerminalNode> REF() { return getTokens(SqlParser.REF); }
		public TerminalNode REF(int i) {
			return getToken(SqlParser.REF, i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_xmlexists_argument);
		try {
			setState(7932);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7914);
				match(PASSING);
				setState(7915);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7916);
				match(PASSING);
				setState(7917);
				c_expr();
				setState(7918);
				match(BY);
				setState(7919);
				match(REF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7921);
				match(PASSING);
				setState(7922);
				match(BY);
				setState(7923);
				match(REF);
				setState(7924);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7925);
				match(PASSING);
				setState(7926);
				match(BY);
				setState(7927);
				match(REF);
				setState(7928);
				c_expr();
				setState(7929);
				match(BY);
				setState(7930);
				match(REF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_window_clause);
		try {
			setState(7937);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7934);
				match(WINDOW);
				setState(7935);
				window_definition_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		return window_definition_list(0);
	}

	private Window_definition_listContext window_definition_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, _parentState);
		Window_definition_listContext _prevctx = _localctx;
		int _startState = 954;
		enterRecursionRule(_localctx, 954, RULE_window_definition_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7940);
			window_definition();
			}
			_ctx.stop = _input.LT(-1);
			setState(7947);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,389,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Window_definition_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_window_definition_list);
					setState(7942);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(7943);
					match(T__3);
					setState(7944);
					window_definition();
					}
					} 
				}
				setState(7949);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,389,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7950);
			colId();
			setState(7951);
			match(AS);
			setState(7952);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SqlParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_over_clause);
		try {
			setState(7959);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7954);
				match(OVER);
				setState(7955);
				window_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7956);
				match(OVER);
				setState(7957);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7961);
			match(T__4);
			setState(7962);
			opt_existing_window_name();
			setState(7963);
			opt_partition_clause();
			setState(7964);
			opt_sort_clause();
			setState(7965);
			opt_frame_clause();
			setState(7966);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_opt_existing_window_name);
		try {
			setState(7970);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7968);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_opt_partition_clause);
		try {
			setState(7976);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7972);
				match(PARTITION);
				setState(7973);
				match(BY);
				setState(7974);
				expr_list(0);
				}
				break;
			case T__5:
			case ORDER:
			case RANGE:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_opt_frame_clause);
		try {
			setState(7983);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7978);
				match(RANGE);
				setState(7979);
				frame_extent();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7980);
				match(ROWS);
				setState(7981);
				frame_extent();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_frame_extent);
		try {
			setState(7991);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7985);
				match(BETWEEN);
				setState(7986);
				frame_bound();
				setState(7987);
				match(AND);
				setState(7988);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7990);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode PRECEDING() { return getToken(SqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlParser.FOLLOWING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlParser.UNBOUNDED, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_frame_bound);
		try {
			setState(8005);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7993);
				a_expr(0);
				setState(7994);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7996);
				a_expr(0);
				setState(7997);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7999);
				match(UNBOUNDED);
				setState(8000);
				match(PRECEDING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8001);
				match(UNBOUNDED);
				setState(8002);
				match(FOLLOWING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8003);
				match(CURRENT_P);
				setState(8004);
				match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_row);
		try {
			setState(8021);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8007);
				match(ROW);
				setState(8008);
				match(T__4);
				setState(8009);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8010);
				match(ROW);
				setState(8011);
				match(T__4);
				setState(8012);
				expr_list(0);
				setState(8013);
				match(T__5);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8015);
				match(T__4);
				setState(8016);
				expr_list(0);
				setState(8017);
				match(T__3);
				setState(8018);
				a_expr(0);
				setState(8019);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(SqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SqlParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8023);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_OpContext extends ParserRuleContext {
		public TerminalNode Op() { return getToken(SqlParser.Op, 0); }
		public MathOpContext mathOp() {
			return getRuleContext(MathOpContext.class,0);
		}
		public All_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAll_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_OpContext all_Op() throws RecognitionException {
		All_OpContext _localctx = new All_OpContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_all_Op);
		try {
			setState(8027);
			switch (_input.LA(1)) {
			case Op:
				enterOuterAlt(_localctx, 1);
				{
				setState(8025);
				match(Op);
				}
				break;
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
				enterOuterAlt(_localctx, 2);
				{
				setState(8026);
				mathOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOpContext extends ParserRuleContext {
		public MathOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitMathOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOpContext mathOp() throws RecognitionException {
		MathOpContext _localctx = new MathOpContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_mathOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8029);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode Op() { return getToken(SqlParser.Op, 0); }
		public Qual_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQual_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_OpContext qual_Op() throws RecognitionException {
		Qual_OpContext _localctx = new Qual_OpContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_qual_Op);
		try {
			setState(8037);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8031);
				match(OPERATOR);
				setState(8032);
				match(T__4);
				setState(8033);
				any_operator();
				setState(8034);
				match(T__5);
				}
				break;
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(8036);
				match(Op);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public Qual_all_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQual_all_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_OpContext qual_all_Op() throws RecognitionException {
		Qual_all_OpContext _localctx = new Qual_all_OpContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_qual_all_Op);
		try {
			setState(8045);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8039);
				match(OPERATOR);
				setState(8040);
				match(T__4);
				setState(8041);
				any_operator();
				setState(8042);
				match(T__5);
				}
				break;
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case Op:
				enterOuterAlt(_localctx, 2);
				{
				setState(8044);
				all_Op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public All_OpContext all_Op() {
			return getRuleContext(All_OpContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_subquery_Op);
		try {
			setState(8059);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8047);
				match(OPERATOR);
				setState(8048);
				match(T__4);
				setState(8049);
				any_operator();
				setState(8050);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8052);
				all_Op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8053);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8054);
				match(NOT);
				setState(8055);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8056);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8057);
				match(NOT);
				setState(8058);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expr_listContext _localctx = new Expr_listContext(_ctx, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 986;
		enterRecursionRule(_localctx, 986, RULE_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8062);
			a_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8069);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					setState(8064);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8065);
					match(T__3);
					setState(8066);
					a_expr(0);
					}
					} 
				}
				setState(8071);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		return func_arg_list(0);
	}

	private Func_arg_listContext func_arg_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, _parentState);
		Func_arg_listContext _prevctx = _localctx;
		int _startState = 988;
		enterRecursionRule(_localctx, 988, RULE_func_arg_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8073);
			func_arg_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8080);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Func_arg_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_func_arg_list);
					setState(8075);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8076);
					match(T__3);
					setState(8077);
					func_arg_expr();
					}
					} 
				}
				setState(8082);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(SqlParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_func_arg_expr);
		try {
			setState(8088);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8083);
				param_name();
				setState(8084);
				match(COLON_EQUALS);
				setState(8085);
				a_expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8087);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		return type_list(0);
	}

	private Type_listContext type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Type_listContext _localctx = new Type_listContext(_ctx, _parentState);
		Type_listContext _prevctx = _localctx;
		int _startState = 992;
		enterRecursionRule(_localctx, 992, RULE_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8091);
			typename();
			}
			_ctx.stop = _input.LT(-1);
			setState(8098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type_list);
					setState(8093);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8094);
					match(T__3);
					setState(8095);
					typename();
					}
					} 
				}
				setState(8100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_array_expr);
		try {
			setState(8111);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8101);
				match(T__9);
				setState(8102);
				match(T__10);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8103);
				match(T__9);
				setState(8104);
				expr_list(0);
				setState(8105);
				match(T__10);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8107);
				match(T__9);
				setState(8108);
				array_expr_list(0);
				setState(8109);
				match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		return array_expr_list(0);
	}

	private Array_expr_listContext array_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, _parentState);
		Array_expr_listContext _prevctx = _localctx;
		int _startState = 996;
		enterRecursionRule(_localctx, 996, RULE_array_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8114);
			array_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8121);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_array_expr_list);
					setState(8116);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8117);
					match(T__3);
					setState(8118);
					array_expr();
					}
					} 
				}
				setState(8123);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_extract_list);
		try {
			setState(8129);
			switch (_input.LA(1)) {
			case DAY_P:
			case HOUR_P:
			case MINUTE_P:
			case MONTH_P:
			case SECOND_P:
			case YEAR_P:
			case SCONST:
			case IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8124);
				extract_arg();
				setState(8125);
				match(FROM);
				setState(8126);
				a_expr(0);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_extract_arg);
		try {
			setState(8139);
			switch (_input.LA(1)) {
			case SCONST:
				enterOuterAlt(_localctx, 1);
				{
				setState(8131);
				sconst();
				}
				break;
			case IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8132);
				match(IDENT);
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(8133);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(8134);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(8135);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8136);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8137);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(8138);
				match(SECOND_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext overlay_placing() {
			return getRuleContext(Overlay_placingContext.class,0);
		}
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_overlay_list);
		try {
			setState(8150);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8141);
				a_expr(0);
				setState(8142);
				overlay_placing();
				setState(8143);
				substr_from();
				setState(8144);
				substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8146);
				a_expr(0);
				setState(8147);
				overlay_placing();
				setState(8148);
				substr_from();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_placingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(SqlParser.PLACING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Overlay_placingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_placing; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOverlay_placing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_placingContext overlay_placing() throws RecognitionException {
		Overlay_placingContext _localctx = new Overlay_placingContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_overlay_placing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8152);
			match(PLACING);
			setState(8153);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_position_list);
		try {
			setState(8160);
			switch (_input.LA(1)) {
			case T__4:
			case T__7:
			case T__9:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8155);
				b_expr(0);
				setState(8156);
				match(IN_P);
				setState(8157);
				b_expr(0);
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_fromContext substr_from() {
			return getRuleContext(Substr_fromContext.class,0);
		}
		public Substr_forContext substr_for() {
			return getRuleContext(Substr_forContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_substr_list);
		try {
			setState(8178);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8162);
				a_expr(0);
				setState(8163);
				substr_from();
				setState(8164);
				substr_for();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8166);
				a_expr(0);
				setState(8167);
				substr_for();
				setState(8168);
				substr_from();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8170);
				a_expr(0);
				setState(8171);
				substr_from();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8173);
				a_expr(0);
				setState(8174);
				substr_for();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8176);
				expr_list(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_from; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_fromContext substr_from() throws RecognitionException {
		Substr_fromContext _localctx = new Substr_fromContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_substr_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8180);
			match(FROM);
			setState(8181);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_forContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Substr_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_for; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSubstr_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_forContext substr_for() throws RecognitionException {
		Substr_forContext _localctx = new Substr_forContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_substr_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8183);
			match(FOR);
			setState(8184);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_trim_list);
		try {
			setState(8193);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8186);
				a_expr(0);
				setState(8187);
				match(FROM);
				setState(8188);
				expr_list(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8190);
				match(FROM);
				setState(8191);
				expr_list(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8192);
				expr_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIn_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_in_expr);
		try {
			setState(8200);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8195);
				match(T__4);
				setState(8196);
				expr_list(0);
				setState(8197);
				match(T__5);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8199);
				select_with_parens(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(SqlParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8202);
			match(CASE);
			setState(8203);
			case_arg();
			setState(8204);
			when_clause_list(0);
			setState(8205);
			case_default();
			setState(8206);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public When_clauseContext when_clause() {
			return getRuleContext(When_clauseContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		return when_clause_list(0);
	}

	private When_clause_listContext when_clause_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, _parentState);
		When_clause_listContext _prevctx = _localctx;
		int _startState = 1020;
		enterRecursionRule(_localctx, 1020, RULE_when_clause_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8209);
			when_clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8215);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new When_clause_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_when_clause_list);
					setState(8211);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8212);
					when_clause();
					}
					} 
				}
				setState(8217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(SqlParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8218);
			match(WHEN);
			setState(8219);
			a_expr(0);
			setState(8220);
			match(THEN);
			setState(8221);
			a_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(SqlParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_case_default);
		try {
			setState(8226);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8223);
				match(ELSE);
				setState(8224);
				a_expr(0);
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_case_arg);
		try {
			setState(8230);
			switch (_input.LA(1)) {
			case T__4:
			case T__7:
			case T__9:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8228);
				a_expr(0);
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_columnref);
		try {
			setState(8236);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8232);
				colId();
				setState(8233);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8235);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_indirection_el);
		try {
			setState(8252);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8238);
				match(T__2);
				setState(8239);
				match(T__6);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8240);
				match(T__2);
				setState(8241);
				attr_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8242);
				match(T__9);
				setState(8243);
				a_expr(0);
				setState(8244);
				match(T__10);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8246);
				match(T__9);
				setState(8247);
				a_expr(0);
				setState(8248);
				match(T__17);
				setState(8249);
				a_expr(0);
				setState(8250);
				match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 1032;
		enterRecursionRule(_localctx, 1032, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8255);
			indirection_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8261);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,419,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(8257);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8258);
					indirection_el();
					}
					} 
				}
				setState(8263);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,419,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Indirection_elContext indirection_el() {
			return getRuleContext(Indirection_elContext.class,0);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		return opt_indirection(0);
	}

	private Opt_indirectionContext opt_indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, _parentState);
		Opt_indirectionContext _prevctx = _localctx;
		int _startState = 1034;
		enterRecursionRule(_localctx, 1034, RULE_opt_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(8269);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_indirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_indirection);
					setState(8265);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8266);
					indirection_el();
					}
					} 
				}
				setState(8271);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_asymmetricContext extends ParserRuleContext {
		public TerminalNode ASYMMETRIC() { return getToken(SqlParser.ASYMMETRIC, 0); }
		public Opt_asymmetricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asymmetric; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitOpt_asymmetric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asymmetricContext opt_asymmetric() throws RecognitionException {
		Opt_asymmetricContext _localctx = new Opt_asymmetricContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_opt_asymmetric);
		try {
			setState(8274);
			switch (_input.LA(1)) {
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(8272);
				match(ASYMMETRIC);
				}
				break;
			case T__4:
			case T__7:
			case T__9:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public Ctext_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_exprContext ctext_expr() throws RecognitionException {
		Ctext_exprContext _localctx = new Ctext_exprContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_ctext_expr);
		try {
			setState(8278);
			switch (_input.LA(1)) {
			case T__4:
			case T__7:
			case T__9:
			case T__13:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case AUTHORIZATION:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BETWEEN:
			case BIGINT:
			case BINARY:
			case BIT:
			case BOOLEAN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG_P:
			case CHAIN:
			case CHAR_P:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLATION:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONCURRENTLY:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CROSS:
			case CSV:
			case CURRENT_P:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DEC:
			case DECIMAL_P:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE_P:
			case FAMILY:
			case FIRST_P:
			case FLOAT_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FREEZE:
			case FULL:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case GREATEST:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case ILIKE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INNER_P:
			case INOUT:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case INVOKER:
			case IS:
			case ISNULL:
			case ISOLATION:
			case JOIN:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEAST:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NATIONAL:
			case NATURAL:
			case NCHAR:
			case NEXT:
			case NO:
			case NONE:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOTNULL:
			case NOWAIT:
			case NULL_P:
			case NULLIF:
			case NULLS_P:
			case NUMERIC:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OUT_P:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case OVERLAY:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POSITION:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REAL:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SESSION_USER:
			case SET:
			case SETOF:
			case SHARE:
			case SHOW:
			case SIMILAR:
			case SIMPLE:
			case SMALLINT:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SUBSTRING:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TIME:
			case TIMESTAMP:
			case TRANSACTION:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE_P:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNIQUE:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case USER:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VERBOSE:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case SCONST:
			case BCONST:
			case XCONST:
			case IDENT:
			case PARAM:
			case FCONST:
			case ICONST:
			case Op:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8276);
				a_expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8277);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ctext_expr_listContext extends ParserRuleContext {
		public Ctext_exprContext ctext_expr() {
			return getRuleContext(Ctext_exprContext.class,0);
		}
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_expr_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_expr_listContext ctext_expr_list() throws RecognitionException {
		return ctext_expr_list(0);
	}

	private Ctext_expr_listContext ctext_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Ctext_expr_listContext _localctx = new Ctext_expr_listContext(_ctx, _parentState);
		Ctext_expr_listContext _prevctx = _localctx;
		int _startState = 1040;
		enterRecursionRule(_localctx, 1040, RULE_ctext_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8281);
			ctext_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8288);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Ctext_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_ctext_expr_list);
					setState(8283);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8284);
					match(T__3);
					setState(8285);
					ctext_expr();
					}
					} 
				}
				setState(8290);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Ctext_rowContext extends ParserRuleContext {
		public Ctext_expr_listContext ctext_expr_list() {
			return getRuleContext(Ctext_expr_listContext.class,0);
		}
		public Ctext_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctext_row; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCtext_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ctext_rowContext ctext_row() throws RecognitionException {
		Ctext_rowContext _localctx = new Ctext_rowContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_ctext_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8291);
			match(T__4);
			setState(8292);
			ctext_expr_list(0);
			setState(8293);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public Target_elContext target_el() {
			return getRuleContext(Target_elContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		return target_list(0);
	}

	private Target_listContext target_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Target_listContext _localctx = new Target_listContext(_ctx, _parentState);
		Target_listContext _prevctx = _localctx;
		int _startState = 1044;
		enterRecursionRule(_localctx, 1044, RULE_target_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8296);
			target_el();
			}
			_ctx.stop = _input.LT(-1);
			setState(8303);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Target_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_target_list);
					setState(8298);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8299);
					match(T__3);
					setState(8300);
					target_el();
					}
					} 
				}
				setState(8305);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitTarget_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_target_el);
		try {
			setState(8315);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8306);
				match(T__6);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8307);
				a_expr(0);
				setState(8308);
				match(AS);
				setState(8309);
				colLabel();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8311);
				a_expr(0);
				setState(8312);
				match(IDENT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8314);
				a_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		return qualified_name_list(0);
	}

	private Qualified_name_listContext qualified_name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, _parentState);
		Qualified_name_listContext _prevctx = _localctx;
		int _startState = 1048;
		enterRecursionRule(_localctx, 1048, RULE_qualified_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8318);
			qualified_name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8325);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualified_name_list);
					setState(8320);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8321);
					match(T__3);
					setState(8322);
					qualified_name();
					}
					} 
				}
				setState(8327);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_qualified_name);
		try {
			setState(8332);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8328);
				colId();
				setState(8329);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8331);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 1052;
		enterRecursionRule(_localctx, 1052, RULE_name_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8335);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(8342);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(8337);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8338);
					match(T__3);
					setState(8339);
					name();
					}
					} 
				}
				setState(8344);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8345);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitDatabase_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_nameContext database_name() throws RecognitionException {
		Database_nameContext _localctx = new Database_nameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_database_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8347);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_methodContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Access_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAccess_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_methodContext access_method() throws RecognitionException {
		Access_methodContext _localctx = new Access_methodContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_access_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8349);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8351);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8353);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8355);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_func_name);
		try {
			setState(8361);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8357);
				colId();
				setState(8358);
				indirection(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8360);
				type_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public ConstTypenameContext constTypename() {
			return getRuleContext(ConstTypenameContext.class,0);
		}
		public TerminalNode FCONST() { return getToken(SqlParser.FCONST, 0); }
		public TerminalNode BCONST() { return getToken(SqlParser.BCONST, 0); }
		public TerminalNode XCONST() { return getToken(SqlParser.XCONST, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_aexprConst);
		try {
			setState(8394);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8363);
				constInterval();
				setState(8364);
				match(T__4);
				setState(8365);
				iconst();
				setState(8366);
				match(T__5);
				setState(8367);
				sconst();
				setState(8368);
				opt_interval();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8370);
				func_name();
				setState(8371);
				match(T__4);
				setState(8372);
				func_arg_list(0);
				setState(8373);
				match(T__5);
				setState(8374);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8376);
				constInterval();
				setState(8377);
				sconst();
				setState(8378);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8380);
				func_name();
				setState(8381);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8383);
				constTypename();
				setState(8384);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8386);
				iconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8387);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8388);
				match(FCONST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8389);
				match(BCONST);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8390);
				match(XCONST);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8391);
				match(TRUE_P);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8392);
				match(FALSE_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8393);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IconstContext extends ParserRuleContext {
		public TerminalNode ICONST() { return getToken(SqlParser.ICONST, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8396);
			match(ICONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SconstContext extends ParserRuleContext {
		public TerminalNode SCONST() { return getToken(SqlParser.SCONST, 0); }
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8398);
			match(SCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public RoleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitRoleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdContext roleId() throws RecognitionException {
		RoleIdContext _localctx = new RoleIdContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_roleId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8400);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_signedIconst);
		try {
			setState(8407);
			switch (_input.LA(1)) {
			case T__13:
				enterOuterAlt(_localctx, 1);
				{
				setState(8402);
				match(T__13);
				setState(8403);
				iconst();
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404);
				match(T__7);
				setState(8405);
				iconst();
				}
				break;
			case ICONST:
				enterOuterAlt(_localctx, 3);
				{
				setState(8406);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_colId);
		try {
			setState(8412);
			switch (_input.LA(1)) {
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARRAY:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG_P:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURRENT_P:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INPUT_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case IS:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LC_COLLATE_P:
			case LC_CTYPE_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE_P:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case K_MESSAGE:
			case K_NEXT:
			case K_MESSAGE_TEXT:
			case K_STACKED:
			case K_PG_EXCEPTION_CONTEXT:
			case K_USE_COLUMN:
			case K_DUMP:
			case K_SLICE:
			case K_RESULT_OID:
			case K_ERROR:
			case K_FORWARD:
			case K_RETURNED_SQLSTATE:
			case K_BACKWARD:
			case K_HINT:
			case K_CURRENT:
			case K_DETAIL:
			case K_SCROLL:
			case K_USE_VARIABLE:
			case K_ALIAS:
			case K_INFO:
			case K_NO:
			case K_RELATIVE:
			case K_LOG:
			case K_QUERY:
			case K_ROW_COUNT:
			case K_DEBUG:
			case K_CONSTANT:
			case K_CURSOR:
			case K_PG_EXCEPTION_DETAIL:
			case K_PRIOR:
			case K_FIRST:
			case K_LAST:
			case K_ROWTYPE:
			case K_VARIABLE_CONFLICT:
			case K_PG_EXCEPTION_HINT:
			case K_OPTION:
			case K_NOTICE:
			case K_WARNING:
			case K_REVERSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8409);
				unreserved_keyword();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT_P:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8410);
				col_name_keyword();
				}
				break;
			case IDENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8411);
				match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_type_function_name);
		try {
			setState(8417);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8414);
				unreserved_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8415);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8416);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public TerminalNode IDENT() { return getToken(SqlParser.IDENT, 0); }
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_colLabel);
		try {
			setState(8424);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8419);
				unreserved_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8420);
				col_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8421);
				type_func_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8422);
				reserved_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8423);
				match(IDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(SqlParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(SqlParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(SqlParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(SqlParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(SqlParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(SqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(SqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(SqlParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(SqlParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(SqlParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(SqlParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(SqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SqlParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(SqlParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(SqlParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(SqlParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(SqlParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(SqlParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(SqlParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SqlParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(SqlParser.CASCADED, 0); }
		public TerminalNode CATALOG_P() { return getToken(SqlParser.CATALOG_P, 0); }
		public TerminalNode CHAIN() { return getToken(SqlParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SqlParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SqlParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(SqlParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(SqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlParser.CLUSTER, 0); }
		public TerminalNode COMMENT() { return getToken(SqlParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(SqlParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(SqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(SqlParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SqlParser.CONFIGURATION, 0); }
		public TerminalNode CONNECTION() { return getToken(SqlParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(SqlParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(SqlParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(SqlParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(SqlParser.COPY, 0); }
		public TerminalNode COST() { return getToken(SqlParser.COST, 0); }
		public TerminalNode CSV() { return getToken(SqlParser.CSV, 0); }
		public TerminalNode CURRENT_P() { return getToken(SqlParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(SqlParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(SqlParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(SqlParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(SqlParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(SqlParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SqlParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(SqlParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(SqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(SqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(SqlParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(SqlParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(SqlParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(SqlParser.DELIMITERS, 0); }
		public TerminalNode DICTIONARY() { return getToken(SqlParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(SqlParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(SqlParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(SqlParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(SqlParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(SqlParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(SqlParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(SqlParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(SqlParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(SqlParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SqlParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(SqlParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlParser.ESCAPE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(SqlParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(SqlParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(SqlParser.FAMILY, 0); }
		public TerminalNode FIRST_P() { return getToken(SqlParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(SqlParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(SqlParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlParser.FUNCTIONS, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(SqlParser.GRANTED, 0); }
		public TerminalNode HANDLER() { return getToken(SqlParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(SqlParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(SqlParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(SqlParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(SqlParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(SqlParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SqlParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(SqlParser.IMPLICIT_P, 0); }
		public TerminalNode INCLUDING() { return getToken(SqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(SqlParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(SqlParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(SqlParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(SqlParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(SqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(SqlParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(SqlParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(SqlParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(SqlParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(SqlParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(SqlParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(SqlParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(SqlParser.LAST_P, 0); }
		public TerminalNode LC_COLLATE_P() { return getToken(SqlParser.LC_COLLATE_P, 0); }
		public TerminalNode LC_CTYPE_P() { return getToken(SqlParser.LC_CTYPE_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SqlParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(SqlParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(SqlParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(SqlParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(SqlParser.LOCK_P, 0); }
		public TerminalNode MAPPING() { return getToken(SqlParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(SqlParser.MATCH, 0); }
		public TerminalNode MAXVALUE() { return getToken(SqlParser.MAXVALUE, 0); }
		public TerminalNode MINUTE_P() { return getToken(SqlParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(SqlParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(SqlParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(SqlParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(SqlParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(SqlParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(SqlParser.NAMES, 0); }
		public TerminalNode NEXT() { return getToken(SqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(SqlParser.NO, 0); }
		public TerminalNode NOTHING() { return getToken(SqlParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(SqlParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(SqlParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(SqlParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(SqlParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(SqlParser.OF, 0); }
		public TerminalNode OFF() { return getToken(SqlParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(SqlParser.OIDS, 0); }
		public TerminalNode OPERATOR() { return getToken(SqlParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(SqlParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlParser.OPTIONS, 0); }
		public TerminalNode OWNED() { return getToken(SqlParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(SqlParser.OWNER, 0); }
		public TerminalNode PARSER() { return getToken(SqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(SqlParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(SqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(SqlParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(SqlParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(SqlParser.PLANS, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(SqlParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(SqlParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(SqlParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(SqlParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SqlParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(SqlParser.PROCEDURE, 0); }
		public TerminalNode QUOTE() { return getToken(SqlParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(SqlParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(SqlParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(SqlParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(SqlParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(SqlParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(SqlParser.REF, 0); }
		public TerminalNode REINDEX() { return getToken(SqlParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(SqlParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(SqlParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(SqlParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(SqlParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(SqlParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(SqlParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(SqlParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SqlParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlParser.ROLLBACK, 0); }
		public TerminalNode ROWS() { return getToken(SqlParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(SqlParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(SqlParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(SqlParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(SqlParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(SqlParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(SqlParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(SqlParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(SqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(SqlParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(SqlParser.SET, 0); }
		public TerminalNode SHARE() { return getToken(SqlParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(SqlParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(SqlParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SqlParser.SNAPSHOT, 0); }
		public TerminalNode STABLE() { return getToken(SqlParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(SqlParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(SqlParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(SqlParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(SqlParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(SqlParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(SqlParser.STORAGE, 0); }
		public TerminalNode STRICT_P() { return getToken(SqlParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(SqlParser.STRIP_P, 0); }
		public TerminalNode SYSID() { return getToken(SqlParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(SqlParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(SqlParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(SqlParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(SqlParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(SqlParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(SqlParser.TEXT_P, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlParser.TRANSACTION, 0); }
		public TerminalNode TRIGGER() { return getToken(SqlParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(SqlParser.TRUSTED, 0); }
		public List<TerminalNode> TYPE_P() { return getTokens(SqlParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(SqlParser.TYPE_P, i);
		}
		public TerminalNode TYPES_P() { return getToken(SqlParser.TYPES_P, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(SqlParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(SqlParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(SqlParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(SqlParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SqlParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(SqlParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(SqlParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(SqlParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(SqlParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(SqlParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(SqlParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(SqlParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(SqlParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(SqlParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(SqlParser.WHITESPACE_P, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(SqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(SqlParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(SqlParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(SqlParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(SqlParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(SqlParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(SqlParser.ZONE, 0); }
		public List<TerminalNode> K_QUERY() { return getTokens(SqlParser.K_QUERY); }
		public TerminalNode K_QUERY(int i) {
			return getToken(SqlParser.K_QUERY, i);
		}
		public TerminalNode K_ALIAS() { return getToken(SqlParser.K_ALIAS, 0); }
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public TerminalNode K_BACKWARD() { return getToken(SqlParser.K_BACKWARD, 0); }
		public TerminalNode K_CONSTANT() { return getToken(SqlParser.K_CONSTANT, 0); }
		public TerminalNode K_CURRENT() { return getToken(SqlParser.K_CURRENT, 0); }
		public TerminalNode K_CURSOR() { return getToken(SqlParser.K_CURSOR, 0); }
		public TerminalNode K_DEBUG() { return getToken(SqlParser.K_DEBUG, 0); }
		public TerminalNode K_DETAIL() { return getToken(SqlParser.K_DETAIL, 0); }
		public TerminalNode K_DUMP() { return getToken(SqlParser.K_DUMP, 0); }
		public TerminalNode K_ERROR() { return getToken(SqlParser.K_ERROR, 0); }
		public TerminalNode K_FIRST() { return getToken(SqlParser.K_FIRST, 0); }
		public TerminalNode K_FORWARD() { return getToken(SqlParser.K_FORWARD, 0); }
		public TerminalNode K_HINT() { return getToken(SqlParser.K_HINT, 0); }
		public TerminalNode K_INFO() { return getToken(SqlParser.K_INFO, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode K_LAST() { return getToken(SqlParser.K_LAST, 0); }
		public TerminalNode K_LOG() { return getToken(SqlParser.K_LOG, 0); }
		public TerminalNode K_MESSAGE() { return getToken(SqlParser.K_MESSAGE, 0); }
		public TerminalNode K_MESSAGE_TEXT() { return getToken(SqlParser.K_MESSAGE_TEXT, 0); }
		public TerminalNode K_NEXT() { return getToken(SqlParser.K_NEXT, 0); }
		public TerminalNode K_NO() { return getToken(SqlParser.K_NO, 0); }
		public TerminalNode K_NOTICE() { return getToken(SqlParser.K_NOTICE, 0); }
		public TerminalNode K_OPTION() { return getToken(SqlParser.K_OPTION, 0); }
		public TerminalNode K_PG_EXCEPTION_CONTEXT() { return getToken(SqlParser.K_PG_EXCEPTION_CONTEXT, 0); }
		public TerminalNode K_PG_EXCEPTION_DETAIL() { return getToken(SqlParser.K_PG_EXCEPTION_DETAIL, 0); }
		public TerminalNode K_PG_EXCEPTION_HINT() { return getToken(SqlParser.K_PG_EXCEPTION_HINT, 0); }
		public TerminalNode K_PRIOR() { return getToken(SqlParser.K_PRIOR, 0); }
		public TerminalNode K_RELATIVE() { return getToken(SqlParser.K_RELATIVE, 0); }
		public TerminalNode K_RESULT_OID() { return getToken(SqlParser.K_RESULT_OID, 0); }
		public TerminalNode K_RETURNED_SQLSTATE() { return getToken(SqlParser.K_RETURNED_SQLSTATE, 0); }
		public TerminalNode K_REVERSE() { return getToken(SqlParser.K_REVERSE, 0); }
		public TerminalNode K_ROW_COUNT() { return getToken(SqlParser.K_ROW_COUNT, 0); }
		public TerminalNode K_ROWTYPE() { return getToken(SqlParser.K_ROWTYPE, 0); }
		public TerminalNode K_SCROLL() { return getToken(SqlParser.K_SCROLL, 0); }
		public TerminalNode K_SLICE() { return getToken(SqlParser.K_SLICE, 0); }
		public TerminalNode K_STACKED() { return getToken(SqlParser.K_STACKED, 0); }
		public TerminalNode K_USE_COLUMN() { return getToken(SqlParser.K_USE_COLUMN, 0); }
		public TerminalNode K_USE_VARIABLE() { return getToken(SqlParser.K_USE_VARIABLE, 0); }
		public TerminalNode K_VARIABLE_CONFLICT() { return getToken(SqlParser.K_VARIABLE_CONFLICT, 0); }
		public TerminalNode K_WARNING() { return getToken(SqlParser.K_WARNING, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8426);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT_P) | (1L << ABSOLUTE_P) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD_P) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARRAY) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN_P) | (1L << BY) | (1L << CACHE) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG_P))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHAIN - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMENTS - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONFIGURATION - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONTENT_P - 64)) | (1L << (CONTINUE_P - 64)) | (1L << (CONVERSION_P - 64)) | (1L << (COPY - 64)) | (1L << (COST - 64)) | (1L << (CSV - 64)) | (1L << (CURRENT_P - 64)) | (1L << (CURSOR - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA_P - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY_P - 64)) | (1L << (DEALLOCATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE_P - 64)) | (1L << (DELIMITER - 64)) | (1L << (DELIMITERS - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE_P - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT_P - 64)) | (1L << (DOMAIN_P - 64)) | (1L << (DOUBLE_P - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DROP - 128)) | (1L << (EACH - 128)) | (1L << (ENABLE_P - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (ENUM_P - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUDING - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTENSION - 128)) | (1L << (EXTERNAL - 128)) | (1L << (FAMILY - 128)) | (1L << (FIRST_P - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FORCE - 128)) | (1L << (FORWARD - 128)) | (1L << (FUNCTION - 128)) | (1L << (FUNCTIONS - 128)) | (1L << (GLOBAL - 128)) | (1L << (GRANTED - 128)) | (1L << (HANDLER - 128)) | (1L << (HEADER_P - 128)) | (1L << (HOLD - 128)) | (1L << (HOUR_P - 128)) | (1L << (IDENTITY_P - 128)) | (1L << (IF_P - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IMMUTABLE - 128)) | (1L << (IMPLICIT_P - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXES - 128)) | (1L << (INHERIT - 128)) | (1L << (INHERITS - 128)) | (1L << (INLINE_P - 128)) | (1L << (INPUT_P - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INSERT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INSTEAD - 192)) | (1L << (INVOKER - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (KEY - 192)) | (1L << (LABEL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LARGE_P - 192)) | (1L << (LAST_P - 192)) | (1L << (LC_COLLATE_P - 192)) | (1L << (LC_CTYPE_P - 192)) | (1L << (LEAKPROOF - 192)) | (1L << (LEVEL - 192)) | (1L << (LISTEN - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCATION - 192)) | (1L << (LOCK_P - 192)) | (1L << (MAPPING - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MINUTE_P - 192)) | (1L << (MINVALUE - 192)) | (1L << (MODE - 192)) | (1L << (MONTH_P - 192)) | (1L << (MOVE - 192)) | (1L << (NAME_P - 192)) | (1L << (NAMES - 192)) | (1L << (NEXT - 192)) | (1L << (NO - 192)) | (1L << (NOTHING - 192)) | (1L << (NOTIFY - 192)) | (1L << (NOWAIT - 192)) | (1L << (NULLS_P - 192)) | (1L << (OBJECT_P - 192)) | (1L << (OF - 192)) | (1L << (OFF - 192)) | (1L << (OIDS - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OPERATOR - 256)) | (1L << (OPTION - 256)) | (1L << (OPTIONS - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARSER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PASSWORD - 256)) | (1L << (PLANS - 256)) | (1L << (PRECEDING - 256)) | (1L << (PREPARE - 256)) | (1L << (PREPARED - 256)) | (1L << (PRESERVE - 256)) | (1L << (PRIOR - 256)) | (1L << (PRIVILEGES - 256)) | (1L << (PROCEDURAL - 256)) | (1L << (PROCEDURE - 256)) | (1L << (QUOTE - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (REASSIGN - 256)) | (1L << (RECHECK - 256)) | (1L << (RECURSIVE - 256)) | (1L << (REF - 256)) | (1L << (REINDEX - 256)) | (1L << (RELATIVE_P - 256)) | (1L << (RELEASE - 256)) | (1L << (RENAME - 256)) | (1L << (REPEATABLE - 256)) | (1L << (REPLACE - 256)) | (1L << (REPLICA - 256)) | (1L << (RESET - 256)) | (1L << (RESTART - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURNS - 256)) | (1L << (REVOKE - 256)) | (1L << (ROLE - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROWS - 256)) | (1L << (RULE - 256)) | (1L << (SAVEPOINT - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCROLL - 256)) | (1L << (SEARCH - 256)) | (1L << (SECOND_P - 256)) | (1L << (SECURITY - 256)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (SEQUENCE - 321)) | (1L << (SEQUENCES - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERVER - 321)) | (1L << (SESSION - 321)) | (1L << (SET - 321)) | (1L << (SHARE - 321)) | (1L << (SHOW - 321)) | (1L << (SIMPLE - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (STABLE - 321)) | (1L << (STANDALONE_P - 321)) | (1L << (START - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATISTICS - 321)) | (1L << (STDIN - 321)) | (1L << (STDOUT - 321)) | (1L << (STORAGE - 321)) | (1L << (STRICT_P - 321)) | (1L << (STRIP_P - 321)) | (1L << (SYSID - 321)) | (1L << (SYSTEM_P - 321)) | (1L << (TABLES - 321)) | (1L << (TABLESPACE - 321)) | (1L << (TEMP - 321)) | (1L << (TEMPLATE - 321)) | (1L << (TEMPORARY - 321)) | (1L << (TEXT_P - 321)) | (1L << (TRANSACTION - 321)) | (1L << (TRIGGER - 321)) | (1L << (TRUNCATE - 321)) | (1L << (TRUSTED - 321)) | (1L << (TYPE_P - 321)) | (1L << (TYPES_P - 321)) | (1L << (UNBOUNDED - 321)) | (1L << (UNCOMMITTED - 321)) | (1L << (UNENCRYPTED - 321)) | (1L << (UNKNOWN - 321)) | (1L << (UNLISTEN - 321)) | (1L << (UNLOGGED - 321)) | (1L << (UNTIL - 321)) | (1L << (UPDATE - 321)) | (1L << (VACUUM - 321)) | (1L << (VALID - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (VALIDATE - 385)) | (1L << (VALIDATOR - 385)) | (1L << (VALUE_P - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION_P - 385)) | (1L << (VIEW - 385)) | (1L << (VOLATILE - 385)) | (1L << (WHITESPACE_P - 385)) | (1L << (WITHOUT - 385)) | (1L << (WORK - 385)) | (1L << (WRAPPER - 385)) | (1L << (WRITE - 385)) | (1L << (XML_P - 385)) | (1L << (YEAR_P - 385)) | (1L << (YES_P - 385)) | (1L << (ZONE - 385)) | (1L << (K_MESSAGE - 385)) | (1L << (K_NEXT - 385)) | (1L << (K_MESSAGE_TEXT - 385)) | (1L << (K_STACKED - 385)) | (1L << (K_PG_EXCEPTION_CONTEXT - 385)) | (1L << (K_USE_COLUMN - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (K_DUMP - 449)) | (1L << (K_SLICE - 449)) | (1L << (K_RESULT_OID - 449)) | (1L << (K_ERROR - 449)) | (1L << (K_FORWARD - 449)) | (1L << (K_RETURNED_SQLSTATE - 449)) | (1L << (K_BACKWARD - 449)) | (1L << (K_HINT - 449)) | (1L << (K_CURRENT - 449)) | (1L << (K_DETAIL - 449)) | (1L << (K_SCROLL - 449)) | (1L << (K_USE_VARIABLE - 449)) | (1L << (K_ALIAS - 449)) | (1L << (K_INFO - 449)) | (1L << (K_NO - 449)) | (1L << (K_RELATIVE - 449)) | (1L << (K_LOG - 449)) | (1L << (K_QUERY - 449)) | (1L << (K_ROW_COUNT - 449)) | (1L << (K_DEBUG - 449)) | (1L << (K_CONSTANT - 449)) | (1L << (K_CURSOR - 449)) | (1L << (K_PG_EXCEPTION_DETAIL - 449)) | (1L << (K_PRIOR - 449)) | (1L << (K_FIRST - 449)) | (1L << (K_LAST - 449)) | (1L << (K_ROWTYPE - 449)) | (1L << (K_VARIABLE_CONFLICT - 449)) | (1L << (K_PG_EXCEPTION_HINT - 449)) | (1L << (K_OPTION - 449)) | (1L << (K_NOTICE - 449)) | (1L << (K_WARNING - 449)) | (1L << (K_REVERSE - 449)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SqlParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SqlParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(SqlParser.BIT, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(SqlParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(SqlParser.CHAR_P, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(SqlParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(SqlParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(SqlParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(SqlParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(SqlParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(SqlParser.GREATEST, 0); }
		public TerminalNode INOUT() { return getToken(SqlParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(SqlParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(SqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(SqlParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(SqlParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(SqlParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(SqlParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(SqlParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlParser.NUMERIC, 0); }
		public TerminalNode OUT_P() { return getToken(SqlParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(SqlParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(SqlParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(SqlParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(SqlParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(SqlParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(SqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(SqlParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(SqlParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(SqlParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(SqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(SqlParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(SqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(SqlParser.XMLFOREST, 0); }
		public TerminalNode XMLPARSE() { return getToken(SqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(SqlParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(SqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(SqlParser.XMLSERIALIZE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_col_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8428);
			_la = _input.LA(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (BETWEEN - 50)) | (1L << (BIGINT - 50)) | (1L << (BIT - 50)) | (1L << (BOOLEAN_P - 50)) | (1L << (CHAR_P - 50)) | (1L << (CHARACTER - 50)) | (1L << (COALESCE - 50)) | (1L << (DEC - 50)) | (1L << (DECIMAL_P - 50)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (EXISTS - 142)) | (1L << (EXTRACT - 142)) | (1L << (FLOAT_P - 142)) | (1L << (GREATEST - 142)) | (1L << (INOUT - 142)) | (1L << (INT_P - 142)) | (1L << (INTEGER - 142)) | (1L << (INTERVAL - 142)))) != 0) || ((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (LEAST - 212)) | (1L << (NATIONAL - 212)) | (1L << (NCHAR - 212)) | (1L << (NONE - 212)) | (1L << (NULLIF - 212)) | (1L << (NUMERIC - 212)) | (1L << (OUT_P - 212)) | (1L << (OVERLAY - 212)) | (1L << (POSITION - 212)))) != 0) || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (PRECISION - 277)) | (1L << (REAL - 277)) | (1L << (ROW - 277)) | (1L << (SETOF - 277)) | (1L << (SMALLINT - 277)))) != 0) || ((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (SUBSTRING - 346)) | (1L << (TIME - 346)) | (1L << (TIMESTAMP - 346)) | (1L << (TREAT - 346)) | (1L << (TRIM - 346)) | (1L << (VALUES - 346)) | (1L << (VARCHAR - 346)) | (1L << (XMLATTRIBUTES - 346)) | (1L << (XMLCONCAT - 346)) | (1L << (XMLELEMENT - 346)) | (1L << (XMLEXISTS - 346)))) != 0) || ((((_la - 410)) & ~0x3f) == 0 && ((1L << (_la - 410)) & ((1L << (XMLFOREST - 410)) | (1L << (XMLPARSE - 410)) | (1L << (XMLPI - 410)) | (1L << (XMLROOT - 410)) | (1L << (XMLSERIALIZE - 410)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(SqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(SqlParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(SqlParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SqlParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(SqlParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SqlParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(SqlParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(SqlParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(SqlParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(SqlParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(SqlParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(SqlParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(SqlParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(SqlParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(SqlParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(SqlParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(SqlParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(SqlParser.OUTER_P, 0); }
		public TerminalNode OVER() { return getToken(SqlParser.OVER, 0); }
		public TerminalNode OVERLAPS() { return getToken(SqlParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(SqlParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(SqlParser.SIMILAR, 0); }
		public TerminalNode VERBOSE() { return getToken(SqlParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8430);
			_la = _input.LA(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (AUTHORIZATION - 46)) | (1L << (BINARY - 46)) | (1L << (COLLATION - 46)) | (1L << (CONCURRENTLY - 46)) | (1L << (CROSS - 46)) | (1L << (CURRENT_SCHEMA - 46)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (FREEZE - 157)) | (1L << (FULL - 157)) | (1L << (ILIKE - 157)) | (1L << (INNER_P - 157)) | (1L << (IS - 157)) | (1L << (ISNULL - 157)) | (1L << (JOIN - 157)) | (1L << (LEFT - 157)) | (1L << (LIKE - 157)))) != 0) || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (NATURAL - 235)) | (1L << (NOTNULL - 235)) | (1L << (OUTER_P - 235)) | (1L << (OVER - 235)) | (1L << (OVERLAPS - 235)))) != 0) || _la==RIGHT || _la==SIMILAR || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SqlParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(SqlParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(SqlParser.AND, 0); }
		public TerminalNode ANY() { return getToken(SqlParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(SqlParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(SqlParser.AS, 0); }
		public TerminalNode ASC() { return getToken(SqlParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SqlParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(SqlParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(SqlParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(SqlParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(SqlParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(SqlParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(SqlParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(SqlParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(SqlParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(SqlParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SqlParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(SqlParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(SqlParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(SqlParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(SqlParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(SqlParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(SqlParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(SqlParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(SqlParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(SqlParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(SqlParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(SqlParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(SqlParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(SqlParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(SqlParser.INTO, 0); }
		public TerminalNode LEADING() { return getToken(SqlParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(SqlParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(SqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(SqlParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(SqlParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(SqlParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(SqlParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(SqlParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(SqlParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(SqlParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(SqlParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(SqlParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(SqlParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(SqlParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SqlParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(SqlParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(SqlParser.THEN, 0); }
		public TerminalNode TO() { return getToken(SqlParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(SqlParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(SqlParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(SqlParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(SqlParser.USER, 0); }
		public TerminalNode USING() { return getToken(SqlParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(SqlParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(SqlParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(SqlParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(SqlParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlVisitor ) return ((SqlVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8432);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASYMMETRIC) | (1L << BOTH) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (CHECK - 68)) | (1L << (COLLATE - 68)) | (1L << (COLUMN - 68)) | (1L << (CONSTRAINT - 68)) | (1L << (CREATE - 68)) | (1L << (CURRENT_CATALOG - 68)) | (1L << (CURRENT_DATE - 68)) | (1L << (CURRENT_ROLE - 68)) | (1L << (CURRENT_TIME - 68)) | (1L << (CURRENT_TIMESTAMP - 68)) | (1L << (CURRENT_USER - 68)) | (1L << (DEFAULT - 68)) | (1L << (DEFERRABLE - 68)) | (1L << (DESC - 68)) | (1L << (DISTINCT - 68)) | (1L << (DO - 68)) | (1L << (ELSE - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (END_P - 134)) | (1L << (EXCEPT - 134)) | (1L << (FALSE_P - 134)) | (1L << (FETCH - 134)) | (1L << (FOR - 134)) | (1L << (FOREIGN - 134)) | (1L << (FROM - 134)) | (1L << (GRANT - 134)) | (1L << (GROUP_P - 134)) | (1L << (HAVING - 134)) | (1L << (IN_P - 134)) | (1L << (INITIALLY - 134)) | (1L << (INTERSECT - 134)) | (1L << (INTO - 134)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (LEADING - 210)) | (1L << (LIMIT - 210)) | (1L << (LOCALTIME - 210)) | (1L << (LOCALTIMESTAMP - 210)) | (1L << (NOT - 210)) | (1L << (NULL_P - 210)) | (1L << (OFFSET - 210)) | (1L << (ON - 210)) | (1L << (ONLY - 210)) | (1L << (OR - 210)) | (1L << (ORDER - 210)) | (1L << (PLACING - 210)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (PRIMARY - 281)) | (1L << (REFERENCES - 281)) | (1L << (RETURNING - 281)) | (1L << (SELECT - 281)) | (1L << (SESSION_USER - 281)) | (1L << (SOME - 281)))) != 0) || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (SYMMETRIC - 347)) | (1L << (TABLE - 347)) | (1L << (THEN - 347)) | (1L << (TO - 347)) | (1L << (TRAILING - 347)) | (1L << (TRUE_P - 347)) | (1L << (UNION - 347)) | (1L << (UNIQUE - 347)) | (1L << (USER - 347)) | (1L << (USING - 347)) | (1L << (VARIADIC - 347)) | (1L << (WHEN - 347)) | (1L << (WHERE - 347)) | (1L << (WINDOW - 347)) | (1L << (WITH - 347)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1:
			return stmtmulti_sempred((StmtmultiContext)_localctx, predIndex);
		case 5:
			return optRoleList_sempred((OptRoleListContext)_localctx, predIndex);
		case 6:
			return alterOptRoleList_sempred((AlterOptRoleListContext)_localctx, predIndex);
		case 23:
			return optSchemaEltList_sempred((OptSchemaEltListContext)_localctx, predIndex);
		case 28:
			return var_name_sempred((Var_nameContext)_localctx, predIndex);
		case 29:
			return var_list_sempred((Var_listContext)_localctx, predIndex);
		case 46:
			return alter_table_cmds_sempred((Alter_table_cmdsContext)_localctx, predIndex);
		case 54:
			return reloption_list_sempred((Reloption_listContext)_localctx, predIndex);
		case 57:
			return alter_type_cmds_sempred((Alter_type_cmdsContext)_localctx, predIndex);
		case 64:
			return copy_opt_list_sempred((Copy_opt_listContext)_localctx, predIndex);
		case 70:
			return copy_generic_opt_list_sempred((Copy_generic_opt_listContext)_localctx, predIndex);
		case 73:
			return copy_generic_opt_arg_list_sempred((Copy_generic_opt_arg_listContext)_localctx, predIndex);
		case 79:
			return tableElementList_sempred((TableElementListContext)_localctx, predIndex);
		case 80:
			return typedTableElementList_sempred((TypedTableElementListContext)_localctx, predIndex);
		case 85:
			return colQualList_sempred((ColQualListContext)_localctx, predIndex);
		case 90:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 96:
			return columnList_sempred((ColumnListContext)_localctx, predIndex);
		case 99:
			return exclusionConstraintList_sempred((ExclusionConstraintListContext)_localctx, predIndex);
		case 118:
			return seqOptList_sempred((SeqOptListContext)_localctx, predIndex);
		case 122:
			return numericOnly_list_sempred((NumericOnly_listContext)_localctx, predIndex);
		case 135:
			return create_extension_opt_list_sempred((Create_extension_opt_listContext)_localctx, predIndex);
		case 138:
			return alter_extension_opt_list_sempred((Alter_extension_opt_listContext)_localctx, predIndex);
		case 143:
			return fdw_options_sempred((Fdw_optionsContext)_localctx, predIndex);
		case 148:
			return generic_option_list_sempred((Generic_option_listContext)_localctx, predIndex);
		case 150:
			return alter_generic_option_list_sempred((Alter_generic_option_listContext)_localctx, predIndex);
		case 163:
			return foreignTableElementList_sempred((ForeignTableElementListContext)_localctx, predIndex);
		case 172:
			return triggerEvents_sempred((TriggerEventsContext)_localctx, predIndex);
		case 178:
			return triggerFuncArgs_sempred((TriggerFuncArgsContext)_localctx, predIndex);
		case 181:
			return constraintAttributeSpec_sempred((ConstraintAttributeSpecContext)_localctx, predIndex);
		case 188:
			return def_list_sempred((Def_listContext)_localctx, predIndex);
		case 193:
			return old_aggr_list_sempred((Old_aggr_listContext)_localctx, predIndex);
		case 196:
			return enum_val_list_sempred((Enum_val_listContext)_localctx, predIndex);
		case 199:
			return opclass_item_list_sempred((Opclass_item_listContext)_localctx, predIndex);
		case 207:
			return opclass_drop_list_sempred((Opclass_drop_listContext)_localctx, predIndex);
		case 215:
			return any_name_list_sempred((Any_name_listContext)_localctx, predIndex);
		case 217:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 234:
			return privilege_list_sempred((Privilege_listContext)_localctx, predIndex);
		case 237:
			return grantee_list_sempred((Grantee_listContext)_localctx, predIndex);
		case 240:
			return function_with_argtypes_list_sempred((Function_with_argtypes_listContext)_localctx, predIndex);
		case 247:
			return defACLOptionList_sempred((DefACLOptionListContext)_localctx, predIndex);
		case 256:
			return index_params_sempred((Index_paramsContext)_localctx, predIndex);
		case 265:
			return func_args_list_sempred((Func_args_listContext)_localctx, predIndex);
		case 267:
			return func_args_with_defaults_list_sempred((Func_args_with_defaults_listContext)_localctx, predIndex);
		case 274:
			return createfunc_opt_list_sempred((Createfunc_opt_listContext)_localctx, predIndex);
		case 280:
			return table_func_column_list_sempred((Table_func_column_listContext)_localctx, predIndex);
		case 282:
			return alterfunc_opt_list_sempred((Alterfunc_opt_listContext)_localctx, predIndex);
		case 290:
			return dostmt_opt_list_sempred((Dostmt_opt_listContext)_localctx, predIndex);
		case 306:
			return ruleActionMulti_sempred((RuleActionMultiContext)_localctx, predIndex);
		case 319:
			return transaction_mode_list_sempred((Transaction_mode_listContext)_localctx, predIndex);
		case 325:
			return createdb_opt_list_sempred((Createdb_opt_listContext)_localctx, predIndex);
		case 330:
			return alterdb_opt_list_sempred((Alterdb_opt_listContext)_localctx, predIndex);
		case 342:
			return vacuum_option_list_sempred((Vacuum_option_listContext)_localctx, predIndex);
		case 352:
			return explain_option_list_sempred((Explain_option_listContext)_localctx, predIndex);
		case 364:
			return insert_column_list_sempred((Insert_column_listContext)_localctx, predIndex);
		case 374:
			return set_clause_list_sempred((Set_clause_listContext)_localctx, predIndex);
		case 379:
			return set_target_list_sempred((Set_target_listContext)_localctx, predIndex);
		case 382:
			return cursor_options_sempred((Cursor_optionsContext)_localctx, predIndex);
		case 385:
			return select_with_parens_sempred((Select_with_parensContext)_localctx, predIndex);
		case 388:
			return simple_select_sempred((Simple_selectContext)_localctx, predIndex);
		case 390:
			return cte_list_sempred((Cte_listContext)_localctx, predIndex);
		case 402:
			return sortby_list_sempred((Sortby_listContext)_localctx, predIndex);
		case 418:
			return for_locking_items_sempred((For_locking_itemsContext)_localctx, predIndex);
		case 421:
			return values_clause_sempred((Values_clauseContext)_localctx, predIndex);
		case 423:
			return from_list_sempred((From_listContext)_localctx, predIndex);
		case 426:
			return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 432:
			return relation_expr_list_sempred((Relation_expr_listContext)_localctx, predIndex);
		case 438:
			return tableFuncElementList_sempred((TableFuncElementListContext)_localctx, predIndex);
		case 441:
			return opt_array_bounds_sempred((Opt_array_boundsContext)_localctx, predIndex);
		case 464:
			return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 465:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 471:
			return xml_attribute_list_sempred((Xml_attribute_listContext)_localctx, predIndex);
		case 477:
			return window_definition_list_sempred((Window_definition_listContext)_localctx, predIndex);
		case 493:
			return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 494:
			return func_arg_list_sempred((Func_arg_listContext)_localctx, predIndex);
		case 496:
			return type_list_sempred((Type_listContext)_localctx, predIndex);
		case 498:
			return array_expr_list_sempred((Array_expr_listContext)_localctx, predIndex);
		case 510:
			return when_clause_list_sempred((When_clause_listContext)_localctx, predIndex);
		case 516:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 517:
			return opt_indirection_sempred((Opt_indirectionContext)_localctx, predIndex);
		case 520:
			return ctext_expr_list_sempred((Ctext_expr_listContext)_localctx, predIndex);
		case 522:
			return target_list_sempred((Target_listContext)_localctx, predIndex);
		case 524:
			return qualified_name_list_sempred((Qualified_name_listContext)_localctx, predIndex);
		case 526:
			return name_list_sempred((Name_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean stmtmulti_sempred(StmtmultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean optRoleList_sempred(OptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterOptRoleList_sempred(AlterOptRoleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean optSchemaEltList_sempred(OptSchemaEltListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean var_name_sempred(Var_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean var_list_sempred(Var_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_table_cmds_sempred(Alter_table_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean reloption_list_sempred(Reloption_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_type_cmds_sempred(Alter_type_cmdsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_opt_list_sempred(Copy_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_generic_opt_list_sempred(Copy_generic_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean copy_generic_opt_arg_list_sempred(Copy_generic_opt_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableElementList_sempred(TableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean typedTableElementList_sempred(TypedTableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean colQualList_sempred(ColQualListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 3);
		case 16:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean columnList_sempred(ColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean exclusionConstraintList_sempred(ExclusionConstraintListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean seqOptList_sempred(SeqOptListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean numericOnly_list_sempred(NumericOnly_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean create_extension_opt_list_sempred(Create_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_extension_opt_list_sempred(Alter_extension_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean fdw_options_sempred(Fdw_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean generic_option_list_sempred(Generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alter_generic_option_list_sempred(Alter_generic_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean foreignTableElementList_sempred(ForeignTableElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean triggerEvents_sempred(TriggerEventsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean triggerFuncArgs_sempred(TriggerFuncArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean constraintAttributeSpec_sempred(ConstraintAttributeSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean def_list_sempred(Def_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean old_aggr_list_sempred(Old_aggr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean enum_val_list_sempred(Enum_val_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_item_list_sempred(Opclass_item_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opclass_drop_list_sempred(Opclass_drop_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean any_name_list_sempred(Any_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean privilege_list_sempred(Privilege_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean grantee_list_sempred(Grantee_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean function_with_argtypes_list_sempred(Function_with_argtypes_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean defACLOptionList_sempred(DefACLOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean index_params_sempred(Index_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_args_list_sempred(Func_args_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_args_with_defaults_list_sempred(Func_args_with_defaults_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createfunc_opt_list_sempred(Createfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean table_func_column_list_sempred(Table_func_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterfunc_opt_list_sempred(Alterfunc_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean dostmt_opt_list_sempred(Dostmt_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ruleActionMulti_sempred(RuleActionMultiContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean transaction_mode_list_sempred(Transaction_mode_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return precpred(_ctx, 3);
		case 50:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean createdb_opt_list_sempred(Createdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean alterdb_opt_list_sempred(Alterdb_opt_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean vacuum_option_list_sempred(Vacuum_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean explain_option_list_sempred(Explain_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean insert_column_list_sempred(Insert_column_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean set_clause_list_sempred(Set_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean set_target_list_sempred(Set_target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean cursor_options_sempred(Cursor_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return precpred(_ctx, 5);
		case 59:
			return precpred(_ctx, 4);
		case 60:
			return precpred(_ctx, 3);
		case 61:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean select_with_parens_sempred(Select_with_parensContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return precpred(_ctx, 3);
		case 63:
			return precpred(_ctx, 2);
		case 64:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simple_select_sempred(Simple_selectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return precpred(_ctx, 3);
		case 66:
			return precpred(_ctx, 2);
		case 67:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cte_list_sempred(Cte_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean sortby_list_sempred(Sortby_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean for_locking_items_sempred(For_locking_itemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean values_clause_sempred(Values_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean from_list_sempred(From_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73:
			return precpred(_ctx, 5);
		case 74:
			return precpred(_ctx, 4);
		case 75:
			return precpred(_ctx, 3);
		case 76:
			return precpred(_ctx, 2);
		case 77:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_expr_list_sempred(Relation_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean tableFuncElementList_sempred(TableFuncElementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_array_bounds_sempred(Opt_array_boundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 3);
		case 81:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return precpred(_ctx, 60);
		case 83:
			return precpred(_ctx, 59);
		case 84:
			return precpred(_ctx, 58);
		case 85:
			return precpred(_ctx, 57);
		case 86:
			return precpred(_ctx, 56);
		case 87:
			return precpred(_ctx, 55);
		case 88:
			return precpred(_ctx, 54);
		case 89:
			return precpred(_ctx, 53);
		case 90:
			return precpred(_ctx, 52);
		case 91:
			return precpred(_ctx, 51);
		case 92:
			return precpred(_ctx, 50);
		case 93:
			return precpred(_ctx, 49);
		case 94:
			return precpred(_ctx, 48);
		case 95:
			return precpred(_ctx, 47);
		case 96:
			return precpred(_ctx, 46);
		case 97:
			return precpred(_ctx, 45);
		case 98:
			return precpred(_ctx, 42);
		case 99:
			return precpred(_ctx, 41);
		case 100:
			return precpred(_ctx, 40);
		case 101:
			return precpred(_ctx, 39);
		case 102:
			return precpred(_ctx, 38);
		case 103:
			return precpred(_ctx, 37);
		case 104:
			return precpred(_ctx, 32);
		case 105:
			return precpred(_ctx, 29);
		case 106:
			return precpred(_ctx, 25);
		case 107:
			return precpred(_ctx, 24);
		case 108:
			return precpred(_ctx, 13);
		case 109:
			return precpred(_ctx, 12);
		case 110:
			return precpred(_ctx, 44);
		case 111:
			return precpred(_ctx, 43);
		case 112:
			return precpred(_ctx, 35);
		case 113:
			return precpred(_ctx, 34);
		case 114:
			return precpred(_ctx, 27);
		case 115:
			return precpred(_ctx, 23);
		case 116:
			return precpred(_ctx, 22);
		case 117:
			return precpred(_ctx, 21);
		case 118:
			return precpred(_ctx, 20);
		case 119:
			return precpred(_ctx, 19);
		case 120:
			return precpred(_ctx, 18);
		case 121:
			return precpred(_ctx, 17);
		case 122:
			return precpred(_ctx, 16);
		case 123:
			return precpred(_ctx, 15);
		case 124:
			return precpred(_ctx, 14);
		case 125:
			return precpred(_ctx, 11);
		case 126:
			return precpred(_ctx, 10);
		case 127:
			return precpred(_ctx, 9);
		case 128:
			return precpred(_ctx, 8);
		case 129:
			return precpred(_ctx, 7);
		case 130:
			return precpred(_ctx, 6);
		case 131:
			return precpred(_ctx, 5);
		case 132:
			return precpred(_ctx, 4);
		case 133:
			return precpred(_ctx, 2);
		case 134:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return precpred(_ctx, 22);
		case 136:
			return precpred(_ctx, 21);
		case 137:
			return precpred(_ctx, 20);
		case 138:
			return precpred(_ctx, 19);
		case 139:
			return precpred(_ctx, 18);
		case 140:
			return precpred(_ctx, 17);
		case 141:
			return precpred(_ctx, 16);
		case 142:
			return precpred(_ctx, 15);
		case 143:
			return precpred(_ctx, 14);
		case 144:
			return precpred(_ctx, 9);
		case 145:
			return precpred(_ctx, 6);
		case 146:
			return precpred(_ctx, 5);
		case 147:
			return precpred(_ctx, 13);
		case 148:
			return precpred(_ctx, 7);
		case 149:
			return precpred(_ctx, 4);
		case 150:
			return precpred(_ctx, 3);
		case 151:
			return precpred(_ctx, 2);
		case 152:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean xml_attribute_list_sempred(Xml_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean window_definition_list_sempred(Window_definition_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 154:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 155:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean func_arg_list_sempred(Func_arg_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 156:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean type_list_sempred(Type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 157:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean array_expr_list_sempred(Array_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 158:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean when_clause_list_sempred(When_clause_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 159:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 160:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_indirection_sempred(Opt_indirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 161:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean ctext_expr_list_sempred(Ctext_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean target_list_sempred(Target_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 163:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean qualified_name_list_sempred(Qualified_name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 164:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u01f4\u20f5\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u044f\n\3\f\3\16\3\u0452"+
		"\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04c3\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\6\3\6\5\6\u04cd\n\6\3\7\3\7\3\7\7\7\u04d2\n\7\f\7\16\7\u04d5\13\7\3\b"+
		"\3\b\3\b\7\b\u04da\n\b\f\b\16\b\u04dd\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04f3\n\t\3\n"+
		"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0502\n\n\3\13\3"+
		"\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\5\r\u0514"+
		"\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20"+
		"\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u052f"+
		"\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0539\n\22\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0552\n\26\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0560\n\27\3\30\3\30\5\30"+
		"\u0564\n\30\3\31\3\31\3\31\7\31\u0569\n\31\f\31\16\31\u056c\13\31\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u0574\n\32\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\5\33\u057e\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34"+
		"\u0588\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\5\35\u05b5\n\35\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u05bd"+
		"\n\36\f\36\16\36\u05c0\13\36\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u05c8"+
		"\n\37\f\37\16\37\u05cb\13\37\3 \3 \5 \u05cf\n \3!\3!\3!\3!\3!\3!\3!\5"+
		"!\u05d8\n!\3\"\3\"\3\"\3\"\5\"\u05de\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\5#\u05f0\n#\3$\3$\3$\5$\u05f5\n$\3%\3%\5%\u05f9\n"+
		"%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0609\n&\3\'\3\'\3\'\5"+
		"\'\u060e\n\'\3(\3(\3(\5(\u0613\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)"+
		"\3)\3)\5)\u0623\n)\3*\3*\3*\3*\3*\3+\3+\5+\u062c\n+\3,\3,\3-\3-\3.\3."+
		"\3.\3.\3.\3.\3.\3.\5.\u063a\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/"+
		"\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/"+
		"\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u066c\n/\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\7\60\u0674\n\60\f\60\16\60\u0677\13\60\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u071e\n\61\3\62\3\62\3\62\3\62"+
		"\3\62\5\62\u0725\n\62\3\63\3\63\3\63\5\63\u072a\n\63\3\64\3\64\3\64\5"+
		"\64\u072f\n\64\3\65\3\65\3\65\5\65\u0734\n\65\3\66\3\66\3\66\3\66\3\67"+
		"\3\67\3\67\5\67\u073d\n\67\38\38\38\38\38\38\78\u0745\n8\f8\168\u0748"+
		"\138\39\39\39\39\39\39\39\39\39\39\39\39\39\39\39\59\u0759\n9\3:\3:\3"+
		":\3:\3:\3;\3;\3;\3;\3;\3;\7;\u0766\n;\f;\16;\u0769\13;\3<\3<\3<\3<\3<"+
		"\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0785"+
		"\n<\3=\3=\3=\3=\5=\u078b\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\5>\u079f\n>\3?\3?\3@\3@\3@\5@\u07a6\n@\3A\3A\3A\3A\3A\5A"+
		"\u07ad\nA\3B\3B\3B\7B\u07b2\nB\fB\16B\u07b5\13B\3C\3C\3C\3C\3C\3C\3C\3"+
		"C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3"+
		"C\3C\5C\u07d7\nC\3D\3D\5D\u07db\nD\3E\3E\3E\5E\u07e0\nE\3F\3F\3F\3F\3"+
		"F\5F\u07e7\nF\3G\3G\5G\u07eb\nG\3H\3H\3H\3H\3H\3H\7H\u07f3\nH\fH\16H\u07f6"+
		"\13H\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0803\nJ\3K\3K\3K\3K\3K\3K\7"+
		"K\u080b\nK\fK\16K\u080e\13K\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M"+
		"\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M"+
		"\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0846\nM\3N\3N"+
		"\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0854\nN\3O\3O\5O\u0858\nO\3P\3P\3P"+
		"\3P\3P\5P\u085f\nP\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0867\nQ\fQ\16Q\u086a\13Q\3R\3"+
		"R\3R\3R\3R\3R\7R\u0872\nR\fR\16R\u0875\13R\3S\3S\3S\5S\u087a\nS\3T\3T"+
		"\5T\u087e\nT\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3W\3W\3W\7W\u088d\nW\fW\16"+
		"W\u0890\13W\3X\3X\3X\3X\3X\3X\3X\3X\5X\u089a\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3"+
		"Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u08b6\nY\3"+
		"Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u08bf\nZ\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\3"+
		"\\\7\\\u08cc\n\\\f\\\16\\\u08cf\13\\\3]\3]\3^\3^\3^\3^\3^\5^\u08d8\n^"+
		"\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_"+
		"\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_"+
		"\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0910\n_\3`\3`\3`\5`\u0915\n`\3a\3a\3a\3a"+
		"\3a\5a\u091c\na\3b\3b\3b\3b\3b\3b\7b\u0924\nb\fb\16b\u0927\13b\3c\3c\3"+
		"d\3d\3d\3d\3d\3d\3d\5d\u0932\nd\3e\3e\3e\3e\3e\3e\7e\u093a\ne\fe\16e\u093d"+
		"\13e\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u094a\nf\3g\3g\3g\3g\3g\3g\5"+
		"g\u0952\ng\3h\3h\3h\3h\3h\3h\3h\3h\3h\5h\u095d\nh\3i\3i\3i\3i\3j\3j\3"+
		"j\3j\3k\3k\3k\3k\3k\3k\3k\3k\5k\u096f\nk\3l\3l\3l\3l\3l\3l\5l\u0977\n"+
		"l\3m\3m\3m\3m\3m\3m\3m\5m\u0980\nm\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3"+
		"n\5n\u098e\nn\3o\3o\3o\5o\u0993\no\3p\3p\3p\3p\3p\5p\u099a\np\3q\3q\3"+
		"q\3q\3r\3r\3r\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3t\5t\u09b4"+
		"\nt\3u\3u\3u\3u\3u\3u\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u09c8\nv"+
		"\3w\3w\5w\u09cc\nw\3x\3x\3x\3x\3x\7x\u09d3\nx\fx\16x\u09d6\13x\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\5y\u09f5\ny\3z\3z\5z\u09f9\nz\3{\3{\3{\3{\5{\u09ff\n{\3|\3"+
		"|\3|\3|\3|\3|\7|\u0a07\n|\f|\16|\u0a0a\13|\3}\3}\3}\3}\3}\3}\3}\3}\3}"+
		"\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0a1e\n}\3~\3~\5~\u0a22\n~\3\177\3\177"+
		"\3\177\3\177\5\177\u0a28\n\177\3\u0080\3\u0080\3\u0080\5\u0080\u0a2d\n"+
		"\u0080\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0a33\n\u0081\3\u0082\3"+
		"\u0082\5\u0082\u0a37\n\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\5\u0083\u0a47\n\u0083\3\u0084\3\u0084\5\u0084\u0a4b\n\u0084\3\u0085\3"+
		"\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0a57\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0a61\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0a72\n\u0088\3\u0089\3\u0089\3\u0089\7\u0089"+
		"\u0a77\n\u0089\f\u0089\16\u0089\u0a7a\13\u0089\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0a82\n\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\7\u008c\u0a8d\n\u008c"+
		"\f\u008c\16\u008c\u0a90\13\u008c\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0b47\n\u008e\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b59\n\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0b60\n\u0091\f\u0091"+
		"\16\u0091\u0b63\13\u0091\3\u0092\3\u0092\5\u0092\u0b67\n\u0092\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0b79\n\u0093"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b8a\n\u0094"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b92\n\u0095"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0b9a\n\u0096"+
		"\f\u0096\16\u0096\u0b9d\13\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\7\u0098\u0baa\n\u0098"+
		"\f\u0098\16\u0098\u0bad\13\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\5\u0099\u0bb6\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b"+
		"\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0bcd\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0bd3\n\u009f\3"+
		"\u00a0\3\u00a0\5\u00a0\u0bd7\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0be5\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0bf7\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c0e\n\u00a3"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0c16\n\u00a4"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0c1e\n\u00a5"+
		"\f\u00a5\16\u00a5\u0c21\13\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\5\u00a7\u0c33\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0c41\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0c55\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0c85\n\u00ac"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0c8b\n\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0c93\n\u00ae\f\u00ae\16\u00ae"+
		"\u0c96\13\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\5\u00af\u0c9f\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0ca6\n\u00b0\3\u00b1\3\u00b1\5\u00b1\u0caa\n\u00b1\3\u00b2\3\u00b2\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0cb4\n\u00b3\3"+
		"\u00b4\3\u00b4\3\u00b4\5\u00b4\u0cb9\n\u00b4\3\u00b4\3\u00b4\3\u00b4\7"+
		"\u00b4\u0cbe\n\u00b4\f\u00b4\16\u00b4\u0cc1\13\u00b4\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u0cc7\n\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0ccc"+
		"\n\u00b6\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0cd1\n\u00b7\f\u00b7\16\u00b7"+
		"\u0cd4\13\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0ce1\n\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0cf3\n\u00b9\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\5\u00bc\u0d5a\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0d66\n\u00be\f\u00be"+
		"\16\u00be\u0d69\13\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u0d70\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d77\n"+
		"\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u0d80\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u0d8c\n\u00c3\f\u00c3\16\u00c3\u0d8f"+
		"\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\5\u00c5\u0d97"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0d9f"+
		"\n\u00c6\f\u00c6\16\u00c6\u0da2\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0dbd\n\u00c7\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9"+
		"\u0dd3\n\u00c9\f\u00c9\16\u00c9\u0dd6\13\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0df4"+
		"\n\u00ca\3\u00cb\3\u00cb\5\u00cb\u0df8\n\u00cb\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u0dfd\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0e06\n\u00cd\3\u00ce\3\u00ce\5\u00ce\u0e0a\n\u00ce\3"+
		"\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e25"+
		"\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0e2d"+
		"\n\u00d1\f\u00d1\16\u00d1\u0e30\13\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u0e3e\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\5\u00d3\u0e52\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e66\n\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\5\u00d7\u0e8f\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\5\u00d8\u0ea9\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\7\u00d9\u0eb1\n\u00d9\f\u00d9\16\u00d9\u0eb4\13\u00d9"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0eba\n\u00da\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0ec3\n\u00db\f\u00db"+
		"\16\u00db\u0ec6\13\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0ed3\n\u00dd\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u0f69\n\u00de\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u0f7f\n\u00df\3\u00e0\3\u00e0\5\u00e0\u0f83\n\u00e0\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u0fb6\n\u00e1\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u0fbb\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0fc9\n\u00e3\3\u00e4"+
		"\3\u00e4\5\u00e4\u0fcd\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5"+
		"\u0fd3\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1017\n\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e8\3\u00e8\5\u00e8\u101d\n\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u103a\n\u00ea"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u104b\n\u00eb"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u1053\n\u00ec"+
		"\f\u00ec\16\u00ec\u1056\13\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1061\n\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u108f\n\u00ee"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u1097\n\u00ef"+
		"\f\u00ef\16\u00ef\u109a\13\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u109f"+
		"\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u10a5\n\u00f1\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u10ad\n\u00f2\f\u00f2"+
		"\16\u00f2\u10b0\13\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u10cd\n\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u10d3\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u10d9\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9"+
		"\3\u00f9\3\u00f9\7\u00f9\u10e4\n\u00f9\f\u00f9\16\u00f9\u10e7\13\u00f9"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u10f2\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u110f\n\u00fb\3\u00fc\3\u00fc\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\5\u00fe\u1124"+
		"\n\u00fe\3\u00ff\3\u00ff\5\u00ff\u1128\n\u00ff\3\u0100\3\u0100\5\u0100"+
		"\u112c\n\u0100\3\u0101\3\u0101\3\u0101\5\u0101\u1131\n\u0101\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u1139\n\u0102\f\u0102\16"+
		"\u0102\u113c\13\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1152\n\u0103\3\u0104"+
		"\3\u0104\3\u0104\5\u0104\u1157\n\u0104\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\5\u0105\u115d\n\u0105\3\u0106\3\u0106\3\u0106\5\u0106\u1162\n\u0106\3"+
		"\u0107\3\u0107\3\u0107\5\u0107\u1167\n\u0107\3\u0108\3\u0108\3\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\5\u0108\u1188\n\u0108\3\u0109\3\u0109\3\u0109\5\u0109\u118d\n"+
		"\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1195\n"+
		"\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\7\u010b\u119d\n"+
		"\u010b\f\u010b\16\u010b\u11a0\13\u010b\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\5\u010c\u11a8\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\7\u010d\u11b0\n\u010d\f\u010d\16\u010d\u11b3\13\u010d"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u11c4\n\u010e"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u11cc\n\u010f"+
		"\3\u0110\3\u0110\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u11de"+
		"\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\5\u0113\u11e9\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\7\u0114\u11f0\n\u0114\f\u0114\16\u0114\u11f3\13\u0114\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u1214\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\5\u0116\u121c\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\5\u0117\u1223\n\u0117\3\u0118\3\u0118\3\u0118\5\u0118\u1228\n"+
		"\u0118\3\u0119\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\7\u011a\u1233\n\u011a\f\u011a\16\u011a\u1236\13\u011a\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\7\u011c\u1243\n\u011c\f\u011c\16\u011c\u1246\13\u011c\3\u011d"+
		"\3\u011d\5\u011d\u124a\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u125a\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u126a\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u127a"+
		"\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1292\n\u0121\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1299\n\u0122\3\u0123\3\u0123"+
		"\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\7\u0124\u12a3\n\u0124"+
		"\f\u0124\16\u0124\u12a6\13\u0124\3\u0125\3\u0125\3\u0125\5\u0125\u12ab"+
		"\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126"+
		"\u12cf\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u12d6\n"+
		"\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\5\u0129\u12e5\n\u0129\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12f6\n\u012a\3\u012b"+
		"\3\u012b\3\u012c\3\u012c\5\u012c\u12fc\n\u012c\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u1450\n\u012d\3\u012e\3\u012e\5\u012e\u1454\n"+
		"\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u1459\n\u012f\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u150f"+
		"\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u159f\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u15b5\n\u0133\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u15bd\n\u0134\f\u0134\16\u0134"+
		"\u15c0\13\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u15c7"+
		"\n\u0135\3\u0136\3\u0136\5\u0136\u15cb\n\u0136\3\u0137\3\u0137\3\u0138"+
		"\3\u0138\3\u0138\5\u0138\u15d2\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\5\u0139\u15e4\n\u0139\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013b\3\u013b\3\u013b\5\u013b\u15ed\n\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u15f6\n\u013d\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1622\n\u013e\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u1627\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1633\n\u0140"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141"+
		"\u163d\n\u0141\f\u0141\16\u0141\u1640\13\u0141\3\u0142\3\u0142\5\u0142"+
		"\u1644\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u165c\n\u0143"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\5\u0144\u166a\n\u0144\3\u0145\3\u0145\3\u0145"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147"+
		"\7\u0147\u1678\n\u0147\f\u0147\16\u0147\u167b\13\u0147\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\5\u0148\u16be\n\u0148\3\u0149\3\u0149\5\u0149\u16c2\n\u0149\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\5\u014a\u16d1\n\u014a\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\7\u014c\u16db\n\u014c\f\u014c"+
		"\16\u014c\u16de\13\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u16ed"+
		"\n\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1728\n\u0150\3\u0151\3\u0151"+
		"\5\u0151\u172c\n\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\5\u0153\u177d\n\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\5\u0155\u1797\n\u0155\3\u0156\3\u0156\3\u0156\5\u0156\u179c\n"+
		"\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\5\u0157\u17bb\n\u0157\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\7\u0158\u17c3\n\u0158\f\u0158\16\u0158\u17c6"+
		"\13\u0158\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u17cc\n\u0159\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u17d6"+
		"\n\u015a\3\u015b\3\u015b\3\u015c\3\u015c\5\u015c\u17dc\n\u015c\3\u015d"+
		"\3\u015d\5\u015d\u17e0\n\u015d\3\u015e\3\u015e\5\u015e\u17e4\n\u015e\3"+
		"\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u17eb\n\u015f\3\u0160\3"+
		"\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u17fd\n\u0160"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u1806"+
		"\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\7\u0162\u180e"+
		"\n\u0162\f\u0162\16\u0162\u1811\13\u0162\3\u0163\3\u0163\3\u0163\3\u0164"+
		"\3\u0164\3\u0164\5\u0164\u1819\n\u0164\3\u0165\3\u0165\3\u0165\5\u0165"+
		"\u181e\n\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u182b\n\u0167\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\5\u0168\u1831\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\5\u0169\u1841\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\5\u016a\u1848\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1854\n\u016b\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1865\n\u016d\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\7\u016e\u186d\n\u016e\f\u016e\16\u016e"+
		"\u1870\13\u016e\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\5\u0170\u187a\n\u0170\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\5\u0172\u1888"+
		"\n\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\5\u0174\u1895\n\u0174\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u18a7\n\u0175\3\u0176\3\u0176"+
		"\5\u0176\u18ab\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\7\u0178\u18bd\n\u0178\f\u0178\16\u0178\u18c0\13\u0178\3\u0179"+
		"\3\u0179\5\u0179\u18c4\n\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\7\u017d\u18d9\n\u017d\f\u017d"+
		"\16\u017d\u18dc\13\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\7\u0180\u18f2\n\u0180\f\u0180"+
		"\16\u0180\u18f5\13\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181"+
		"\u18fc\n\u0181\3\u0182\3\u0182\5\u0182\u1900\n\u0182\3\u0183\3\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u190b\n"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\7\u0183\u191c"+
		"\n\u0183\f\u0183\16\u0183\u191f\13\u0183\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u1945\n\u0184\3\u0185"+
		"\3\u0185\5\u0185\u1949\n\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\5\u0186\u196d\n\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\7\u0186\u197e\n\u0186\f\u0186\16\u0186\u1981\13\u0186"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u1988\n\u0187\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\7\u0188\u1990\n\u0188\f\u0188"+
		"\16\u0188\u1993\13\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u018a\3\u018a\5\u018a\u199e\n\u018a\3\u018b\3\u018b\5\u018b"+
		"\u19a2\n\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u19a7\n\u018b\3\u018b\3"+
		"\u018b\5\u018b\u19ab\n\u018b\3\u018c\3\u018c\3\u018c\7\u018c\u19b0\n\u018c"+
		"\f\u018c\16\u018c\u19b3\13\u018c\3\u018d\3\u018d\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u19da\n\u018e\3\u018f"+
		"\3\u018f\5\u018f\u19de\n\u018f\3\u0190\3\u0190\3\u0190\5\u0190\u19e3\n"+
		"\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\5\u0191\u19ee\n\u0191\3\u0192\3\u0192\5\u0192\u19f2\n\u0192\3"+
		"\u0193\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\7\u0194\u19fe\n\u0194\f\u0194\16\u0194\u1a01\13\u0194\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195"+
		"\u1a0c\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\5\u0196\u1a16\n\u0196\3\u0197\3\u0197\5\u0197\u1a1a\n\u0197\3"+
		"\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u1a29\n\u0198\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u1a31\n\u0199\3\u019a\3\u019a"+
		"\5\u019a\u1a35\n\u019a\3\u019b\3\u019b\3\u019c\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\5\u019c\u1a3f\n\u019c\3\u019d\3\u019d\3\u019e\3\u019e"+
		"\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u1a4b\n\u01a0"+
		"\3\u01a1\3\u01a1\3\u01a1\5\u01a1\u1a50\n\u01a1\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\5\u01a2\u1a56\n\u01a2\3\u01a3\3\u01a3\5\u01a3\u1a5a\n\u01a3\3"+
		"\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\7\u01a4\u1a61\n\u01a4\f\u01a4\16"+
		"\u01a4\u1a64\13\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1a70\n\u01a5\3\u01a6\3\u01a6"+
		"\3\u01a6\5\u01a6\u1a75\n\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\3\u01a7\7\u01a7\u1a7e\n\u01a7\f\u01a7\16\u01a7\u1a81\13\u01a7"+
		"\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1a86\n\u01a8\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u1a8e\n\u01a9\f\u01a9\16\u01a9\u1a91"+
		"\13\u01a9\3\u01aa\3\u01aa\5\u01aa\u1a95\n\u01aa\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\5\u01ab\u1ab6\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u1abd\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1ada\n\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\7\u01ac\u1af5\n\u01ac\f\u01ac\16\u01ac"+
		"\u1af8\13\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b08"+
		"\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae"+
		"\u1b11\n\u01ae\3\u01af\3\u01af\5\u01af\u1b15\n\u01af\3\u01b0\3\u01b0\3"+
		"\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1b1e\n\u01b0\3\u01b1\3"+
		"\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\5\u01b1\u1b2b\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\7\u01b2\u1b33\n\u01b2\f\u01b2\16\u01b2\u1b36\13\u01b2\3\u01b3"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u1b40"+
		"\n\u01b3\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b47\n\u01b5"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b50"+
		"\n\u01b6\3\u01b7\3\u01b7\5\u01b7\u1b54\n\u01b7\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\7\u01b8\u1b5c\n\u01b8\f\u01b8\16\u01b8\u1b5f"+
		"\13\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b80\n\u01ba\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\7\u01bb"+
		"\u1b8b\n\u01bb\f\u01bb\16\u01bb\u1b8e\13\u01bb\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\5\u01bc\u1b9e\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\5\u01bd\u1ba4\n\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\5\u01be\u1bad\n\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\5\u01bf\u1bb4\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u1bc6\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\5\u01c1\u1bcd\n\u01c1\3\u01c2\3\u01c2\5\u01c2\u1bd1\n\u01c2\3\u01c3\3"+
		"\u01c3\5\u01c3\u1bd5\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3"+
		"\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\5\u01c6\u1be2\n\u01c6\3"+
		"\u01c7\3\u01c7\5\u01c7\u1be6\n\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01ca"+
		"\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca"+
		"\5\u01ca\u1bfe\n\u01ca\3\u01cb\3\u01cb\5\u01cb\u1c02\n\u01cb\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c08\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3"+
		"\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c1a\n\u01cd\3\u01ce\3\u01ce"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1c24\n\u01cf"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\5\u01d0\u1c42\n\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\5\u01d1\u1c4a\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1c5d\n\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\7\u01d2\u1d46\n\u01d2\f\u01d2\16\u01d2\u1d49"+
		"\13\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\5\u01d3\u1d54\n\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\7\u01d3\u1d9b\n\u01d3\f\u01d3\16\u01d3\u1d9e\13\u01d3\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\5\u01d4\u1db4\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\5\u01d5\u1eb7\n\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6"+
		"\u1ebe\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1ecb\n\u01d7\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\7\u01d9\u1ed8\n\u01d9\f\u01d9\16\u01d9\u1edb\13\u01d9\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\5\u01da\u1ee2\n\u01da\3\u01db\3\u01db\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\5\u01dc\u1eeb\n\u01dc\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1eff"+
		"\n\u01dd\3\u01de\3\u01de\3\u01de\5\u01de\u1f04\n\u01de\3\u01df\3\u01df"+
		"\3\u01df\3\u01df\3\u01df\3\u01df\7\u01df\u1f0c\n\u01df\f\u01df\16\u01df"+
		"\u1f0f\13\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e1\3\u01e1\5\u01e1\u1f1a\n\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e2\3\u01e3\3\u01e3\5\u01e3\u1f25\n\u01e3\3\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1f2b\n\u01e4\3\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e5\3\u01e5\5\u01e5\u1f32\n\u01e5\3\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\3\u01e6\3\u01e6\5\u01e6\u1f3a\n\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7"+
		"\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7"+
		"\u1f48\n\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1f58"+
		"\n\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea\5\u01ea\u1f5e\n\u01ea\3\u01eb"+
		"\3\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1f68"+
		"\n\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u1f70"+
		"\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee"+
		"\3\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1f7e\n\u01ee\3\u01ef\3\u01ef"+
		"\3\u01ef\3\u01ef\3\u01ef\3\u01ef\7\u01ef\u1f86\n\u01ef\f\u01ef\16\u01ef"+
		"\u1f89\13\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\7\u01f0"+
		"\u1f91\n\u01f0\f\u01f0\16\u01f0\u1f94\13\u01f0\3\u01f1\3\u01f1\3\u01f1"+
		"\3\u01f1\3\u01f1\5\u01f1\u1f9b\n\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\7\u01f2\u1fa3\n\u01f2\f\u01f2\16\u01f2\u1fa6\13\u01f2"+
		"\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3"+
		"\3\u01f3\5\u01f3\u1fb2\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\7\u01f4\u1fba\n\u01f4\f\u01f4\16\u01f4\u1fbd\13\u01f4\3\u01f5"+
		"\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1fc4\n\u01f5\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u1fce\n\u01f6"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\5\u01f7\u1fd9\n\u01f7\3\u01f8\3\u01f8\3\u01f8\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\5\u01f9\u1fe3\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1ff5\n\u01fa\3\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fc\3\u01fc\3\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\5\u01fd\u2004\n\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe"+
		"\5\u01fe\u200b\n\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\7\u0200\u2018\n\u0200\f\u0200"+
		"\16\u0200\u201b\13\u0200\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0202"+
		"\3\u0202\3\u0202\5\u0202\u2025\n\u0202\3\u0203\3\u0203\5\u0203\u2029\n"+
		"\u0203\3\u0204\3\u0204\3\u0204\3\u0204\5\u0204\u202f\n\u0204\3\u0205\3"+
		"\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205"+
		"\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205\u203f\n\u0205\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\7\u0206\u2046\n\u0206\f\u0206\16\u0206\u2049"+
		"\13\u0206\3\u0207\3\u0207\3\u0207\7\u0207\u204e\n\u0207\f\u0207\16\u0207"+
		"\u2051\13\u0207\3\u0208\3\u0208\5\u0208\u2055\n\u0208\3\u0209\3\u0209"+
		"\5\u0209\u2059\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a"+
		"\7\u020a\u2061\n\u020a\f\u020a\16\u020a\u2064\13\u020a\3\u020b\3\u020b"+
		"\3\u020b\3\u020b\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\7\u020c"+
		"\u2070\n\u020c\f\u020c\16\u020c\u2073\13\u020c\3\u020d\3\u020d\3\u020d"+
		"\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u207e\n\u020d"+
		"\3\u020e\3\u020e\3\u020e\3\u020e\3\u020e\3\u020e\7\u020e\u2086\n\u020e"+
		"\f\u020e\16\u020e\u2089\13\u020e\3\u020f\3\u020f\3\u020f\3\u020f\5\u020f"+
		"\u208f\n\u020f\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\3\u0210\7\u0210"+
		"\u2097\n\u0210\f\u0210\16\u0210\u209a\13\u0210\3\u0211\3\u0211\3\u0212"+
		"\3\u0212\3\u0213\3\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0216\3\u0216"+
		"\3\u0217\3\u0217\3\u0217\3\u0217\5\u0217\u20ac\n\u0217\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\5\u0218\u20cd\n\u0218\3\u0219\3\u0219\3\u021a\3\u021a"+
		"\3\u021b\3\u021b\3\u021c\3\u021c\3\u021c\3\u021c\3\u021c\5\u021c\u20da"+
		"\n\u021c\3\u021d\3\u021d\3\u021d\5\u021d\u20df\n\u021d\3\u021e\3\u021e"+
		"\3\u021e\5\u021e\u20e4\n\u021e\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\5\u021f\u20eb\n\u021f\3\u0220\3\u0220\3\u0221\3\u0221\3\u0222\3\u0222"+
		"\3\u0223\3\u0223\3\u0223\2U\4\f\16\60:<^nt\u0082\u008e\u0094\u00a0\u00a2"+
		"\u00ac\u00b6\u00c2\u00c8\u00ee\u00f6\u0110\u0116\u0120\u012a\u012e\u0148"+
		"\u015a\u0166\u016c\u017a\u0184\u018a\u0190\u01a0\u01b0\u01b4\u01d6\u01dc"+
		"\u01e2\u01f0\u0202\u0214\u0218\u0226\u0232\u0236\u0246\u0266\u0280\u028c"+
		"\u0296\u02ae\u02c2\u02da\u02ee\u02f8\u02fe\u0304\u030a\u030e\u0326\u0346"+
		"\u034c\u0350\u0356\u0362\u036e\u0374\u03a2\u03a4\u03b0\u03bc\u03dc\u03de"+
		"\u03e2\u03e6\u03fe\u040a\u040c\u0412\u0416\u041a\u041e\u0224\2\4\6\b\n"+
		"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\"+
		"^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8"+
		"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0"+
		"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8"+
		"\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0"+
		"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108"+
		"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120"+
		"\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138"+
		"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150"+
		"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168"+
		"\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180"+
		"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198"+
		"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0"+
		"\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8"+
		"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0"+
		"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8"+
		"\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210"+
		"\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228"+
		"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240"+
		"\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258"+
		"\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270"+
		"\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288"+
		"\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0"+
		"\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8"+
		"\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0"+
		"\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8"+
		"\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300"+
		"\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318"+
		"\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330"+
		"\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348"+
		"\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360"+
		"\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378"+
		"\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390"+
		"\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8"+
		"\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0"+
		"\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8"+
		"\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0"+
		"\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408"+
		"\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420"+
		"\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438"+
		"\u043a\u043c\u043e\u0440\u0442\u0444\2\25\4\2\34\34\u0082\u0082\4\2tt"+
		"\u00b1\u00b1\4\2\u00a0\u00a0\u016a\u016a\b\2  PPWWrr\u00b8\u00b8\u0159"+
		"\u0159\4\2\u0139\u0139\u0155\u0155\4\2\u00a0\u00a0\u00b4\u00b4\6\2\u00a3"+
		"\u00a3\u0144\u0144\u0161\u0161\u0174\u0174\4\2\u00b7\u00b7\u0160\u0160"+
		"\6\2vv\u00c1\u00c1\u0142\u0142\u017e\u017e\3\2$%\3\2\u0139\u013a\4\2\u0098"+
		"\u0098\u00ef\u00ef\4\2XX\177\177\5\2  \'\'\u0151\u0151\5\2\4\4\t\13\16"+
		"\22_\2\30\37!#((+,./\61\63:>ABEEGJORTUW\\_`hmpprrtxz|\177\u0083\u0085"+
		"\u0087\u0089\u008a\u008c\u008f\u0091\u0093\u0096\u0096\u0098\u0098\u009a"+
		"\u009a\u009c\u009c\u009e\u009e\u00a2\u00a4\u00a6\u00a6\u00a9\u00a9\u00ab"+
		"\u00af\u00b1\u00b3\u00b5\u00ba\u00bc\u00bc\u00bf\u00c2\u00c8\u00c9\u00cb"+
		"\u00cb\u00cd\u00d3\u00d5\u00d5\u00d8\u00d8\u00db\u00dd\u00e0\u00eb\u00ef"+
		"\u00f0\u00f3\u00f4\u00f6\u00f6\u00f9\u00f9\u00fb\u00fd\u00ff\u00ff\u0102"+
		"\u0104\u010c\u0112\u0114\u0114\u0116\u0116\u0118\u011a\u011c\u0122\u0124"+
		"\u0127\u0129\u0132\u0134\u0135\u0137\u0138\u013a\u0141\u0143\u0147\u0149"+
		"\u0149\u014b\u014c\u014e\u014e\u0150\u0150\u0152\u015b\u015e\u015f\u0161"+
		"\u0166\u016c\u016c\u016e\u016e\u0171\u0177\u017a\u017e\u0181\u0185\u0189"+
		"\u0189\u018b\u018d\u0190\u0190\u0193\u0197\u01a1\u01a3\u01bb\u01be\u01c0"+
		"\u01c0\u01c2\u01c4\u01c7\u01c7\u01c9\u01ca\u01cc\u01cd\u01cf\u01d0\u01d3"+
		"\u01d3\u01d6\u01d6\u01d8\u01de\u01e2\u01e6\u01e8\u01e8\u01eb\u01f1\u01f3"+
		"\u01f4\"\2\64\65\678CDKKno\u0090\u0090\u0094\u0094\u0099\u0099\u00a7\u00a7"+
		"\u00be\u00be\u00c3\u00c4\u00c6\u00c6\u00d6\u00d6\u00ec\u00ec\u00ee\u00ee"+
		"\u00f1\u00f1\u00f8\u00f8\u00fa\u00fa\u0107\u0107\u010b\u010b\u0115\u0115"+
		"\u0117\u0117\u0123\u0123\u0139\u0139\u014a\u014a\u014f\u014f\u015c\u015c"+
		"\u0168\u0169\u016d\u016d\u016f\u016f\u0186\u0187\u0198\u01a0\26\2\60\60"+
		"\66\66MMSS^^dd\u009f\u009f\u00a1\u00a1\u00b0\u00b0\u00bd\u00bd\u00c9\u00ca"+
		"\u00cc\u00cc\u00d7\u00d7\u00d9\u00d9\u00ed\u00ed\u00f5\u00f5\u0108\u010a"+
		"\u0136\u0136\u014d\u014d\u018a\u018a:\2  $*--99?@FFLLNNVV]]acegqqssyy"+
		"}~\u0084\u0084\u0088\u0088\u008b\u008b\u0095\u0095\u0097\u0097\u009b\u009b"+
		"\u009d\u009d\u00a0\u00a0\u00a5\u00a5\u00a8\u00a8\u00aa\u00aa\u00b4\u00b4"+
		"\u00bb\u00bb\u00c5\u00c5\u00c7\u00c7\u00d4\u00d4\u00da\u00da\u00de\u00df"+
		"\u00f2\u00f2\u00f7\u00f7\u00fe\u00fe\u0100\u0101\u0105\u0106\u0113\u0113"+
		"\u011b\u011b\u0128\u0128\u0133\u0133\u0142\u0142\u0148\u0148\u0151\u0151"+
		"\u015d\u015d\u0160\u0160\u0167\u0167\u016a\u016b\u0170\u0170\u0178\u0179"+
		"\u017f\u0180\u0188\u0188\u018e\u018f\u0191\u0192\u23e9\2\u0446\3\2\2\2"+
		"\4\u0448\3\2\2\2\6\u04c2\3\2\2\2\b\u04c4\3\2\2\2\n\u04cc\3\2\2\2\f\u04ce"+
		"\3\2\2\2\16\u04d6\3\2\2\2\20\u04f2\3\2\2\2\22\u0501\3\2\2\2\24\u0503\3"+
		"\2\2\2\26\u0509\3\2\2\2\30\u0513\3\2\2\2\32\u0515\3\2\2\2\34\u051b\3\2"+
		"\2\2\36\u0521\3\2\2\2 \u052e\3\2\2\2\"\u0538\3\2\2\2$\u053a\3\2\2\2&\u0540"+
		"\3\2\2\2(\u0547\3\2\2\2*\u0551\3\2\2\2,\u055f\3\2\2\2.\u0563\3\2\2\2\60"+
		"\u0565\3\2\2\2\62\u0573\3\2\2\2\64\u057d\3\2\2\2\66\u0587\3\2\2\28\u05b4"+
		"\3\2\2\2:\u05b6\3\2\2\2<\u05c1\3\2\2\2>\u05ce\3\2\2\2@\u05d7\3\2\2\2B"+
		"\u05dd\3\2\2\2D\u05ef\3\2\2\2F\u05f4\3\2\2\2H\u05f8\3\2\2\2J\u0608\3\2"+
		"\2\2L\u060d\3\2\2\2N\u0612\3\2\2\2P\u0622\3\2\2\2R\u0624\3\2\2\2T\u062b"+
		"\3\2\2\2V\u062d\3\2\2\2X\u062f\3\2\2\2Z\u0639\3\2\2\2\\\u066b\3\2\2\2"+
		"^\u066d\3\2\2\2`\u071d\3\2\2\2b\u0724\3\2\2\2d\u0729\3\2\2\2f\u072e\3"+
		"\2\2\2h\u0733\3\2\2\2j\u0735\3\2\2\2l\u073c\3\2\2\2n\u073e\3\2\2\2p\u0758"+
		"\3\2\2\2r\u075a\3\2\2\2t\u075f\3\2\2\2v\u0784\3\2\2\2x\u078a\3\2\2\2z"+
		"\u079e\3\2\2\2|\u07a0\3\2\2\2~\u07a5\3\2\2\2\u0080\u07ac\3\2\2\2\u0082"+
		"\u07ae\3\2\2\2\u0084\u07d6\3\2\2\2\u0086\u07da\3\2\2\2\u0088\u07df\3\2"+
		"\2\2\u008a\u07e6\3\2\2\2\u008c\u07ea\3\2\2\2\u008e\u07ec\3\2\2\2\u0090"+
		"\u07f7\3\2\2\2\u0092\u0802\3\2\2\2\u0094\u0804\3\2\2\2\u0096\u080f\3\2"+
		"\2\2\u0098\u0845\3\2\2\2\u009a\u0853\3\2\2\2\u009c\u0857\3\2\2\2\u009e"+
		"\u085e\3\2\2\2\u00a0\u0860\3\2\2\2\u00a2\u086b\3\2\2\2\u00a4\u0879\3\2"+
		"\2\2\u00a6\u087d\3\2\2\2\u00a8\u087f\3\2\2\2\u00aa\u0884\3\2\2\2\u00ac"+
		"\u0889\3\2\2\2\u00ae\u0899\3\2\2\2\u00b0\u08b5\3\2\2\2\u00b2\u08be\3\2"+
		"\2\2\u00b4\u08c0\3\2\2\2\u00b6\u08c4\3\2\2\2\u00b8\u08d0\3\2\2\2\u00ba"+
		"\u08d7\3\2\2\2\u00bc\u090f\3\2\2\2\u00be\u0914\3\2\2\2\u00c0\u091b\3\2"+
		"\2\2\u00c2\u091d\3\2\2\2\u00c4\u0928\3\2\2\2\u00c6\u0931\3\2\2\2\u00c8"+
		"\u0933\3\2\2\2\u00ca\u0949\3\2\2\2\u00cc\u0951\3\2\2\2\u00ce\u095c\3\2"+
		"\2\2\u00d0\u095e\3\2\2\2\u00d2\u0962\3\2\2\2\u00d4\u096e\3\2\2\2\u00d6"+
		"\u0976\3\2\2\2\u00d8\u097f\3\2\2\2\u00da\u098d\3\2\2\2\u00dc\u0992\3\2"+
		"\2\2\u00de\u0999\3\2\2\2\u00e0\u099b\3\2\2\2\u00e2\u099f\3\2\2\2\u00e4"+
		"\u09a7\3\2\2\2\u00e6\u09b3\3\2\2\2\u00e8\u09b5\3\2\2\2\u00ea\u09c7\3\2"+
		"\2\2\u00ec\u09cb\3\2\2\2\u00ee\u09cd\3\2\2\2\u00f0\u09f4\3\2\2\2\u00f2"+
		"\u09f8\3\2\2\2\u00f4\u09fe\3\2\2\2\u00f6\u0a00\3\2\2\2\u00f8\u0a1d\3\2"+
		"\2\2\u00fa\u0a21\3\2\2\2\u00fc\u0a27\3\2\2\2\u00fe\u0a2c\3\2\2\2\u0100"+
		"\u0a32\3\2\2\2\u0102\u0a36\3\2\2\2\u0104\u0a46\3\2\2\2\u0106\u0a4a\3\2"+
		"\2\2\u0108\u0a4c\3\2\2\2\u010a\u0a56\3\2\2\2\u010c\u0a60\3\2\2\2\u010e"+
		"\u0a71\3\2\2\2\u0110\u0a73\3\2\2\2\u0112\u0a81\3\2\2\2\u0114\u0a83\3\2"+
		"\2\2\u0116\u0a89\3\2\2\2\u0118\u0a91\3\2\2\2\u011a\u0b46\3\2\2\2\u011c"+
		"\u0b48\3\2\2\2\u011e\u0b58\3\2\2\2\u0120\u0b5a\3\2\2\2\u0122\u0b66\3\2"+
		"\2\2\u0124\u0b78\3\2\2\2\u0126\u0b89\3\2\2\2\u0128\u0b91\3\2\2\2\u012a"+
		"\u0b93\3\2\2\2\u012c\u0b9e\3\2\2\2\u012e\u0ba3\3\2\2\2\u0130\u0bb5\3\2"+
		"\2\2\u0132\u0bb7\3\2\2\2\u0134\u0bba\3\2\2\2\u0136\u0bbc\3\2\2\2\u0138"+
		"\u0bbe\3\2\2\2\u013a\u0bcc\3\2\2\2\u013c\u0bd2\3\2\2\2\u013e\u0bd6\3\2"+
		"\2\2\u0140\u0be4\3\2\2\2\u0142\u0bf6\3\2\2\2\u0144\u0c0d\3\2\2\2\u0146"+
		"\u0c15\3\2\2\2\u0148\u0c17\3\2\2\2\u014a\u0c22\3\2\2\2\u014c\u0c32\3\2"+
		"\2\2\u014e\u0c34\3\2\2\2\u0150\u0c40\3\2\2\2\u0152\u0c54\3\2\2\2\u0154"+
		"\u0c56\3\2\2\2\u0156\u0c84\3\2\2\2\u0158\u0c8a\3\2\2\2\u015a\u0c8c\3\2"+
		"\2\2\u015c\u0c9e\3\2\2\2\u015e\u0ca5\3\2\2\2\u0160\u0ca9\3\2\2\2\u0162"+
		"\u0cab\3\2\2\2\u0164\u0cb3\3\2\2\2\u0166\u0cb8\3\2\2\2\u0168\u0cc6\3\2"+
		"\2\2\u016a\u0ccb\3\2\2\2\u016c\u0ccd\3\2\2\2\u016e\u0ce0\3\2\2\2\u0170"+
		"\u0cf2\3\2\2\2\u0172\u0cf4\3\2\2\2\u0174\u0cfd\3\2\2\2\u0176\u0d59\3\2"+
		"\2\2\u0178\u0d5b\3\2\2\2\u017a\u0d5f\3\2\2\2\u017c\u0d6f\3\2\2\2\u017e"+
		"\u0d76\3\2\2\2\u0180\u0d7f\3\2\2\2\u0182\u0d81\3\2\2\2\u0184\u0d85\3\2"+
		"\2\2\u0186\u0d90\3\2\2\2\u0188\u0d96\3\2\2\2\u018a\u0d98\3\2\2\2\u018c"+
		"\u0dbc\3\2\2\2\u018e\u0dbe\3\2\2\2\u0190\u0dcc\3\2\2\2\u0192\u0df3\3\2"+
		"\2\2\u0194\u0df7\3\2\2\2\u0196\u0dfc\3\2\2\2\u0198\u0e05\3\2\2\2\u019a"+
		"\u0e09\3\2\2\2\u019c\u0e0b\3\2\2\2\u019e\u0e24\3\2\2\2\u01a0\u0e26\3\2"+
		"\2\2\u01a2\u0e3d\3\2\2\2\u01a4\u0e51\3\2\2\2\u01a6\u0e65\3\2\2\2\u01a8"+
		"\u0e67\3\2\2\2\u01aa\u0e6d\3\2\2\2\u01ac\u0e8e\3\2\2\2\u01ae\u0ea8\3\2"+
		"\2\2\u01b0\u0eaa\3\2\2\2\u01b2\u0eb9\3\2\2\2\u01b4\u0ebb\3\2\2\2\u01b6"+
		"\u0ec7\3\2\2\2\u01b8\u0ed2\3\2\2\2\u01ba\u0f68\3\2\2\2\u01bc\u0f7e\3\2"+
		"\2\2\u01be\u0f82\3\2\2\2\u01c0\u0fb5\3\2\2\2\u01c2\u0fba\3\2\2\2\u01c4"+
		"\u0fc8\3\2\2\2\u01c6\u0fcc\3\2\2\2\u01c8\u0fd2\3\2\2\2\u01ca\u1016\3\2"+
		"\2\2\u01cc\u1018\3\2\2\2\u01ce\u101c\3\2\2\2\u01d0\u101e\3\2\2\2\u01d2"+
		"\u1039\3\2\2\2\u01d4\u104a\3\2\2\2\u01d6\u104c\3\2\2\2\u01d8\u1060\3\2"+
		"\2\2\u01da\u108e\3\2\2\2\u01dc\u1090\3\2\2\2\u01de\u109e\3\2\2\2\u01e0"+
		"\u10a4\3\2\2\2\u01e2\u10a6\3\2\2\2\u01e4\u10b1\3\2\2\2\u01e6\u10b4\3\2"+
		"\2\2\u01e8\u10cc\3\2\2\2\u01ea\u10d2\3\2\2\2\u01ec\u10d8\3\2\2\2\u01ee"+
		"\u10da\3\2\2\2\u01f0\u10e0\3\2\2\2\u01f2\u10f1\3\2\2\2\u01f4\u110e\3\2"+
		"\2\2\u01f6\u1110\3\2\2\2\u01f8\u1112\3\2\2\2\u01fa\u1123\3\2\2\2\u01fc"+
		"\u1127\3\2\2\2\u01fe\u112b\3\2\2\2\u0200\u1130\3\2\2\2\u0202\u1132\3\2"+
		"\2\2\u0204\u1151\3\2\2\2\u0206\u1156\3\2\2\2\u0208\u115c\3\2\2\2\u020a"+
		"\u1161\3\2\2\2\u020c\u1166\3\2\2\2\u020e\u1187\3\2\2\2\u0210\u118c\3\2"+
		"\2\2\u0212\u1194\3\2\2\2\u0214\u1196\3\2\2\2\u0216\u11a7\3\2\2\2\u0218"+
		"\u11a9\3\2\2\2\u021a\u11c3\3\2\2\2\u021c\u11cb\3\2\2\2\u021e\u11cd\3\2"+
		"\2\2\u0220\u11cf\3\2\2\2\u0222\u11dd\3\2\2\2\u0224\u11e8\3\2\2\2\u0226"+
		"\u11ea\3\2\2\2\u0228\u1213\3\2\2\2\u022a\u121b\3\2\2\2\u022c\u1222\3\2"+
		"\2\2\u022e\u1227\3\2\2\2\u0230\u1229\3\2\2\2\u0232\u122c\3\2\2\2\u0234"+
		"\u1237\3\2\2\2\u0236\u123d\3\2\2\2\u0238\u1249\3\2\2\2\u023a\u1259\3\2"+
		"\2\2\u023c\u1269\3\2\2\2\u023e\u1279\3\2\2\2\u0240\u1291\3\2\2\2\u0242"+
		"\u1298\3\2\2\2\u0244\u129a\3\2\2\2\u0246\u129d\3\2\2\2\u0248\u12aa\3\2"+
		"\2\2\u024a\u12ce\3\2\2\2\u024c\u12d5\3\2\2\2\u024e\u12d7\3\2\2\2\u0250"+
		"\u12e4\3\2\2\2\u0252\u12f5\3\2\2\2\u0254\u12f7\3\2\2\2\u0256\u12fb\3\2"+
		"\2\2\u0258\u144f\3\2\2\2\u025a\u1453\3\2\2\2\u025c\u1458\3\2\2\2\u025e"+
		"\u150e\3\2\2\2\u0260\u159e\3\2\2\2\u0262\u15a0\3\2\2\2\u0264\u15b4\3\2"+
		"\2\2\u0266\u15b6\3\2\2\2\u0268\u15c6\3\2\2\2\u026a\u15ca\3\2\2\2\u026c"+
		"\u15cc\3\2\2\2\u026e\u15d1\3\2\2\2\u0270\u15e3\3\2\2\2\u0272\u15e5\3\2"+
		"\2\2\u0274\u15ec\3\2\2\2\u0276\u15ee\3\2\2\2\u0278\u15f5\3\2\2\2\u027a"+
		"\u1621\3\2\2\2\u027c\u1626\3\2\2\2\u027e\u1632\3\2\2\2\u0280\u1634\3\2"+
		"\2\2\u0282\u1643\3\2\2\2\u0284\u165b\3\2\2\2\u0286\u1669\3\2\2\2\u0288"+
		"\u166b\3\2\2\2\u028a\u166e\3\2\2\2\u028c\u1674\3\2\2\2\u028e\u16bd\3\2"+
		"\2\2\u0290\u16c1\3\2\2\2\u0292\u16d0\3\2\2\2\u0294\u16d2\3\2\2\2\u0296"+
		"\u16d7\3\2\2\2\u0298\u16df\3\2\2\2\u029a\u16ec\3\2\2\2\u029c\u16ee\3\2"+
		"\2\2\u029e\u1727\3\2\2\2\u02a0\u172b\3\2\2\2\u02a2\u172d\3\2\2\2\u02a4"+
		"\u177c\3\2\2\2\u02a6\u177e\3\2\2\2\u02a8\u1796\3\2\2\2\u02aa\u179b\3\2"+
		"\2\2\u02ac\u17ba\3\2\2\2\u02ae\u17bc\3\2\2\2\u02b0\u17cb\3\2\2\2\u02b2"+
		"\u17d5\3\2\2\2\u02b4\u17d7\3\2\2\2\u02b6\u17db\3\2\2\2\u02b8\u17df\3\2"+
		"\2\2\u02ba\u17e3\3\2\2\2\u02bc\u17ea\3\2\2\2\u02be\u17fc\3\2\2\2\u02c0"+
		"\u1805\3\2\2\2\u02c2\u1807\3\2\2\2\u02c4\u1812\3\2\2\2\u02c6\u1818\3\2"+
		"\2\2\u02c8\u181d\3\2\2\2\u02ca\u181f\3\2\2\2\u02cc\u182a\3\2\2\2\u02ce"+
		"\u1830\3\2\2\2\u02d0\u1840\3\2\2\2\u02d2\u1847\3\2\2\2\u02d4\u1853\3\2"+
		"\2\2\u02d6\u1855\3\2\2\2\u02d8\u1864\3\2\2\2\u02da\u1866\3\2\2\2\u02dc"+
		"\u1871\3\2\2\2\u02de\u1879\3\2\2\2\u02e0\u187b\3\2\2\2\u02e2\u1887\3\2"+
		"\2\2\u02e4\u1889\3\2\2\2\u02e6\u1894\3\2\2\2\u02e8\u18a6\3\2\2\2\u02ea"+
		"\u18aa\3\2\2\2\u02ec\u18ac\3\2\2\2\u02ee\u18b6\3\2\2\2\u02f0\u18c3\3\2"+
		"\2\2\u02f2\u18c5\3\2\2\2\u02f4\u18c9\3\2\2\2\u02f6\u18cf\3\2\2\2\u02f8"+
		"\u18d2\3\2\2\2\u02fa\u18dd\3\2\2\2\u02fc\u18e5\3\2\2\2\u02fe\u18e7\3\2"+
		"\2\2\u0300\u18fb\3\2\2\2\u0302\u18ff\3\2\2\2\u0304\u190a\3\2\2\2\u0306"+
		"\u1944\3\2\2\2\u0308\u1948\3\2\2\2\u030a\u196c\3\2\2\2\u030c\u1987\3\2"+
		"\2\2\u030e\u1989\3\2\2\2\u0310\u1994\3\2\2\2\u0312\u199d\3\2\2\2\u0314"+
		"\u19aa\3\2\2\2\u0316\u19ac\3\2\2\2\u0318\u19b4\3\2\2\2\u031a\u19d9\3\2"+
		"\2\2\u031c\u19dd\3\2\2\2\u031e\u19e2\3\2\2\2\u0320\u19ed\3\2\2\2\u0322"+
		"\u19f1\3\2\2\2\u0324\u19f3\3\2\2\2\u0326\u19f7\3\2\2\2\u0328\u1a0b\3\2"+
		"\2\2\u032a\u1a15\3\2\2\2\u032c\u1a19\3\2\2\2\u032e\u1a28\3\2\2\2\u0330"+
		"\u1a30\3\2\2\2\u0332\u1a34\3\2\2\2\u0334\u1a36\3\2\2\2\u0336\u1a3e\3\2"+
		"\2\2\u0338\u1a40\3\2\2\2\u033a\u1a42\3\2\2\2\u033c\u1a44\3\2\2\2\u033e"+
		"\u1a4a\3\2\2\2\u0340\u1a4f\3\2\2\2\u0342\u1a55\3\2\2\2\u0344\u1a59\3\2"+
		"\2\2\u0346\u1a5b\3\2\2\2\u0348\u1a6f\3\2\2\2\u034a\u1a74\3\2\2\2\u034c"+
		"\u1a76\3\2\2\2\u034e\u1a85\3\2\2\2\u0350\u1a87\3\2\2\2\u0352\u1a94\3\2"+
		"\2\2\u0354\u1ab5\3\2\2\2\u0356\u1ad9\3\2\2\2\u0358\u1b07\3\2\2\2\u035a"+
		"\u1b10\3\2\2\2\u035c\u1b14\3\2\2\2\u035e\u1b1d\3\2\2\2\u0360\u1b2a\3\2"+
		"\2\2\u0362\u1b2c\3\2\2\2\u0364\u1b3f\3\2\2\2\u0366\u1b41\3\2\2\2\u0368"+
		"\u1b46\3\2\2\2\u036a\u1b4f\3\2\2\2\u036c\u1b53\3\2\2\2\u036e\u1b55\3\2"+
		"\2\2\u0370\u1b60\3\2\2\2\u0372\u1b7f\3\2\2\2\u0374\u1b81\3\2\2\2\u0376"+
		"\u1b9d\3\2\2\2\u0378\u1ba3\3\2\2\2\u037a\u1bac\3\2\2\2\u037c\u1bb3\3\2"+
		"\2\2\u037e\u1bc5\3\2\2\2\u0380\u1bcc\3\2\2\2\u0382\u1bd0\3\2\2\2\u0384"+
		"\u1bd4\3\2\2\2\u0386\u1bd6\3\2\2\2\u0388\u1bdc\3\2\2\2\u038a\u1be1\3\2"+
		"\2\2\u038c\u1be5\3\2\2\2\u038e\u1be7\3\2\2\2\u0390\u1bed\3\2\2\2\u0392"+
		"\u1bfd\3\2\2\2\u0394\u1c01\3\2\2\2\u0396\u1c07\3\2\2\2\u0398\u1c19\3\2"+
		"\2\2\u039a\u1c1b\3\2\2\2\u039c\u1c23\3\2\2\2\u039e\u1c41\3\2\2\2\u03a0"+
		"\u1c49\3\2\2\2\u03a2\u1c5c\3\2\2\2\u03a4\u1d53\3\2\2\2\u03a6\u1db3\3\2"+
		"\2\2\u03a8\u1eb6\3\2\2\2\u03aa\u1ebd\3\2\2\2\u03ac\u1eca\3\2\2\2\u03ae"+
		"\u1ecc\3\2\2\2\u03b0\u1ed1\3\2\2\2\u03b2\u1ee1\3\2\2\2\u03b4\u1ee3\3\2"+
		"\2\2\u03b6\u1eea\3\2\2\2\u03b8\u1efe\3\2\2\2\u03ba\u1f03\3\2\2\2\u03bc"+
		"\u1f05\3\2\2\2\u03be\u1f10\3\2\2\2\u03c0\u1f19\3\2\2\2\u03c2\u1f1b\3\2"+
		"\2\2\u03c4\u1f24\3\2\2\2\u03c6\u1f2a\3\2\2\2\u03c8\u1f31\3\2\2\2\u03ca"+
		"\u1f39\3\2\2\2\u03cc\u1f47\3\2\2\2\u03ce\u1f57\3\2\2\2\u03d0\u1f59\3\2"+
		"\2\2\u03d2\u1f5d\3\2\2\2\u03d4\u1f5f\3\2\2\2\u03d6\u1f67\3\2\2\2\u03d8"+
		"\u1f6f\3\2\2\2\u03da\u1f7d\3\2\2\2\u03dc\u1f7f\3\2\2\2\u03de\u1f8a\3\2"+
		"\2\2\u03e0\u1f9a\3\2\2\2\u03e2\u1f9c\3\2\2\2\u03e4\u1fb1\3\2\2\2\u03e6"+
		"\u1fb3\3\2\2\2\u03e8\u1fc3\3\2\2\2\u03ea\u1fcd\3\2\2\2\u03ec\u1fd8\3\2"+
		"\2\2\u03ee\u1fda\3\2\2\2\u03f0\u1fe2\3\2\2\2\u03f2\u1ff4\3\2\2\2\u03f4"+
		"\u1ff6\3\2\2\2\u03f6\u1ff9\3\2\2\2\u03f8\u2003\3\2\2\2\u03fa\u200a\3\2"+
		"\2\2\u03fc\u200c\3\2\2\2\u03fe\u2012\3\2\2\2\u0400\u201c\3\2\2\2\u0402"+
		"\u2024\3\2\2\2\u0404\u2028\3\2\2\2\u0406\u202e\3\2\2\2\u0408\u203e\3\2"+
		"\2\2\u040a\u2040\3\2\2\2\u040c\u204a\3\2\2\2\u040e\u2054\3\2\2\2\u0410"+
		"\u2058\3\2\2\2\u0412\u205a\3\2\2\2\u0414\u2065\3\2\2\2\u0416\u2069\3\2"+
		"\2\2\u0418\u207d\3\2\2\2\u041a\u207f\3\2\2\2\u041c\u208e\3\2\2\2\u041e"+
		"\u2090\3\2\2\2\u0420\u209b\3\2\2\2\u0422\u209d\3\2\2\2\u0424\u209f\3\2"+
		"\2\2\u0426\u20a1\3\2\2\2\u0428\u20a3\3\2\2\2\u042a\u20a5\3\2\2\2\u042c"+
		"\u20ab\3\2\2\2\u042e\u20cc\3\2\2\2\u0430\u20ce\3\2\2\2\u0432\u20d0\3\2"+
		"\2\2\u0434\u20d2\3\2\2\2\u0436\u20d9\3\2\2\2\u0438\u20de\3\2\2\2\u043a"+
		"\u20e3\3\2\2\2\u043c\u20ea\3\2\2\2\u043e\u20ec\3\2\2\2\u0440\u20ee\3\2"+
		"\2\2\u0442\u20f0\3\2\2\2\u0444\u20f2\3\2\2\2\u0446\u0447\5\4\3\2\u0447"+
		"\3\3\2\2\2\u0448\u0449\b\3\1\2\u0449\u044a\5\6\4\2\u044a\u0450";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u044b\u044c\f\4\2\2\u044c\u044d\7\3\2\2\u044d\u044f\5\6\4\2\u044e"+
		"\u044b\3\2\2\2\u044f\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u0451\3\2"+
		"\2\2\u0451\5\3\2\2\2\u0452\u0450\3\2\2\2\u0453\u04c3\5\u0292\u014a\2\u0454"+
		"\u04c3\5\u0294\u014b\2\u0455\u04c3\5\u01ee\u00f8\2\u0456\u04c3\5\u029e"+
		"\u0150\2\u0457\u04c3\5\u018c\u00c7\2\u0458\u04c3\5\u0114\u008b\2\u0459"+
		"\u04c3\5\u011a\u008e\2\u045a\u04c3\5\u0126\u0094\2\u045b\u04c3\5\u0142"+
		"\u00a2\2\u045c\u04c3\5\u014c\u00a7\2\u045d\u04c3\5\u0234\u011b\2\u045e"+
		"\u04c3\5&\24\2\u045f\u04c3\5\u025e\u0130\2\u0460\u04c3\5\u0260\u0131\2"+
		"\u0461\u04c3\5\u00eav\2\u0462\u04c3\5\\/\2\u0463\u04c3\5r:\2\u0464\u04c3"+
		"\5\32\16\2\u0465\u04c3\5\26\f\2\u0466\u04c3\5\u02a4\u0153\2\u0467\u04c3"+
		"\5\u02a2\u0152\2\u0468\u04c3\5\u0154\u00ab\2\u0469\u04c3\5\36\20\2\u046a"+
		"\u04c3\5\34\17\2\u046b\u04c3\5\u02b2\u015a\2\u046c\u04c3\5X-\2\u046d\u04c3"+
		"\5x=\2\u046e\u04c3\5\u02a8\u0155\2\u046f\u04c3\5\u01ba\u00de\2\u0470\u04c3"+
		"\5R*\2\u0471\u04c3\5z>\2\u0472\u04c3\5\u00e2r\2\u0473\u04c3\5\u0172\u00ba"+
		"\2\u0474\u04c3\5\u024a\u0126\2\u0475\u04c3\5\u02a6\u0154\2\u0476\u04c3"+
		"\5\u029c\u014f\2\u0477\u04c3\5\u010e\u0088\2\u0478\u04c3\5\u011c\u008f"+
		"\2\u0479\u04c3\5\u0138\u009d\2\u047a\u04c3\5\u0144\u00a3\2\u047b\u04c3"+
		"\5\u020e\u0108\2\u047c\u04c3\5$\23\2\u047d\u04c3\5\u018e\u00c8\2\u047e"+
		"\u04c3\5\u019c\u00cf\2\u047f\u04c3\5\u019e\u00d0\2\u0480\u04c3\5\u00f8"+
		"}\2\u0481\u04c3\5,\27\2\u0482\u04c3\5\u00e8u\2\u0483\u04c3\5\u0098M\2"+
		"\u0484\u04c3\5\u0108\u0085\2\u0485\u04c3\5\u0156\u00ac\2\u0486\u04c3\5"+
		"\b\5\2\u0487\u04c3\5\24\13\2\u0488\u04c3\5\u014e\u00a8\2\u0489\u04c3\5"+
		"\u028a\u0146\2\u048a\u04c3\5\u02d4\u016b\2\u048b\u04c3\5\u02fa\u017e\2"+
		"\u048c\u04c3\5\u0176\u00bc\2\u048d\u04c3\5\u02e0\u0171\2\u048e\u04c3\5"+
		"Z.\2\u048f\u04c3\5\u0244\u0123\2\u0490\u04c3\5\u0174\u00bb\2\u0491\u04c3"+
		"\5\u024e\u0128\2\u0492\u04c3\5\u0124\u0093\2\u0493\u04c3\5\u0140\u00a1"+
		"\2\u0494\u04c3\5*\26\2\u0495\u04c3\5\u01a4\u00d3\2\u0496\u04c3\5\u01a6"+
		"\u00d4\2\u0497\u04c3\5\u01a8\u00d5\2\u0498\u04c3\5\u0104\u0083\2\u0499"+
		"\u04c3\5\u0270\u0139\2\u049a\u04c3\5\u01ac\u00d7\2\u049b\u04c3\5\u010c"+
		"\u0087\2\u049c\u04c3\5\u0170\u00b9\2\u049d\u04c3\5 \21\2\u049e\u04c3\5"+
		"\"\22\2\u049f\u04c3\5\u0152\u00aa\2\u04a0\u04c3\5\u029a\u014e\2\u04a1"+
		"\u04c3\5\u02d0\u0169\2\u04a2\u04c3\5\u02be\u0160\2\u04a3\u04c3\5\u01c8"+
		"\u00e5\2\u04a4\u04c3\5\u01d0\u00e9\2\u04a5\u04c3\5\u01e6\u00f4\2\u04a6"+
		"\u04c3\5\u01f8\u00fd\2\u04a7\u04c3\5\u02d6\u016c\2\u04a8\u04c3\5\u0276"+
		"\u013c\2\u04a9\u04c3\5\u0288\u0145\2\u04aa\u04c3\5\u02e4\u0173\2\u04ab"+
		"\u04c3\5\u0272\u013a\2\u04ac\u04c3\5\u02ca\u0166\2\u04ad\u04c3\5\u01aa"+
		"\u00d6\2\u04ae\u04c3\5\u0252\u012a\2\u04af\u04c3\5\u023c\u011f\2\u04b0"+
		"\u04c3\5\u023a\u011e\2\u04b1\u04c3\5\u023e\u0120\2\u04b2\u04c3\5\u0258"+
		"\u012d\2\u04b3\u04c3\5\u01d2\u00ea\2\u04b4\u04c3\5\u01e8\u00f5\2\u04b5"+
		"\u04c3\5\u0262\u0132\2\u04b6\u04c3\5\u01c0\u00e1\2\u04b7\u04c3\5\u0302"+
		"\u0182\2\u04b8\u04c3\5\u027a\u013e\2\u04b9\u04c3\5\u01b6\u00dc\2\u04ba"+
		"\u04c3\5\u0278\u013d\2\u04bb\u04c3\5\u02ec\u0177\2\u04bc\u04c3\5\u02ac"+
		"\u0157\2\u04bd\u04c3\5J&\2\u04be\u04c3\5\64\33\2\u04bf\u04c3\5P)\2\u04c0"+
		"\u04c3\5\u0284\u0143\2\u04c1\u04c3\3\2\2\2\u04c2\u0453\3\2\2\2\u04c2\u0454"+
		"\3\2\2\2\u04c2\u0455\3\2\2\2\u04c2\u0456\3\2\2\2\u04c2\u0457\3\2\2\2\u04c2"+
		"\u0458\3\2\2\2\u04c2\u0459\3\2\2\2\u04c2\u045a\3\2\2\2\u04c2\u045b\3\2"+
		"\2\2\u04c2\u045c\3\2\2\2\u04c2\u045d\3\2\2\2\u04c2\u045e\3\2\2\2\u04c2"+
		"\u045f\3\2\2\2\u04c2\u0460\3\2\2\2\u04c2\u0461\3\2\2\2\u04c2\u0462\3\2"+
		"\2\2\u04c2\u0463\3\2\2\2\u04c2\u0464\3\2\2\2\u04c2\u0465\3\2\2\2\u04c2"+
		"\u0466\3\2\2\2\u04c2\u0467\3\2\2\2\u04c2\u0468\3\2\2\2\u04c2\u0469\3\2"+
		"\2\2\u04c2\u046a\3\2\2\2\u04c2\u046b\3\2\2\2\u04c2\u046c\3\2\2\2\u04c2"+
		"\u046d\3\2\2\2\u04c2\u046e\3\2\2\2\u04c2\u046f\3\2\2\2\u04c2\u0470\3\2"+
		"\2\2\u04c2\u0471\3\2\2\2\u04c2\u0472\3\2\2\2\u04c2\u0473\3\2\2\2\u04c2"+
		"\u0474\3\2\2\2\u04c2\u0475\3\2\2\2\u04c2\u0476\3\2\2\2\u04c2\u0477\3\2"+
		"\2\2\u04c2\u0478\3\2\2\2\u04c2\u0479\3\2\2\2\u04c2\u047a\3\2\2\2\u04c2"+
		"\u047b\3\2\2\2\u04c2\u047c\3\2\2\2\u04c2\u047d\3\2\2\2\u04c2\u047e\3\2"+
		"\2\2\u04c2\u047f\3\2\2\2\u04c2\u0480\3\2\2\2\u04c2\u0481\3\2\2\2\u04c2"+
		"\u0482\3\2\2\2\u04c2\u0483\3\2\2\2\u04c2\u0484\3\2\2\2\u04c2\u0485\3\2"+
		"\2\2\u04c2\u0486\3\2\2\2\u04c2\u0487\3\2\2\2\u04c2\u0488\3\2\2\2\u04c2"+
		"\u0489\3\2\2\2\u04c2\u048a\3\2\2\2\u04c2\u048b\3\2\2\2\u04c2\u048c\3\2"+
		"\2\2\u04c2\u048d\3\2\2\2\u04c2\u048e\3\2\2\2\u04c2\u048f\3\2\2\2\u04c2"+
		"\u0490\3\2\2\2\u04c2\u0491\3\2\2\2\u04c2\u0492\3\2\2\2\u04c2\u0493\3\2"+
		"\2\2\u04c2\u0494\3\2\2\2\u04c2\u0495\3\2\2\2\u04c2\u0496\3\2\2\2\u04c2"+
		"\u0497\3\2\2\2\u04c2\u0498\3\2\2\2\u04c2\u0499\3\2\2\2\u04c2\u049a\3\2"+
		"\2\2\u04c2\u049b\3\2\2\2\u04c2\u049c\3\2\2\2\u04c2\u049d\3\2\2\2\u04c2"+
		"\u049e\3\2\2\2\u04c2\u049f\3\2\2\2\u04c2\u04a0\3\2\2\2\u04c2\u04a1\3\2"+
		"\2\2\u04c2\u04a2\3\2\2\2\u04c2\u04a3\3\2\2\2\u04c2\u04a4\3\2\2\2\u04c2"+
		"\u04a5\3\2\2\2\u04c2\u04a6\3\2\2\2\u04c2\u04a7\3\2\2\2\u04c2\u04a8\3\2"+
		"\2\2\u04c2\u04a9\3\2\2\2\u04c2\u04aa\3\2\2\2\u04c2\u04ab\3\2\2\2\u04c2"+
		"\u04ac\3\2\2\2\u04c2\u04ad\3\2\2\2\u04c2\u04ae\3\2\2\2\u04c2\u04af\3\2"+
		"\2\2\u04c2\u04b0\3\2\2\2\u04c2\u04b1\3\2\2\2\u04c2\u04b2\3\2\2\2\u04c2"+
		"\u04b3\3\2\2\2\u04c2\u04b4\3\2\2\2\u04c2\u04b5\3\2\2\2\u04c2\u04b6\3\2"+
		"\2\2\u04c2\u04b7\3\2\2\2\u04c2\u04b8\3\2\2\2\u04c2\u04b9\3\2\2\2\u04c2"+
		"\u04ba\3\2\2\2\u04c2\u04bb\3\2\2\2\u04c2\u04bc\3\2\2\2\u04c2\u04bd\3\2"+
		"\2\2\u04c2\u04be\3\2\2\2\u04c2\u04bf\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2"+
		"\u04c1\3\2\2\2\u04c3\7\3\2\2\2\u04c4\u04c5\7]\2\2\u04c5\u04c6\7\u0137"+
		"\2\2\u04c6\u04c7\5\u0434\u021b\2\u04c7\u04c8\5\n\6\2\u04c8\u04c9\5\f\7"+
		"\2\u04c9\t\3\2\2\2\u04ca\u04cd\7\u0192\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ca"+
		"\3\2\2\2\u04cc\u04cb\3\2\2\2\u04cd\13\3\2\2\2\u04ce\u04d3\b\7\1\2\u04cf"+
		"\u04d0\f\4\2\2\u04d0\u04d2\5\22\n\2\u04d1\u04cf\3\2\2\2\u04d2\u04d5\3"+
		"\2\2\2\u04d3\u04d1\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\r\3\2\2\2\u04d5\u04d3"+
		"\3\2\2\2\u04d6\u04db\b\b\1\2\u04d7\u04d8\f\4\2\2\u04d8\u04da\5\20\t\2"+
		"\u04d9\u04d7\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc"+
		"\3\2\2\2\u04dc\17\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04df\7\u0112\2\2"+
		"\u04df\u04f3\5\u0432\u021a\2\u04e0\u04e1\7\u0087\2\2\u04e1\u04e2\7\u0112"+
		"\2\2\u04e2\u04f3\5\u0432\u021a\2\u04e3\u04e4\7\u0177\2\2\u04e4\u04e5\7"+
		"\u0112\2\2\u04e5\u04f3\5\u0432\u021a\2\u04e6\u04e7\7U\2\2\u04e7\u04e8"+
		"\7\u00da\2\2\u04e8\u04f3\5\u0436\u021c\2\u04e9\u04ea\7\u0182\2\2\u04ea"+
		"\u04eb\7\u017d\2\2\u04eb\u04f3\5\u0432\u021a\2\u04ec\u04ed\7\u017f\2\2"+
		"\u04ed\u04f3\5\u041e\u0210\2\u04ee\u04ef\7\u0112\2\2\u04ef\u04f3\7\u00f7"+
		"\2\2\u04f0\u04f3\7\u00b9\2\2\u04f1\u04f3\7\u01ac\2\2\u04f2\u04de\3\2\2"+
		"\2\u04f2\u04e0\3\2\2\2\u04f2\u04e3\3\2\2\2\u04f2\u04e6\3\2\2\2\u04f2\u04e9"+
		"\3\2\2\2\u04f2\u04ec\3\2\2\2\u04f2\u04ee\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2"+
		"\u04f1\3\2\2\2\u04f3\21\3\2\2\2\u04f4\u0502\5\20\t\2\u04f5\u04f6\7\u015e"+
		"\2\2\u04f6\u0502\5\u0430\u0219\2\u04f7\u04f8\7\35\2\2\u04f8\u0502\5\u041e"+
		"\u0210\2\u04f9\u04fa\7\u0137\2\2\u04fa\u0502\5\u041e\u0210\2\u04fb\u04fc"+
		"\7\u00b4\2\2\u04fc\u04fd\7\u0137\2\2\u04fd\u0502\5\u041e\u0210\2\u04fe"+
		"\u04ff\7\u00b4\2\2\u04ff\u0500\7\u00a8\2\2\u0500\u0502\5\u041e\u0210\2"+
		"\u0501\u04f4\3\2\2\2\u0501\u04f5\3\2\2\2\u0501\u04f7\3\2\2\2\u0501\u04f9"+
		"\3\2\2\2\u0501\u04fb\3\2\2\2\u0501\u04fe\3\2\2\2\u0502\23\3\2\2\2\u0503"+
		"\u0504\7]\2\2\u0504\u0505\7\u017f\2\2\u0505\u0506\5\u0434\u021b\2\u0506"+
		"\u0507\5\n\6\2\u0507\u0508\5\f\7\2\u0508\25\3\2\2\2\u0509\u050a\7\"\2"+
		"\2\u050a\u050b\7\u0137\2\2\u050b\u050c\5\u0434\u021b\2\u050c\u050d\5\n"+
		"\6\2\u050d\u050e\5\16\b\2\u050e\27\3\2\2\2\u050f\u0510\7\u00b4\2\2\u0510"+
		"\u0511\7k\2\2\u0511\u0514\5\u0422\u0212\2\u0512\u0514\3\2\2\2\u0513\u050f"+
		"\3\2\2\2\u0513\u0512\3\2\2\2\u0514\31\3\2\2\2\u0515\u0516\7\"\2\2\u0516"+
		"\u0517\7\u0137\2\2\u0517\u0518\5\u0434\u021b\2\u0518\u0519\5\30\r\2\u0519"+
		"\u051a\5L\'\2\u051a\33\3\2\2\2\u051b\u051c\7\"\2\2\u051c\u051d\7\u017f"+
		"\2\2\u051d\u051e\5\u0434\u021b\2\u051e\u051f\5\n\6\2\u051f\u0520\5\16"+
		"\b\2\u0520\35\3\2\2\2\u0521\u0522\7\"\2\2\u0522\u0523\7\u017f\2\2\u0523"+
		"\u0524\5\u0434\u021b\2\u0524\u0525\5L\'\2\u0525\37\3\2\2\2\u0526\u0527"+
		"\7\u0082\2\2\u0527\u0528\7\u0137\2\2\u0528\u052f\5\u041e\u0210\2\u0529"+
		"\u052a\7\u0082\2\2\u052a\u052b\7\u0137\2\2\u052b\u052c\7\u00af\2\2\u052c"+
		"\u052d\7\u0090\2\2\u052d\u052f\5\u041e\u0210\2\u052e\u0526\3\2\2\2\u052e"+
		"\u0529\3\2\2\2\u052f!\3\2\2\2\u0530\u0531\7\u0082\2\2\u0531\u0532\7\u017f"+
		"\2\2\u0532\u0539\5\u041e\u0210\2\u0533\u0534\7\u0082\2\2\u0534\u0535\7"+
		"\u017f\2\2\u0535\u0536\7\u00af\2\2\u0536\u0537\7\u0090\2\2\u0537\u0539"+
		"\5\u041e\u0210\2\u0538\u0530\3\2\2\2\u0538\u0533\3\2\2\2\u0539#\3\2\2"+
		"\2\u053a\u053b\7]\2\2\u053b\u053c\7\u00a8\2\2\u053c\u053d\5\u0434\u021b"+
		"\2\u053d\u053e\5\n\6\2\u053e\u053f\5\f\7\2\u053f%\3\2\2\2\u0540\u0541"+
		"\7\"\2\2\u0541\u0542\7\u00a8\2\2\u0542\u0543\5\u0434\u021b\2\u0543\u0544"+
		"\5(\25\2\u0544\u0545\7\u017f\2\2\u0545\u0546\5\u041e\u0210\2\u0546\'\3"+
		"\2\2\2\u0547\u0548\t\2\2\2\u0548)\3\2\2\2\u0549\u054a\7\u0082\2\2\u054a"+
		"\u054b\7\u00a8\2\2\u054b\u0552\5\u041e\u0210\2\u054c\u054d\7\u0082\2\2"+
		"\u054d\u054e\7\u00a8\2\2\u054e\u054f\7\u00af\2\2\u054f\u0550\7\u0090\2"+
		"\2\u0550\u0552\5\u041e\u0210\2\u0551\u0549\3\2\2\2\u0551\u054c\3\2\2\2"+
		"\u0552+\3\2\2\2\u0553\u0554\7]\2\2\u0554\u0555\7\u013d\2\2\u0555\u0556"+
		"\5.\30\2\u0556\u0557\7\60\2\2\u0557\u0558\5\u0434\u021b\2\u0558\u0559"+
		"\5\60\31\2\u0559\u0560\3\2\2\2\u055a\u055b\7]\2\2\u055b\u055c\7\u013d"+
		"\2\2\u055c\u055d\5\u0438\u021d\2\u055d\u055e\5\60\31\2\u055e\u0560\3\2"+
		"\2\2\u055f\u0553\3\2\2\2\u055f\u055a\3\2\2\2\u0560-\3\2\2\2\u0561\u0564"+
		"\5\u0438\u021d\2\u0562\u0564\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0562\3"+
		"\2\2\2\u0564/\3\2\2\2\u0565\u056a\b\31\1\2\u0566\u0567\f\4\2\2\u0567\u0569"+
		"\5\62\32\2\u0568\u0566\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2"+
		"\u056a\u056b\3\2\2\2\u056b\61\3\2\2\2\u056c\u056a\3\2\2\2\u056d\u0574"+
		"\5\u0098M\2\u056e\u0574\5\u01f8\u00fd\2\u056f\u0574\5\u00e8u\2\u0570\u0574"+
		"\5\u0156\u00ac\2\u0571\u0574\5\u01d0\u00e9\2\u0572\u0574\5\u0284\u0143"+
		"\2\u0573\u056d\3\2\2\2\u0573\u056e\3\2\2\2\u0573\u056f\3\2\2\2\u0573\u0570"+
		"\3\2\2\2\u0573\u0571\3\2\2\2\u0573\u0572\3\2\2\2\u0574\63\3\2\2\2\u0575"+
		"\u0576\7\u0149\2\2\u0576\u057e\5\66\34\2\u0577\u0578\7\u0149\2\2\u0578"+
		"\u0579\7\u00dd\2\2\u0579\u057e\5\66\34\2\u057a\u057b\7\u0149\2\2\u057b"+
		"\u057c\7\u0147\2\2\u057c\u057e\5\66\34\2\u057d\u0575\3\2\2\2\u057d\u0577"+
		"\3\2\2\2\u057d\u057a\3\2\2\2\u057e\65\3\2\2\2\u057f\u0580\7\u016c\2\2"+
		"\u0580\u0588\5\u0280\u0141\2\u0581\u0582\7\u0147\2\2\u0582\u0583\7E\2"+
		"\2\u0583\u0584\7)\2\2\u0584\u0585\7\u016c\2\2\u0585\u0588\5\u0280\u0141"+
		"\2\u0586\u0588\58\35\2\u0587\u057f\3\2\2\2\u0587\u0581\3\2\2\2\u0587\u0586"+
		"\3\2\2\2\u0588\67\3\2\2\2\u0589\u058a\5:\36\2\u058a\u058b\7\4\2\2\u058b"+
		"\u058c\5<\37\2\u058c\u05b5\3\2\2\2\u058d\u058e\5:\36\2\u058e\u058f\7\4"+
		"\2\2\u058f\u0590\7q\2\2\u0590\u05b5\3\2\2\2\u0591\u0592\5:\36\2\u0592"+
		"\u0593\7\u016a\2\2\u0593\u0594\5<\37\2\u0594\u05b5\3\2\2\2\u0595\u0596"+
		"\5:\36\2\u0596\u0597\7\u016a\2\2\u0597\u0598\7q\2\2\u0598\u05b5\3\2\2"+
		"\2\u0599\u059a\5:\36\2\u059a\u059b\7\u00a0\2\2\u059b\u059c\7`\2\2\u059c"+
		"\u05b5\3\2\2\2\u059d\u059e\7\u0168\2\2\u059e\u059f\7\u01a3\2\2\u059f\u05b5"+
		"\5D#\2\u05a0\u05a1\7A\2\2\u05a1\u05b5\5\u0432\u021a\2\u05a2\u05a3\7\u013d"+
		"\2\2\u05a3\u05b5\5\u0432\u021a\2\u05a4\u05a5\7\u00eb\2\2\u05a5\u05b5\5"+
		"F$\2\u05a6\u05a7\7\u0137\2\2\u05a7\u05b5\5H%\2\u05a8\u05a9\7\u0147\2\2"+
		"\u05a9\u05aa\7\60\2\2\u05aa\u05b5\5H%\2\u05ab\u05ac\7\u0197\2\2\u05ac"+
		"\u05ad\7\u0103\2\2\u05ad\u05b5\5\u03b4\u01db\2\u05ae\u05af\7\u016c\2\2"+
		"\u05af\u05b0\7\u0150\2\2\u05b0\u05b5\5\u0432\u021a\2\u05b1\u05b2\7\u0147"+
		"\2\2\u05b2\u05b3\7\60\2\2\u05b3\u05b5\7q\2\2\u05b4\u0589\3\2\2\2\u05b4"+
		"\u058d\3\2\2\2\u05b4\u0591\3\2\2\2\u05b4\u0595\3\2\2\2\u05b4\u0599\3\2"+
		"\2\2\u05b4\u059d\3\2\2\2\u05b4\u05a0\3\2\2\2\u05b4\u05a2\3\2\2\2\u05b4"+
		"\u05a4\3\2\2\2\u05b4\u05a6\3\2\2\2\u05b4\u05a8\3\2\2\2\u05b4\u05ab\3\2"+
		"\2\2\u05b4\u05ae\3\2\2\2\u05b4\u05b1\3\2\2\2\u05b59\3\2\2\2\u05b6\u05b7"+
		"\b\36\1\2\u05b7\u05b8\5\u0438\u021d\2\u05b8\u05be\3\2\2\2\u05b9\u05ba"+
		"\f\4\2\2\u05ba\u05bb\7\5\2\2\u05bb\u05bd\5\u0438\u021d\2\u05bc\u05b9\3"+
		"\2\2\2\u05bd\u05c0\3\2\2\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf"+
		";\3\2\2\2\u05c0\u05be\3\2\2\2\u05c1\u05c2\b\37\1\2\u05c2\u05c3\5> \2\u05c3"+
		"\u05c9\3\2\2\2\u05c4\u05c5\f\4\2\2\u05c5\u05c6\7\6\2\2\u05c6\u05c8\5>"+
		" \2\u05c7\u05c4\3\2\2\2\u05c8\u05cb\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9"+
		"\u05ca\3\2\2\2\u05ca=\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc\u05cf\5B\"\2\u05cd"+
		"\u05cf\5\u00f4{\2\u05ce\u05cc\3\2\2\2\u05ce\u05cd\3\2\2\2\u05cf?\3\2\2"+
		"\2\u05d0\u05d1\7\u0122\2\2\u05d1\u05d8\7\u0176\2\2\u05d2\u05d3\7\u0122"+
		"\2\2\u05d3\u05d8\7R\2\2\u05d4\u05d5\7\u012d\2\2\u05d5\u05d8\7\u0122\2"+
		"\2\u05d6\u05d8\7\u0145\2\2\u05d7\u05d0\3\2\2\2\u05d7\u05d2\3\2\2\2\u05d7"+
		"\u05d4\3\2\2\2\u05d7\u05d6\3\2\2\2\u05d8A\3\2\2\2\u05d9\u05de\5H%\2\u05da"+
		"\u05de\7\u0170\2\2\u05db\u05de\7\u0095\2\2\u05dc\u05de\7\u0100\2\2\u05dd"+
		"\u05d9\3\2\2\2\u05dd\u05da\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05dc\3\2"+
		"\2\2\u05deC\3\2\2\2\u05df\u05e0\5\u039a\u01ce\2\u05e0\u05e1\7\7\2\2\u05e1"+
		"\u05e2\5\u0430\u0219\2\u05e2\u05e3\7\b\2\2\u05e3\u05e4\5\u0432\u021a\2"+
		"\u05e4\u05e5\5\u039e\u01d0\2\u05e5\u05f0\3\2\2\2\u05e6\u05e7\5\u039a\u01ce"+
		"\2\u05e7\u05e8\5\u0432\u021a\2\u05e8\u05e9\5\u039e\u01d0\2\u05e9\u05f0"+
		"\3\2\2\2\u05ea\u05f0\5\u0432\u021a\2\u05eb\u05f0\5\u00f4{\2\u05ec\u05f0"+
		"\7\u01ac\2\2\u05ed\u05f0\7q\2\2\u05ee\u05f0\7\u00dd\2\2\u05ef\u05df\3"+
		"\2\2\2\u05ef\u05e6\3\2\2\2\u05ef\u05ea\3\2\2\2\u05ef\u05eb\3\2\2\2\u05ef"+
		"\u05ec\3\2\2\2\u05ef\u05ed\3\2\2\2\u05ef\u05ee\3\2\2\2\u05f0E\3\2\2\2"+
		"\u05f1\u05f5\5\u0432\u021a\2\u05f2\u05f5\7q\2\2\u05f3\u05f5\3\2\2\2\u05f4"+
		"\u05f1\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f3\3\2\2\2\u05f5G\3\2\2\2"+
		"\u05f6\u05f9\5\u0438\u021d\2\u05f7\u05f9\5\u0432\u021a\2\u05f8\u05f6\3"+
		"\2\2\2\u05f8\u05f7\3\2\2\2\u05f9I\3\2\2\2\u05fa\u05fb\7\u0130\2\2\u05fb"+
		"\u0609\5:\36\2\u05fc\u05fd\7\u0130\2\2\u05fd\u05fe\7\u0168\2\2\u05fe\u0609"+
		"\7\u01a3\2\2\u05ff\u0600\7\u0130\2\2\u0600\u0601\7\u016c\2\2\u0601\u0602"+
		"\7\u00cb\2\2\u0602\u0609\7\u00d8\2\2\u0603\u0604\7\u0130\2\2\u0604\u0605"+
		"\7\u0147\2\2\u0605\u0609\7\60\2\2\u0606\u0607\7\u0130\2\2\u0607\u0609"+
		"\7 \2\2\u0608\u05fa\3\2\2\2\u0608\u05fc\3\2\2\2\u0608\u05ff\3\2\2\2\u0608"+
		"\u0603\3\2\2\2\u0608\u0606\3\2\2\2\u0609K\3\2\2\2\u060a\u060b\7\u0149"+
		"\2\2\u060b\u060e\5\66\34\2\u060c\u060e\5J&\2\u060d\u060a\3\2\2\2\u060d"+
		"\u060c\3\2\2\2\u060eM\3\2\2\2\u060f\u0610\7\u0149\2\2\u0610\u0613\58\35"+
		"\2\u0611\u0613\5J&\2\u0612\u060f\3\2\2\2\u0612\u0611\3\2\2\2\u0613O\3"+
		"\2\2\2\u0614\u0615\7\u014c\2\2\u0615\u0623\5:\36\2\u0616\u0617\7\u014c"+
		"\2\2\u0617\u0618\7\u0168\2\2\u0618\u0623\7\u01a3\2\2\u0619\u061a\7\u014c"+
		"\2\2\u061a\u061b\7\u016c\2\2\u061b\u061c\7\u00cb\2\2\u061c\u0623\7\u00d8"+
		"\2\2\u061d\u061e\7\u014c\2\2\u061e\u061f\7\u0147\2\2\u061f\u0623\7\60"+
		"\2\2\u0620\u0621\7\u014c\2\2\u0621\u0623\7 \2\2\u0622\u0614\3\2\2\2\u0622"+
		"\u0616\3\2\2\2\u0622\u0619\3\2\2\2\u0622\u061d\3\2\2\2\u0622\u0620\3\2"+
		"\2\2\u0623Q\3\2\2\2\u0624\u0625\7\u0149\2\2\u0625\u0626\7W\2\2\u0626\u0627"+
		"\5T+\2\u0627\u0628\5V,\2\u0628S\3\2\2\2\u0629\u062c\5\u041a\u020e\2\u062a"+
		"\u062c\7 \2\2\u062b\u0629\3\2\2\2\u062b\u062a\3\2\2\2\u062cU\3\2\2\2\u062d"+
		"\u062e\t\3\2\2\u062eW\3\2\2\2\u062f\u0630\7G\2\2\u0630Y\3\2\2\2\u0631"+
		"\u0632\7|\2\2\u0632\u063a\7 \2\2\u0633\u0634\7|\2\2\u0634\u063a\7\u0163"+
		"\2\2\u0635\u0636\7|\2\2\u0636\u063a\7\u0165\2\2\u0637\u0638\7|\2\2\u0638"+
		"\u063a\7\u0114\2\2\u0639\u0631\3\2\2\2\u0639\u0633\3\2\2\2\u0639\u0635"+
		"\3\2\2\2\u0639\u0637\3\2\2\2\u063a[\3\2\2\2\u063b\u063c\7\"\2\2\u063c"+
		"\u063d\7\u0160\2\2\u063d\u063e\5\u0360\u01b1\2\u063e\u063f\5^\60\2\u063f"+
		"\u066c\3\2\2\2\u0640\u0641\7\"\2\2\u0641\u0642\7\u0160\2\2\u0642\u0643"+
		"\7\u00af\2\2\u0643\u0644\7\u0090\2\2\u0644\u0645\5\u0360\u01b1\2\u0645"+
		"\u0646\5^\60\2\u0646\u066c\3\2\2\2\u0647\u0648\7\"\2\2\u0648\u0649\7\u00b7"+
		"\2\2\u0649\u064a\5\u041c\u020f\2\u064a\u064b\5^\60\2\u064b\u066c\3\2\2"+
		"\2\u064c\u064d\7\"\2\2\u064d\u064e\7\u00b7\2\2\u064e\u064f\7\u00af\2\2"+
		"\u064f\u0650\7\u0090\2\2\u0650\u0651\5\u041c\u020f\2\u0651\u0652\5^\60"+
		"\2\u0652\u066c\3\2\2\2\u0653\u0654\7\"\2\2\u0654\u0655\7\u0143\2\2\u0655"+
		"\u0656\5\u041c\u020f\2\u0656\u0657\5^\60\2\u0657\u066c\3\2\2\2\u0658\u0659"+
		"\7\"\2\2\u0659\u065a\7\u0143\2\2\u065a\u065b\7\u00af\2\2\u065b\u065c\7"+
		"\u0090\2\2\u065c\u065d\5\u041c\u020f\2\u065d\u065e\5^\60\2\u065e\u066c"+
		"\3\2\2\2\u065f\u0660\7\"\2\2\u0660\u0661\7\u018c\2\2\u0661\u0662\5\u041c"+
		"\u020f\2\u0662\u0663\5^\60\2\u0663\u066c\3\2\2\2\u0664\u0665\7\"\2\2\u0665"+
		"\u0666\7\u018c\2\2\u0666\u0667\7\u00af\2\2\u0667\u0668\7\u0090\2\2\u0668"+
		"\u0669\5\u041c\u020f\2\u0669\u066a\5^\60\2\u066a\u066c\3\2\2\2\u066b\u063b"+
		"\3\2\2\2\u066b\u0640\3\2\2\2\u066b\u0647\3\2\2\2\u066b\u064c\3\2\2\2\u066b"+
		"\u0653\3\2\2\2\u066b\u0658\3\2\2\2\u066b\u065f\3\2\2\2\u066b\u0664\3\2"+
		"\2\2\u066c]\3\2\2\2\u066d\u066e\b\60\1\2\u066e\u066f\5`\61\2\u066f\u0675"+
		"\3\2\2\2\u0670\u0671\f\4\2\2\u0671\u0672\7\6\2\2\u0672\u0674\5`\61\2\u0673"+
		"\u0670\3\2\2\2\u0674\u0677\3\2\2\2\u0675\u0673\3\2\2\2\u0675\u0676\3\2"+
		"\2\2\u0676_\3\2\2\2\u0677\u0675\3\2\2\2\u0678\u0679\7\"\2\2\u0679\u067a"+
		"\5\u025a\u012e\2\u067a\u067b\5\u0438\u021d\2\u067b\u067c\5\u025c\u012f"+
		"\2\u067c\u067d\7\u0173\2\2\u067d\u067e\5\u0372\u01ba\2\u067e\u067f\5f"+
		"\64\2\u067f\u0680\5h\65\2\u0680\u071e\3\2\2\2\u0681\u0682\7\"\2\2\u0682"+
		"\u0683\5\u025a\u012e\2\u0683\u0684\5\u0438\u021d\2\u0684\u0685\5b\62\2"+
		"\u0685\u071e\3\2\2\2\u0686\u0687\7\"\2\2\u0687\u0688\5\u025a\u012e\2\u0688"+
		"\u0689\5\u0438\u021d\2\u0689\u068a\7\u0149\2\2\u068a\u068b\7\u0156\2\2"+
		"\u068b\u068c\5\u0436\u021c\2\u068c\u071e\3\2\2\2\u068d\u068e\7\"\2\2\u068e"+
		"\u068f\5\u025a\u012e\2\u068f\u0690\5\u0438\u021d\2\u0690\u0691\7\u0149"+
		"\2\2\u0691\u0692\5j\66\2\u0692\u071e\3\2\2\2\u0693\u0694\7\"\2\2\u0694"+
		"\u0695\5\u025a\u012e\2\u0695\u0696\5\u0438\u021d\2\u0696\u0697\7\u0130"+
		"\2\2\u0697\u0698\5j\66\2\u0698\u071e\3\2\2\2\u0699\u069a\7\"\2\2\u069a"+
		"\u069b\5\u025a\u012e\2\u069b\u069c\5\u0438\u021d\2\u069c\u069d\7\u0149"+
		"\2\2\u069d\u069e\7\u0159\2\2\u069e\u069f\5\u0438\u021d\2\u069f\u071e\3"+
		"\2\2\2\u06a0\u06a1\7\u0082\2\2\u06a1\u06a2\5\u025a\u012e\2\u06a2\u06a3"+
		"\7\u00af\2\2\u06a3\u06a4\7\u0090\2\2\u06a4\u06a5\5\u0438\u021d\2\u06a5"+
		"\u06a6\5d\63\2\u06a6\u071e\3\2\2\2\u06a7\u06a8\7\u0082\2\2\u06a8\u06a9"+
		"\5\u025a\u012e\2\u06a9\u06aa\5\u0438\u021d\2\u06aa\u06ab\5d\63\2\u06ab"+
		"\u071e\3\2\2\2\u06ac\u06ad\7\"\2\2\u06ad\u06ae\5\u025a\u012e\2\u06ae\u06af"+
		"\5\u0438\u021d\2\u06af\u06b0\5\u012c\u0097\2\u06b0\u071e\3\2\2\2\u06b1"+
		"\u06b2\7\"\2\2\u06b2\u06b3\5\u025a\u012e\2\u06b3\u06b4\5\u0438\u021d\2"+
		"\u06b4\u06b5\7\u0082\2\2\u06b5\u06b6\7\u00f2\2\2\u06b6\u06b7\7\u00f7\2"+
		"\2\u06b7\u071e\3\2\2\2\u06b8\u06b9\7\"\2\2\u06b9\u06ba\5\u025a\u012e\2"+
		"\u06ba\u06bb\5\u0438\u021d\2\u06bb\u06bc\7\u0149\2\2\u06bc\u06bd\7\u00f2"+
		"\2\2\u06bd\u06be\7\u00f7\2\2\u06be\u071e\3\2\2\2\u06bf\u06c0\7\u0082\2"+
		"\2\u06c0\u06c1\7V\2\2\u06c1\u06c2\7\u00af\2\2\u06c2\u06c3\7\u0090\2\2"+
		"\u06c3\u06c4\5\u0420\u0211\2\u06c4\u06c5\5d\63\2\u06c5\u071e\3\2\2\2\u06c6"+
		"\u06c7\7\u0082\2\2\u06c7\u06c8\7V\2\2\u06c8\u06c9\5\u0420\u0211\2\u06c9"+
		"\u06ca\5d\63\2\u06ca\u071e\3\2\2\2\u06cb\u06cc\7\34\2\2\u06cc\u071e\5"+
		"\u00a8U\2\u06cd\u06ce\7\34\2\2\u06ce\u06cf\7N\2\2\u06cf\u071e\5\u00a8"+
		"U\2\u06d0\u06d1\7\34\2\2\u06d1\u071e\5\u00ba^\2\u06d2\u06d3\7\u0183\2"+
		"\2\u06d3\u06d4\7V\2\2\u06d4\u071e\5\u0420\u0211\2\u06d5\u06d6\7J\2\2\u06d6"+
		"\u06d7\7\u0100\2\2\u06d7\u071e\5\u0420\u0211\2\u06d8\u06d9\7\u0085\2\2"+
		"\u06d9\u06da\7\u016e\2\2\u06da\u071e\5\u0420\u0211\2\u06db\u06dc\7\u0085"+
		"\2\2\u06dc\u06dd\7#\2\2\u06dd\u06de\7\u016e\2\2\u06de\u071e\5\u0420\u0211"+
		"\2\u06df\u06e0\7\u0085\2\2\u06e0\u06e1\7\u012f\2\2\u06e1\u06e2\7\u016e"+
		"\2\2\u06e2\u071e\5\u0420\u0211\2\u06e3\u06e4\7{\2\2\u06e4\u06e5\7\u016e"+
		"\2\2\u06e5\u071e\5\u0420\u0211\2\u06e6\u06e7\7\u0085\2\2\u06e7\u06e8\7"+
		"\u013b\2\2\u06e8\u071e\5\u0420\u0211\2\u06e9\u06ea\7\u0085\2\2\u06ea\u06eb"+
		"\7#\2\2\u06eb\u06ec\7\u013b\2\2\u06ec\u071e\5\u0420\u0211\2\u06ed\u06ee"+
		"\7\u0085\2\2\u06ee\u06ef\7\u012f\2\2\u06ef\u06f0\7\u013b\2\2\u06f0\u071e"+
		"\5\u0420\u0211\2\u06f1\u06f2\7{\2\2\u06f2\u06f3\7\u013b\2\2\u06f3\u071e"+
		"\5\u0420\u0211\2\u06f4\u06f5\7\u00b9\2\2\u06f5\u071e\5\u041c\u020f\2\u06f6"+
		"\u06f7\7\u00f0\2\2\u06f7\u06f8\7\u00b9\2\2\u06f8\u071e\5\u041c\u020f\2"+
		"\u06f9\u06fa\7\u00fc\2\2\u06fa\u071e\5\u01b2\u00da\2\u06fb\u06fc\7\u010d"+
		"\2\2\u06fc\u06fd\7\u016a\2\2\u06fd\u071e\5\u0434\u021b\2\u06fe\u06ff\7"+
		"\u0149\2\2\u06ff\u0700\7\u0162\2\2\u0700\u071e\5\u0420\u0211\2\u0701\u0702"+
		"\7\u0149\2\2\u0702\u071e\5j\66\2\u0703\u0704\7\u0130\2\2\u0704\u071e\5"+
		"j\66\2\u0705\u071e\5\u012c\u0097\2\u0706\u0707\7\u0149\2\2\u0707\u0708"+
		"\7\u0192\2\2\u0708\u071e\7\u00ff\2\2\u0709\u070a\7\u0149\2\2\u070a\u070b"+
		"\7\u0193\2\2\u070b\u071e\7\u00ff\2\2\u070c\u070d\7\u0149\2\2\u070d\u070e"+
		"\7\u0193\2\2\u070e\u071e\7J\2\2\u070f\u0710\7\u0085\2\2\u0710\u0711\7"+
		"\u016e\2\2\u0711\u071e\7 \2\2\u0712\u0713\7\u0085\2\2\u0713\u0714\7\u016e"+
		"\2\2\u0714\u071e\7\u017f\2\2\u0715\u0716\7{\2\2\u0716\u0717\7\u016e\2"+
		"\2\u0717\u071e\7 \2\2\u0718\u0719\7{\2\2\u0719\u071a\7\u016e\2\2\u071a"+
		"\u071e\7\u017f\2\2\u071b\u071c\7\u00f2\2\2\u071c\u071e\7\u00fc\2\2\u071d"+
		"\u0678\3\2\2\2\u071d\u0681\3\2\2\2\u071d\u0686\3\2\2\2\u071d\u068d\3\2"+
		"\2\2\u071d\u0693\3\2\2\2\u071d\u0699\3\2\2\2\u071d\u06a0\3\2\2\2\u071d"+
		"\u06a7\3\2\2\2\u071d\u06ac\3\2\2\2\u071d\u06b1\3\2\2\2\u071d\u06b8\3\2"+
		"\2\2\u071d\u06bf\3\2\2\2\u071d\u06c6\3\2\2\2\u071d\u06cb\3\2\2\2\u071d"+
		"\u06cd\3\2\2\2\u071d\u06d0\3\2\2\2\u071d\u06d2\3\2\2\2\u071d\u06d5\3\2"+
		"\2\2\u071d\u06d8\3\2\2\2\u071d\u06db\3\2\2\2\u071d\u06df\3\2\2\2\u071d"+
		"\u06e3\3\2\2\2\u071d\u06e6\3\2\2\2\u071d\u06e9\3\2\2\2\u071d\u06ed\3\2"+
		"\2\2\u071d\u06f1\3\2\2\2\u071d\u06f4\3\2\2\2\u071d\u06f6\3\2\2\2\u071d"+
		"\u06f9\3\2\2\2\u071d\u06fb\3\2\2\2\u071d\u06fe\3\2\2\2\u071d\u0701\3\2"+
		"\2\2\u071d\u0703\3\2\2\2\u071d\u0705\3\2\2\2\u071d\u0706\3\2\2\2\u071d"+
		"\u0709\3\2\2\2\u071d\u070c\3\2\2\2\u071d\u070f\3\2\2\2\u071d\u0712\3\2"+
		"\2\2\u071d\u0715\3\2\2\2\u071d\u0718\3\2\2\2\u071d\u071b\3\2\2\2\u071e"+
		"a\3\2\2\2\u071f\u0720\7\u0149\2\2\u0720\u0721\7q\2\2\u0721\u0725\5\u03a2"+
		"\u01d2\2\u0722\u0723\7\u0082\2\2\u0723\u0725\7q\2\2\u0724\u071f\3\2\2"+
		"\2\u0724\u0722\3\2\2\2\u0725c\3\2\2\2\u0726\u072a\7=\2\2\u0727\u072a\7"+
		"\u0132\2\2\u0728\u072a\3\2\2\2\u0729\u0726\3\2\2\2\u0729\u0727\3\2\2\2"+
		"\u0729\u0728\3\2\2\2\u072ae\3\2\2\2\u072b\u072c\7L\2\2\u072c\u072f\5\u01b2"+
		"\u00da\2\u072d\u072f\3\2\2\2\u072e\u072b\3\2\2\2\u072e\u072d\3\2\2\2\u072f"+
		"g\3\2\2\2\u0730\u0731\7\u0180\2\2\u0731\u0734\5\u03a2\u01d2\2\u0732\u0734"+
		"\3\2\2\2\u0733\u0730\3\2\2\2\u0733\u0732\3\2\2\2\u0734i\3\2\2\2\u0735"+
		"\u0736\7\7\2\2\u0736\u0737\5n8\2\u0737\u0738\7\b\2\2\u0738k\3\2\2\2\u0739"+
		"\u073a\7\u0192\2\2\u073a\u073d\5j\66\2\u073b\u073d\3\2\2\2\u073c\u0739"+
		"\3\2\2\2\u073c\u073b\3\2\2\2\u073dm\3\2\2\2\u073e\u073f\b8\1\2\u073f\u0740"+
		"\5p9\2\u0740\u0746\3\2\2\2\u0741\u0742\f\4\2\2\u0742\u0743\7\6\2\2\u0743"+
		"\u0745\5p9\2\u0744\u0741\3\2\2\2\u0745\u0748\3\2\2\2\u0746\u0744\3\2\2"+
		"\2\u0746\u0747\3\2\2\2\u0747o\3\2\2\2\u0748\u0746\3\2\2\2\u0749\u074a"+
		"\5\u043c\u021f\2\u074a\u074b\7\5\2\2\u074b\u074c\5\u043c\u021f\2\u074c"+
		"\u074d\7\4\2\2\u074d\u074e\5\u017e\u00c0\2\u074e\u0759\3\2\2\2\u074f\u0750"+
		"\5\u043c\u021f\2\u0750\u0751\7\5\2\2\u0751\u0752\5\u043c\u021f\2\u0752"+
		"\u0759\3\2\2\2\u0753\u0754\5\u043c\u021f\2\u0754\u0755\7\4\2\2\u0755\u0756"+
		"\5\u017e\u00c0\2\u0756\u0759\3\2\2\2\u0757\u0759\5\u043c\u021f\2\u0758"+
		"\u0749\3\2\2\2\u0758\u074f\3\2\2\2\u0758\u0753\3\2\2\2\u0758\u0757\3\2"+
		"\2\2\u0759q\3\2\2\2\u075a\u075b\7\"\2\2\u075b\u075c\7\u0173\2\2\u075c"+
		"\u075d\5\u01b2\u00da\2\u075d\u075e\5t;\2\u075es\3\2\2\2\u075f\u0760\b"+
		";\1\2\u0760\u0761\5v<\2\u0761\u0767\3\2\2\2\u0762\u0763\f\4\2\2\u0763"+
		"\u0764\7\6\2\2\u0764\u0766\5v<\2\u0765\u0762\3\2\2\2\u0766\u0769\3\2\2"+
		"\2\u0767\u0765\3\2\2\2\u0767\u0768\3\2\2\2\u0768u\3\2\2\2\u0769\u0767"+
		"\3\2\2\2\u076a\u076b\7\"\2\2\u076b\u076c\7/\2\2\u076c\u076d\5\u0438\u021d"+
		"\2\u076d\u076e\5\u025c\u012f\2\u076e\u076f\7\u0173\2\2\u076f\u0770\5\u0372"+
		"\u01ba\2\u0770\u0771\5f\64\2\u0771\u0772\5d\63\2\u0772\u0785\3\2\2\2\u0773"+
		"\u0774\7\34\2\2\u0774\u0775\7/\2\2\u0775\u0776\5\u0370\u01b9\2\u0776\u0777"+
		"\5d\63\2\u0777\u0785\3\2\2\2\u0778\u0779\7\u0082\2\2\u0779\u077a\7/\2"+
		"\2\u077a\u077b\7\u00af\2\2\u077b\u077c\7\u0090\2\2\u077c\u077d\5\u0438"+
		"\u021d\2\u077d\u077e\5d\63\2\u077e\u0785\3\2\2\2\u077f\u0780\7\u0082\2"+
		"\2\u0780\u0781\7/\2\2\u0781\u0782\5\u0438\u021d\2\u0782\u0783\5d\63\2"+
		"\u0783\u0785\3\2\2\2\u0784\u076a\3\2\2\2\u0784\u0773\3\2\2\2\u0784\u0778"+
		"\3\2\2\2\u0784\u077f\3\2\2\2\u0785w\3\2\2\2\u0786\u0787\7I\2\2\u0787\u078b"+
		"\5\u02fc\u017f\2\u0788\u0789\7I\2\2\u0789\u078b\7 \2\2\u078a\u0786\3\2"+
		"\2\2\u078a\u0788\3\2\2\2\u078by\3\2\2\2\u078c\u078d\7[\2\2\u078d\u078e"+
		"\5\u0086D\2\u078e\u078f\5\u041c\u020f\2\u078f\u0790\5\u00c0a\2\u0790\u0791"+
		"\5\u0088E\2\u0791\u0792\5|?\2\u0792\u0793\5~@\2\u0793\u0794\5\u008aF\2"+
		"\u0794\u0795\5\n\6\2\u0795\u0796\5\u0080A\2\u0796\u079f\3\2\2\2\u0797"+
		"\u0798\7[\2\2\u0798\u0799\5\u0304\u0183\2\u0799\u079a\7\u016a\2\2\u079a"+
		"\u079b\5~@\2\u079b\u079c\5\n\6\2\u079c\u079d\5\u0080A\2\u079d\u079f\3"+
		"\2\2\2\u079e\u078c\3\2\2\2\u079e\u0797\3\2\2\2\u079f{\3\2\2\2\u07a0\u07a1"+
		"\t\4\2\2\u07a1}\3\2\2\2\u07a2\u07a6\5\u0432\u021a\2\u07a3\u07a6\7\u0157"+
		"\2\2\u07a4\u07a6\7\u0158\2\2\u07a5\u07a2\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a5"+
		"\u07a4\3\2\2\2\u07a6\177\3\2\2\2\u07a7\u07a8\7\7\2\2\u07a8\u07a9\5\u008e"+
		"H\2\u07a9\u07aa\7\b\2\2\u07aa\u07ad\3\2\2\2\u07ab\u07ad\5\u0082B\2\u07ac"+
		"\u07a7\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad\u0081\3\2\2\2\u07ae\u07b3\bB"+
		"\1\2\u07af\u07b0\f\4\2\2\u07b0\u07b2\5\u0084C\2\u07b1\u07af\3\2\2\2\u07b2"+
		"\u07b5\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u0083\3\2"+
		"\2\2\u07b5\u07b3\3\2\2\2\u07b6\u07b7\7\u009c\2\2\u07b7\u07b8\7\u0120\2"+
		"\2\u07b8\u07d7\7\t\2\2\u07b9\u07ba\7w\2\2\u07ba\u07bb\5\u02a0\u0151\2"+
		"\u07bb\u07bc\5\u0432\u021a\2\u07bc\u07d7\3\2\2\2\u07bd\u07be\7\u00f7\2"+
		"\2\u07be\u07bf\5\u02a0\u0151\2\u07bf\u07c0\5\u0432\u021a\2\u07c0\u07d7"+
		"\3\2\2\2\u07c1\u07c2\7\u0120\2\2\u07c2\u07c3\5\u02a0\u0151\2\u07c3\u07c4"+
		"\5\u0432\u021a\2\u07c4\u07d7\3\2\2\2\u07c5\u07c6\7\u008a\2\2\u07c6\u07c7"+
		"\5\u02a0\u0151\2\u07c7\u07c8\5\u0432\u021a\2\u07c8\u07d7\3\2\2\2\u07c9"+
		"\u07ca\7\u009c\2\2\u07ca\u07cb\7\u0120\2\2\u07cb\u07d7\5\u00c2b\2\u07cc"+
		"\u07cd\7\u009c\2\2\u07cd\u07ce\7\u00f2\2\2\u07ce\u07cf\7\u00f7\2\2\u07cf"+
		"\u07d7\5\u00c2b\2\u07d0\u07d1\7\u0086\2\2\u07d1\u07d7\5\u0432\u021a\2"+
		"\u07d2\u07d7\7\66\2\2\u07d3\u07d7\7\u00ff\2\2\u07d4\u07d7\7_\2\2\u07d5"+
		"\u07d7\7\u00ab\2\2\u07d6\u07b6\3\2\2\2\u07d6\u07b9\3\2\2\2\u07d6\u07bd"+
		"\3\2\2\2\u07d6\u07c1\3\2\2\2\u07d6\u07c5\3\2\2\2\u07d6\u07c9\3\2\2\2\u07d6"+
		"\u07cc\3\2\2\2\u07d6\u07d0\3\2\2\2\u07d6\u07d2\3\2\2\2\u07d6\u07d3\3\2"+
		"\2\2\u07d6\u07d4\3\2\2\2\u07d6\u07d5\3\2\2\2\u07d7\u0085\3\2\2\2\u07d8"+
		"\u07db\7\66\2\2\u07d9\u07db\3\2\2\2\u07da\u07d8\3\2\2\2\u07da\u07d9\3"+
		"\2\2\2\u07db\u0087\3\2\2\2\u07dc\u07dd\7\u0192\2\2\u07dd\u07e0\7\u00ff"+
		"\2\2\u07de\u07e0\3\2\2\2\u07df\u07dc\3\2\2\2\u07df\u07de\3\2\2\2\u07e0"+
		"\u0089\3\2\2\2\u07e1\u07e2\5\u008cG\2\u07e2\u07e3\7x\2\2\u07e3\u07e4\5"+
		"\u0432\u021a\2\u07e4\u07e7\3\2\2\2\u07e5\u07e7\3\2\2\2\u07e6\u07e1\3\2"+
		"\2\2\u07e6\u07e5\3\2\2\2\u07e7\u008b\3\2\2\2\u07e8\u07eb\7\u0180\2\2\u07e9"+
		"\u07eb\3\2\2\2\u07ea\u07e8\3\2\2\2\u07ea\u07e9\3\2\2\2\u07eb\u008d\3\2"+
		"\2\2\u07ec\u07ed\bH\1\2\u07ed\u07ee\5\u0090I\2\u07ee\u07f4\3\2\2\2\u07ef"+
		"\u07f0\f\4\2\2\u07f0\u07f1\7\6\2\2\u07f1\u07f3\5\u0090I\2\u07f2\u07ef"+
		"\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5"+
		"\u008f\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f7\u07f8\5\u043c\u021f\2\u07f8\u07f9"+
		"\5\u0092J\2\u07f9\u0091\3\2\2\2\u07fa\u07fb\7\7\2\2\u07fb\u07fc\5\u0094"+
		"K\2\u07fc\u07fd\7\b\2\2\u07fd\u0803\3\2\2\2\u07fe\u0803\7\t\2\2\u07ff"+
		"\u0803\5B\"\2\u0800\u0803\5\u00f4{\2\u0801\u0803\3\2\2\2\u0802\u07fa\3"+
		"\2\2\2\u0802\u07fe\3\2\2\2\u0802\u07ff\3\2\2\2\u0802\u0800\3\2\2\2\u0802"+
		"\u0801\3\2\2\2\u0803\u0093\3\2\2\2\u0804\u0805\bK\1\2\u0805\u0806\5\u0096"+
		"L\2\u0806\u080c\3\2\2\2\u0807\u0808\f\4\2\2\u0808\u0809\7\6\2\2\u0809"+
		"\u080b\5\u0096L\2\u080a\u0807\3\2\2\2\u080b\u080e\3\2\2\2\u080c\u080a"+
		"\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u0095\3\2\2\2\u080e\u080c\3\2\2\2\u080f"+
		"\u0810\5B\"\2\u0810\u0097\3\2\2\2\u0811\u0812\7]\2\2\u0812\u0813\5\u009a"+
		"N\2\u0813\u0814\7\u0160\2\2\u0814\u0815\5\u041c\u020f\2\u0815\u0816\7"+
		"\7\2\2\u0816\u0817\5\u009cO\2\u0817\u0818\7\b\2\2\u0818\u0819\5\u00d6"+
		"l\2\u0819\u081a\5\u00d8m\2\u081a\u081b\5\u00dan\2\u081b\u081c\5\u00dc"+
		"o\2\u081c\u0846\3\2\2\2\u081d\u081e\7]\2\2\u081e\u081f\5\u009aN\2\u081f"+
		"\u0820\7\u0160\2\2\u0820\u0821\7\u00af\2\2\u0821\u0822\7\u00f2\2\2\u0822"+
		"\u0823\7\u0090\2\2\u0823\u0824\5\u041c\u020f\2\u0824\u0825\7\7\2\2\u0825"+
		"\u0826\5\u009cO\2\u0826\u0827\7\b\2\2\u0827\u0828\5\u00d6l\2\u0828\u0829"+
		"\5\u00d8m\2\u0829\u082a\5\u00dan\2\u082a\u082b\5\u00dco\2\u082b\u0846"+
		"\3\2\2\2\u082c\u082d\7]\2\2\u082d\u082e\5\u009aN\2\u082e\u082f\7\u0160"+
		"\2\2\u082f\u0830\5\u041c\u020f\2\u0830\u0831\7\u00fc\2\2\u0831\u0832\5"+
		"\u01b2\u00da\2\u0832\u0833\5\u009eP\2\u0833\u0834\5\u00d8m\2\u0834\u0835"+
		"\5\u00dan\2\u0835\u0836\5\u00dco\2\u0836\u0846\3\2\2\2\u0837\u0838\7]"+
		"\2\2\u0838\u0839\5\u009aN\2\u0839\u083a\7\u0160\2\2\u083a\u083b\7\u00af"+
		"\2\2\u083b\u083c\7\u00f2\2\2\u083c\u083d\7\u0090\2\2\u083d\u083e\5\u041c"+
		"\u020f\2\u083e\u083f\7\u00fc\2\2\u083f\u0840\5\u01b2\u00da\2\u0840\u0841"+
		"\5\u009eP\2\u0841\u0842\5\u00d8m\2\u0842\u0843\5\u00dan\2\u0843\u0844"+
		"\5\u00dco\2\u0844\u0846\3\2\2\2\u0845\u0811\3\2\2\2\u0845\u081d\3\2\2"+
		"\2\u0845\u082c\3\2\2\2\u0845\u0837\3\2\2\2\u0846\u0099\3\2\2\2\u0847\u0854"+
		"\7\u0165\2\2\u0848\u0854\7\u0163\2\2\u0849\u084a\7\u00dd\2\2\u084a\u0854"+
		"\7\u0165\2\2\u084b\u084c\7\u00dd\2\2\u084c\u0854\7\u0163\2\2\u084d\u084e"+
		"\7\u00a4\2\2\u084e\u0854\7\u0165\2\2\u084f\u0850\7\u00a4\2\2\u0850\u0854"+
		"\7\u0163\2\2\u0851\u0854\7\u017c\2\2\u0852\u0854\3\2\2\2\u0853\u0847\3"+
		"\2\2\2\u0853\u0848\3\2\2\2\u0853\u0849\3\2\2\2\u0853\u084b\3\2\2\2\u0853"+
		"\u084d\3\2\2\2\u0853\u084f\3\2\2\2\u0853\u0851\3\2\2\2\u0853\u0852\3\2"+
		"\2\2\u0854\u009b\3\2\2\2\u0855\u0858\5\u00a0Q\2\u0856\u0858\3\2\2\2\u0857"+
		"\u0855\3\2\2\2\u0857\u0856\3\2\2\2\u0858\u009d\3\2\2\2\u0859\u085a\7\7"+
		"\2\2\u085a\u085b\5\u00a2R\2\u085b\u085c\7\b\2\2\u085c\u085f\3\2\2\2\u085d"+
		"\u085f\3\2\2\2\u085e\u0859\3\2\2\2\u085e\u085d\3\2\2\2\u085f\u009f\3\2"+
		"\2\2\u0860\u0861\bQ\1\2\u0861\u0862\5\u00a4S\2\u0862\u0868\3\2\2\2\u0863"+
		"\u0864\f\4\2\2\u0864\u0865\7\6\2\2\u0865\u0867\5\u00a4S\2\u0866\u0863"+
		"\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866\3\2\2\2\u0868\u0869\3\2\2\2\u0869"+
		"\u00a1\3\2\2\2\u086a\u0868\3\2\2\2\u086b\u086c\bR\1\2\u086c\u086d\5\u00a6"+
		"T\2\u086d\u0873\3\2\2\2\u086e\u086f\f\4\2\2\u086f\u0870\7\6\2\2\u0870"+
		"\u0872\5\u00a6T\2\u0871\u086e\3\2\2\2\u0872\u0875\3\2\2\2\u0873\u0871"+
		"\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u00a3\3\2\2\2\u0875\u0873\3\2\2\2\u0876"+
		"\u087a\5\u00a8U\2\u0877\u087a\5\u00b4[\2\u0878\u087a\5\u00ba^\2\u0879"+
		"\u0876\3\2\2\2\u0879\u0877\3\2\2\2\u0879\u0878\3\2\2\2\u087a\u00a5\3\2"+
		"\2\2\u087b\u087e\5\u00aaV\2\u087c\u087e\5\u00ba^\2\u087d\u087b\3\2\2\2"+
		"\u087d\u087c\3\2\2\2\u087e\u00a7\3\2\2\2\u087f\u0880\5\u0438\u021d\2\u0880"+
		"\u0881\5\u0372\u01ba\2\u0881\u0882\5\u0128\u0095\2\u0882\u0883\5\u00ac"+
		"W\2\u0883\u00a9\3\2\2\2\u0884\u0885\5\u0438\u021d\2\u0885\u0886\7\u0192"+
		"\2\2\u0886\u0887\7\u0104\2\2\u0887\u0888\5\u00acW\2\u0888\u00ab\3\2\2"+
		"\2\u0889\u088e\bW\1\2\u088a\u088b\f\4\2\2\u088b\u088d\5\u00aeX\2\u088c"+
		"\u088a\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088c\3\2\2\2\u088e\u088f\3\2"+
		"\2\2\u088f\u00ad\3\2\2\2\u0890\u088e\3\2\2\2\u0891\u0892\7V\2\2\u0892"+
		"\u0893\5\u0420\u0211\2\u0893\u0894\5\u00b0Y\2\u0894\u089a\3\2\2\2\u0895"+
		"\u089a\5\u00b0Y\2\u0896\u089a\5\u00b2Z\2\u0897\u0898\7L\2\2\u0898\u089a"+
		"\5\u01b2\u00da\2\u0899\u0891\3\2\2\2\u0899\u0895\3\2\2\2\u0899\u0896\3"+
		"\2\2\2\u0899\u0897\3\2\2\2\u089a\u00af\3\2\2\2\u089b\u089c\7F\2\2\u089c"+
		"\u089d\7\7\2\2\u089d\u089e\5\u03a2\u01d2\2\u089e\u089f\7\b\2\2\u089f\u08a0"+
		"\5\u00be`\2\u08a0\u08b6\3\2\2\2\u08a1\u08a2\7\u0128\2\2\u08a2\u08a3\5"+
		"\u041c\u020f\2\u08a3\u08a4\5\u00c0a\2\u08a4\u08a5\5\u00c6d\2\u08a5\u08a6"+
		"\5\u00ceh\2\u08a6\u08b6\3\2\2\2\u08a7\u08a8\7\u0179\2\2\u08a8\u08a9\5"+
		"\u022e\u0118\2\u08a9\u08aa\5\u00dep\2\u08aa\u08b6\3\2\2\2\u08ab\u08ac"+
		"\7\u011b\2\2\u08ac\u08ad\7\u00cd\2\2\u08ad\u08ae\5\u022e\u0118\2\u08ae"+
		"\u08af\5\u00dep\2\u08af\u08b6\3\2\2\2\u08b0\u08b1\7q\2\2\u08b1\u08b6\5"+
		"\u03a4\u01d3\2\u08b2\u08b3\7\u00f2\2\2\u08b3\u08b6\7\u00f7\2\2\u08b4\u08b6"+
		"\7\u00f7\2\2\u08b5\u089b\3\2\2\2\u08b5\u08a1\3\2\2\2\u08b5\u08a7\3\2\2"+
		"\2\u08b5\u08ab\3\2\2\2\u08b5\u08b0\3\2\2\2\u08b5\u08b2\3\2\2\2\u08b5\u08b4"+
		"\3\2\2\2\u08b6\u00b1\3\2\2\2\u08b7\u08bf\7s\2\2\u08b8\u08b9\7\u00f2\2"+
		"\2\u08b9\u08bf\7s\2\2\u08ba\u08bb\7\u00bb\2\2\u08bb\u08bf\7t\2\2\u08bc"+
		"\u08bd\7\u00bb\2\2\u08bd\u08bf\7\u00b1\2\2\u08be\u08b7\3\2\2\2\u08be\u08b8"+
		"\3\2\2\2\u08be\u08ba\3\2\2\2\u08be\u08bc\3\2\2\2\u08bf\u00b3\3\2\2\2\u08c0"+
		"\u08c1\7\u00d9\2\2\u08c1\u08c2\5\u041c\u020f\2\u08c2\u08c3\5\u00b6\\\2"+
		"\u08c3\u00b5\3\2\2\2\u08c4\u08cd\b\\\1\2\u08c5\u08c6\f\5\2\2\u08c6\u08c7"+
		"\7\u00b5\2\2\u08c7\u08cc\5\u00b8]\2\u08c8\u08c9\f\4\2\2\u08c9\u08ca\7"+
		"\u008d\2\2\u08ca\u08cc\5\u00b8]\2\u08cb\u08c5\3\2\2\2\u08cb\u08c8\3\2"+
		"\2\2\u08cc\u08cf\3\2\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce"+
		"\u00b7\3\2\2\2\u08cf\u08cd\3\2\2\2\u08d0\u08d1\t\5\2\2\u08d1\u00b9\3\2"+
		"\2\2\u08d2\u08d3\7V\2\2\u08d3\u08d4\5\u0420\u0211\2\u08d4\u08d5\5\u00bc"+
		"_\2\u08d5\u08d8\3\2\2\2\u08d6\u08d8\5\u00bc_\2\u08d7\u08d2\3\2\2\2\u08d7"+
		"\u08d6\3\2\2\2\u08d8\u00bb\3\2\2\2\u08d9\u08da\7\u009d\2\2\u08da\u08db"+
		"\7\u00cd\2\2\u08db\u08dc\7\7\2\2\u08dc\u08dd\5\u00c2b\2\u08dd\u08de\7"+
		"\b\2\2\u08de\u08df\7\u0128\2\2\u08df\u08e0\5\u041c\u020f\2\u08e0\u08e1"+
		"\5\u00c0a\2\u08e1\u08e2\5\u00c6d\2\u08e2\u08e3\5\u00ceh\2\u08e3\u08e4"+
		"\5\u016c\u00b7\2\u08e4\u0910\3\2\2\2\u08e5\u08e6\7\u0179\2\2\u08e6\u08e7"+
		"\7\7\2\2\u08e7\u08e8\5\u00c2b\2\u08e8\u08e9\7\b\2\2\u08e9\u08ea\5\u022e"+
		"\u0118\2\u08ea\u08eb\5\u00dep\2\u08eb\u08ec\5\u016c\u00b7\2\u08ec\u0910"+
		"\3\2\2\2\u08ed\u08ee\7\u011b\2\2\u08ee\u08ef\7\u00cd\2\2\u08ef\u08f0\7"+
		"\7\2\2\u08f0\u08f1\5\u00c2b\2\u08f1\u08f2\7\b\2\2\u08f2\u08f3\5\u022e"+
		"\u0118\2\u08f3\u08f4\5\u00dep\2\u08f4\u08f5\5\u016c\u00b7\2\u08f5\u0910"+
		"\3\2\2\2\u08f6\u08f7\7F\2\2\u08f7\u08f8\7\7\2\2\u08f8\u08f9\5\u03a2\u01d2"+
		"\2\u08f9\u08fa\7\b\2\2\u08fa\u08fb\5\u016c\u00b7\2\u08fb\u0910\3\2\2\2"+
		"\u08fc\u08fd\7\u008c\2\2\u08fd\u08fe\5\u0200\u0101\2\u08fe\u08ff\7\7\2"+
		"\2\u08ff\u0900\5\u00c8e\2\u0900\u0901\7\b\2\2\u0901\u0902\5\u022e\u0118"+
		"\2\u0902\u0903\5\u00dep\2\u0903\u0904\5\u00ccg\2\u0904\u0905\5\u016c\u00b7"+
		"\2\u0905\u0910\3\2\2\2\u0906\u0907\7\u0179\2\2\u0907\u0908\5\u00e0q\2"+
		"\u0908\u0909\5\u016c\u00b7\2\u0909\u0910\3\2\2\2\u090a\u090b\7\u011b\2"+
		"\2\u090b\u090c\7\u00cd\2\2\u090c\u090d\5\u00e0q\2\u090d\u090e\5\u016c"+
		"\u00b7\2\u090e\u0910\3\2\2\2\u090f\u08d9\3\2\2\2\u090f\u08e5\3\2\2\2\u090f"+
		"\u08ed\3\2\2\2\u090f\u08f6\3\2\2\2\u090f\u08fc\3\2\2\2\u090f\u0906\3\2"+
		"\2\2\u090f\u090a\3\2\2\2\u0910\u00bd\3\2\2\2\u0911\u0912\7\u00f0\2\2\u0912"+
		"\u0915\7\u00b9\2\2\u0913\u0915\3\2\2\2\u0914\u0911\3\2\2\2\u0914\u0913"+
		"\3\2\2\2\u0915\u00bf\3\2\2\2\u0916\u0917\7\7\2\2\u0917\u0918\5\u00c2b"+
		"\2\u0918\u0919\7\b\2\2\u0919\u091c\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u0916"+
		"\3\2\2\2\u091b\u091a\3\2\2\2\u091c\u00c1\3\2\2\2\u091d\u091e\bb\1\2\u091e"+
		"\u091f\5\u00c4c\2\u091f\u0925\3\2\2\2\u0920\u0921\f\4\2\2\u0921\u0922"+
		"\7\6\2\2\u0922\u0924\5\u00c4c\2\u0923\u0920\3\2\2\2\u0924\u0927\3\2\2"+
		"\2\u0925\u0923\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u00c3\3\2\2\2\u0927\u0925"+
		"\3\2\2\2\u0928\u0929\5\u0438\u021d\2\u0929\u00c5\3\2\2\2\u092a\u092b\7"+
		"\u00e3\2\2\u092b\u0932\7\u00a1\2\2\u092c\u092d\7\u00e3\2\2\u092d\u0932"+
		"\7\u010f\2\2\u092e\u092f\7\u00e3\2\2\u092f\u0932\7\u014e\2\2\u0930\u0932"+
		"\3\2\2\2\u0931\u092a\3\2\2\2\u0931\u092c\3\2\2\2\u0931\u092e\3\2\2\2\u0931"+
		"\u0930\3\2\2\2\u0932\u00c7\3\2\2\2\u0933\u0934\be\1\2\u0934\u0935\5\u00ca"+
		"f\2\u0935\u093b\3\2\2\2\u0936\u0937\f\4\2\2\u0937\u0938\7\6\2\2\u0938"+
		"\u093a\5\u00caf\2\u0939\u0936\3\2\2\2\u093a\u093d\3\2\2\2\u093b\u0939"+
		"\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u00c9\3\2\2\2\u093d\u093b\3\2\2\2\u093e"+
		"\u093f\5\u0204\u0103\2\u093f\u0940\7\u0192\2\2\u0940\u0941\7\u0102\2\2"+
		"\u0941\u0942\7\7\2\2\u0942\u0943\5\u0242\u0122\2\u0943\u0944\7\b\2\2\u0944"+
		"\u094a\3\2\2\2\u0945\u0946\5\u0204\u0103\2\u0946\u0947\7\u0192\2\2\u0947"+
		"\u0948\5\u0242\u0122\2\u0948\u094a\3\2\2\2\u0949\u093e\3\2\2\2\u0949\u0945"+
		"\3\2\2\2\u094a\u00cb\3\2\2\2\u094b\u094c\7\u018f\2\2\u094c\u094d\7\7\2"+
		"\2\u094d\u094e\5\u03a2\u01d2\2\u094e\u094f\7\b\2\2\u094f\u0952\3\2\2\2"+
		"\u0950\u0952\3\2\2\2\u0951\u094b\3\2\2\2\u0951\u0950\3\2\2\2\u0952\u00cd"+
		"\3\2\2\2\u0953\u0954\5\u00d0i\2\u0954\u0955\5\u00d2j\2\u0955\u095d\3\2"+
		"\2\2\u0956\u0957\5\u00d2j\2\u0957\u0958\5\u00d0i\2\u0958\u095d\3\2\2\2"+
		"\u0959\u095d\5\u00d0i\2\u095a\u095d\5\u00d2j\2\u095b\u095d\3\2\2\2\u095c"+
		"\u0953\3\2\2\2\u095c\u0956\3\2\2\2\u095c\u0959\3\2\2\2\u095c\u095a\3\2"+
		"\2\2\u095c\u095b\3\2\2\2\u095d\u00cf\3\2\2\2\u095e\u095f\7\u0100\2\2\u095f"+
		"\u0960\7\u017e\2\2\u0960\u0961\5\u00d4k\2\u0961\u00d1\3\2\2\2\u0962\u0963"+
		"\7\u0100\2\2\u0963\u0964\7v\2\2\u0964\u0965\5\u00d4k\2\u0965\u00d3\3\2"+
		"\2\2\u0966\u0967\7\u00f0\2\2\u0967\u096f\7\33\2\2\u0968\u096f\7\u0132"+
		"\2\2\u0969\u096f\7=\2\2\u096a\u096b\7\u0149\2\2\u096b\u096f\7\u00f7\2"+
		"\2\u096c\u096d\7\u0149\2\2\u096d\u096f\7q\2\2\u096e\u0966\3\2\2\2\u096e"+
		"\u0968\3\2\2\2\u096e\u0969\3\2\2\2\u096e\u096a\3\2\2\2\u096e\u096c\3\2"+
		"\2\2\u096f\u00d5\3\2\2\2\u0970\u0971\7\u00ba\2\2\u0971\u0972\7\7\2\2\u0972"+
		"\u0973\5\u041a\u020e\2\u0973\u0974\7\b\2\2\u0974\u0977\3\2\2\2\u0975\u0977"+
		"\3\2\2\2\u0976\u0970\3\2\2\2\u0976\u0975\3\2\2\2\u0977\u00d7\3\2\2\2\u0978"+
		"\u0979\7\u0192\2\2\u0979\u0980\5j\66\2\u097a\u097b\7\u0192\2\2\u097b\u0980"+
		"\7\u00ff\2\2\u097c\u097d\7\u0193\2\2\u097d\u0980\7\u00ff\2\2\u097e\u0980"+
		"\3\2\2\2\u097f\u0978\3\2\2\2\u097f\u097a\3\2\2\2\u097f\u097c\3\2\2\2\u097f"+
		"\u097e\3\2\2\2\u0980\u00d9\3\2\2\2\u0981\u0982\7\u0100\2\2\u0982\u0983"+
		"\7Q\2\2\u0983\u098e\7\u0082\2\2\u0984\u0985\7\u0100\2\2\u0985\u0986\7"+
		"Q\2\2\u0986\u0987\7v\2\2\u0987\u098e\7\u013a\2\2\u0988\u0989\7\u0100\2"+
		"\2\u0989\u098a\7Q\2\2\u098a\u098b\7\u011a\2\2\u098b\u098e\7\u013a\2\2"+
		"\u098c\u098e\3\2\2\2\u098d\u0981\3\2\2\2\u098d\u0984\3\2\2\2\u098d\u0988"+
		"\3\2\2\2\u098d\u098c\3\2\2\2\u098e\u00db\3\2\2\2\u098f\u0990\7\u0162\2"+
		"\2\u0990\u0993\5\u0420\u0211\2\u0991\u0993\3\2\2\2\u0992\u098f\3\2\2\2"+
		"\u0992\u0991\3\2\2\2\u0993\u00dd\3\2\2\2\u0994\u0995\7\u0180\2\2\u0995"+
		"\u0996\7\u00b7\2\2\u0996\u0997\7\u0162\2\2\u0997\u099a\5\u0420\u0211\2"+
		"\u0998\u099a\3\2\2\2\u0999\u0994\3\2\2\2\u0999\u0998\3\2\2\2\u099a\u00df"+
		"\3\2\2\2\u099b\u099c\7\u0180\2\2\u099c\u099d\7\u00b7\2\2\u099d\u099e\5"+
		"\u0428\u0215\2\u099e\u00e1\3\2\2\2\u099f\u09a0\7]\2\2\u09a0\u09a1\5\u009a"+
		"N\2\u09a1\u09a2\7\u0160\2\2\u09a2\u09a3\5\u00e4s\2\u09a3\u09a4\7)\2\2"+
		"\u09a4\u09a5\5\u0302\u0182\2\u09a5\u09a6\5\u00e6t\2\u09a6\u00e3\3\2\2"+
		"\2\u09a7\u09a8\5\u041c\u020f\2\u09a8\u09a9\5\u00c0a\2\u09a9\u09aa\5\u00d8"+
		"m\2\u09aa\u09ab\5\u00dan\2\u09ab\u09ac\5\u00dco\2\u09ac\u00e5\3\2\2\2"+
		"\u09ad\u09ae\7\u0192\2\2\u09ae\u09b4\7j\2\2\u09af\u09b0\7\u0192\2\2\u09b0"+
		"\u09b1\7\u00f0\2\2\u09b1\u09b4\7j\2\2\u09b2\u09b4\3\2\2\2\u09b3\u09ad"+
		"\3\2\2\2\u09b3\u09af\3\2\2\2\u09b3\u09b2\3\2\2\2\u09b4\u00e7\3\2\2\2\u09b5"+
		"\u09b6\7]\2\2\u09b6\u09b7\5\u009aN\2\u09b7\u09b8\7\u0143\2\2\u09b8\u09b9"+
		"\5\u041c\u020f\2\u09b9\u09ba\5\u00ecw\2\u09ba\u00e9\3\2\2\2\u09bb\u09bc"+
		"\7\"\2\2\u09bc\u09bd\7\u0143\2\2\u09bd\u09be\5\u041c\u020f\2\u09be\u09bf"+
		"\5\u00eex\2\u09bf\u09c8\3\2\2\2\u09c0\u09c1\7\"\2\2\u09c1\u09c2\7\u0143"+
		"\2\2\u09c2\u09c3\7\u00af\2\2\u09c3\u09c4\7\u0090\2\2\u09c4\u09c5\5\u041c"+
		"\u020f\2\u09c5\u09c6\5\u00eex\2\u09c6\u09c8\3\2\2\2\u09c7\u09bb\3\2\2"+
		"\2\u09c7\u09c0\3\2\2\2\u09c8\u00eb\3\2\2\2\u09c9\u09cc\5\u00eex\2\u09ca"+
		"\u09cc\3\2\2\2\u09cb\u09c9\3\2\2\2\u09cb\u09ca\3\2\2\2\u09cc\u00ed\3\2"+
		"\2\2\u09cd\u09ce\bx\1\2\u09ce\u09cf\5\u00f0y\2\u09cf\u09d4\3\2\2\2\u09d0"+
		"\u09d1\f\4\2\2\u09d1\u09d3\5\u00f0y\2\u09d2\u09d0\3\2\2\2\u09d3\u09d6"+
		"\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u00ef\3\2\2\2\u09d6"+
		"\u09d4\3\2\2\2\u09d7\u09d8\7\u00b6\2\2\u09d8\u09d9\5\u00f2z\2\u09d9\u09da"+
		"\5\u00f4{\2\u09da\u09f5\3\2\2\2\u09db\u09dc\7\u0154\2\2\u09dc\u09dd\5"+
		"\n\6\2\u09dd\u09de\5\u00f4{\2\u09de\u09f5\3\2\2\2\u09df\u09e0\7\u0131"+
		"\2\2\u09e0\u09e1\5\n\6\2\u09e1\u09e2\5\u00f4{\2\u09e2\u09f5\3\2\2\2\u09e3"+
		"\u09e4\7;\2\2\u09e4\u09f5\5\u00f4{\2\u09e5\u09e6\7\u00e4\2\2\u09e6\u09f5"+
		"\5\u00f4{\2\u09e7\u09e8\7\u00e6\2\2\u09e8\u09f5\5\u00f4{\2\u09e9\u09ea"+
		"\7\u010c\2\2\u09ea\u09eb\7:\2\2\u09eb\u09f5\5\u01b2\u00da\2\u09ec\u09f5"+
		"\7i\2\2\u09ed\u09ee\7\u00f0\2\2\u09ee\u09f5\7i\2\2\u09ef\u09f0\7\u00f0"+
		"\2\2\u09f0\u09f5\7\u00e4\2\2\u09f1\u09f2\7\u00f0\2\2\u09f2\u09f5\7\u00e6"+
		"\2\2\u09f3\u09f5\7\u0131\2\2\u09f4\u09d7\3\2\2\2\u09f4\u09db\3\2\2\2\u09f4"+
		"\u09df\3\2\2\2\u09f4\u09e3\3\2\2\2\u09f4\u09e5\3\2\2\2\u09f4\u09e7\3\2"+
		"\2\2\u09f4\u09e9\3\2\2\2\u09f4\u09ec\3\2\2\2\u09f4\u09ed\3\2\2\2\u09f4"+
		"\u09ef\3\2\2\2\u09f4\u09f1\3\2\2\2\u09f4\u09f3\3\2\2\2\u09f5\u00f1\3\2"+
		"\2\2\u09f6\u09f9\7:\2\2\u09f7\u09f9\3\2\2\2\u09f8\u09f6\3\2\2\2\u09f8"+
		"\u09f7\3\2\2\2\u09f9\u00f3\3\2\2\2\u09fa\u09fb\7\n\2\2\u09fb\u09ff\7\u01ae"+
		"\2\2\u09fc\u09ff\5\u0436\u021c\2\u09fd\u09ff\7\u01ae\2\2\u09fe\u09fa\3"+
		"\2\2\2\u09fe\u09fc\3\2\2\2\u09fe\u09fd\3\2\2\2\u09ff\u00f5\3\2\2\2\u0a00"+
		"\u0a01\b|\1\2\u0a01\u0a02\5\u00f4{\2\u0a02\u0a08\3\2\2\2\u0a03\u0a04\f"+
		"\4\2\2\u0a04\u0a05\7\6\2\2\u0a05\u0a07\5\u00f4{\2\u0a06\u0a03\3\2\2\2"+
		"\u0a07\u0a0a\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u00f7"+
		"\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0b\u0a0c\7]\2\2\u0a0c\u0a0d\5\u0210\u0109"+
		"\2\u0a0d\u0a0e\5\u00fa~\2\u0a0e\u0a0f\5\u0106\u0084\2\u0a0f\u0a10\7\u00cf"+
		"\2\2\u0a10\u0a11\5H%\2\u0a11\u0a12\7\u00a9\2\2\u0a12\u0a13\5\u00fc\177"+
		"\2\u0a13\u0a14\5\u00fe\u0080\2\u0a14\u0a15\5\u0102\u0082\2\u0a15\u0a1e"+
		"\3\2\2\2\u0a16\u0a17\7]\2\2\u0a17\u0a18\5\u0210\u0109\2\u0a18\u0a19\5"+
		"\u00fa~\2\u0a19\u0a1a\5\u0106\u0084\2\u0a1a\u0a1b\7\u00cf\2\2\u0a1b\u0a1c"+
		"\5H%\2\u0a1c\u0a1e\3\2\2\2\u0a1d\u0a0b\3\2\2\2\u0a1d\u0a16\3\2\2\2\u0a1e"+
		"\u00f9\3\2\2\2\u0a1f\u0a22\7\u0172\2\2\u0a20\u0a22\3\2\2\2\u0a21\u0a1f"+
		"\3\2\2\2\u0a21\u0a20\3\2\2\2\u0a22\u00fb\3\2\2\2\u0a23\u0a24\5\u0420\u0211"+
		"\2\u0a24\u0a25\5\u01b4\u00db\2\u0a25\u0a28\3\2\2\2\u0a26\u0a28\5\u0420"+
		"\u0211\2\u0a27\u0a23\3\2\2\2\u0a27\u0a26\3\2\2\2\u0a28\u00fd\3\2\2\2\u0a29"+
		"\u0a2a\7\u00bc\2\2\u0a2a\u0a2d\5\u00fc\177\2\u0a2b\u0a2d\3\2\2\2\u0a2c"+
		"\u0a29\3\2\2\2\u0a2c\u0a2b\3\2\2\2\u0a2d\u00ff\3\2\2\2\u0a2e\u0a2f\7\u0184"+
		"\2\2\u0a2f\u0a33\5\u00fc\177\2\u0a30\u0a31\7\u00f0\2\2\u0a31\u0a33\7\u0184"+
		"\2\2\u0a32\u0a2e\3\2\2\2\u0a32\u0a30\3\2\2\2\u0a33\u0101\3\2\2\2\u0a34"+
		"\u0a37\5\u0100\u0081\2\u0a35\u0a37\3\2\2\2\u0a36\u0a34\3\2\2\2\u0a36\u0a35"+
		"\3\2\2\2\u0a37\u0103\3\2\2\2\u0a38\u0a39\7\u0082\2\2\u0a39\u0a3a\5\u0106"+
		"\u0084\2\u0a3a\u0a3b\7\u00cf\2\2\u0a3b\u0a3c\5H%\2\u0a3c\u0a3d\5d\63\2"+
		"\u0a3d\u0a47\3\2\2\2\u0a3e\u0a3f\7\u0082\2\2\u0a3f\u0a40\5\u0106\u0084"+
		"\2\u0a40\u0a41\7\u00cf\2\2\u0a41\u0a42\7\u00af\2\2\u0a42\u0a43\7\u0090"+
		"\2\2\u0a43\u0a44\5H%\2\u0a44\u0a45\5d\63\2\u0a45\u0a47\3\2\2\2\u0a46\u0a38"+
		"\3\2\2\2\u0a46\u0a3e\3\2\2\2\u0a47\u0105\3\2\2\2\u0a48\u0a4b\7\u011e\2"+
		"\2\u0a49\u0a4b\3\2\2\2\u0a4a\u0a48\3\2\2\2\u0a4a\u0a49\3\2\2\2\u0a4b\u0107"+
		"\3\2\2\2\u0a4c\u0a4d\7]\2\2\u0a4d\u0a4e\7\u0162\2\2\u0a4e\u0a4f\5\u0420"+
		"\u0211\2\u0a4f\u0a50\5\u010a\u0086\2\u0a50\u0a51\7\u00e0\2\2\u0a51\u0a52"+
		"\5\u0432\u021a\2\u0a52\u0109\3\2\2\2\u0a53\u0a54\7\u010d\2\2\u0a54\u0a57"+
		"\5\u0420\u0211\2\u0a55\u0a57\3\2\2\2\u0a56\u0a53\3\2\2\2\u0a56\u0a55\3"+
		"\2\2\2\u0a57\u010b\3\2\2\2\u0a58\u0a59\7\u0082\2\2\u0a59\u0a5a\7\u0162"+
		"\2\2\u0a5a\u0a61\5\u0420\u0211\2\u0a5b\u0a5c\7\u0082\2\2\u0a5c\u0a5d\7"+
		"\u0162\2\2\u0a5d\u0a5e\7\u00af\2\2\u0a5e\u0a5f\7\u0090\2\2\u0a5f\u0a61"+
		"\5\u0420\u0211\2\u0a60\u0a58\3\2\2\2\u0a60\u0a5b\3\2\2\2\u0a61\u010d\3"+
		"\2\2\2\u0a62\u0a63\7]\2\2\u0a63\u0a64\7\u0092\2\2\u0a64\u0a65\5\u0420"+
		"\u0211\2\u0a65\u0a66\5\n\6\2\u0a66\u0a67\5\u0110\u0089\2\u0a67\u0a72\3"+
		"\2\2\2\u0a68\u0a69\7]\2\2\u0a69\u0a6a\7\u0092\2\2\u0a6a\u0a6b\7\u00af"+
		"\2\2\u0a6b\u0a6c\7\u00f2\2\2\u0a6c\u0a6d\7\u0090\2\2\u0a6d\u0a6e\5\u0420"+
		"\u0211\2\u0a6e\u0a6f\5\n\6\2\u0a6f\u0a70\5\u0110\u0089\2\u0a70\u0a72\3"+
		"\2\2\2\u0a71\u0a62\3\2\2\2\u0a71\u0a68\3\2\2\2\u0a72\u010f\3\2\2\2\u0a73"+
		"\u0a78\b\u0089\1\2\u0a74\u0a75\f\4\2\2\u0a75\u0a77\5\u0112\u008a\2\u0a76"+
		"\u0a74\3\2\2\2\u0a77\u0a7a\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a78\u0a79\3\2"+
		"\2\2\u0a79\u0111\3\2\2\2\u0a7a\u0a78\3\2\2\2\u0a7b\u0a7c\7\u013d\2\2\u0a7c"+
		"\u0a82\5\u0420\u0211\2\u0a7d\u0a7e\7\u018b\2\2\u0a7e\u0a82\5H%\2\u0a7f"+
		"\u0a80\7\u00a0\2\2\u0a80\u0a82\5H%\2\u0a81\u0a7b\3\2\2\2\u0a81\u0a7d\3"+
		"\2\2\2\u0a81\u0a7f\3\2\2\2\u0a82\u0113\3\2\2\2\u0a83\u0a84\7\"\2\2\u0a84"+
		"\u0a85\7\u0092\2\2\u0a85\u0a86\5\u0420\u0211\2\u0a86\u0a87\7\u017e\2\2"+
		"\u0a87\u0a88\5\u0116\u008c\2\u0a88\u0115\3\2\2\2\u0a89\u0a8e\b\u008c\1"+
		"\2\u0a8a\u0a8b\f\4\2\2\u0a8b\u0a8d\5\u0118\u008d\2\u0a8c\u0a8a\3\2\2\2"+
		"\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0117"+
		"\3\2\2\2\u0a90\u0a8e\3\2\2\2\u0a91\u0a92\7\u016a\2\2\u0a92\u0a93\5H%\2"+
		"\u0a93\u0119\3\2\2\2\u0a94\u0a95\7\"\2\2\u0a95\u0a96\7\u0092\2\2\u0a96"+
		"\u0a97\5\u0420\u0211\2\u0a97\u0a98\5(\25\2\u0a98\u0a99\7@\2\2\u0a99\u0a9a"+
		"\7\7\2\2\u0a9a\u0a9b\5\u0372\u01ba\2\u0a9b\u0a9c\7)\2\2\u0a9c\u0a9d\5"+
		"\u0372\u01ba\2\u0a9d\u0a9e\7\b\2\2\u0a9e\u0b47\3\2\2\2\u0a9f\u0aa0\7\""+
		"\2\2\u0aa0\u0aa1\7\u0092\2\2\u0aa1\u0aa2\5\u0420\u0211\2\u0aa2\u0aa3\5"+
		"(\25\2\u0aa3\u0aa4\7\37\2\2\u0aa4\u0aa5\5\u042c\u0217\2\u0aa5\u0aa6\5"+
		"\u0180\u00c1\2\u0aa6\u0b47\3\2\2\2\u0aa7\u0aa8\7\"\2\2\u0aa8\u0aa9\7\u0092"+
		"\2\2\u0aa9\u0aaa\5\u0420\u0211\2\u0aaa\u0aab\5(\25\2\u0aab\u0aac\5\u0106"+
		"\u0084\2\u0aac\u0aad\7\u00cf\2\2\u0aad\u0aae\5\u0420\u0211\2\u0aae\u0b47"+
		"\3\2\2\2\u0aaf\u0ab0\7\"\2\2\u0ab0\u0ab1\7\u0092\2\2\u0ab1\u0ab2\5\u0420"+
		"\u0211\2\u0ab2\u0ab3\5(\25\2\u0ab3\u0ab4\7\u0102\2\2\u0ab4\u0ab5\5\u0242"+
		"\u0122\2\u0ab5\u0ab6\5\u0240\u0121\2\u0ab6\u0b47\3\2\2\2\u0ab7\u0ab8\7"+
		"\"\2\2\u0ab8\u0ab9\7\u0092\2\2\u0ab9\u0aba\5\u0420\u0211\2\u0aba\u0abb"+
		"\5(\25\2\u0abb\u0abc\7\u0102\2\2\u0abc\u0abd\7H\2\2\u0abd\u0abe\5\u01b2"+
		"\u00da\2\u0abe\u0abf\7\u0180\2\2\u0abf\u0ac0\5\u0424\u0213\2\u0ac0\u0b47"+
		"\3\2\2\2\u0ac1\u0ac2\7\"\2\2\u0ac2\u0ac3\7\u0092\2\2\u0ac3\u0ac4\5\u0420"+
		"\u0211\2\u0ac4\u0ac5\5(\25\2\u0ac5\u0ac6\7\u0102\2\2\u0ac6\u0ac7\7\u0096"+
		"\2\2\u0ac7\u0ac8\5\u01b2\u00da\2\u0ac8\u0ac9\7\u0180\2\2\u0ac9\u0aca\5"+
		"\u0424\u0213\2\u0aca\u0b47\3\2\2\2\u0acb\u0acc\7\"\2\2\u0acc\u0acd\7\u0092"+
		"\2\2\u0acd\u0ace\5\u0420\u0211\2\u0ace\u0acf\5(\25\2\u0acf\u0ad0\7M\2"+
		"\2\u0ad0\u0ad1\5\u01b2\u00da\2\u0ad1\u0b47\3\2\2\2\u0ad2\u0ad3\7\"\2\2"+
		"\u0ad3\u0ad4\7\u0092\2\2\u0ad4\u0ad5\5\u0420\u0211\2\u0ad5\u0ad6\5(\25"+
		"\2\u0ad6\u0ad7\7Z\2\2\u0ad7\u0ad8\5\u01b2\u00da\2\u0ad8\u0b47\3\2\2\2"+
		"\u0ad9\u0ada\7\"\2\2\u0ada\u0adb\7\u0092\2\2\u0adb\u0adc\5\u0420\u0211"+
		"\2\u0adc\u0add\5(\25\2\u0add\u0ade\7\u0080\2\2\u0ade\u0adf\5\u01b2\u00da"+
		"\2\u0adf\u0b47\3\2\2\2\u0ae0\u0ae1\7\"\2\2\u0ae1\u0ae2\7\u0092\2\2\u0ae2"+
		"\u0ae3\5\u0420\u0211\2\u0ae3\u0ae4\5(\25\2\u0ae4\u0ae5\7\u00a2\2\2\u0ae5"+
		"\u0ae6\5\u01e4\u00f3\2\u0ae6\u0b47\3\2\2\2\u0ae7\u0ae8\7\"\2\2\u0ae8\u0ae9"+
		"\7\u0092\2\2\u0ae9\u0aea\5\u0420\u0211\2\u0aea\u0aeb\5(\25\2\u0aeb\u0aec"+
		"\7\u013d\2\2\u0aec\u0aed\5\u0420\u0211\2\u0aed\u0b47\3\2\2\2\u0aee\u0aef"+
		"\7\"\2\2\u0aef\u0af0\7\u0092\2\2\u0af0\u0af1\5\u0420\u0211\2\u0af1\u0af2"+
		"\5(\25\2\u0af2\u0af3\7\u0160\2\2\u0af3\u0af4\5\u01b2\u00da\2\u0af4\u0b47"+
		"\3\2\2\2\u0af5\u0af6\7\"\2\2\u0af6\u0af7\7\u0092\2\2\u0af7\u0af8\5\u0420"+
		"\u0211\2\u0af8\u0af9\5(\25\2\u0af9\u0afa\7\u0166\2\2\u0afa\u0afb\7\u013f"+
		"\2\2\u0afb\u0afc\7\u010e\2\2\u0afc\u0afd\5\u01b2\u00da\2\u0afd\u0b47\3"+
		"\2\2\2\u0afe\u0aff\7\"\2\2\u0aff\u0b00\7\u0092\2\2\u0b00\u0b01\5\u0420"+
		"\u0211\2\u0b01\u0b02\5(\25\2\u0b02\u0b03\7\u0166\2\2\u0b03\u0b04\7\u013f"+
		"\2\2\u0b04\u0b05\7z\2\2\u0b05\u0b06\5\u01b2\u00da\2\u0b06\u0b47\3\2\2"+
		"\2\u0b07\u0b08\7\"\2\2\u0b08\u0b09\7\u0092\2\2\u0b09\u0b0a\5\u0420\u0211"+
		"\2\u0b0a\u0b0b\5(\25\2\u0b0b\u0b0c\7\u0166\2\2\u0b0c\u0b0d\7\u013f\2\2"+
		"\u0b0d\u0b0e\7\u0164\2\2\u0b0e\u0b0f\5\u01b2\u00da\2\u0b0f\u0b47\3\2\2"+
		"\2\u0b10\u0b11\7\"\2\2\u0b11\u0b12\7\u0092\2\2\u0b12\u0b13\5\u0420\u0211"+
		"\2\u0b13\u0b14\5(\25\2\u0b14\u0b15\7\u0166\2\2\u0b15\u0b16\7\u013f\2\2"+
		"\u0b16\u0b17\7T\2\2\u0b17\u0b18\5\u01b2\u00da\2\u0b18\u0b47\3\2\2\2\u0b19"+
		"\u0b1a\7\"\2\2\u0b1a\u0b1b\7\u0092\2\2\u0b1b\u0b1c\5\u0420\u0211\2\u0b1c"+
		"\u0b1d\5(\25\2\u0b1d\u0b1e\7\u0143\2\2\u0b1e\u0b1f\5\u01b2\u00da\2\u0b1f"+
		"\u0b47\3\2\2\2\u0b20\u0b21\7\"\2\2\u0b21\u0b22\7\u0092\2\2\u0b22\u0b23"+
		"\5\u0420\u0211\2\u0b23\u0b24\5(\25\2\u0b24\u0b25\7\u018c\2\2\u0b25\u0b26"+
		"\5\u01b2\u00da\2\u0b26\u0b47\3\2\2\2\u0b27\u0b28\7\"\2\2\u0b28\u0b29\7"+
		"\u0092\2\2\u0b29\u0b2a\5\u0420\u0211\2\u0b2a\u0b2b\5(\25\2\u0b2b\u0b2c"+
		"\7\u009d\2\2\u0b2c\u0b2d\7\u0160\2\2\u0b2d\u0b2e\5\u01b2\u00da\2\u0b2e"+
		"\u0b47\3\2\2\2\u0b2f\u0b30\7\"\2\2\u0b30\u0b31\7\u0092\2\2\u0b31\u0b32"+
		"\5\u0420\u0211\2\u0b32\u0b33\5(\25\2\u0b33\u0b34\7\u009d\2\2\u0b34\u0b35"+
		"\7j\2\2\u0b35\u0b36\7\u0195\2\2\u0b36\u0b37\5\u0420\u0211\2\u0b37\u0b47"+
		"\3\2\2\2\u0b38\u0b39\7\"\2\2\u0b39\u0b3a\7\u0092\2\2\u0b3a\u0b3b\5\u0420"+
		"\u0211\2\u0b3b\u0b3c\5(\25\2\u0b3c\u0b3d\7\u0146\2\2\u0b3d\u0b3e\5\u0420"+
		"\u0211\2\u0b3e\u0b47\3\2\2\2\u0b3f\u0b40\7\"\2\2\u0b40\u0b41\7\u0092\2"+
		"\2\u0b41\u0b42\5\u0420\u0211\2\u0b42\u0b43\5(\25\2\u0b43\u0b44\7\u0173"+
		"\2\2\u0b44\u0b45\5\u01b2\u00da\2\u0b45\u0b47\3\2\2\2\u0b46\u0a94\3\2\2"+
		"\2\u0b46\u0a9f\3\2\2\2\u0b46\u0aa7\3\2\2\2\u0b46\u0aaf\3\2\2\2\u0b46\u0ab7"+
		"\3\2\2\2\u0b46\u0ac1\3\2\2\2\u0b46\u0acb\3\2\2\2\u0b46\u0ad2\3\2\2\2\u0b46"+
		"\u0ad9\3\2\2\2\u0b46\u0ae0\3\2\2\2\u0b46\u0ae7\3\2\2\2\u0b46\u0aee\3\2"+
		"\2\2\u0b46\u0af5\3\2\2\2\u0b46\u0afe\3\2\2\2\u0b46\u0b07\3\2\2\2\u0b46"+
		"\u0b10\3\2\2\2\u0b46\u0b19\3\2\2\2\u0b46\u0b20\3\2\2\2\u0b46\u0b27\3\2"+
		"\2\2\u0b46\u0b2f\3\2\2\2\u0b46\u0b38\3\2\2\2\u0b46\u0b3f\3\2\2\2\u0b47"+
		"\u011b\3\2\2\2\u0b48\u0b49\7]\2\2\u0b49\u0b4a\7\u009d\2\2\u0b4a\u0b4b"+
		"\7j\2\2\u0b4b\u0b4c\7\u0195\2\2\u0b4c\u0b4d\5\u0420\u0211\2\u0b4d\u0b4e"+
		"\5\u0122\u0092\2\u0b4e\u0b4f\5\u0128\u0095\2\u0b4f\u011d\3\2\2\2\u0b50"+
		"\u0b51\7\u00a9\2\2\u0b51\u0b59\5\u00fc\177\2\u0b52\u0b53\7\u0184\2\2\u0b53"+
		"\u0b59\5\u00fc\177\2\u0b54\u0b55\7\u00f0\2\2\u0b55\u0b59\7\u00a9\2\2\u0b56"+
		"\u0b57\7\u00f0\2\2\u0b57\u0b59\7\u0184\2\2\u0b58\u0b50\3\2\2\2\u0b58\u0b52"+
		"\3\2\2\2\u0b58\u0b54\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b59\u011f\3\2\2\2\u0b5a"+
		"\u0b5b\b\u0091\1\2\u0b5b\u0b5c\5\u011e\u0090\2\u0b5c\u0b61\3\2\2\2\u0b5d"+
		"\u0b5e\f\4\2\2\u0b5e\u0b60\5\u011e\u0090\2\u0b5f\u0b5d\3\2\2\2\u0b60\u0b63"+
		"\3\2\2\2\u0b61\u0b5f\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0121\3\2\2\2\u0b63"+
		"\u0b61\3\2\2\2\u0b64\u0b67\5\u0120\u0091\2\u0b65\u0b67\3\2\2\2\u0b66\u0b64"+
		"\3\2\2\2\u0b66\u0b65\3\2\2\2\u0b67\u0123\3\2\2\2\u0b68\u0b69\7\u0082\2"+
		"\2\u0b69\u0b6a\7\u009d\2\2\u0b6a\u0b6b\7j\2\2\u0b6b\u0b6c\7\u0195\2\2"+
		"\u0b6c\u0b6d\5\u0420\u0211\2\u0b6d\u0b6e\5d\63\2\u0b6e\u0b79\3\2\2\2\u0b6f"+
		"\u0b70\7\u0082\2\2\u0b70\u0b71\7\u009d\2\2\u0b71\u0b72\7j\2\2\u0b72\u0b73"+
		"\7\u0195\2\2\u0b73\u0b74\7\u00af\2\2\u0b74\u0b75\7\u0090\2\2\u0b75\u0b76"+
		"\5\u0420\u0211\2\u0b76\u0b77\5d\63\2\u0b77\u0b79\3\2\2\2\u0b78\u0b68\3"+
		"\2\2\2\u0b78\u0b6f\3\2\2\2\u0b79\u0125\3\2\2\2\u0b7a\u0b7b\7\"\2\2\u0b7b"+
		"\u0b7c\7\u009d\2\2\u0b7c\u0b7d\7j\2\2\u0b7d\u0b7e\7\u0195\2\2\u0b7e\u0b7f"+
		"\5\u0420\u0211\2\u0b7f\u0b80\5\u0122\u0092\2\u0b80\u0b81\5\u012c\u0097"+
		"\2\u0b81\u0b8a\3\2\2\2\u0b82\u0b83\7\"\2\2\u0b83\u0b84\7\u009d\2\2\u0b84"+
		"\u0b85\7j\2\2\u0b85\u0b86\7\u0195\2\2\u0b86\u0b87\5\u0420\u0211\2\u0b87"+
		"\u0b88\5\u0120\u0091\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b7a\3\2\2\2\u0b89\u0b82"+
		"\3\2\2\2\u0b8a\u0127\3\2\2\2\u0b8b\u0b8c\7\u0104\2\2\u0b8c\u0b8d\7\7\2"+
		"\2\u0b8d\u0b8e\5\u012a\u0096\2\u0b8e\u0b8f\7\b\2\2\u0b8f\u0b92\3\2\2\2"+
		"\u0b90\u0b92\3\2\2\2\u0b91\u0b8b\3\2\2\2\u0b91\u0b90\3\2\2\2\u0b92\u0129"+
		"\3\2\2\2\u0b93\u0b94\b\u0096\1\2\u0b94\u0b95\5\u0132\u009a\2\u0b95\u0b9b"+
		"\3\2\2\2\u0b96\u0b97\f\4\2\2\u0b97\u0b98\7\6\2\2\u0b98\u0b9a\5\u0132\u009a"+
		"\2\u0b99\u0b96\3\2\2\2\u0b9a\u0b9d\3\2\2\2\u0b9b\u0b99\3\2\2\2\u0b9b\u0b9c"+
		"\3\2\2\2\u0b9c\u012b\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9e\u0b9f\7\u0104\2"+
		"\2\u0b9f\u0ba0\7\7\2\2\u0ba0\u0ba1\5\u012e\u0098\2\u0ba1\u0ba2\7\b\2\2"+
		"\u0ba2\u012d\3\2\2\2\u0ba3\u0ba4\b\u0098\1\2\u0ba4\u0ba5\5\u0130\u0099"+
		"\2\u0ba5\u0bab\3\2\2\2\u0ba6\u0ba7\f\4\2\2\u0ba7\u0ba8\7\6\2\2\u0ba8\u0baa"+
		"\5\u0130\u0099\2\u0ba9\u0ba6\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9\3"+
		"\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u012f\3\2\2\2\u0bad\u0bab\3\2\2\2\u0bae"+
		"\u0bb6\5\u0132\u009a\2\u0baf\u0bb0\7\u0149\2\2\u0bb0\u0bb6\5\u0132\u009a"+
		"\2\u0bb1\u0bb2\7\34\2\2\u0bb2\u0bb6\5\u0132\u009a\2\u0bb3\u0bb4\7\u0082"+
		"\2\2\u0bb4\u0bb6\5\u0134\u009b\2\u0bb5\u0bae\3\2\2\2\u0bb5\u0baf\3\2\2"+
		"\2\u0bb5\u0bb1\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb6\u0131\3\2\2\2\u0bb7\u0bb8"+
		"\5\u0134\u009b\2\u0bb8\u0bb9\5\u0136\u009c\2\u0bb9\u0133\3\2\2\2\u0bba"+
		"\u0bbb\5\u043c\u021f\2\u0bbb\u0135\3\2\2\2\u0bbc\u0bbd\5\u0432\u021a\2"+
		"\u0bbd\u0137\3\2\2\2\u0bbe\u0bbf\7]\2\2\u0bbf\u0bc0\7\u0146\2\2\u0bc0"+
		"\u0bc1\5\u0420\u0211\2\u0bc1\u0bc2\5\u013a\u009e\2\u0bc2\u0bc3\5\u013e"+
		"\u00a0\2\u0bc3\u0bc4\7\u009d\2\2\u0bc4\u0bc5\7j\2\2\u0bc5\u0bc6\7\u0195"+
		"\2\2\u0bc6\u0bc7\5\u0420\u0211\2\u0bc7\u0bc8\5\u0128\u0095\2\u0bc8\u0139"+
		"\3\2\2\2\u0bc9\u0bca\7\u0173\2\2\u0bca\u0bcd\5\u0432\u021a\2\u0bcb\u0bcd"+
		"\3\2\2\2\u0bcc\u0bc9\3\2\2\2\u0bcc\u0bcb\3\2\2\2\u0bcd\u013b\3\2\2\2\u0bce"+
		"\u0bcf\7\u018b\2\2\u0bcf\u0bd3\5\u0432\u021a\2\u0bd0\u0bd1\7\u018b\2\2"+
		"\u0bd1\u0bd3\7\u00f7\2\2\u0bd2\u0bce\3\2\2\2\u0bd2\u0bd0\3\2\2\2\u0bd3"+
		"\u013d\3\2\2\2\u0bd4\u0bd7\5\u013c\u009f\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd4"+
		"\3\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u013f\3\2\2\2\u0bd8\u0bd9\7\u0082\2"+
		"\2\u0bd9\u0bda\7\u0146\2\2\u0bda\u0bdb\5\u0420\u0211\2\u0bdb\u0bdc\5d"+
		"\63\2\u0bdc\u0be5\3\2\2\2\u0bdd\u0bde\7\u0082\2\2\u0bde\u0bdf\7\u0146"+
		"\2\2\u0bdf\u0be0\7\u00af\2\2\u0be0\u0be1\7\u0090\2\2\u0be1\u0be2\5\u0420"+
		"\u0211\2\u0be2\u0be3\5d\63\2\u0be3\u0be5\3\2\2\2\u0be4\u0bd8\3\2\2\2\u0be4"+
		"\u0bdd\3\2\2\2\u0be5\u0141\3\2\2\2\u0be6\u0be7\7\"\2\2\u0be7\u0be8\7\u0146"+
		"\2\2\u0be8\u0be9\5\u0420\u0211\2\u0be9\u0bea\5\u013c\u009f\2\u0bea\u0beb"+
		"\5\u012c\u0097\2\u0beb\u0bf7\3\2\2\2\u0bec\u0bed\7\"\2\2\u0bed\u0bee\7"+
		"\u0146\2\2\u0bee\u0bef\5\u0420\u0211\2\u0bef\u0bf0\5\u013c\u009f\2\u0bf0"+
		"\u0bf7\3\2\2\2\u0bf1\u0bf2\7\"\2\2\u0bf2\u0bf3\7\u0146\2\2\u0bf3\u0bf4"+
		"\5\u0420\u0211\2\u0bf4\u0bf5\5\u012c\u0097\2\u0bf5\u0bf7\3\2\2\2\u0bf6"+
		"\u0be6\3\2\2\2\u0bf6\u0bec\3\2\2\2\u0bf6\u0bf1\3\2\2\2\u0bf7\u0143\3\2"+
		"\2\2\u0bf8\u0bf9\7]\2\2\u0bf9\u0bfa\7\u009d\2\2\u0bfa\u0bfb\7\u0160\2"+
		"\2\u0bfb\u0bfc\5\u041c\u020f\2\u0bfc\u0bfd\5\u0146\u00a4\2\u0bfd\u0bfe"+
		"\7\u0146\2\2\u0bfe\u0bff\5\u0420\u0211\2\u0bff\u0c00\5\u0128\u0095\2\u0c00"+
		"\u0c0e\3\2\2\2\u0c01\u0c02\7]\2\2\u0c02\u0c03\7\u009d\2\2\u0c03\u0c04"+
		"\7\u0160\2\2\u0c04\u0c05\7\u00af\2\2\u0c05\u0c06\7\u00f2\2\2\u0c06\u0c07"+
		"\7\u0090\2\2\u0c07\u0c08\5\u041c\u020f\2\u0c08\u0c09\5\u0146\u00a4\2\u0c09"+
		"\u0c0a\7\u0146\2\2\u0c0a\u0c0b\5\u0420\u0211\2\u0c0b\u0c0c\5\u0128\u0095"+
		"\2\u0c0c\u0c0e\3\2\2\2\u0c0d\u0bf8\3\2\2\2\u0c0d\u0c01\3\2\2\2\u0c0e\u0145"+
		"\3\2\2\2\u0c0f\u0c10\7\7\2\2\u0c10\u0c16\7\b\2\2\u0c11\u0c12\7\7\2\2\u0c12"+
		"\u0c13\5\u0148\u00a5\2\u0c13\u0c14\7\b\2\2\u0c14\u0c16\3\2\2\2\u0c15\u0c0f"+
		"\3\2\2\2\u0c15\u0c11\3\2\2\2\u0c16\u0147\3\2\2\2\u0c17\u0c18\b\u00a5\1"+
		"\2\u0c18\u0c19\5\u014a\u00a6\2\u0c19\u0c1f\3\2\2\2\u0c1a\u0c1b\f\4\2\2"+
		"\u0c1b\u0c1c\7\6\2\2\u0c1c\u0c1e\5\u014a\u00a6\2\u0c1d\u0c1a\3\2\2\2\u0c1e"+
		"\u0c21\3\2\2\2\u0c1f\u0c1d\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0149\3\2"+
		"\2\2\u0c21\u0c1f\3\2\2\2\u0c22\u0c23\5\u00a8U\2\u0c23\u014b\3\2\2\2\u0c24"+
		"\u0c25\7\"\2\2\u0c25\u0c26\7\u009d\2\2\u0c26\u0c27\7\u0160\2\2\u0c27\u0c28"+
		"\5\u0360\u01b1\2\u0c28\u0c29\5^\60\2\u0c29\u0c33\3\2\2\2\u0c2a\u0c2b\7"+
		"\"\2\2\u0c2b\u0c2c\7\u009d\2\2\u0c2c\u0c2d\7\u0160\2\2\u0c2d\u0c2e\7\u00af"+
		"\2\2\u0c2e\u0c2f\7\u0090\2\2\u0c2f\u0c30\5\u0360\u01b1\2\u0c30\u0c31\5"+
		"^\60\2\u0c31\u0c33\3\2\2\2\u0c32\u0c24\3\2\2\2\u0c32\u0c2a\3\2\2\2\u0c33"+
		"\u014d\3\2\2\2\u0c34\u0c35\7]\2\2\u0c35\u0c36\7\u017f\2\2\u0c36\u0c37"+
		"\7\u00e2\2\2\u0c37\u0c38\7\u009b\2\2\u0c38\u0c39\5\u0150\u00a9\2\u0c39"+
		"\u0c3a\7\u0146\2\2\u0c3a\u0c3b\5\u0420\u0211\2\u0c3b\u0c3c\5\u0128\u0095"+
		"\2\u0c3c\u014f\3\2\2\2\u0c3d\u0c41\5\u0434\u021b\2\u0c3e\u0c41\7g\2\2"+
		"\u0c3f\u0c41\7\u017f\2\2\u0c40\u0c3d\3\2\2\2\u0c40\u0c3e\3\2\2\2\u0c40"+
		"\u0c3f\3\2\2\2\u0c41\u0151\3\2\2\2\u0c42\u0c43\7\u0082\2\2\u0c43\u0c44"+
		"\7\u017f\2\2\u0c44\u0c45\7\u00e2\2\2\u0c45\u0c46\7\u009b\2\2\u0c46\u0c47"+
		"\5\u0150\u00a9\2\u0c47\u0c48\7\u0146\2\2\u0c48\u0c49\5\u0420\u0211\2\u0c49"+
		"\u0c55\3\2\2\2\u0c4a\u0c4b\7\u0082\2\2\u0c4b\u0c4c\7\u017f\2\2\u0c4c\u0c4d"+
		"\7\u00e2\2\2\u0c4d\u0c4e\7\u00af\2\2\u0c4e\u0c4f\7\u0090\2\2\u0c4f\u0c50"+
		"\7\u009b\2\2\u0c50\u0c51\5\u0150\u00a9\2\u0c51\u0c52\7\u0146\2\2\u0c52"+
		"\u0c53\5\u0420\u0211\2\u0c53\u0c55\3\2\2\2\u0c54\u0c42\3\2\2\2\u0c54\u0c4a"+
		"\3\2\2\2\u0c55\u0153\3\2\2\2\u0c56\u0c57\7\"\2\2\u0c57\u0c58\7\u017f\2"+
		"\2\u0c58\u0c59\7\u00e2\2\2\u0c59\u0c5a\7\u009b\2\2\u0c5a\u0c5b\5\u0150"+
		"\u00a9\2\u0c5b\u0c5c\7\u0146\2\2\u0c5c\u0c5d\5\u0420\u0211\2\u0c5d\u0c5e"+
		"\5\u012c\u0097\2\u0c5e\u0155\3\2\2\2\u0c5f\u0c60\7]\2\2\u0c60\u0c61\7"+
		"\u016e\2\2\u0c61\u0c62\5\u0420\u0211\2\u0c62\u0c63\5\u0158\u00ad\2\u0c63"+
		"\u0c64\5\u015a\u00ae\2\u0c64\u0c65\7\u0100\2\2\u0c65\u0c66\5\u041c\u020f"+
		"\2\u0c66\u0c67\5\u015e\u00b0\2\u0c67\u0c68\5\u0164\u00b3\2\u0c68\u0c69"+
		"\7\u008f\2\2\u0c69\u0c6a\7\u011f\2\2\u0c6a\u0c6b\5\u042c\u0217\2\u0c6b"+
		"\u0c6c\7\7\2\2\u0c6c\u0c6d\5\u0166\u00b4\2\u0c6d\u0c6e\7\b\2\2\u0c6e\u0c85"+
		"\3\2\2\2\u0c6f\u0c70\7]\2\2\u0c70\u0c71\7V\2\2\u0c71\u0c72\7\u016e\2\2"+
		"\u0c72\u0c73\5\u0420\u0211\2\u0c73\u0c74\7\36\2\2\u0c74\u0c75\5\u015a"+
		"\u00ae\2\u0c75\u0c76\7\u0100\2\2\u0c76\u0c77\5\u041c\u020f\2\u0c77\u0c78"+
		"\5\u016a\u00b6\2\u0c78\u0c79\5\u016c\u00b7\2\u0c79\u0c7a\7\u009b\2\2\u0c7a"+
		"\u0c7b\7\u0083\2\2\u0c7b\u0c7c\7\u0139\2\2\u0c7c\u0c7d\5\u0164\u00b3\2"+
		"\u0c7d\u0c7e\7\u008f\2\2\u0c7e\u0c7f\7\u011f\2\2\u0c7f\u0c80\5\u042c\u0217"+
		"\2\u0c80\u0c81\7\7\2\2\u0c81\u0c82\5\u0166\u00b4\2\u0c82\u0c83\7\b\2\2"+
		"\u0c83\u0c85\3\2\2\2\u0c84\u0c5f\3\2\2\2\u0c84\u0c6f\3\2\2\2\u0c85\u0157"+
		"\3\2\2\2\u0c86\u0c8b\7\62\2\2\u0c87\u0c8b\7\36\2\2\u0c88\u0c89\7\u00c2"+
		"\2\2\u0c89\u0c8b\7\u00fc\2\2\u0c8a\u0c86\3\2\2\2\u0c8a\u0c87\3\2\2\2\u0c8a"+
		"\u0c88\3\2\2\2\u0c8b\u0159\3\2\2\2\u0c8c\u0c8d\b\u00ae\1\2\u0c8d\u0c8e"+
		"\5\u015c\u00af\2\u0c8e\u0c94\3\2\2\2\u0c8f\u0c90\f\4\2\2\u0c90\u0c91\7"+
		"\u0105\2\2\u0c91\u0c93\5\u015c\u00af\2\u0c92\u0c8f\3\2\2\2\u0c93\u0c96"+
		"\3\2\2\2\u0c94\u0c92\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u015b\3\2\2\2\u0c96"+
		"\u0c94\3\2\2\2\u0c97\u0c98\7\u017e\2\2\u0c98\u0c99\7\u00fc\2\2\u0c99\u0c9f"+
		"\5\u00c2b\2\u0c9a\u0c9f\7\u00c1\2\2\u0c9b\u0c9f\7v\2\2\u0c9c\u0c9f\7\u017e"+
		"\2\2\u0c9d\u0c9f\7\u0171\2\2\u0c9e\u0c97\3\2\2\2\u0c9e\u0c9a\3\2\2\2\u0c9e"+
		"\u0c9b\3\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9e\u0c9d\3\2\2\2\u0c9f\u015d\3\2"+
		"\2\2\u0ca0\u0ca1\7\u009b\2\2\u0ca1\u0ca2\5\u0160\u00b1\2\u0ca2\u0ca3\5"+
		"\u0162\u00b2\2\u0ca3\u0ca6\3\2\2\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca0\3\2"+
		"\2\2\u0ca5\u0ca4\3\2\2\2\u0ca6\u015f\3\2\2\2\u0ca7\u0caa\7\u0083\2\2\u0ca8"+
		"\u0caa\3\2\2\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0ca8\3\2\2\2\u0caa\u0161\3\2"+
		"\2\2\u0cab\u0cac\t\6\2\2\u0cac\u0163\3\2\2\2\u0cad\u0cae\7\u018e\2\2\u0cae"+
		"\u0caf\7\7\2\2\u0caf\u0cb0\5\u03a2\u01d2\2\u0cb0\u0cb1\7\b\2\2\u0cb1\u0cb4"+
		"\3\2\2\2\u0cb2\u0cb4\3\2\2\2\u0cb3\u0cad\3\2\2\2\u0cb3\u0cb2\3\2\2\2\u0cb4"+
		"\u0165\3\2\2\2\u0cb5\u0cb6\b\u00b4\1\2\u0cb6\u0cb9\5\u0168\u00b5\2\u0cb7"+
		"\u0cb9\3\2\2\2\u0cb8\u0cb5\3\2\2\2\u0cb8\u0cb7\3\2\2\2\u0cb9\u0cbf\3\2"+
		"\2\2\u0cba\u0cbb\f\5\2\2\u0cbb\u0cbc\7\6\2\2\u0cbc\u0cbe\5\u0168\u00b5"+
		"\2\u0cbd\u0cba\3\2\2\2\u0cbe\u0cc1\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cbf\u0cc0"+
		"\3\2\2\2\u0cc0\u0167\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc2\u0cc7\5\u0430\u0219"+
		"\2\u0cc3\u0cc7\5\u0432\u021a\2\u0cc4\u0cc7\5\u043c\u021f\2\u0cc5\u0cc7"+
		"\7\u01ae\2\2\u0cc6\u0cc2\3\2\2\2\u0cc6\u0cc3\3\2\2\2\u0cc6\u0cc4\3\2\2"+
		"\2\u0cc6\u0cc5\3\2\2\2\u0cc7\u0169\3\2\2\2\u0cc8\u0cc9\7\u00a0\2\2\u0cc9"+
		"\u0ccc\5\u041c\u020f\2\u0cca\u0ccc\3\2\2\2\u0ccb\u0cc8\3\2\2\2\u0ccb\u0cca"+
		"\3\2\2\2\u0ccc\u016b\3\2\2\2\u0ccd\u0cd2\b\u00b7\1\2\u0cce\u0ccf\f\4\2"+
		"\2\u0ccf\u0cd1\5\u016e\u00b8\2\u0cd0\u0cce\3\2\2\2\u0cd1\u0cd4\3\2\2\2"+
		"\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u016d\3\2\2\2\u0cd4\u0cd2"+
		"\3\2\2\2\u0cd5\u0cd6\7\u00f2\2\2\u0cd6\u0ce1\7s\2\2\u0cd7\u0ce1\7s\2\2"+
		"\u0cd8\u0cd9\7\u00bb\2\2\u0cd9\u0ce1\7\u00b1\2\2\u0cda\u0cdb\7\u00bb\2"+
		"\2\u0cdb\u0ce1\7t\2\2\u0cdc\u0cdd\7\u00f2\2\2\u0cdd\u0ce1\7\u0182\2\2"+
		"\u0cde\u0cdf\7\u00f0\2\2\u0cdf\u0ce1\7\u00b9\2\2\u0ce0\u0cd5\3\2\2\2\u0ce0"+
		"\u0cd7\3\2\2\2\u0ce0\u0cd8\3\2\2\2\u0ce0\u0cda\3\2\2\2\u0ce0\u0cdc\3\2"+
		"\2\2\u0ce0\u0cde\3\2\2\2\u0ce1\u016f\3\2\2\2\u0ce2\u0ce3\7\u0082\2\2\u0ce3"+
		"\u0ce4\7\u016e\2\2\u0ce4\u0ce5\5\u0420\u0211\2\u0ce5\u0ce6\7\u0100\2\2"+
		"\u0ce6\u0ce7\5\u01b2\u00da\2\u0ce7\u0ce8\5d\63\2\u0ce8\u0cf3\3\2\2\2\u0ce9"+
		"\u0cea\7\u0082\2\2\u0cea\u0ceb\7\u016e\2\2\u0ceb\u0cec\7\u00af\2\2\u0cec"+
		"\u0ced\7\u0090\2\2\u0ced\u0cee\5\u0420\u0211\2\u0cee\u0cef\7\u0100\2\2"+
		"\u0cef\u0cf0\5\u01b2\u00da\2\u0cf0\u0cf1\5d\63\2\u0cf1\u0cf3\3\2\2\2\u0cf2"+
		"\u0ce2\3\2\2\2\u0cf2\u0ce9\3\2\2\2\u0cf3\u0171\3\2\2\2\u0cf4\u0cf5\7]"+
		"\2\2\u0cf5\u0cf6\7+\2\2\u0cf6\u0cf7\5\u0420\u0211\2\u0cf7\u0cf8\7F\2\2"+
		"\u0cf8\u0cf9\7\7\2\2\u0cf9\u0cfa\5\u03a2\u01d2\2\u0cfa\u0cfb\7\b\2\2\u0cfb"+
		"\u0cfc\5\u016c\u00b7\2\u0cfc\u0173\3\2\2\2\u0cfd\u0cfe\7\u0082\2\2\u0cfe"+
		"\u0cff\7+\2\2\u0cff\u0d00\5\u0420\u0211\2\u0d00\u0d01\5d\63\2\u0d01\u0175"+
		"\3\2\2\2\u0d02\u0d03\7]\2\2\u0d03\u0d04\7\u0173\2\2\u0d04\u0d05\5\u01b2"+
		"\u00da\2\u0d05\u0d06\7)\2\2\u0d06\u0d07\7\7\2\2\u0d07\u0d08\5\u036c\u01b7"+
		"\2\u0d08\u0d09\7\b\2\2\u0d09\u0d5a\3\2\2\2\u0d0a\u0d0b\7]\2\2\u0d0b\u0d0c"+
		"\7\u0173\2\2\u0d0c\u0d0d\5\u01b2\u00da\2\u0d0d\u0d0e\7)\2\2\u0d0e\u0d0f"+
		"\7\u0089\2\2\u0d0f\u0d10\7\7\2\2\u0d10\u0d11\5\u0188\u00c5\2\u0d11\u0d12"+
		"\7\b\2\2\u0d12\u0d5a\3\2\2\2\u0d13\u0d14\7]\2\2\u0d14\u0d15\7\37\2\2\u0d15"+
		"\u0d16\5\u042c\u0217\2\u0d16\u0d17\5\u0180\u00c1\2\u0d17\u0d18\5\u0178"+
		"\u00bd\2\u0d18\u0d5a\3\2\2\2\u0d19\u0d1a\7]\2\2\u0d1a\u0d1b\7\37\2\2\u0d1b"+
		"\u0d1c\5\u042c\u0217\2\u0d1c\u0d1d\5\u0182\u00c2\2\u0d1d\u0d5a\3\2\2\2"+
		"\u0d1e\u0d1f\7]\2\2\u0d1f\u0d20\7\u0102\2\2\u0d20\u0d21\5\u0242\u0122"+
		"\2\u0d21\u0d22\5\u0178\u00bd\2\u0d22\u0d5a\3\2\2\2\u0d23\u0d24\7]\2\2"+
		"\u0d24\u0d25\7\u0173\2\2\u0d25\u0d26\5\u01b2\u00da\2\u0d26\u0d27\5\u0178"+
		"\u00bd\2\u0d27\u0d5a\3\2\2\2\u0d28\u0d29\7]\2\2\u0d29\u0d2a\7\u0173\2"+
		"\2\u0d2a\u0d2b\5\u01b2\u00da\2\u0d2b\u0d2c\7)\2\2\u0d2c\u0d2d\7\u0121"+
		"\2\2\u0d2d\u0d2e\5\u0178\u00bd\2\u0d2e\u0d5a\3\2\2\2\u0d2f\u0d30\7]\2"+
		"\2\u0d30\u0d31\7\u0166\2\2\u0d31\u0d32\7\u013f\2\2\u0d32\u0d33\7\u010e"+
		"\2\2\u0d33\u0d34\5\u01b2\u00da\2\u0d34\u0d35\5\u0178\u00bd\2\u0d35\u0d5a"+
		"\3\2\2\2\u0d36\u0d37\7]\2\2\u0d37\u0d38\7\u0166\2\2\u0d38\u0d39\7\u013f"+
		"\2\2\u0d39\u0d3a\7z\2\2\u0d3a\u0d3b\5\u01b2\u00da\2\u0d3b\u0d3c\5\u0178"+
		"\u00bd\2\u0d3c\u0d5a\3\2\2\2\u0d3d\u0d3e\7]\2\2\u0d3e\u0d3f\7\u0166\2"+
		"\2\u0d3f\u0d40\7\u013f\2\2\u0d40\u0d41\7\u0164\2\2\u0d41\u0d42\5\u01b2"+
		"\u00da\2\u0d42\u0d43\5\u0178\u00bd\2\u0d43\u0d5a\3\2\2\2\u0d44\u0d45\7"+
		"]\2\2\u0d45\u0d46\7\u0166\2\2\u0d46\u0d47\7\u013f\2\2\u0d47\u0d48\7T\2"+
		"\2\u0d48\u0d49\5\u01b2\u00da\2\u0d49\u0d4a\5\u0178\u00bd\2\u0d4a\u0d5a"+
		"\3\2\2\2\u0d4b\u0d4c\7]\2\2\u0d4c\u0d4d\7M\2\2\u0d4d\u0d4e\5\u01b2\u00da"+
		"\2\u0d4e\u0d4f\5\u0178\u00bd\2\u0d4f\u0d5a\3\2\2\2\u0d50\u0d51\7]\2\2"+
		"\u0d51\u0d52\7M\2\2\u0d52\u0d53\5\u01b2\u00da\2\u0d53\u0d54\7\u00a0\2"+
		"\2\u0d54\u0d55\5\u01b2\u00da\2\u0d55\u0d5a\3\2\2\2\u0d56\u0d57\7]\2\2"+
		"\u0d57\u0d58\7\u0173\2\2\u0d58\u0d5a\5\u01b2\u00da\2\u0d59\u0d02\3\2\2"+
		"\2\u0d59\u0d0a\3\2\2\2\u0d59\u0d13\3\2\2\2\u0d59\u0d19\3\2\2\2\u0d59\u0d1e"+
		"\3\2\2\2\u0d59\u0d23\3\2\2\2\u0d59\u0d28\3\2\2\2\u0d59\u0d2f\3\2\2\2\u0d59"+
		"\u0d36\3\2\2\2\u0d59\u0d3d\3\2\2\2\u0d59\u0d44\3\2\2\2\u0d59\u0d4b\3\2"+
		"\2\2\u0d59\u0d50\3\2\2\2\u0d59\u0d56\3\2\2\2\u0d5a\u0177\3\2\2\2\u0d5b"+
		"\u0d5c\7\7\2\2\u0d5c\u0d5d\5\u017a\u00be\2\u0d5d\u0d5e\7\b\2\2\u0d5e\u0179"+
		"\3\2\2\2\u0d5f\u0d60\b\u00be\1\2\u0d60\u0d61\5\u017c\u00bf\2\u0d61\u0d67"+
		"\3\2\2\2\u0d62\u0d63\f\4\2\2\u0d63\u0d64\7\6\2\2\u0d64\u0d66\5\u017c\u00bf"+
		"\2\u0d65\u0d62\3\2\2\2\u0d66\u0d69\3\2\2\2\u0d67\u0d65\3\2\2\2\u0d67\u0d68"+
		"\3\2\2\2\u0d68\u017b\3\2\2\2\u0d69\u0d67\3\2\2\2\u0d6a\u0d6b\5\u043c\u021f"+
		"\2\u0d6b\u0d6c\7\4\2\2\u0d6c\u0d6d\5\u017e\u00c0\2\u0d6d\u0d70\3\2\2\2"+
		"\u0d6e\u0d70\5\u043c\u021f\2\u0d6f\u0d6a\3\2\2\2\u0d6f\u0d6e\3\2\2\2\u0d70"+
		"\u017d\3\2\2\2\u0d71\u0d77\5\u0222\u0112\2\u0d72\u0d77\5\u0444\u0223\2"+
		"\u0d73\u0d77\5\u03d8\u01ed\2\u0d74\u0d77\5\u00f4{\2\u0d75\u0d77\5\u0432"+
		"\u021a\2\u0d76\u0d71\3\2\2\2\u0d76\u0d72\3\2\2\2\u0d76\u0d73\3\2\2\2\u0d76"+
		"\u0d74\3\2\2\2\u0d76\u0d75\3\2\2\2\u0d77\u017f\3\2\2\2\u0d78\u0d79\7\7"+
		"\2\2\u0d79\u0d7a\7\t\2\2\u0d7a\u0d80\7\b\2\2\u0d7b\u0d7c\7\7\2\2\u0d7c"+
		"\u0d7d\5\u03e2\u01f2\2\u0d7d\u0d7e\7\b\2\2\u0d7e\u0d80\3\2\2\2\u0d7f\u0d78"+
		"\3\2\2\2\u0d7f\u0d7b\3\2\2\2\u0d80\u0181\3\2\2\2\u0d81\u0d82\7\7\2\2\u0d82"+
		"\u0d83\5\u0184\u00c3\2\u0d83\u0d84\7\b\2\2\u0d84\u0183\3\2\2\2\u0d85\u0d86"+
		"\b\u00c3\1\2\u0d86\u0d87\5\u0186\u00c4\2\u0d87\u0d8d\3\2\2\2\u0d88\u0d89"+
		"\f\4\2\2\u0d89\u0d8a\7\6\2\2\u0d8a\u0d8c\5\u0186\u00c4\2\u0d8b\u0d88\3"+
		"\2\2\2\u0d8c\u0d8f\3\2\2\2\u0d8d\u0d8b\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e"+
		"\u0185\3\2\2\2\u0d8f\u0d8d\3\2\2\2\u0d90\u0d91\7\u01ac\2\2\u0d91\u0d92"+
		"\7\4\2\2\u0d92\u0d93\5\u017e\u00c0\2\u0d93\u0187\3\2\2\2\u0d94\u0d97\5"+
		"\u018a\u00c6\2\u0d95\u0d97\3\2\2\2\u0d96\u0d94\3\2\2\2\u0d96\u0d95\3\2"+
		"\2\2\u0d97\u0189\3\2\2\2\u0d98\u0d99\b\u00c6\1\2\u0d99\u0d9a\5\u0432\u021a"+
		"\2\u0d9a\u0da0\3\2\2\2\u0d9b\u0d9c\f\4\2\2\u0d9c\u0d9d\7\6\2\2\u0d9d\u0d9f"+
		"\5\u0432\u021a\2\u0d9e\u0d9b\3\2\2\2\u0d9f\u0da2\3\2\2\2\u0da0\u0d9e\3"+
		"\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u018b\3\2\2\2\u0da2\u0da0\3\2\2\2\u0da3"+
		"\u0da4\7\"\2\2\u0da4\u0da5\7\u0173\2\2\u0da5\u0da6\5\u01b2\u00da\2\u0da6"+
		"\u0da7\7\34\2\2\u0da7\u0da8\7\u0185\2\2\u0da8\u0da9\5\u0432\u021a\2\u0da9"+
		"\u0daa\7\62\2\2\u0daa\u0dab\5\u0432\u021a\2\u0dab\u0dbd\3\2\2\2\u0dac"+
		"\u0dad\7\"\2\2\u0dad\u0dae\7\u0173\2\2\u0dae\u0daf\5\u01b2\u00da\2\u0daf"+
		"\u0db0\7\34\2\2\u0db0\u0db1\7\u0185\2\2\u0db1\u0db2\5\u0432\u021a\2\u0db2"+
		"\u0db3\7\36\2\2\u0db3\u0db4\5\u0432\u021a\2\u0db4\u0dbd\3\2\2\2\u0db5"+
		"\u0db6\7\"\2\2\u0db6\u0db7\7\u0173\2\2\u0db7\u0db8\5\u01b2\u00da\2\u0db8"+
		"\u0db9\7\34\2\2\u0db9\u0dba\7\u0185\2\2\u0dba\u0dbb\5\u0432\u021a\2\u0dbb"+
		"\u0dbd\3\2\2\2\u0dbc\u0da3\3\2\2\2\u0dbc\u0dac\3\2\2\2\u0dbc\u0db5\3\2"+
		"\2\2\u0dbd\u018d\3\2\2\2\u0dbe\u0dbf\7]\2\2\u0dbf\u0dc0\7\u0102\2\2\u0dc0"+
		"\u0dc1\7H\2\2\u0dc1\u0dc2\5\u01b2\u00da\2\u0dc2\u0dc3\5\u0194\u00cb\2"+
		"\u0dc3\u0dc4\7\u009b\2\2\u0dc4\u0dc5\7\u0173\2\2\u0dc5\u0dc6\5\u0372\u01ba"+
		"\2\u0dc6\u0dc7\7\u0180\2\2\u0dc7\u0dc8\5\u0424\u0213\2\u0dc8\u0dc9\5\u0196"+
		"\u00cc\2\u0dc9\u0dca\7)\2\2\u0dca\u0dcb\5\u0190\u00c9\2\u0dcb\u018f\3"+
		"\2\2\2\u0dcc\u0dcd\b\u00c9\1\2\u0dcd\u0dce\5\u0192\u00ca\2\u0dce\u0dd4"+
		"\3\2\2\2\u0dcf\u0dd0\f\4\2\2\u0dd0\u0dd1\7\6\2\2\u0dd1\u0dd3\5\u0192\u00ca"+
		"\2\u0dd2\u0dcf\3\2\2\2\u0dd3\u0dd6\3\2\2\2\u0dd4\u0dd2\3\2\2\2\u0dd4\u0dd5"+
		"\3\2\2\2\u0dd5\u0191\3\2\2\2\u0dd6\u0dd4\3\2\2\2\u0dd7\u0dd8\7\u00a2\2"+
		"\2\u0dd8\u0dd9\5\u0430\u0219\2\u0dd9\u0dda\7\7\2\2\u0dda\u0ddb\5\u03e2"+
		"\u01f2\2\u0ddb\u0ddc\7\b\2\2\u0ddc\u0ddd\5\u042c\u0217\2\u0ddd\u0dde\5"+
		"\u0212\u010a\2\u0dde\u0df4\3\2\2\2\u0ddf\u0de0\7\u0102\2\2\u0de0\u0de1"+
		"\5\u0430\u0219\2\u0de1\u0de2\5\u0242\u0122\2\u0de2\u0de3\5\u0240\u0121"+
		"\2\u0de3\u0de4\5\u0198\u00cd\2\u0de4\u0de5\5\u019a\u00ce\2\u0de5\u0df4"+
		"\3\2\2\2\u0de6\u0de7\7\u0102\2\2\u0de7\u0de8\5\u0430\u0219\2\u0de8\u0de9"+
		"\5\u0242\u0122\2\u0de9\u0dea\5\u0198\u00cd\2\u0dea\u0deb\5\u019a\u00ce"+
		"\2\u0deb\u0df4\3\2\2\2\u0dec\u0ded\7\u00a2\2\2\u0ded\u0dee\5\u0430\u0219"+
		"\2\u0dee\u0def\5\u042c\u0217\2\u0def\u0df0\5\u0212\u010a\2\u0df0\u0df4"+
		"\3\2\2\2\u0df1\u0df2\7\u0159\2\2\u0df2\u0df4\5\u0372\u01ba\2\u0df3\u0dd7"+
		"\3\2\2\2\u0df3\u0ddf\3\2\2\2\u0df3\u0de6\3\2\2\2\u0df3\u0dec\3\2\2\2\u0df3"+
		"\u0df1\3\2\2\2\u0df4\u0193\3\2\2\2\u0df5\u0df8\7q\2\2\u0df6\u0df8\3\2"+
		"\2\2\u0df7\u0df5\3\2\2\2\u0df7\u0df6\3\2\2\2\u0df8\u0195\3\2\2\2\u0df9"+
		"\u0dfa\7\u0096\2\2\u0dfa\u0dfd\5\u01b2\u00da\2\u0dfb\u0dfd\3\2\2\2\u0dfc"+
		"\u0df9\3\2\2\2\u0dfc\u0dfb\3\2\2\2\u0dfd\u0197\3\2\2\2\u0dfe\u0dff\7\u009b"+
		"\2\2\u0dff\u0e00\7\u0106\2\2\u0e00\u0e01\7:\2\2\u0e01\u0e06\5\u01b2\u00da"+
		"\2\u0e02\u0e03\7\u009b\2\2\u0e03\u0e06\7\u013f\2\2\u0e04\u0e06\3\2\2\2"+
		"\u0e05\u0dfe\3\2\2\2\u0e05\u0e02\3\2\2\2\u0e05\u0e04\3\2\2\2\u0e06\u0199"+
		"\3\2\2\2\u0e07\u0e0a\7\u0125\2\2\u0e08\u0e0a\3\2\2\2\u0e09\u0e07\3\2\2"+
		"\2\u0e09\u0e08\3\2\2\2\u0e0a\u019b\3\2\2\2\u0e0b\u0e0c\7]\2\2\u0e0c\u0e0d"+
		"\7\u0102\2\2\u0e0d\u0e0e\7\u0096\2\2\u0e0e\u0e0f\5\u01b2\u00da\2\u0e0f"+
		"\u0e10\7\u0180\2\2\u0e10\u0e11\5\u0424\u0213\2\u0e11\u019d\3\2\2\2\u0e12"+
		"\u0e13\7\"\2\2\u0e13\u0e14\7\u0102\2\2\u0e14\u0e15\7\u0096\2\2\u0e15\u0e16"+
		"\5\u01b2\u00da\2\u0e16\u0e17\7\u0180\2\2\u0e17\u0e18\5\u0424\u0213\2\u0e18"+
		"\u0e19\7\34\2\2\u0e19\u0e1a\5\u0190\u00c9\2\u0e1a\u0e25\3\2\2\2\u0e1b"+
		"\u0e1c\7\"\2\2\u0e1c\u0e1d\7\u0102\2\2\u0e1d\u0e1e\7\u0096\2\2\u0e1e\u0e1f"+
		"\5\u01b2\u00da\2\u0e1f\u0e20\7\u0180\2\2\u0e20\u0e21\5\u0424\u0213\2\u0e21"+
		"\u0e22\7\u0082\2\2\u0e22\u0e23\5\u01a0\u00d1\2\u0e23\u0e25\3\2\2\2\u0e24"+
		"\u0e12\3\2\2\2\u0e24\u0e1b\3\2\2\2\u0e25\u019f\3\2\2\2\u0e26\u0e27\b\u00d1"+
		"\1\2\u0e27\u0e28\5\u01a2\u00d2\2\u0e28\u0e2e\3\2\2\2\u0e29\u0e2a\f\4\2"+
		"\2\u0e2a\u0e2b\7\6\2\2\u0e2b\u0e2d\5\u01a2\u00d2\2\u0e2c\u0e29\3\2\2\2"+
		"\u0e2d\u0e30\3\2\2\2\u0e2e\u0e2c\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u01a1"+
		"\3\2\2\2\u0e30\u0e2e\3\2\2\2\u0e31\u0e32\7\u0102\2\2\u0e32\u0e33\5\u0430"+
		"\u0219\2\u0e33\u0e34\7\7\2\2\u0e34\u0e35\5\u03e2\u01f2\2\u0e35\u0e36\7"+
		"\b\2\2\u0e36\u0e3e\3\2\2\2\u0e37\u0e38\7\u00a2\2\2\u0e38\u0e39\5\u0430"+
		"\u0219\2\u0e39\u0e3a\7\7\2\2\u0e3a\u0e3b\5\u03e2\u01f2\2\u0e3b\u0e3c\7"+
		"\b\2\2\u0e3c\u0e3e\3\2\2\2\u0e3d\u0e31\3\2\2\2\u0e3d\u0e37\3\2\2\2\u0e3e"+
		"\u01a3\3\2\2\2\u0e3f\u0e40\7\u0082\2\2\u0e40\u0e41\7\u0102\2\2\u0e41\u0e42"+
		"\7H\2\2\u0e42\u0e43\5\u01b2\u00da\2\u0e43\u0e44\7\u0180\2\2\u0e44\u0e45"+
		"\5\u0424\u0213\2\u0e45\u0e46\5d\63\2\u0e46\u0e52\3\2\2\2\u0e47\u0e48\7"+
		"\u0082\2\2\u0e48\u0e49\7\u0102\2\2\u0e49\u0e4a\7H\2\2\u0e4a\u0e4b\7\u00af"+
		"\2\2\u0e4b\u0e4c\7\u0090\2\2\u0e4c\u0e4d\5\u01b2\u00da\2\u0e4d\u0e4e\7"+
		"\u0180\2\2\u0e4e\u0e4f\5\u0424\u0213\2\u0e4f\u0e50\5d\63\2\u0e50\u0e52"+
		"\3\2\2\2\u0e51\u0e3f\3\2\2\2\u0e51\u0e47\3\2\2\2\u0e52\u01a5\3\2\2\2\u0e53"+
		"\u0e54\7\u0082\2\2\u0e54\u0e55\7\u0102\2\2\u0e55\u0e56\7\u0096\2\2\u0e56"+
		"\u0e57\5\u01b2\u00da\2\u0e57\u0e58\7\u0180\2\2\u0e58\u0e59\5\u0424\u0213"+
		"\2\u0e59\u0e5a\5d\63\2\u0e5a\u0e66\3\2\2\2\u0e5b\u0e5c\7\u0082\2\2\u0e5c"+
		"\u0e5d\7\u0102\2\2\u0e5d\u0e5e\7\u0096\2\2\u0e5e\u0e5f\7\u00af\2\2\u0e5f"+
		"\u0e60\7\u0090\2\2\u0e60\u0e61\5\u01b2\u00da\2\u0e61\u0e62\7\u0180\2\2"+
		"\u0e62\u0e63\5\u0424\u0213\2\u0e63\u0e64\5d\63\2\u0e64\u0e66\3\2\2\2\u0e65"+
		"\u0e53\3\2\2\2\u0e65\u0e5b\3\2\2\2\u0e66\u01a7\3\2\2\2\u0e67\u0e68\7\u0082"+
		"\2\2\u0e68\u0e69\7\u010c\2\2\u0e69\u0e6a\7:\2\2\u0e6a\u0e6b\5\u041e\u0210"+
		"\2\u0e6b\u0e6c\5d\63\2\u0e6c\u01a9\3\2\2\2\u0e6d\u0e6e\7\u0124\2\2\u0e6e"+
		"\u0e6f\7\u010c\2\2\u0e6f\u0e70\7:\2\2\u0e70\u0e71\5\u041e\u0210\2\u0e71"+
		"\u0e72\7\u016a\2\2\u0e72\u0e73\5\u0420\u0211\2\u0e73\u01ab\3\2\2\2\u0e74"+
		"\u0e75\7\u0082\2\2\u0e75\u0e76\5\u01ae\u00d8\2\u0e76\u0e77\7\u00af\2\2"+
		"\u0e77\u0e78\7\u0090\2\2\u0e78\u0e79\5\u01b0\u00d9\2\u0e79\u0e7a\5d\63"+
		"\2\u0e7a\u0e8f\3\2\2\2\u0e7b\u0e7c\7\u0082\2\2\u0e7c\u0e7d\5\u01ae\u00d8"+
		"\2\u0e7d\u0e7e\5\u01b0\u00d9\2\u0e7e\u0e7f\5d\63\2\u0e7f\u0e8f\3\2\2\2"+
		"\u0e80\u0e81\7\u0082\2\2\u0e81\u0e82\7\u00b7\2\2\u0e82\u0e83\7S\2\2\u0e83"+
		"\u0e84\5\u01b0\u00d9\2\u0e84\u0e85\5d\63\2\u0e85\u0e8f\3\2\2\2\u0e86\u0e87"+
		"\7\u0082\2\2\u0e87\u0e88\7\u00b7\2\2\u0e88\u0e89\7S\2\2\u0e89\u0e8a\7"+
		"\u00af\2\2\u0e8a\u0e8b\7\u0090\2\2\u0e8b\u0e8c\5\u01b0\u00d9\2\u0e8c\u0e8d"+
		"\5d\63\2\u0e8d\u0e8f\3\2\2\2\u0e8e\u0e74\3\2\2\2\u0e8e\u0e7b\3\2\2\2\u0e8e"+
		"\u0e80\3\2\2\2\u0e8e\u0e86\3\2\2\2\u0e8f\u01ad\3\2\2\2\u0e90\u0ea9\7\u0160"+
		"\2\2\u0e91\u0ea9\7\u0143\2\2\u0e92\u0ea9\7\u018c\2\2\u0e93\u0ea9\7\u00b7"+
		"\2\2\u0e94\u0e95\7\u009d\2\2\u0e95\u0ea9\7\u0160\2\2\u0e96\u0ea9\7\u0173"+
		"\2\2\u0e97\u0ea9\7\u0080\2\2\u0e98\u0ea9\7M\2\2\u0e99\u0ea9\7Z\2\2\u0e9a"+
		"\u0ea9\7\u013d\2\2\u0e9b\u0ea9\7\u0092\2\2\u0e9c\u0e9d\7\u0166\2\2\u0e9d"+
		"\u0e9e\7\u013f\2\2\u0e9e\u0ea9\7\u010e\2\2\u0e9f\u0ea0\7\u0166\2\2\u0ea0"+
		"\u0ea1\7\u013f\2\2\u0ea1\u0ea9\7z\2\2\u0ea2\u0ea3\7\u0166\2\2\u0ea3\u0ea4"+
		"\7\u013f\2\2\u0ea4\u0ea9\7\u0164\2\2\u0ea5\u0ea6\7\u0166\2\2\u0ea6\u0ea7"+
		"\7\u013f\2\2\u0ea7\u0ea9\7T\2\2\u0ea8\u0e90\3\2\2\2\u0ea8\u0e91\3\2\2"+
		"\2\u0ea8\u0e92\3\2\2\2\u0ea8\u0e93\3\2\2\2\u0ea8\u0e94\3\2\2\2\u0ea8\u0e96"+
		"\3\2\2\2\u0ea8\u0e97\3\2\2\2\u0ea8\u0e98\3\2\2\2\u0ea8\u0e99\3\2\2\2\u0ea8"+
		"\u0e9a\3\2\2\2\u0ea8\u0e9b\3\2\2\2\u0ea8\u0e9c\3\2\2\2\u0ea8\u0e9f\3\2"+
		"\2\2\u0ea8\u0ea2\3\2\2\2\u0ea8\u0ea5\3\2\2\2\u0ea9\u01af\3\2\2\2\u0eaa"+
		"\u0eab\b\u00d9\1\2\u0eab\u0eac\5\u01b2\u00da\2\u0eac\u0eb2\3\2\2\2\u0ead"+
		"\u0eae\f\4\2\2\u0eae\u0eaf\7\6\2\2\u0eaf\u0eb1\5\u01b2\u00da\2\u0eb0\u0ead"+
		"\3\2\2\2\u0eb1\u0eb4\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3"+
		"\u01b1\3\2\2\2\u0eb4\u0eb2\3\2\2\2\u0eb5\u0eb6\5\u0438\u021d\2\u0eb6\u0eb7"+
		"\5\u01b4\u00db\2\u0eb7\u0eba\3\2\2\2\u0eb8\u0eba\5\u0438\u021d\2\u0eb9"+
		"\u0eb5\3\2\2\2\u0eb9\u0eb8\3\2\2\2\u0eba\u01b3\3\2\2\2\u0ebb\u0ebc\b\u00db"+
		"\1\2\u0ebc\u0ebd\7\5\2\2\u0ebd\u0ebe\5\u0426\u0214\2\u0ebe\u0ec4\3\2\2"+
		"\2\u0ebf\u0ec0\f\3\2\2\u0ec0\u0ec1\7\5\2\2\u0ec1\u0ec3\5\u0426\u0214\2"+
		"\u0ec2\u0ebf\3\2\2\2\u0ec3\u0ec6\3\2\2\2\u0ec4\u0ec2\3\2\2\2\u0ec4\u0ec5"+
		"\3\2\2\2\u0ec5\u01b5\3\2\2\2\u0ec6\u0ec4\3\2\2\2\u0ec7\u0ec8\7\u0171\2"+
		"\2\u0ec8\u0ec9\5\u031c\u018f\2\u0ec9\u0eca\5\u0362\u01b2\2\u0eca\u0ecb"+
		"\5\u01b8\u00dd\2\u0ecb\u0ecc\5d\63\2\u0ecc\u01b7\3\2\2\2\u0ecd\u0ece\7"+
		"Y\2\2\u0ece\u0ed3\7\u00ae\2\2\u0ecf\u0ed0\7\u0131\2\2\u0ed0\u0ed3\7\u00ae"+
		"\2\2\u0ed1\u0ed3\3\2\2\2\u0ed2\u0ecd\3\2\2\2\u0ed2\u0ecf\3\2\2\2\u0ed2"+
		"\u0ed1\3\2\2\2\u0ed3\u01b9\3\2\2\2\u0ed4\u0ed5\7O\2\2\u0ed5\u0ed6\7\u0100"+
		"\2\2\u0ed6\u0ed7\7@\2\2\u0ed7\u0ed8\7\7\2\2\u0ed8\u0ed9\5\u0372\u01ba"+
		"\2\u0ed9\u0eda\7)\2\2\u0eda\u0edb\5\u0372\u01ba\2\u0edb\u0edc\7\b\2\2"+
		"\u0edc\u0edd\7\u00c9\2\2\u0edd\u0ede\5\u01be\u00e0\2\u0ede\u0f69\3\2\2"+
		"\2\u0edf\u0ee0\7O\2\2\u0ee0\u0ee1\7\u0100\2\2\u0ee1\u0ee2\5\u01bc\u00df"+
		"\2\u0ee2\u0ee3\5\u01b2\u00da\2\u0ee3\u0ee4\7\u00c9\2\2\u0ee4\u0ee5\5\u01be"+
		"\u00e0\2\u0ee5\u0f69\3\2\2\2\u0ee6\u0ee7\7O\2\2\u0ee7\u0ee8\7\u0100\2"+
		"\2\u0ee8\u0ee9\7\37\2\2\u0ee9\u0eea\5\u042c\u0217\2\u0eea\u0eeb\5\u0180"+
		"\u00c1\2\u0eeb\u0eec\7\u00c9\2\2\u0eec\u0eed\5\u01be\u00e0\2\u0eed\u0f69"+
		"\3\2\2\2\u0eee\u0eef\7O\2\2\u0eef\u0ef0\7\u0100\2\2\u0ef0\u0ef1\7\u00a2"+
		"\2\2\u0ef1\u0ef2\5\u042c\u0217\2\u0ef2\u0ef3\5\u0212\u010a\2\u0ef3\u0ef4"+
		"\7\u00c9\2\2\u0ef4\u0ef5\5\u01be\u00e0\2\u0ef5\u0f69\3\2\2\2\u0ef6\u0ef7"+
		"\7O\2\2\u0ef7\u0ef8\7\u0100\2\2\u0ef8\u0ef9\7\u0102\2\2\u0ef9\u0efa\5"+
		"\u0242\u0122\2\u0efa\u0efb\5\u0240\u0121\2\u0efb\u0efc\7\u00c9\2\2\u0efc"+
		"\u0efd\5\u01be\u00e0\2\u0efd\u0f69\3\2\2\2\u0efe\u0eff\7O\2\2\u0eff\u0f00"+
		"\7\u0100\2\2\u0f00\u0f01\7V\2\2\u0f01\u0f02\5\u0420\u0211\2\u0f02\u0f03"+
		"\7\u0100\2\2\u0f03\u0f04\5\u01b2\u00da\2\u0f04\u0f05\7\u00c9\2\2\u0f05"+
		"\u0f06\5\u01be\u00e0\2\u0f06\u0f69\3\2\2\2\u0f07\u0f08\7O\2\2\u0f08\u0f09"+
		"\7\u0100\2\2\u0f09\u0f0a\7\u013b\2\2\u0f0a\u0f0b\5\u0420\u0211\2\u0f0b"+
		"\u0f0c\7\u0100\2\2\u0f0c\u0f0d\5\u01b2\u00da\2\u0f0d\u0f0e\7\u00c9\2\2"+
		"\u0f0e\u0f0f\5\u01be\u00e0\2\u0f0f\u0f69\3\2\2\2\u0f10\u0f11\7O\2\2\u0f11"+
		"\u0f12\7\u0100\2\2\u0f12\u0f13\7\u016e\2\2\u0f13\u0f14\5\u0420\u0211\2"+
		"\u0f14\u0f15\7\u0100\2\2\u0f15\u0f16\5\u01b2\u00da\2\u0f16\u0f17\7\u00c9"+
		"\2\2\u0f17\u0f18\5\u01be\u00e0\2\u0f18\u0f69\3\2\2\2\u0f19\u0f1a\7O\2"+
		"\2\u0f1a\u0f1b\7\u0100\2\2\u0f1b\u0f1c\7\u0102\2\2\u0f1c\u0f1d\7H\2\2"+
		"\u0f1d\u0f1e\5\u01b2\u00da\2\u0f1e\u0f1f\7\u0180\2\2\u0f1f\u0f20\5\u0424"+
		"\u0213\2\u0f20\u0f21\7\u00c9\2\2\u0f21\u0f22\5\u01be\u00e0\2\u0f22\u0f69"+
		"\3\2\2\2\u0f23\u0f24\7O\2\2\u0f24\u0f25\7\u0100\2\2\u0f25\u0f26\7\u0102"+
		"\2\2\u0f26\u0f27\7\u0096\2\2\u0f27\u0f28\5\u01b2\u00da\2\u0f28\u0f29\7"+
		"\u0180\2\2\u0f29\u0f2a\5\u0424\u0213\2\u0f2a\u0f2b\7\u00c9\2\2\u0f2b\u0f2c"+
		"\5\u01be\u00e0\2\u0f2c\u0f69\3\2\2\2\u0f2d\u0f2e\7O\2\2\u0f2e\u0f2f\7"+
		"\u0100\2\2\u0f2f\u0f30\5\u0106\u0084\2\u0f30\u0f31\7\u00cf\2\2\u0f31\u0f32"+
		"\5\u01b2\u00da\2\u0f32\u0f33\7\u00c9\2\2\u0f33\u0f34\5\u01be\u00e0\2\u0f34"+
		"\u0f69\3\2\2\2\u0f35\u0f36\7O\2\2\u0f36\u0f37\7\u0100\2\2\u0f37\u0f38"+
		"\7\u013b\2\2\u0f38\u0f39\5\u0420\u0211\2\u0f39\u0f3a\7\u00c9\2\2\u0f3a"+
		"\u0f3b\5\u01be\u00e0\2\u0f3b\u0f69\3\2\2\2\u0f3c\u0f3d\7O\2\2\u0f3d\u0f3e"+
		"\7\u0100\2\2\u0f3e\u0f3f\7\u00d0\2\2\u0f3f\u0f40\7\u00fb\2\2\u0f40\u0f41"+
		"\5\u00f4{\2\u0f41\u0f42\7\u00c9\2\2\u0f42\u0f43\5\u01be\u00e0\2\u0f43"+
		"\u0f69\3\2\2\2\u0f44\u0f45\7O\2\2\u0f45\u0f46\7\u0100\2\2\u0f46\u0f47"+
		"\7\u0166\2\2\u0f47\u0f48\7\u013f\2\2\u0f48\u0f49\7\u010e\2\2\u0f49\u0f4a"+
		"\5\u01b2\u00da\2\u0f4a\u0f4b\7\u00c9\2\2\u0f4b\u0f4c\5\u01be\u00e0\2\u0f4c"+
		"\u0f69\3\2\2\2\u0f4d\u0f4e\7O\2\2\u0f4e\u0f4f\7\u0100\2\2\u0f4f\u0f50"+
		"\7\u0166\2\2\u0f50\u0f51\7\u013f\2\2\u0f51\u0f52\7z\2\2\u0f52\u0f53\5"+
		"\u01b2\u00da\2\u0f53\u0f54\7\u00c9\2\2\u0f54\u0f55\5\u01be\u00e0\2\u0f55"+
		"\u0f69\3\2\2\2\u0f56\u0f57\7O\2\2\u0f57\u0f58\7\u0100\2\2\u0f58\u0f59"+
		"\7\u0166\2\2\u0f59\u0f5a\7\u013f\2\2\u0f5a\u0f5b\7\u0164\2\2\u0f5b\u0f5c"+
		"\5\u01b2\u00da\2\u0f5c\u0f5d\7\u00c9\2\2\u0f5d\u0f5e\5\u01be\u00e0\2\u0f5e"+
		"\u0f69\3\2\2\2\u0f5f\u0f60\7O\2\2\u0f60\u0f61\7\u0100\2\2\u0f61\u0f62"+
		"\7\u0166\2\2\u0f62\u0f63\7\u013f\2\2\u0f63\u0f64\7T\2\2\u0f64\u0f65\5"+
		"\u01b2\u00da\2\u0f65\u0f66\7\u00c9\2\2\u0f66\u0f67\5\u01be\u00e0\2\u0f67"+
		"\u0f69\3\2\2\2\u0f68\u0ed4\3\2\2\2\u0f68\u0edf\3\2\2\2\u0f68\u0ee6\3\2"+
		"\2\2\u0f68\u0eee\3\2\2\2\u0f68\u0ef6\3\2\2\2\u0f68\u0efe\3\2\2\2\u0f68"+
		"\u0f07\3\2\2\2\u0f68\u0f10\3\2\2\2\u0f68\u0f19\3\2\2\2\u0f68\u0f23\3\2"+
		"\2\2\u0f68\u0f2d\3\2\2\2\u0f68\u0f35\3\2\2\2\u0f68\u0f3c\3\2\2\2\u0f68"+
		"\u0f44\3\2\2\2\u0f68\u0f4d\3\2\2\2\u0f68\u0f56\3\2\2\2\u0f68\u0f5f\3\2"+
		"\2\2\u0f69\u01bb\3\2\2\2\u0f6a\u0f7f\7N\2\2\u0f6b\u0f7f\7k\2\2\u0f6c\u0f7f"+
		"\7\u013d\2\2\u0f6d\u0f7f\7\u00b7\2\2\u0f6e\u0f7f\7\u0143\2\2\u0f6f\u0f7f"+
		"\7\u0160\2\2\u0f70\u0f7f\7\u0080\2\2\u0f71\u0f7f\7\u0173\2\2\u0f72\u0f7f"+
		"\7\u018c\2\2\u0f73\u0f7f\7M\2\2\u0f74\u0f7f\7Z\2\2\u0f75\u0f7f\7\u0162"+
		"\2\2\u0f76\u0f7f\7\u0092\2\2\u0f77\u0f7f\7\u0137\2\2\u0f78\u0f79\7\u009d"+
		"\2\2\u0f79\u0f7f\7\u0160\2\2\u0f7a\u0f7f\7\u0146\2\2\u0f7b\u0f7c\7\u009d"+
		"\2\2\u0f7c\u0f7d\7j\2\2\u0f7d\u0f7f\7\u0195\2\2\u0f7e\u0f6a\3\2\2\2\u0f7e"+
		"\u0f6b\3\2\2\2\u0f7e\u0f6c\3\2\2\2\u0f7e\u0f6d\3\2\2\2\u0f7e\u0f6e\3\2"+
		"\2\2\u0f7e\u0f6f\3\2\2\2\u0f7e\u0f70\3\2\2\2\u0f7e\u0f71\3\2\2\2\u0f7e"+
		"\u0f72\3\2\2\2\u0f7e\u0f73\3\2\2\2\u0f7e\u0f74\3\2\2\2\u0f7e\u0f75\3\2"+
		"\2\2\u0f7e\u0f76\3\2\2\2\u0f7e\u0f77\3\2\2\2\u0f7e\u0f78\3\2\2\2\u0f7e"+
		"\u0f7a\3\2\2\2\u0f7e\u0f7b\3\2\2\2\u0f7f\u01bd\3\2\2\2\u0f80\u0f83\5\u0432"+
		"\u021a\2\u0f81\u0f83\7\u00f7\2\2\u0f82\u0f80\3\2\2\2\u0f82\u0f81\3\2\2"+
		"\2\u0f83\u01bf\3\2\2\2\u0f84\u0f85\7\u0141\2\2\u0f85\u0f86\7\u00ce\2\2"+
		"\u0f86\u0f87\5\u01c2\u00e2\2\u0f87\u0f88\7\u0100\2\2\u0f88\u0f89\5\u01c4"+
		"\u00e3\2\u0f89\u0f8a\5\u01b2\u00da\2\u0f8a\u0f8b\7\u00c9\2\2\u0f8b\u0f8c"+
		"\5\u01c6\u00e4\2\u0f8c\u0fb6\3\2\2\2\u0f8d\u0f8e\7\u0141\2\2\u0f8e\u0f8f"+
		"\7\u00ce\2\2\u0f8f\u0f90\5\u01c2\u00e2\2\u0f90\u0f91\7\u0100\2\2\u0f91"+
		"\u0f92\7\37\2\2\u0f92\u0f93\5\u042c\u0217\2\u0f93\u0f94\5\u0180\u00c1"+
		"\2\u0f94\u0f95\7\u00c9\2\2\u0f95\u0f96\5\u01c6\u00e4\2\u0f96\u0fb6\3\2"+
		"\2\2\u0f97\u0f98\7\u0141\2\2\u0f98\u0f99\7\u00ce\2\2\u0f99\u0f9a\5\u01c2"+
		"\u00e2\2\u0f9a\u0f9b\7\u0100\2\2\u0f9b\u0f9c\7\u00a2\2\2\u0f9c\u0f9d\5"+
		"\u042c\u0217\2\u0f9d\u0f9e\5\u0212\u010a\2\u0f9e\u0f9f\7\u00c9\2\2\u0f9f"+
		"\u0fa0\5\u01c6\u00e4\2\u0fa0\u0fb6\3\2\2\2\u0fa1\u0fa2\7\u0141\2\2\u0fa2"+
		"\u0fa3\7\u00ce\2\2\u0fa3\u0fa4\5\u01c2\u00e2\2\u0fa4\u0fa5\7\u0100\2\2"+
		"\u0fa5\u0fa6\5\u0106\u0084\2\u0fa6\u0fa7\7\u00cf\2\2\u0fa7\u0fa8\5\u01b2"+
		"\u00da\2\u0fa8\u0fa9\7\u00c9\2\2\u0fa9\u0faa\5\u01c6\u00e4\2\u0faa\u0fb6"+
		"\3\2\2\2\u0fab\u0fac\7\u0141\2\2\u0fac\u0fad\7\u00ce\2\2\u0fad\u0fae\5"+
		"\u01c2\u00e2\2\u0fae\u0faf\7\u0100\2\2\u0faf\u0fb0\7\u00d0\2\2\u0fb0\u0fb1"+
		"\7\u00fb\2\2\u0fb1\u0fb2\5\u00f4{\2\u0fb2\u0fb3\7\u00c9\2\2\u0fb3\u0fb4"+
		"\5\u01c6\u00e4\2\u0fb4\u0fb6\3\2\2\2\u0fb5\u0f84\3\2\2\2\u0fb5\u0f8d\3"+
		"\2\2\2\u0fb5\u0f97\3\2\2\2\u0fb5\u0fa1\3\2\2\2\u0fb5\u0fab\3\2\2\2\u0fb6"+
		"\u01c1\3\2\2\2\u0fb7\u0fb8\7\u009b\2\2\u0fb8\u0fbb\5H%\2\u0fb9\u0fbb\3"+
		"\2\2\2\u0fba\u0fb7\3\2\2\2\u0fba\u0fb9\3\2\2\2\u0fbb\u01c3\3\2\2\2\u0fbc"+
		"\u0fc9\7N\2\2\u0fbd\u0fc9\7k\2\2\u0fbe\u0fbf\7\u009d\2\2\u0fbf\u0fc9\7"+
		"\u0160\2\2\u0fc0\u0fc9\7\u013d\2\2\u0fc1\u0fc9\7\u0143\2\2\u0fc2\u0fc9"+
		"\7\u0160\2\2\u0fc3\u0fc9\7\u0080\2\2\u0fc4\u0fc9\7\u0137\2\2\u0fc5\u0fc9"+
		"\7\u0162\2\2\u0fc6\u0fc9\7\u0173\2\2\u0fc7\u0fc9\7\u018c\2\2\u0fc8\u0fbc"+
		"\3\2\2\2\u0fc8\u0fbd\3\2\2\2\u0fc8\u0fbe\3\2\2\2\u0fc8\u0fc0\3\2\2\2\u0fc8"+
		"\u0fc1\3\2\2\2\u0fc8\u0fc2\3\2\2\2\u0fc8\u0fc3\3\2\2\2\u0fc8\u0fc4\3\2"+
		"\2\2\u0fc8\u0fc5\3\2\2\2\u0fc8\u0fc6\3\2\2\2\u0fc8\u0fc7\3\2\2\2\u0fc9"+
		"\u01c5\3\2\2\2\u0fca\u0fcd\5\u0432\u021a\2\u0fcb\u0fcd\7\u00f7\2\2\u0fcc"+
		"\u0fca\3\2\2\2\u0fcc\u0fcb\3\2\2\2\u0fcd\u01c7\3\2\2\2\u0fce\u0fcf\7\u0097"+
		"\2\2\u0fcf\u0fd3\5\u01ca\u00e6\2\u0fd0\u0fd1\7\u00e9\2\2\u0fd1\u0fd3\5"+
		"\u01ca\u00e6\2\u0fd2\u0fce\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd3\u01c9\3\2"+
		"\2\2\u0fd4\u0fd5\7\31\2\2\u0fd5\u0fd6\5\u0436\u021c\2\u0fd6\u0fd7\5\u01ce"+
		"\u00e8\2\u0fd7\u0fd8\5\u02fc\u017f\2\u0fd8\u1017\3\2\2\2\u0fd9\u0fda\7"+
		"\u012a\2\2\u0fda\u0fdb\5\u0436\u021c\2\u0fdb\u0fdc\5\u01ce\u00e8\2\u0fdc"+
		"\u0fdd\5\u02fc\u017f\2\u0fdd\u1017\3\2\2\2\u0fde\u0fdf\5\u0436\u021c\2"+
		"\u0fdf\u0fe0\5\u01ce\u00e8\2\u0fe0\u0fe1\5\u02fc\u017f\2\u0fe1\u1017\3"+
		"\2\2\2\u0fe2\u0fe3\7\u009e\2\2\u0fe3\u0fe4\5\u0436\u021c\2\u0fe4\u0fe5"+
		"\5\u01ce\u00e8\2\u0fe5\u0fe6\5\u02fc\u017f\2\u0fe6\u1017\3\2\2\2\u0fe7"+
		"\u0fe8\7\61\2\2\u0fe8\u0fe9\5\u0436\u021c\2\u0fe9\u0fea\5\u01ce\u00e8"+
		"\2\u0fea\u0feb\5\u02fc\u017f\2\u0feb\u1017\3\2\2\2\u0fec\u0fed\5\u01cc"+
		"\u00e7\2\u0fed\u0fee\5\u02fc\u017f\2\u0fee\u1017\3\2\2\2\u0fef\u0ff0\7"+
		"\u00ef\2\2\u0ff0\u0ff1\5\u01ce\u00e8\2\u0ff1\u0ff2\5\u02fc\u017f\2\u0ff2"+
		"\u1017\3\2\2\2\u0ff3\u0ff4\7\u011c\2\2\u0ff4\u0ff5\5\u01ce\u00e8\2\u0ff5"+
		"\u0ff6\5\u02fc\u017f\2\u0ff6\u1017\3\2\2\2\u0ff7\u0ff8\7\u0098\2\2\u0ff8"+
		"\u0ff9\5\u01ce\u00e8\2\u0ff9\u0ffa\5\u02fc\u017f\2\u0ffa\u1017\3\2\2\2"+
		"\u0ffb\u0ffc\7\u00d1\2\2\u0ffc\u0ffd\5\u01ce\u00e8\2\u0ffd\u0ffe\5\u02fc"+
		"\u017f\2\u0ffe\u1017\3\2\2\2\u0fff\u1000\7 \2\2\u1000\u1001\5\u01ce\u00e8"+
		"\2\u1001\u1002\5\u02fc\u017f\2\u1002\u1017\3\2\2\2\u1003\u1004\7\u009e"+
		"\2\2\u1004\u1005\5\u01ce\u00e8\2\u1005\u1006\5\u02fc\u017f\2\u1006\u1017"+
		"\3\2\2\2\u1007\u1008\7\u009e\2\2\u1008\u1009\7 \2\2\u1009\u100a\5\u01ce"+
		"\u00e8\2\u100a\u100b\5\u02fc\u017f\2\u100b\u1017\3\2\2\2\u100c\u100d\7"+
		"\61\2\2\u100d\u100e\5\u01ce\u00e8\2\u100e\u100f\5\u02fc\u017f\2\u100f"+
		"\u1017\3\2\2\2\u1010\u1011\7\61\2\2\u1011\u1012\7 \2\2\u1012\u1013\5\u01ce"+
		"\u00e8\2\u1013\u1014\5\u02fc\u017f\2\u1014\u1017\3\2\2\2\u1015\u1017\5"+
		"\u02fc\u017f\2\u1016\u0fd4\3\2\2\2\u1016\u0fd9\3\2\2\2\u1016\u0fde\3\2"+
		"\2\2\u1016\u0fe2\3\2\2\2\u1016\u0fe7\3\2\2\2\u1016\u0fec\3\2\2\2\u1016"+
		"\u0fef\3\2\2\2\u1016\u0ff3\3\2\2\2\u1016\u0ff7\3\2\2\2\u1016\u0ffb\3\2"+
		"\2\2\u1016\u0fff\3\2\2\2\u1016\u1003\3\2\2\2\u1016\u1007\3\2\2\2\u1016"+
		"\u100c\3\2\2\2\u1016\u1010\3\2\2\2\u1016\u1015\3\2\2\2\u1017\u01cb\3\2"+
		"\2\2\u1018\u1019\t\7\2\2\u1019\u01cd\3\2\2\2\u101a\u101d\5\u01cc\u00e7"+
		"\2\u101b\u101d\3\2\2\2\u101c\u101a\3\2\2\2\u101c\u101b\3\2\2\2\u101d\u01cf"+
		"\3\2\2\2\u101e\u101f\7\u00a5\2\2\u101f\u1020\5\u01d4\u00eb\2\u1020\u1021"+
		"\7\u0100\2\2\u1021\u1022\5\u01da\u00ee\2\u1022\u1023\7\u016a\2\2\u1023"+
		"\u1024\5\u01dc\u00ef\2\u1024\u1025\5\u01e0\u00f1\2\u1025\u01d1\3\2\2\2"+
		"\u1026\u1027\7\u0135\2\2\u1027\u1028\5\u01d4\u00eb\2\u1028\u1029\7\u0100"+
		"\2\2\u1029\u102a\5\u01da\u00ee\2\u102a\u102b\7\u00a0\2\2\u102b\u102c\5"+
		"\u01dc\u00ef\2\u102c\u102d\5d\63\2\u102d\u103a\3\2\2\2\u102e\u102f\7\u0135"+
		"\2\2\u102f\u1030\7\u00a5\2\2\u1030\u1031\7\u0103\2\2\u1031\u1032\7\u009b"+
		"\2\2\u1032\u1033\5\u01d4\u00eb\2\u1033\u1034\7\u0100\2\2\u1034\u1035\5"+
		"\u01da\u00ee\2\u1035\u1036\7\u00a0\2\2\u1036\u1037\5\u01dc\u00ef\2\u1037"+
		"\u1038\5d\63\2\u1038\u103a\3\2\2\2\u1039\u1026\3\2\2\2\u1039\u102e\3\2"+
		"\2\2\u103a\u01d3\3\2\2\2\u103b\u103c\7 \2\2\u103c\u103d\7\7\2\2\u103d"+
		"\u103e\5\u00c2b\2\u103e\u103f\7\b\2\2\u103f\u104b\3\2\2\2\u1040\u1041"+
		"\7 \2\2\u1041";
	private static final String _serializedATNSegment2 =
		"\u1042\7\u011d\2\2\u1042\u1043\7\7\2\2\u1043\u1044\5\u00c2b\2\u1044\u1045"+
		"\7\b\2\2\u1045\u104b\3\2\2\2\u1046\u104b\5\u01d6\u00ec\2\u1047\u104b\7"+
		" \2\2\u1048\u1049\7 \2\2\u1049\u104b\7\u011d\2\2\u104a\u103b\3\2\2\2\u104a"+
		"\u1040\3\2\2\2\u104a\u1046\3\2\2\2\u104a\u1047\3\2\2\2\u104a\u1048\3\2"+
		"\2\2\u104b\u01d5\3\2\2\2\u104c\u104d\b\u00ec\1\2\u104d\u104e\5\u01d8\u00ed"+
		"\2\u104e\u1054\3\2\2\2\u104f\u1050\f\4\2\2\u1050\u1051\7\6\2\2\u1051\u1053"+
		"\5\u01d8\u00ed\2\u1052\u104f\3\2\2\2\u1053\u1056\3\2\2\2\u1054\u1052\3"+
		"\2\2\2\u1054\u1055\3\2\2\2\u1055\u01d7\3\2\2\2\u1056\u1054\3\2\2\2\u1057"+
		"\u1058\5\u0438\u021d\2\u1058\u1059\5\u00c0a\2\u1059\u1061\3\2\2\2\u105a"+
		"\u105b\7\u0142\2\2\u105b\u1061\5\u00c0a\2\u105c\u105d\7\u0128\2\2\u105d"+
		"\u1061\5\u00c0a\2\u105e\u105f\7]\2\2\u105f\u1061\5\u00c0a\2\u1060\u1057"+
		"\3\2\2\2\u1060\u105a\3\2\2\2\u1060\u105c\3\2\2\2\u1060\u105e\3\2\2\2\u1061"+
		"\u01d9\3\2\2\2\u1062\u108f\5\u041a\u020e\2\u1063\u1064\7\u0160\2\2\u1064"+
		"\u108f\5\u041a\u020e\2\u1065\u1066\7\u0143\2\2\u1066\u108f\5\u041a\u020e"+
		"\2\u1067\u1068\7\u009d\2\2\u1068\u1069\7j\2\2\u1069\u106a\7\u0195\2\2"+
		"\u106a\u108f\5\u041e\u0210\2\u106b\u106c\7\u009d\2\2\u106c\u106d\7\u0146"+
		"\2\2\u106d\u108f\5\u041e\u0210\2\u106e\u106f\7\u00a2\2\2\u106f\u108f\5"+
		"\u01e2\u00f2\2\u1070\u1071\7k\2\2\u1071\u108f\5\u041e\u0210\2\u1072\u1073"+
		"\7\u0080\2\2\u1073\u108f\5\u01b0\u00d9\2\u1074\u1075\7\u00cf\2\2\u1075"+
		"\u108f\5\u041e\u0210\2\u1076\u1077\7\u00d0\2\2\u1077\u1078\7\u00fb\2\2"+
		"\u1078\u108f\5\u00f6|\2\u1079\u107a\7\u013d\2\2\u107a\u108f\5\u041e\u0210"+
		"\2\u107b\u107c\7\u0162\2\2\u107c\u108f\5\u041e\u0210\2\u107d\u107e\7\u0173"+
		"\2\2\u107e\u108f\5\u01b0\u00d9\2\u107f\u1080\7 \2\2\u1080\u1081\7\u0161"+
		"\2\2\u1081\u1082\7\u00b4\2\2\u1082\u1083\7\u013d\2\2\u1083\u108f\5\u041e"+
		"\u0210\2\u1084\u1085\7 \2\2\u1085\u1086\7\u0144\2\2\u1086\u1087\7\u00b4"+
		"\2\2\u1087\u1088\7\u013d\2\2\u1088\u108f\5\u041e\u0210\2\u1089\u108a\7"+
		" \2\2\u108a\u108b\7\u00a3\2\2\u108b\u108c\7\u00b4\2\2\u108c\u108d\7\u013d"+
		"\2\2\u108d\u108f\5\u041e\u0210\2\u108e\u1062\3\2\2\2\u108e\u1063\3\2\2"+
		"\2\u108e\u1065\3\2\2\2\u108e\u1067\3\2\2\2\u108e\u106b\3\2\2\2\u108e\u106e"+
		"\3\2\2\2\u108e\u1070\3\2\2\2\u108e\u1072\3\2\2\2\u108e\u1074\3\2\2\2\u108e"+
		"\u1076\3\2\2\2\u108e\u1079\3\2\2\2\u108e\u107b\3\2\2\2\u108e\u107d\3\2"+
		"\2\2\u108e\u107f\3\2\2\2\u108e\u1084\3\2\2\2\u108e\u1089\3\2\2\2\u108f"+
		"\u01db\3\2\2\2\u1090\u1091\b\u00ef\1\2\u1091\u1092\5\u01de\u00f0\2\u1092"+
		"\u1098\3\2\2\2\u1093\u1094\f\4\2\2\u1094\u1095\7\6\2\2\u1095\u1097\5\u01de"+
		"\u00f0\2\u1096\u1093\3\2\2\2\u1097\u109a\3\2\2\2\u1098\u1096\3\2\2\2\u1098"+
		"\u1099\3\2\2\2\u1099\u01dd\3\2\2\2\u109a\u1098\3\2\2\2\u109b\u109f\5\u0434"+
		"\u021b\2\u109c\u109d\7\u00a8\2\2\u109d\u109f\5\u0434\u021b\2\u109e\u109b"+
		"\3\2\2\2\u109e\u109c\3\2\2\2\u109f\u01df\3\2\2\2\u10a0\u10a1\7\u0192\2"+
		"\2\u10a1\u10a2\7\u00a5\2\2\u10a2\u10a5\7\u0103\2\2\u10a3\u10a5\3\2\2\2"+
		"\u10a4\u10a0\3\2\2\2\u10a4\u10a3\3\2\2\2\u10a5\u01e1\3\2\2\2\u10a6\u10a7"+
		"\b\u00f2\1\2\u10a7\u10a8\5\u01e4\u00f3\2\u10a8\u10ae\3\2\2\2\u10a9\u10aa"+
		"\f\4\2\2\u10aa\u10ab\7\6\2\2\u10ab\u10ad\5\u01e4\u00f3\2\u10ac\u10a9\3"+
		"\2\2\2\u10ad\u10b0\3\2\2\2\u10ae\u10ac\3\2\2\2\u10ae\u10af\3\2\2\2\u10af"+
		"\u01e3\3\2\2\2\u10b0\u10ae\3\2\2\2\u10b1\u10b2\5\u042c\u0217\2\u10b2\u10b3"+
		"\5\u0212\u010a\2\u10b3\u01e5\3\2\2\2\u10b4\u10b5\7\u00a5\2\2\u10b5\u10b6"+
		"\5\u01d6\u00ec\2\u10b6\u10b7\7\u016a\2\2\u10b7\u10b8\5\u041e\u0210\2\u10b8"+
		"\u10b9\5\u01ea\u00f6\2\u10b9\u10ba\5\u01ec\u00f7\2\u10ba\u01e7\3\2\2\2"+
		"\u10bb\u10bc\7\u0135\2\2\u10bc\u10bd\5\u01d6\u00ec\2\u10bd\u10be\7\u00a0"+
		"\2\2\u10be\u10bf\5\u041e\u0210\2\u10bf\u10c0\5\u01ec\u00f7\2\u10c0\u10c1"+
		"\5d\63\2\u10c1\u10cd\3\2\2\2\u10c2\u10c3\7\u0135\2\2\u10c3\u10c4\7\35"+
		"\2\2\u10c4\u10c5\7\u0103\2\2\u10c5\u10c6\7\u009b\2\2\u10c6\u10c7\5\u01d6"+
		"\u00ec\2\u10c7\u10c8\7\u00a0\2\2\u10c8\u10c9\5\u041e\u0210\2\u10c9\u10ca"+
		"\5\u01ec\u00f7\2\u10ca\u10cb\5d\63\2\u10cb\u10cd\3\2\2\2\u10cc\u10bb\3"+
		"\2\2\2\u10cc\u10c2\3\2\2\2\u10cd\u01e9\3\2\2\2\u10ce\u10cf\7\u0192\2\2"+
		"\u10cf\u10d0\7\35\2\2\u10d0\u10d3\7\u0103\2\2\u10d1\u10d3\3\2\2\2\u10d2"+
		"\u10ce\3\2\2\2\u10d2\u10d1\3\2\2\2\u10d3\u01eb\3\2\2\2\u10d4\u10d5\7\u00a6"+
		"\2\2\u10d5\u10d6\7:\2\2\u10d6\u10d9\5\u0434\u021b\2\u10d7\u10d9\3\2\2"+
		"\2\u10d8\u10d4\3\2\2\2\u10d8\u10d7\3\2\2\2\u10d9\u01ed\3\2\2\2\u10da\u10db"+
		"\7\"\2\2\u10db\u10dc\7q\2\2\u10dc\u10dd\7\u011d\2\2\u10dd\u10de\5\u01f0"+
		"\u00f9\2\u10de\u10df\5\u01f4\u00fb\2\u10df\u01ef\3\2\2\2\u10e0\u10e5\b"+
		"\u00f9\1\2\u10e1\u10e2\f\4\2\2\u10e2\u10e4\5\u01f2\u00fa\2\u10e3\u10e1"+
		"\3\2\2\2\u10e4\u10e7\3\2\2\2\u10e5\u10e3\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6"+
		"\u01f1\3\2\2\2\u10e7\u10e5\3\2\2\2\u10e8\u10e9\7\u00b4\2\2\u10e9\u10ea"+
		"\7\u013d\2\2\u10ea\u10f2\5\u041e\u0210\2\u10eb\u10ec\7\u009b\2\2\u10ec"+
		"\u10ed\7\u0137\2\2\u10ed\u10f2\5\u041e\u0210\2\u10ee\u10ef\7\u009b\2\2"+
		"\u10ef\u10f0\7\u017f\2\2\u10f0\u10f2\5\u041e\u0210\2\u10f1\u10e8\3\2\2"+
		"\2\u10f1\u10eb\3\2\2\2\u10f1\u10ee\3\2\2\2\u10f2\u01f3\3\2\2\2\u10f3\u10f4"+
		"\7\u00a5\2\2\u10f4\u10f5\5\u01d4\u00eb\2\u10f5\u10f6\7\u0100\2\2\u10f6"+
		"\u10f7\5\u01f6\u00fc\2\u10f7\u10f8\7\u016a\2\2\u10f8\u10f9\5\u01dc\u00ef"+
		"\2\u10f9\u10fa\5\u01e0\u00f1\2\u10fa\u110f\3\2\2\2\u10fb\u10fc\7\u0135"+
		"\2\2\u10fc\u10fd\5\u01d4\u00eb\2\u10fd\u10fe\7\u0100\2\2\u10fe\u10ff\5"+
		"\u01f6\u00fc\2\u10ff\u1100\7\u00a0\2\2\u1100\u1101\5\u01dc\u00ef\2\u1101"+
		"\u1102\5d\63\2\u1102\u110f\3\2\2\2\u1103\u1104\7\u0135\2\2\u1104\u1105"+
		"\7\u00a5\2\2\u1105\u1106\7\u0103\2\2\u1106\u1107\7\u009b\2\2\u1107\u1108"+
		"\5\u01d4\u00eb\2\u1108\u1109\7\u0100\2\2\u1109\u110a\5\u01f6\u00fc\2\u110a"+
		"\u110b\7\u00a0\2\2\u110b\u110c\5\u01dc\u00ef\2\u110c\u110d\5d\63\2\u110d"+
		"\u110f\3\2\2\2\u110e\u10f3\3\2\2\2\u110e\u10fb\3\2\2\2\u110e\u1103\3\2"+
		"\2\2\u110f\u01f5\3\2\2\2\u1110\u1111\t\b\2\2\u1111\u01f7\3\2\2\2\u1112"+
		"\u1113\7]\2\2\u1113\u1114\5\u01fa\u00fe\2\u1114\u1115\7\u00b7\2\2\u1115"+
		"\u1116\5\u01fc\u00ff\2\u1116\u1117\5\u01fe\u0100\2\u1117\u1118\7\u0100"+
		"\2\2\u1118\u1119\5\u041c\u020f\2\u1119\u111a\5\u0200\u0101\2\u111a\u111b"+
		"\7\7\2\2\u111b\u111c\5\u0202\u0102\2\u111c\u111d\7\b\2\2\u111d\u111e\5"+
		"l\67\2\u111e\u111f\5\u00dco\2\u111f\u1120\5\u0368\u01b5\2\u1120\u01f9"+
		"\3\2\2\2\u1121\u1124\7\u0179\2\2\u1122\u1124\3\2\2\2\u1123\u1121\3\2\2"+
		"\2\u1123\u1122\3\2\2\2\u1124\u01fb\3\2\2\2\u1125\u1128\7S\2\2\u1126\u1128"+
		"\3\2\2\2\u1127\u1125\3\2\2\2\u1127\u1126\3\2\2\2\u1128\u01fd\3\2\2\2\u1129"+
		"\u112c\5\u0428\u0215\2\u112a\u112c\3\2\2\2\u112b\u1129\3\2\2\2\u112b\u112a"+
		"\3\2\2\2\u112c\u01ff\3\2\2\2\u112d\u112e\7\u0180\2\2\u112e\u1131\5\u0424"+
		"\u0213\2\u112f\u1131\3\2\2\2\u1130\u112d\3\2\2\2\u1130\u112f\3\2\2\2\u1131"+
		"\u0201\3\2\2\2\u1132\u1133\b\u0102\1\2\u1133\u1134\5\u0204\u0103\2\u1134"+
		"\u113a\3\2\2\2\u1135\u1136\f\4\2\2\u1136\u1137\7\6\2\2\u1137\u1139\5\u0204"+
		"\u0103\2\u1138\u1135\3\2\2\2\u1139\u113c\3\2\2\2\u113a\u1138\3\2\2\2\u113a"+
		"\u113b\3\2\2\2\u113b\u0203\3\2\2\2\u113c\u113a\3\2\2\2\u113d\u113e\7\7"+
		"\2\2\u113e\u113f\5\u03a2\u01d2\2\u113f\u1140\7\b\2\2\u1140\u1141\5\u0206"+
		"\u0104\2\u1141\u1142\5\u0208\u0105\2\u1142\u1143\5\u020a\u0106\2\u1143"+
		"\u1144\5\u020c\u0107\2\u1144\u1152\3\2\2\2\u1145\u1146\5\u0438\u021d\2"+
		"\u1146\u1147\5\u0206\u0104\2\u1147\u1148\5\u0208\u0105\2\u1148\u1149\5"+
		"\u020a\u0106\2\u1149\u114a\5\u020c\u0107\2\u114a\u1152\3\2\2\2\u114b\u114c"+
		"\5\u03a8\u01d5\2\u114c\u114d\5\u0206\u0104\2\u114d\u114e\5\u0208\u0105"+
		"\2\u114e\u114f\5\u020a\u0106\2\u114f\u1150\5\u020c\u0107\2\u1150\u1152"+
		"\3\2\2\2\u1151\u113d\3\2\2\2\u1151\u1145\3\2\2\2\u1151\u114b\3\2\2\2\u1152"+
		"\u0205\3\2\2\2\u1153\u1154\7L\2\2\u1154\u1157\5\u01b2\u00da\2\u1155\u1157"+
		"\3\2\2\2\u1156\u1153\3\2\2\2\u1156\u1155\3\2\2\2\u1157\u0207\3\2\2\2\u1158"+
		"\u115d\5\u01b2\u00da\2\u1159\u115a\7\u0180\2\2\u115a\u115d\5\u01b2\u00da"+
		"\2\u115b\u115d\3\2\2\2\u115c\u1158\3\2\2\2\u115c\u1159\3\2\2\2\u115c\u115b"+
		"\3\2\2\2\u115d\u0209\3\2\2\2\u115e\u1162\7*\2\2\u115f\u1162\7y\2\2\u1160"+
		"\u1162\3\2\2\2\u1161\u115e\3\2\2\2\u1161\u115f\3\2\2\2\u1161\u1160\3\2"+
		"\2\2\u1162\u020b\3\2\2\2\u1163\u1167\7\25\2\2\u1164\u1167\7\26\2\2\u1165"+
		"\u1167\3\2\2\2\u1166\u1163\3\2\2\2\u1166\u1164\3\2\2\2\u1166\u1165\3\2"+
		"\2\2\u1167\u020d\3\2\2\2\u1168\u1169\7]\2\2\u1169\u116a\5\u0210\u0109"+
		"\2\u116a\u116b\7\u00a2\2\2\u116b\u116c\5\u042c\u0217\2\u116c\u116d\5\u0216"+
		"\u010c\2\u116d\u116e\7\u0134\2\2\u116e\u116f\7\u0160\2\2\u116f\u1170\7"+
		"\7\2\2\u1170\u1171\5\u0232\u011a\2\u1171\u1172\7\b\2\2\u1172\u1173\5\u0226"+
		"\u0114\2\u1173\u1174\5\u022e\u0118\2\u1174\u1188\3\2\2\2\u1175\u1176\7"+
		"]\2\2\u1176\u1177\5\u0210\u0109\2\u1177\u1178\7\u00a2\2\2\u1178\u1179"+
		"\5\u042c\u0217\2\u1179\u117a\5\u0216\u010c\2\u117a\u117b\7\u0134\2\2\u117b"+
		"\u117c\5\u0220\u0111\2\u117c\u117d\5\u0226\u0114\2\u117d\u117e\5\u022e"+
		"\u0118\2\u117e\u1188\3\2\2\2\u117f\u1180\7]\2\2\u1180\u1181\5\u0210\u0109"+
		"\2\u1181\u1182\7\u00a2\2\2\u1182\u1183\5\u042c\u0217\2\u1183\u1184\5\u0216"+
		"\u010c\2\u1184\u1185\5\u0226\u0114\2\u1185\u1186\5\u022e\u0118\2\u1186"+
		"\u1188\3\2\2\2\u1187\u1168\3\2\2\2\u1187\u1175\3\2\2\2\u1187\u117f\3\2"+
		"\2\2\u1188\u020f\3\2\2\2\u1189\u118a\7\u0105\2\2\u118a\u118d\7\u012e\2"+
		"\2\u118b\u118d\3\2\2\2\u118c\u1189\3\2\2\2\u118c\u118b\3\2\2\2\u118d\u0211"+
		"\3\2\2\2\u118e\u118f\7\7\2\2\u118f\u1195\7\b\2\2\u1190\u1191\7\7\2\2\u1191"+
		"\u1192\5\u0214\u010b\2\u1192\u1193\7\b\2\2\u1193\u1195\3\2\2\2\u1194\u118e"+
		"\3\2\2\2\u1194\u1190\3\2\2\2\u1195\u0213\3\2\2\2\u1196\u1197\b\u010b\1"+
		"\2\u1197\u1198\5\u021a\u010e\2\u1198\u119e\3\2\2\2\u1199\u119a\f\4\2\2"+
		"\u119a\u119b\7\6\2\2\u119b\u119d\5\u021a\u010e\2\u119c\u1199\3\2\2\2\u119d"+
		"\u11a0\3\2\2\2\u119e\u119c\3\2\2\2\u119e\u119f\3\2\2\2\u119f\u0215\3\2"+
		"\2\2\u11a0\u119e\3\2\2\2\u11a1\u11a2\7\7\2\2\u11a2\u11a8\7\b\2\2\u11a3"+
		"\u11a4\7\7\2\2\u11a4\u11a5\5\u0218\u010d\2\u11a5\u11a6\7\b\2\2\u11a6\u11a8"+
		"\3\2\2\2\u11a7\u11a1\3\2\2\2\u11a7\u11a3\3\2\2\2\u11a8\u0217\3\2\2\2\u11a9"+
		"\u11aa\b\u010d\1\2\u11aa\u11ab\5\u0224\u0113\2\u11ab\u11b1\3\2\2\2\u11ac"+
		"\u11ad\f\4\2\2\u11ad\u11ae\7\6\2\2\u11ae\u11b0\5\u0224\u0113\2\u11af\u11ac"+
		"\3\2\2\2\u11b0\u11b3\3\2\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2"+
		"\u0219\3\2\2\2\u11b3\u11b1\3\2\2\2\u11b4\u11b5\5\u021c\u010f\2\u11b5\u11b6"+
		"\5\u021e\u0110\2\u11b6\u11b7\5\u0222\u0112\2\u11b7\u11c4\3\2\2\2\u11b8"+
		"\u11b9\5\u021e\u0110\2\u11b9\u11ba\5\u021c\u010f\2\u11ba\u11bb\5\u0222"+
		"\u0112\2\u11bb\u11c4\3\2\2\2\u11bc\u11bd\5\u021e\u0110\2\u11bd\u11be\5"+
		"\u0222\u0112\2\u11be\u11c4\3\2\2\2\u11bf\u11c0\5\u021c\u010f\2\u11c0\u11c1"+
		"\5\u0222\u0112\2\u11c1\u11c4\3\2\2\2\u11c2\u11c4\5\u0222\u0112\2\u11c3"+
		"\u11b4\3\2\2\2\u11c3\u11b8\3\2\2\2\u11c3\u11bc\3\2\2\2\u11c3\u11bf\3\2"+
		"\2\2\u11c3\u11c2\3\2\2\2\u11c4\u021b\3\2\2\2\u11c5\u11cc\7\u00b4\2\2\u11c6"+
		"\u11cc\7\u0107\2\2\u11c7\u11cc\7\u00be\2\2\u11c8\u11c9\7\u00b4\2\2\u11c9"+
		"\u11cc\7\u0107\2\2\u11ca\u11cc\7\u0188\2\2\u11cb\u11c5\3\2\2\2\u11cb\u11c6"+
		"\3\2\2\2\u11cb\u11c7\3\2\2\2\u11cb\u11c8\3\2\2\2\u11cb\u11ca\3\2\2\2\u11cc"+
		"\u021d\3\2\2\2\u11cd\u11ce\5\u043a\u021e\2\u11ce\u021f\3\2\2\2\u11cf\u11d0"+
		"\5\u0222\u0112\2\u11d0\u0221\3\2\2\2\u11d1\u11d2\5\u043a\u021e\2\u11d2"+
		"\u11d3\5\u01b4\u00db\2\u11d3\u11d4\7\13\2\2\u11d4\u11d5\7\u0173\2\2\u11d5"+
		"\u11de\3\2\2\2\u11d6\u11d7\7\u014a\2\2\u11d7\u11d8\5\u043a\u021e\2\u11d8"+
		"\u11d9\5\u01b4\u00db\2\u11d9\u11da\7\13\2\2\u11da\u11db\7\u0173\2\2\u11db"+
		"\u11de\3\2\2\2\u11dc\u11de\5\u0372\u01ba\2\u11dd\u11d1\3\2\2\2\u11dd\u11d6"+
		"\3\2\2\2\u11dd\u11dc\3\2\2\2\u11de\u0223\3\2\2\2\u11df\u11e0\5\u021a\u010e"+
		"\2\u11e0\u11e1\7\4\2\2\u11e1\u11e2\5\u03a2\u01d2\2\u11e2\u11e9\3\2\2\2"+
		"\u11e3\u11e4\5\u021a\u010e\2\u11e4\u11e5\7q\2\2\u11e5\u11e6\5\u03a2\u01d2"+
		"\2\u11e6\u11e9\3\2\2\2\u11e7\u11e9\5\u021a\u010e\2\u11e8\u11df\3\2\2\2"+
		"\u11e8\u11e3\3\2\2\2\u11e8\u11e7\3\2\2\2\u11e9\u0225\3\2\2\2\u11ea\u11eb"+
		"\b\u0114\1\2\u11eb\u11ec\5\u022a\u0116\2\u11ec\u11f1\3\2\2\2\u11ed\u11ee"+
		"\f\4\2\2\u11ee\u11f0\5\u022a\u0116\2\u11ef\u11ed\3\2\2\2\u11f0\u11f3\3"+
		"\2\2\2\u11f1\u11ef\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u0227\3\2\2\2\u11f3"+
		"\u11f1\3\2\2\2\u11f4\u11f5\7\\\2\2\u11f5\u1214\5\u00f4{\2\u11f6\u11f7"+
		"\7\u013a\2\2\u11f7\u1214\5\u00f4{\2\u11f8\u1214\5N(\2\u11f9\u11fa\7<\2"+
		"\2\u11fa\u11fb\7\u0100\2\2\u11fb\u11fc\7\u00f7\2\2\u11fc\u1214\7\u00bf"+
		"\2\2\u11fd\u11fe\7\u0134\2\2\u11fe\u11ff\7\u00f7\2\2\u11ff\u1200\7\u0100"+
		"\2\2\u1200\u1201\7\u00f7\2\2\u1201\u1214\7\u00bf\2\2\u1202\u1214\7\u015a"+
		"\2\2\u1203\u1214\7\u00b2\2\2\u1204\u1214\7\u0152\2\2\u1205\u1214\7\u018d"+
		"\2\2\u1206\u1207\7\u0093\2\2\u1207\u1208\7\u0141\2\2\u1208\u1214\7u\2"+
		"\2\u1209\u120a\7\u0093\2\2\u120a\u120b\7\u0141\2\2\u120b\u1214\7\u00c8"+
		"\2\2\u120c\u120d\7\u0141\2\2\u120d\u1214\7u\2\2\u120e\u120f\7\u0141\2"+
		"\2\u120f\u1214\7\u00c8\2\2\u1210\u1214\7\u00d5\2\2\u1211\u1212\7\u00f2"+
		"\2\2\u1212\u1214\7\u00d5\2\2\u1213\u11f4\3\2\2\2\u1213\u11f6\3\2\2\2\u1213"+
		"\u11f8\3\2\2\2\u1213\u11f9\3\2\2\2\u1213\u11fd\3\2\2\2\u1213\u1202\3\2"+
		"\2\2\u1213\u1203\3\2\2\2\u1213\u1204\3\2\2\2\u1213\u1205\3\2\2\2\u1213"+
		"\u1206\3\2\2\2\u1213\u1209\3\2\2\2\u1213\u120c\3\2\2\2\u1213\u120e\3\2"+
		"\2\2\u1213\u1210\3\2\2\2\u1213\u1211\3\2\2\2\u1214\u0229\3\2\2\2\u1215"+
		"\u1216\7)\2\2\u1216\u121c\5\u022c\u0117\2\u1217\u1218\7\u00cf\2\2\u1218"+
		"\u121c\5H%\2\u1219\u121c\5\u0228\u0115\2\u121a\u121c\7\u0191\2\2\u121b"+
		"\u1215\3\2\2\2\u121b\u1217\3\2\2\2\u121b\u1219\3\2\2\2\u121b\u121a\3\2"+
		"\2\2\u121c\u022b\3\2\2\2\u121d\u121e\5\u0432\u021a\2\u121e\u121f\7\6\2"+
		"\2\u121f\u1220\5\u0432\u021a\2\u1220\u1223\3\2\2\2\u1221\u1223\5\u0432"+
		"\u021a\2\u1222\u121d\3\2\2\2\u1222\u1221\3\2\2\2\u1223\u022d\3\2\2\2\u1224"+
		"\u1225\7\u0192\2\2\u1225\u1228\5\u0178\u00bd\2\u1226\u1228\3\2\2\2\u1227"+
		"\u1224\3\2\2\2\u1227\u1226\3\2\2\2\u1228\u022f\3\2\2\2\u1229\u122a\5\u021e"+
		"\u0110\2\u122a\u122b\5\u0222\u0112\2\u122b\u0231\3\2\2\2\u122c\u122d\b"+
		"\u011a\1\2\u122d\u122e\5\u0230\u0119\2\u122e\u1234\3\2\2\2\u122f\u1230"+
		"\f\4\2\2\u1230\u1231\7\6\2\2\u1231\u1233\5\u0230\u0119\2\u1232\u122f\3"+
		"\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235\3\2\2\2\u1235"+
		"\u0233\3\2\2\2\u1236\u1234\3\2\2\2\u1237\u1238\7\"\2\2\u1238\u1239\7\u00a2"+
		"\2\2\u1239\u123a\5\u01e4\u00f3\2\u123a\u123b\5\u0236\u011c\2\u123b\u123c"+
		"\5\u0238\u011d\2\u123c\u0235\3\2\2\2\u123d\u123e\b\u011c\1\2\u123e\u123f"+
		"\5\u0228\u0115\2\u123f\u1244\3\2\2\2\u1240\u1241\f\4\2\2\u1241\u1243\5"+
		"\u0228\u0115\2\u1242\u1240\3\2\2\2\u1243\u1246\3\2\2\2\u1244\u1242\3\2"+
		"\2\2\u1244\u1245\3\2\2\2\u1245\u0237\3\2\2\2\u1246\u1244\3\2\2\2\u1247"+
		"\u124a\7\u0132\2\2\u1248\u124a\3\2\2\2\u1249\u1247\3\2\2\2\u1249\u1248"+
		"\3\2\2\2\u124a\u0239\3\2\2\2\u124b\u124c\7\u0082\2\2\u124c\u124d\7\u00a2"+
		"\2\2\u124d\u124e\5\u042c\u0217\2\u124e\u124f\5\u0212\u010a\2\u124f\u1250"+
		"\5d\63\2\u1250\u125a\3\2\2\2\u1251\u1252\7\u0082\2\2\u1252\u1253\7\u00a2"+
		"\2\2\u1253\u1254\7\u00af\2\2\u1254\u1255\7\u0090\2\2\u1255\u1256\5\u042c"+
		"\u0217\2\u1256\u1257\5\u0212\u010a\2\u1257\u1258\5d\63\2\u1258\u125a\3"+
		"\2\2\2\u1259\u124b\3\2\2\2\u1259\u1251\3\2\2\2\u125a\u023b\3\2\2\2\u125b"+
		"\u125c\7\u0082\2\2\u125c\u125d\7\37\2\2\u125d\u125e\5\u042c\u0217\2\u125e"+
		"\u125f\5\u0180\u00c1\2\u125f\u1260\5d\63\2\u1260\u126a\3\2\2\2\u1261\u1262"+
		"\7\u0082\2\2\u1262\u1263\7\37\2\2\u1263\u1264\7\u00af\2\2\u1264\u1265"+
		"\7\u0090\2\2\u1265\u1266\5\u042c\u0217\2\u1266\u1267\5\u0180\u00c1\2\u1267"+
		"\u1268\5d\63\2\u1268\u126a\3\2\2\2\u1269\u125b\3\2\2\2\u1269\u1261\3\2"+
		"\2\2\u126a\u023d\3\2\2\2\u126b\u126c\7\u0082\2\2\u126c\u126d\7\u0102\2"+
		"\2\u126d\u126e\5\u0242\u0122\2\u126e\u126f\5\u0240\u0121\2\u126f\u1270"+
		"\5d\63\2\u1270\u127a\3\2\2\2\u1271\u1272\7\u0082\2\2\u1272\u1273\7\u0102"+
		"\2\2\u1273\u1274\7\u00af\2\2\u1274\u1275\7\u0090\2\2\u1275\u1276\5\u0242"+
		"\u0122\2\u1276\u1277\5\u0240\u0121\2\u1277\u1278\5d\63\2\u1278\u127a\3"+
		"\2\2\2\u1279\u126b\3\2\2\2\u1279\u1271\3\2\2\2\u127a\u023f\3\2\2\2\u127b"+
		"\u127c\7\7\2\2\u127c\u127d\5\u0372\u01ba\2\u127d\u127e\7\b\2\2\u127e\u1292"+
		"\3\2\2\2\u127f\u1280\7\7\2\2\u1280\u1281\7\u00f1\2\2\u1281\u1282\7\6\2"+
		"\2\u1282\u1283\5\u0372\u01ba\2\u1283\u1284\7\b\2\2\u1284\u1292\3\2\2\2"+
		"\u1285\u1286\7\7\2\2\u1286\u1287\5\u0372\u01ba\2\u1287\u1288\7\6\2\2\u1288"+
		"\u1289\7\u00f1\2\2\u1289\u128a\7\b\2\2\u128a\u1292\3\2\2\2\u128b\u128c"+
		"\7\7\2\2\u128c\u128d\5\u0372\u01ba\2\u128d\u128e\7\6\2\2\u128e\u128f\5"+
		"\u0372\u01ba\2\u128f\u1290\7\b\2\2\u1290\u1292\3\2\2\2\u1291\u127b\3\2"+
		"\2\2\u1291\u127f\3\2\2\2\u1291\u1285\3\2\2\2\u1291\u128b\3\2\2\2\u1292"+
		"\u0241\3\2\2\2\u1293\u1294\5\u0438\u021d\2\u1294\u1295\7\5\2\2\u1295\u1296"+
		"\5\u0242\u0122\2\u1296\u1299\3\2\2\2\u1297\u1299\5\u03d2\u01ea\2\u1298"+
		"\u1293\3\2\2\2\u1298\u1297\3\2\2\2\u1299\u0243\3\2\2\2\u129a\u129b\7~"+
		"\2\2\u129b\u129c\5\u0246\u0124\2\u129c\u0245\3\2\2\2\u129d\u129e\b\u0124"+
		"\1\2\u129e\u129f\5\u0248\u0125\2\u129f\u12a4\3\2\2\2\u12a0\u12a1\f\4\2"+
		"\2\u12a1\u12a3\5\u0248\u0125\2\u12a2\u12a0\3\2\2\2\u12a3\u12a6\3\2\2\2"+
		"\u12a4\u12a2\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u0247\3\2\2\2\u12a6\u12a4"+
		"\3\2\2\2\u12a7\u12ab\5\u0432\u021a\2\u12a8\u12a9\7\u00cf\2\2\u12a9\u12ab"+
		"\5H%\2\u12aa\u12a7\3\2\2\2\u12aa\u12a8\3\2\2\2\u12ab\u0249\3\2\2\2\u12ac"+
		"\u12ad\7]\2\2\u12ad\u12ae\7@\2\2\u12ae\u12af\7\7\2\2\u12af\u12b0\5\u0372"+
		"\u01ba\2\u12b0\u12b1\7)\2\2\u12b1\u12b2\5\u0372\u01ba\2\u12b2\u12b3\7"+
		"\b\2\2\u12b3\u12b4\7\u0192\2\2\u12b4\u12b5\7\u00a2\2\2\u12b5\u12b6\5\u01e4"+
		"\u00f3\2\u12b6\u12b7\5\u024c\u0127\2\u12b7\u12cf\3\2\2\2\u12b8\u12b9\7"+
		"]\2\2\u12b9\u12ba\7@\2\2\u12ba\u12bb\7\7\2\2\u12bb\u12bc\5\u0372\u01ba"+
		"\2\u12bc\u12bd\7)\2\2\u12bd\u12be\5\u0372\u01ba\2\u12be\u12bf\7\b\2\2"+
		"\u12bf\u12c0\7\u0193\2\2\u12c0\u12c1\7\u00a2\2\2\u12c1\u12c2\5\u024c\u0127"+
		"\2\u12c2\u12cf\3\2\2\2\u12c3\u12c4\7]\2\2\u12c4\u12c5\7@\2\2\u12c5\u12c6"+
		"\7\7\2\2\u12c6\u12c7\5\u0372\u01ba\2\u12c7\u12c8\7)\2\2\u12c8\u12c9\5"+
		"\u0372\u01ba\2\u12c9\u12ca\7\b\2\2\u12ca\u12cb\7\u0192\2\2\u12cb\u12cc"+
		"\7\u00be\2\2\u12cc\u12cd\5\u024c\u0127\2\u12cd\u12cf\3\2\2\2\u12ce\u12ac"+
		"\3\2\2\2\u12ce\u12b8\3\2\2\2\u12ce\u12c3\3\2\2\2\u12cf\u024b\3\2\2\2\u12d0"+
		"\u12d1\7)\2\2\u12d1\u12d6\7\u00b3\2\2\u12d2\u12d3\7)\2\2\u12d3\u12d6\7"+
		",\2\2\u12d4\u12d6\3\2\2\2\u12d5\u12d0\3\2\2\2\u12d5\u12d2\3\2\2\2\u12d5"+
		"\u12d4\3\2\2\2\u12d6\u024d\3\2\2\2\u12d7\u12d8\7\u0082\2\2\u12d8\u12d9"+
		"\7@\2\2\u12d9\u12da\5\u0250\u0129\2\u12da\u12db\7\7\2\2\u12db\u12dc\5"+
		"\u0372\u01ba\2\u12dc\u12dd\7)\2\2\u12dd\u12de\5\u0372\u01ba\2\u12de\u12df"+
		"\7\b\2\2\u12df\u12e0\5d\63\2\u12e0\u024f\3\2\2\2\u12e1\u12e2\7\u00af\2"+
		"\2\u12e2\u12e5\7\u0090\2\2\u12e3\u12e5\3\2\2\2\u12e4\u12e1\3\2\2\2\u12e4"+
		"\u12e3\3\2\2\2\u12e5\u0251\3\2\2\2\u12e6\u12e7\7\u0129\2\2\u12e7\u12e8"+
		"\5\u0254\u012b\2\u12e8\u12e9\5\u041c\u020f\2\u12e9\u12ea\5\u0256\u012c"+
		"\2\u12ea\u12f6\3\2\2\2\u12eb\u12ec\7\u0129\2\2\u12ec\u12ed\7\u015f\2\2"+
		"\u12ed\u12ee\5\u0420\u0211\2\u12ee\u12ef\5\u0256\u012c\2\u12ef\u12f6\3"+
		"\2\2\2\u12f0\u12f1\7\u0129\2\2\u12f1\u12f2\7k\2\2\u12f2\u12f3\5\u0420"+
		"\u0211\2\u12f3\u12f4\5\u0256\u012c\2\u12f4\u12f6\3\2\2\2\u12f5\u12e6\3"+
		"\2\2\2\u12f5\u12eb\3\2\2\2\u12f5\u12f0\3\2\2\2\u12f6\u0253\3\2\2\2\u12f7"+
		"\u12f8\t\t\2\2\u12f8\u0255\3\2\2\2\u12f9\u12fc\7\u009c\2\2\u12fa\u12fc"+
		"\3\2\2\2\u12fb\u12f9\3\2\2\2\u12fb\u12fa\3\2\2\2\u12fc\u0257\3\2\2\2\u12fd"+
		"\u12fe\7\"\2\2\u12fe\u12ff\7\u0160\2\2\u12ff\u1300\5\u0360\u01b1\2\u1300"+
		"\u1301\7\u012c\2\2\u1301\u1302\5\u025a\u012e\2\u1302\u1303\5\u0420\u0211"+
		"\2\u1303\u1304\7\u016a\2\2\u1304\u1305\5\u0420\u0211\2\u1305\u1450\3\2"+
		"\2\2\u1306\u1307\7\"\2\2\u1307\u1308\7\u0160\2\2\u1308\u1309\7\u00af\2"+
		"\2\u1309\u130a\7\u0090\2\2\u130a\u130b\5\u0360\u01b1\2\u130b\u130c\7\u012c"+
		"\2\2\u130c\u130d\5\u025a\u012e\2\u130d\u130e\5\u0420\u0211\2\u130e\u130f"+
		"\7\u016a\2\2\u130f\u1310\5\u0420\u0211\2\u1310\u1450\3\2\2\2\u1311\u1312"+
		"\7\"\2\2\u1312\u1313\7\u009d\2\2\u1313\u1314\7\u0160\2\2\u1314\u1315\5"+
		"\u0360\u01b1\2\u1315\u1316\7\u012c\2\2\u1316\u1317\5\u025a\u012e\2\u1317"+
		"\u1318\5\u0420\u0211\2\u1318\u1319\7\u016a\2\2\u1319\u131a\5\u0420\u0211"+
		"\2\u131a\u1450\3\2\2\2\u131b\u131c\7\"\2\2\u131c\u131d\7\u009d\2\2\u131d"+
		"\u131e\7\u0160\2\2\u131e\u131f\7\u00af\2\2\u131f\u1320\7\u0090\2\2\u1320"+
		"\u1321\5\u0360\u01b1\2\u1321\u1322\7\u012c\2\2\u1322\u1323\5\u025a\u012e"+
		"\2\u1323\u1324\5\u0420\u0211\2\u1324\u1325\7\u016a\2\2\u1325\u1326\5\u0420"+
		"\u0211\2\u1326\u1450\3\2\2\2\u1327\u1328\7\"\2\2\u1328\u1329\7\u0173\2"+
		"\2\u1329\u132a\5\u01b2\u00da\2\u132a\u132b\7\u012c\2\2\u132b\u132c\7/"+
		"\2\2\u132c\u132d\5\u0420\u0211\2\u132d\u132e\7\u016a\2\2\u132e\u132f\5"+
		"\u0420\u0211\2\u132f\u1330\5d\63\2\u1330\u1450\3\2\2\2\u1331\u1332\7\""+
		"\2\2\u1332\u1333\7\37\2\2\u1333\u1334\5\u042c\u0217\2\u1334\u1335\5\u0180"+
		"\u00c1\2\u1335\u1336\7\u012c\2\2\u1336\u1337\7\u016a\2\2\u1337\u1338\5"+
		"\u0420\u0211\2\u1338\u1450\3\2\2\2\u1339\u133a\7\"\2\2\u133a\u133b\7\u0080"+
		"\2\2\u133b\u133c\5\u01b2\u00da\2\u133c\u133d\7\u012c\2\2\u133d\u133e\7"+
		"V\2\2\u133e\u133f\5\u0420\u0211\2\u133f\u1340\7\u016a\2\2\u1340\u1341"+
		"\5\u0420\u0211\2\u1341\u1450\3\2\2\2\u1342\u1343\7\"\2\2\u1343\u1344\5"+
		"\u0106\u0084\2\u1344\u1345\7\u00cf\2\2\u1345\u1346\5\u0420\u0211\2\u1346"+
		"\u1347\7\u012c\2\2\u1347\u1348\7\u016a\2\2\u1348\u1349\5\u0420\u0211\2"+
		"\u1349\u1450\3\2\2\2\u134a\u134b\7\"\2\2\u134b\u134c\7\u0102\2\2\u134c"+
		"\u134d\7H\2\2\u134d\u134e\5\u01b2\u00da\2\u134e\u134f\7\u0180\2\2\u134f"+
		"\u1350\5\u0424\u0213\2\u1350\u1351\7\u012c\2\2\u1351\u1352\7\u016a\2\2"+
		"\u1352\u1353\5\u0420\u0211\2\u1353\u1450\3\2\2\2\u1354\u1355\7\"\2\2\u1355"+
		"\u1356\7\u0102\2\2\u1356\u1357\7\u0096\2\2\u1357\u1358\5\u01b2\u00da\2"+
		"\u1358\u1359\7\u0180\2\2\u1359\u135a\5\u0424\u0213\2\u135a\u135b\7\u012c"+
		"\2\2\u135b\u135c\7\u016a\2\2\u135c\u135d\5\u0420\u0211\2\u135d\u1450\3"+
		"\2\2\2\u135e\u135f\7\"\2\2\u135f\u1360\7\u0160\2\2\u1360\u1361\5\u0360"+
		"\u01b1\2\u1361\u1362\7\u012c\2\2\u1362\u1363\7V\2\2\u1363\u1364\5\u0420"+
		"\u0211\2\u1364\u1365\7\u016a\2\2\u1365\u1366\5\u0420\u0211\2\u1366\u1450"+
		"\3\2\2\2\u1367\u1368\7\"\2\2\u1368\u1369\7\u016e\2\2\u1369\u136a\5\u0420"+
		"\u0211\2\u136a\u136b\7\u0100\2\2\u136b\u136c\5\u041c\u020f\2\u136c\u136d"+
		"\7\u012c\2\2\u136d\u136e\7\u016a\2\2\u136e\u136f\5\u0420\u0211\2\u136f"+
		"\u1450\3\2\2\2\u1370\u1371\7\"\2\2\u1371\u1372\7M\2\2\u1372\u1373\5\u01b2"+
		"\u00da\2\u1373\u1374\7\u012c\2\2\u1374\u1375\7\u016a\2\2\u1375\u1376\5"+
		"\u0420\u0211\2\u1376\u1450\3\2\2\2\u1377\u1378\7\"\2\2\u1378\u1379\7Z"+
		"\2\2\u1379\u137a\5\u01b2\u00da\2\u137a\u137b\7\u012c\2\2\u137b\u137c\7"+
		"\u016a\2\2\u137c\u137d\5\u0420\u0211\2\u137d\u1450\3\2\2\2\u137e\u137f"+
		"\7\"\2\2\u137f\u1380\7k\2\2\u1380\u1381\5\u0422\u0212\2\u1381\u1382\7"+
		"\u012c\2\2\u1382\u1383\7\u016a\2\2\u1383\u1384\5\u0422\u0212\2\u1384\u1450"+
		"\3\2\2\2\u1385\u1386\7\"\2\2\u1386\u1387\7\u0080\2\2\u1387\u1388\5\u01b2"+
		"\u00da\2\u1388\u1389\7\u012c\2\2\u1389\u138a\7\u016a\2\2\u138a\u138b\5"+
		"\u0420\u0211\2\u138b\u1450\3\2\2\2\u138c\u138d\7\"\2\2\u138d\u138e\7\u009d"+
		"\2\2\u138e\u138f\7j\2\2\u138f\u1390\7\u0195\2\2\u1390\u1391\5\u0420\u0211"+
		"\2\u1391\u1392\7\u012c\2\2\u1392\u1393\7\u016a\2\2\u1393\u1394\5\u0420"+
		"\u0211\2\u1394\u1450\3\2\2\2\u1395\u1396\7\"\2\2\u1396\u1397\7\u00a2\2"+
		"\2\u1397\u1398\5\u01e4\u00f3\2\u1398\u1399\7\u012c\2\2\u1399\u139a\7\u016a"+
		"\2\2\u139a\u139b\5\u0420\u0211\2\u139b\u1450\3\2\2\2\u139c\u139d\7\"\2"+
		"\2\u139d\u139e\7\u00a8\2\2\u139e\u139f\5\u0434\u021b\2\u139f\u13a0\7\u012c"+
		"\2\2\u13a0\u13a1\7\u016a\2\2\u13a1\u13a2\5\u0434\u021b\2\u13a2\u1450\3"+
		"\2\2\2\u13a3\u13a4\7\"\2\2\u13a4\u13a5\7\u013d\2\2\u13a5\u13a6\5\u0420"+
		"\u0211\2\u13a6\u13a7\7\u012c\2\2\u13a7\u13a8\7\u016a\2\2\u13a8\u13a9\5"+
		"\u0420\u0211\2\u13a9\u1450\3\2\2\2\u13aa\u13ab\7\"\2\2\u13ab\u13ac\7\u0146"+
		"\2\2\u13ac\u13ad\5\u0420\u0211\2\u13ad\u13ae\7\u012c\2\2\u13ae\u13af\7"+
		"\u016a\2\2\u13af\u13b0\5\u0420\u0211\2\u13b0\u1450\3\2\2\2\u13b1\u13b2"+
		"\7\"\2\2\u13b2\u13b3\7\u0160\2\2\u13b3\u13b4\5\u0360\u01b1\2\u13b4\u13b5"+
		"\7\u012c\2\2\u13b5\u13b6\7\u016a\2\2\u13b6\u13b7\5\u0420\u0211\2\u13b7"+
		"\u1450\3\2\2\2\u13b8\u13b9\7\"\2\2\u13b9\u13ba\7\u0160\2\2\u13ba\u13bb"+
		"\7\u00af\2\2\u13bb\u13bc\7\u0090\2\2\u13bc\u13bd\5\u0360\u01b1\2\u13bd"+
		"\u13be\7\u012c\2\2\u13be\u13bf\7\u016a\2\2\u13bf\u13c0\5\u0420\u0211\2"+
		"\u13c0\u1450\3\2\2\2\u13c1\u13c2\7\"\2\2\u13c2\u13c3\7\u0143\2\2\u13c3"+
		"\u13c4\5\u041c\u020f\2\u13c4\u13c5\7\u012c\2\2\u13c5\u13c6\7\u016a\2\2"+
		"\u13c6\u13c7\5\u0420\u0211\2\u13c7\u1450\3\2\2\2\u13c8\u13c9\7\"\2\2\u13c9"+
		"\u13ca\7\u0143\2\2\u13ca\u13cb\7\u00af\2\2\u13cb\u13cc\7\u0090\2\2\u13cc"+
		"\u13cd\5\u041c\u020f\2\u13cd\u13ce\7\u012c\2\2\u13ce\u13cf\7\u016a\2\2"+
		"\u13cf\u13d0\5\u0420\u0211\2\u13d0\u1450\3\2\2\2\u13d1\u13d2\7\"\2\2\u13d2"+
		"\u13d3\7\u018c\2\2\u13d3\u13d4\5\u041c\u020f\2\u13d4\u13d5\7\u012c\2\2"+
		"\u13d5\u13d6\7\u016a\2\2\u13d6\u13d7\5\u0420\u0211\2\u13d7\u1450\3\2\2"+
		"\2\u13d8\u13d9\7\"\2\2\u13d9\u13da\7\u018c\2\2\u13da\u13db\7\u00af\2\2"+
		"\u13db\u13dc\7\u0090\2\2\u13dc\u13dd\5\u041c\u020f\2\u13dd\u13de\7\u012c"+
		"\2\2\u13de\u13df\7\u016a\2\2\u13df\u13e0\5\u0420\u0211\2\u13e0\u1450\3"+
		"\2\2\2\u13e1\u13e2\7\"\2\2\u13e2\u13e3\7\u00b7\2\2\u13e3\u13e4\5\u041c"+
		"\u020f\2\u13e4\u13e5\7\u012c\2\2\u13e5\u13e6\7\u016a\2\2\u13e6\u13e7\5"+
		"\u0420\u0211\2\u13e7\u1450\3\2\2\2\u13e8\u13e9\7\"\2\2\u13e9\u13ea\7\u00b7"+
		"\2\2\u13ea\u13eb\7\u00af\2\2\u13eb\u13ec\7\u0090\2\2\u13ec\u13ed\5\u041c"+
		"\u020f\2\u13ed\u13ee\7\u012c\2\2\u13ee\u13ef\7\u016a\2\2\u13ef\u13f0\5"+
		"\u0420\u0211\2\u13f0\u1450\3\2\2\2\u13f1\u13f2\7\"\2\2\u13f2\u13f3\7\u009d"+
		"\2\2\u13f3\u13f4\7\u0160\2\2\u13f4\u13f5\5\u0360\u01b1\2\u13f5\u13f6\7"+
		"\u012c\2\2\u13f6\u13f7\7\u016a\2\2\u13f7\u13f8\5\u0420\u0211\2\u13f8\u1450"+
		"\3\2\2\2\u13f9\u13fa\7\"\2\2\u13fa\u13fb\7\u009d\2\2\u13fb\u13fc\7\u0160"+
		"\2\2\u13fc\u13fd\7\u00af\2\2\u13fd\u13fe\7\u0090\2\2\u13fe\u13ff\5\u0360"+
		"\u01b1\2\u13ff\u1400\7\u012c\2\2\u1400\u1401\7\u016a\2\2\u1401\u1402\5"+
		"\u0420\u0211\2\u1402\u1450\3\2\2\2\u1403\u1404\7\"\2\2\u1404\u1405\7\u0137"+
		"\2\2\u1405\u1406\5\u0434\u021b\2\u1406\u1407\7\u012c\2\2\u1407\u1408\7"+
		"\u016a\2\2\u1408\u1409\5\u0434\u021b\2\u1409\u1450\3\2\2\2\u140a\u140b"+
		"\7\"\2\2\u140b\u140c\7\u017f\2\2\u140c\u140d\5\u0434\u021b\2\u140d\u140e"+
		"\7\u012c\2\2\u140e\u140f\7\u016a\2\2\u140f\u1410\5\u0434\u021b\2\u1410"+
		"\u1450\3\2\2\2\u1411\u1412\7\"\2\2\u1412\u1413\7\u0162\2\2\u1413\u1414"+
		"\5\u0420\u0211\2\u1414\u1415\7\u012c\2\2\u1415\u1416\7\u016a\2\2\u1416"+
		"\u1417\5\u0420\u0211\2\u1417\u1450\3\2\2\2\u1418\u1419\7\"\2\2\u1419\u141a"+
		"\7\u0162\2\2\u141a\u141b\5\u0420\u0211\2\u141b\u141c\7\u0149\2\2\u141c"+
		"\u141d\5j\66\2\u141d\u1450\3\2\2\2\u141e\u141f\7\"\2\2\u141f\u1420\7\u0162"+
		"\2\2\u1420\u1421\5\u0420\u0211\2\u1421\u1422\7\u0130\2\2\u1422\u1423\5"+
		"j\66\2\u1423\u1450\3\2\2\2\u1424\u1425\7\"\2\2\u1425\u1426\7\u0166\2\2"+
		"\u1426\u1427\7\u013f\2\2\u1427\u1428\7\u010e\2\2\u1428\u1429\5\u01b2\u00da"+
		"\2\u1429\u142a\7\u012c\2\2\u142a\u142b\7\u016a\2\2\u142b\u142c\5\u0420"+
		"\u0211\2\u142c\u1450\3\2\2\2\u142d\u142e\7\"\2\2\u142e\u142f\7\u0166\2"+
		"\2\u142f\u1430\7\u013f\2\2\u1430\u1431\7z\2\2\u1431\u1432\5\u01b2\u00da"+
		"\2\u1432\u1433\7\u012c\2\2\u1433\u1434\7\u016a\2\2\u1434\u1435\5\u0420"+
		"\u0211\2\u1435\u1450\3\2\2\2\u1436\u1437\7\"\2\2\u1437\u1438\7\u0166\2"+
		"\2\u1438\u1439\7\u013f\2\2\u1439\u143a\7\u0164\2\2\u143a\u143b\5\u01b2"+
		"\u00da\2\u143b\u143c\7\u012c\2\2\u143c\u143d\7\u016a\2\2\u143d\u143e\5"+
		"\u0420\u0211\2\u143e\u1450\3\2\2\2\u143f\u1440\7\"\2\2\u1440\u1441\7\u0166"+
		"\2\2\u1441\u1442\7\u013f\2\2\u1442\u1443\7T\2\2\u1443\u1444\5\u01b2\u00da"+
		"\2\u1444\u1445\7\u012c\2\2\u1445\u1446\7\u016a\2\2\u1446\u1447\5\u0420"+
		"\u0211\2\u1447\u1450\3\2\2\2\u1448\u1449\7\"\2\2\u1449\u144a\7\u0173\2"+
		"\2\u144a\u144b\5\u01b2\u00da\2\u144b\u144c\7\u012c\2\2\u144c\u144d\7\u016a"+
		"\2\2\u144d\u144e\5\u0420\u0211\2\u144e\u1450\3\2\2\2\u144f\u12fd\3\2\2"+
		"\2\u144f\u1306\3\2\2\2\u144f\u1311\3\2\2\2\u144f\u131b\3\2\2\2\u144f\u1327"+
		"\3\2\2\2\u144f\u1331\3\2\2\2\u144f\u1339\3\2\2\2\u144f\u1342\3\2\2\2\u144f"+
		"\u134a\3\2\2\2\u144f\u1354\3\2\2\2\u144f\u135e\3\2\2\2\u144f\u1367\3\2"+
		"\2\2\u144f\u1370\3\2\2\2\u144f\u1377\3\2\2\2\u144f\u137e\3\2\2\2\u144f"+
		"\u1385\3\2\2\2\u144f\u138c\3\2\2\2\u144f\u1395\3\2\2\2\u144f\u139c\3\2"+
		"\2\2\u144f\u13a3\3\2\2\2\u144f\u13aa\3\2\2\2\u144f\u13b1\3\2\2\2\u144f"+
		"\u13b8\3\2\2\2\u144f\u13c1\3\2\2\2\u144f\u13c8\3\2\2\2\u144f\u13d1\3\2"+
		"\2\2\u144f\u13d8\3\2\2\2\u144f\u13e1\3\2\2\2\u144f\u13e8\3\2\2\2\u144f"+
		"\u13f1\3\2\2\2\u144f\u13f9\3\2\2\2\u144f\u1403\3\2\2\2\u144f\u140a\3\2"+
		"\2\2\u144f\u1411\3\2\2\2\u144f\u1418\3\2\2\2\u144f\u141e\3\2\2\2\u144f"+
		"\u1424\3\2\2\2\u144f\u142d\3\2\2\2\u144f\u1436\3\2\2\2\u144f\u143f\3\2"+
		"\2\2\u144f\u1448\3\2\2\2\u1450\u0259\3\2\2\2\u1451\u1454\7N\2\2\u1452"+
		"\u1454\3\2\2\2\u1453\u1451\3\2\2\2\u1453\u1452\3\2\2\2\u1454\u025b\3\2"+
		"\2\2\u1455\u1456\7\u0149\2\2\u1456\u1459\7j\2\2\u1457\u1459\3\2\2\2\u1458"+
		"\u1455\3\2\2\2\u1458\u1457\3\2\2\2\u1459\u025d\3\2\2\2\u145a\u145b\7\""+
		"\2\2\u145b\u145c\7\37\2\2\u145c\u145d\5\u042c\u0217\2\u145d\u145e\5\u0180"+
		"\u00c1\2\u145e\u145f\7\u0149\2\2\u145f\u1460\7\u013d\2\2\u1460\u1461\5"+
		"\u0420\u0211\2\u1461\u150f\3\2\2\2\u1462\u1463\7\"\2\2\u1463\u1464\7\u0102"+
		"\2\2\u1464\u1465\5\u0242\u0122\2\u1465\u1466\5\u0240\u0121\2\u1466\u1467"+
		"\7\u0149\2\2\u1467\u1468\7\u013d\2\2\u1468\u1469\5\u0420\u0211\2\u1469"+
		"\u150f\3\2\2\2\u146a\u146b\7\"\2\2\u146b\u146c\7\u0102\2\2\u146c\u146d"+
		"\7H\2\2\u146d\u146e\5\u01b2\u00da\2\u146e\u146f\7\u0180\2\2\u146f\u1470"+
		"\5\u0424\u0213\2\u1470\u1471\7\u0149\2\2\u1471\u1472\7\u013d\2\2\u1472"+
		"\u1473\5\u0420\u0211\2\u1473\u150f\3\2\2\2\u1474\u1475\7\"\2\2\u1475\u1476"+
		"\7\u0102\2\2\u1476\u1477\7\u0096\2\2\u1477\u1478\5\u01b2\u00da\2\u1478"+
		"\u1479\7\u0180\2\2\u1479\u147a\5\u0424\u0213\2\u147a\u147b\7\u0149\2\2"+
		"\u147b\u147c\7\u013d\2\2\u147c\u147d\5\u0420\u0211\2\u147d\u150f\3\2\2"+
		"\2\u147e\u147f\7\"\2\2\u147f\u1480\7M\2\2\u1480\u1481\5\u01b2\u00da\2"+
		"\u1481\u1482\7\u0149\2\2\u1482\u1483\7\u013d\2\2\u1483\u1484\5\u0420\u0211"+
		"\2\u1484\u150f\3\2\2\2\u1485\u1486\7\"\2\2\u1486\u1487\7Z\2\2\u1487\u1488"+
		"\5\u01b2\u00da\2\u1488\u1489\7\u0149\2\2\u1489\u148a\7\u013d\2\2\u148a"+
		"\u148b\5\u0420\u0211\2\u148b\u150f\3\2\2\2\u148c\u148d\7\"\2\2\u148d\u148e"+
		"\7\u0080\2\2\u148e\u148f\5\u01b2\u00da\2\u148f\u1490\7\u0149\2\2\u1490"+
		"\u1491\7\u013d\2\2\u1491\u1492\5\u0420\u0211\2\u1492\u150f\3\2\2\2\u1493"+
		"\u1494\7\"\2\2\u1494\u1495\7\u0092\2\2\u1495\u1496\5\u01b2\u00da\2\u1496"+
		"\u1497\7\u0149\2\2\u1497\u1498\7\u013d\2\2\u1498\u1499\5\u0420\u0211\2"+
		"\u1499\u150f\3\2\2\2\u149a\u149b\7\"\2\2\u149b\u149c\7\u00a2\2\2\u149c"+
		"\u149d\5\u01e4\u00f3\2\u149d\u149e\7\u0149\2\2\u149e\u149f\7\u013d\2\2"+
		"\u149f\u14a0\5\u0420\u0211\2\u14a0\u150f\3\2\2\2\u14a1\u14a2\7\"\2\2\u14a2"+
		"\u14a3\7\u0160\2\2\u14a3\u14a4\5\u0360\u01b1\2\u14a4\u14a5\7\u0149\2\2"+
		"\u14a5\u14a6\7\u013d\2\2\u14a6\u14a7\5\u0420\u0211\2\u14a7\u150f\3\2\2"+
		"\2\u14a8\u14a9\7\"\2\2\u14a9\u14aa\7\u0160\2\2\u14aa\u14ab\7\u00af\2\2"+
		"\u14ab\u14ac\7\u0090\2\2\u14ac\u14ad\5\u0360\u01b1\2\u14ad\u14ae\7\u0149"+
		"\2\2\u14ae\u14af\7\u013d\2\2\u14af\u14b0\5\u0420\u0211\2\u14b0\u150f\3"+
		"\2\2\2\u14b1\u14b2\7\"\2\2\u14b2\u14b3\7\u0166\2\2\u14b3\u14b4\7\u013f"+
		"\2\2\u14b4\u14b5\7\u010e\2\2\u14b5\u14b6\5\u01b2\u00da\2\u14b6\u14b7\7"+
		"\u0149\2\2\u14b7\u14b8\7\u013d\2\2\u14b8\u14b9\5\u0420\u0211\2\u14b9\u150f"+
		"\3\2\2\2\u14ba\u14bb\7\"\2\2\u14bb\u14bc\7\u0166\2\2\u14bc\u14bd\7\u013f"+
		"\2\2\u14bd\u14be\7z\2\2\u14be\u14bf\5\u01b2\u00da\2\u14bf\u14c0\7\u0149"+
		"\2\2\u14c0\u14c1\7\u013d\2\2\u14c1\u14c2\5\u0420\u0211\2\u14c2\u150f\3"+
		"\2\2\2\u14c3\u14c4\7\"\2\2\u14c4\u14c5\7\u0166\2\2\u14c5\u14c6\7\u013f"+
		"\2\2\u14c6\u14c7\7\u0164\2\2\u14c7\u14c8\5\u01b2\u00da\2\u14c8\u14c9\7"+
		"\u0149\2\2\u14c9\u14ca\7\u013d\2\2\u14ca\u14cb\5\u0420\u0211\2\u14cb\u150f"+
		"\3\2\2\2\u14cc\u14cd\7\"\2\2\u14cd\u14ce\7\u0166\2\2\u14ce\u14cf\7\u013f"+
		"\2\2\u14cf\u14d0\7T\2\2\u14d0\u14d1\5\u01b2\u00da\2\u14d1\u14d2\7\u0149"+
		"\2\2\u14d2\u14d3\7\u013d\2\2\u14d3\u14d4\5\u0420\u0211\2\u14d4\u150f\3"+
		"\2\2\2\u14d5\u14d6\7\"\2\2\u14d6\u14d7\7\u0143\2\2\u14d7\u14d8\5\u041c"+
		"\u020f\2\u14d8\u14d9\7\u0149\2\2\u14d9\u14da\7\u013d\2\2\u14da\u14db\5"+
		"\u0420\u0211\2\u14db\u150f\3\2\2\2\u14dc\u14dd\7\"\2\2\u14dd\u14de\7\u0143"+
		"\2\2\u14de\u14df\7\u00af\2\2\u14df\u14e0\7\u0090\2\2\u14e0\u14e1\5\u041c"+
		"\u020f\2\u14e1\u14e2\7\u0149\2\2\u14e2\u14e3\7\u013d\2\2\u14e3\u14e4\5"+
		"\u0420\u0211\2\u14e4\u150f\3\2\2\2\u14e5\u14e6\7\"\2\2\u14e6\u14e7\7\u018c"+
		"\2\2\u14e7\u14e8\5\u041c\u020f\2\u14e8\u14e9\7\u0149\2\2\u14e9\u14ea\7"+
		"\u013d\2\2\u14ea\u14eb\5\u0420\u0211\2\u14eb\u150f\3\2\2\2\u14ec\u14ed"+
		"\7\"\2\2\u14ed\u14ee\7\u018c\2\2\u14ee\u14ef\7\u00af\2\2\u14ef\u14f0\7"+
		"\u0090\2\2\u14f0\u14f1\5\u041c\u020f\2\u14f1\u14f2\7\u0149\2\2\u14f2\u14f3"+
		"\7\u013d\2\2\u14f3\u14f4\5\u0420\u0211\2\u14f4\u150f\3\2\2\2\u14f5\u14f6"+
		"\7\"\2\2\u14f6\u14f7\7\u009d\2\2\u14f7\u14f8\7\u0160\2\2\u14f8\u14f9\5"+
		"\u0360\u01b1\2\u14f9\u14fa\7\u0149\2\2\u14fa\u14fb\7\u013d\2\2\u14fb\u14fc"+
		"\5\u0420\u0211\2\u14fc\u150f\3\2\2\2\u14fd\u14fe\7\"\2\2\u14fe\u14ff\7"+
		"\u009d\2\2\u14ff\u1500\7\u0160\2\2\u1500\u1501\7\u00af\2\2\u1501\u1502"+
		"\7\u0090\2\2\u1502\u1503\5\u0360\u01b1\2\u1503\u1504\7\u0149\2\2\u1504"+
		"\u1505\7\u013d\2\2\u1505\u1506\5\u0420\u0211\2\u1506\u150f\3\2\2\2\u1507"+
		"\u1508\7\"\2\2\u1508\u1509\7\u0173\2\2\u1509\u150a\5\u01b2\u00da\2\u150a"+
		"\u150b\7\u0149\2\2\u150b\u150c\7\u013d\2\2\u150c\u150d\5\u0420\u0211\2"+
		"\u150d\u150f\3\2\2\2\u150e\u145a\3\2\2\2\u150e\u1462\3\2\2\2\u150e\u146a"+
		"\3\2\2\2\u150e\u1474\3\2\2\2\u150e\u147e\3\2\2\2\u150e\u1485\3\2\2\2\u150e"+
		"\u148c\3\2\2\2\u150e\u1493\3\2\2\2\u150e\u149a\3\2\2\2\u150e\u14a1\3\2"+
		"\2\2\u150e\u14a8\3\2\2\2\u150e\u14b1\3\2\2\2\u150e\u14ba\3\2\2\2\u150e"+
		"\u14c3\3\2\2\2\u150e\u14cc\3\2\2\2\u150e\u14d5\3\2\2\2\u150e\u14dc\3\2"+
		"\2\2\u150e\u14e5\3\2\2\2\u150e\u14ec\3\2\2\2\u150e\u14f5\3\2\2\2\u150e"+
		"\u14fd\3\2\2\2\u150e\u1507\3\2\2\2\u150f\u025f\3\2\2\2\u1510\u1511\7\""+
		"\2\2\u1511\u1512\7\37\2\2\u1512\u1513\5\u042c\u0217\2\u1513\u1514\5\u0180"+
		"\u00c1\2\u1514\u1515\7\u010d\2\2\u1515\u1516\7\u016a\2\2\u1516\u1517\5"+
		"\u0434\u021b\2\u1517\u159f\3\2\2\2\u1518\u1519\7\"\2\2\u1519\u151a\5\u0106"+
		"\u0084\2\u151a\u151b\7\u00cf\2\2\u151b\u151c\5\u0420\u0211\2\u151c\u151d"+
		"\7\u010d\2\2\u151d\u151e\7\u016a\2\2\u151e\u151f\5\u0434\u021b\2\u151f"+
		"\u159f\3\2\2\2\u1520\u1521\7\"\2\2\u1521\u1522\7\u0102\2\2\u1522\u1523"+
		"\5\u0242\u0122\2\u1523\u1524\5\u0240\u0121\2\u1524\u1525\7\u010d\2\2\u1525"+
		"\u1526\7\u016a\2\2\u1526\u1527\5\u0434\u021b\2\u1527\u159f\3\2\2\2\u1528"+
		"\u1529\7\"\2\2\u1529\u152a\7\u0102\2\2\u152a\u152b\7H\2\2\u152b\u152c"+
		"\5\u01b2\u00da\2\u152c\u152d\7\u0180\2\2\u152d\u152e\5\u0424\u0213\2\u152e"+
		"\u152f\7\u010d\2\2\u152f\u1530\7\u016a\2\2\u1530\u1531\5\u0434\u021b\2"+
		"\u1531\u159f\3\2\2\2\u1532\u1533\7\"\2\2\u1533\u1534\7\u0102\2\2\u1534"+
		"\u1535\7\u0096\2\2\u1535\u1536\5\u01b2\u00da\2\u1536\u1537\7\u0180\2\2"+
		"\u1537\u1538\5\u0424\u0213\2\u1538\u1539\7\u010d\2\2\u1539\u153a\7\u016a"+
		"\2\2\u153a\u153b\5\u0434\u021b\2\u153b\u159f\3\2\2\2\u153c\u153d\7\"\2"+
		"\2\u153d\u153e\7M\2\2\u153e\u153f\5\u01b2\u00da\2\u153f\u1540\7\u010d"+
		"\2\2\u1540\u1541\7\u016a\2\2\u1541\u1542\5\u0434\u021b\2\u1542\u159f\3"+
		"\2\2\2\u1543\u1544\7\"\2\2\u1544\u1545\7Z\2\2\u1545\u1546\5\u01b2\u00da"+
		"\2\u1546\u1547\7\u010d\2\2\u1547\u1548\7\u016a\2\2\u1548\u1549\5\u0434"+
		"\u021b\2\u1549\u159f\3\2\2\2\u154a\u154b\7\"\2\2\u154b\u154c\7k\2\2\u154c"+
		"\u154d\5\u0422\u0212\2\u154d\u154e\7\u010d\2\2\u154e\u154f\7\u016a\2\2"+
		"\u154f\u1550\5\u0434\u021b\2\u1550\u159f\3\2\2\2\u1551\u1552\7\"\2\2\u1552"+
		"\u1553\7\u0080\2\2\u1553\u1554\5\u01b2\u00da\2\u1554\u1555\7\u010d\2\2"+
		"\u1555\u1556\7\u016a\2\2\u1556\u1557\5\u0434\u021b\2\u1557\u159f\3\2\2"+
		"\2\u1558\u1559\7\"\2\2\u1559\u155a\7\u00a2\2\2\u155a\u155b\5\u01e4\u00f3"+
		"\2\u155b\u155c\7\u010d\2\2\u155c\u155d\7\u016a\2\2\u155d\u155e\5\u0434"+
		"\u021b\2\u155e\u159f\3\2\2\2\u155f\u1560\7\"\2\2\u1560\u1561\7\u00d0\2"+
		"\2\u1561\u1562\7\u00fb\2\2\u1562\u1563\5\u00f4{\2\u1563\u1564\7\u010d"+
		"\2\2\u1564\u1565\7\u016a\2\2\u1565\u1566\5\u0434\u021b\2\u1566\u159f\3"+
		"\2\2\2\u1567\u1568\7\"\2\2\u1568\u1569\7\u013d\2\2\u1569\u156a\5\u0420"+
		"\u0211\2\u156a\u156b\7\u010d\2\2\u156b\u156c\7\u016a\2\2\u156c\u156d\5"+
		"\u0434\u021b\2\u156d\u159f\3\2\2\2\u156e\u156f\7\"\2\2\u156f\u1570\7\u0173"+
		"\2\2\u1570\u1571\5\u01b2\u00da\2\u1571\u1572\7\u010d\2\2\u1572\u1573\7"+
		"\u016a\2\2\u1573\u1574\5\u0434\u021b\2\u1574\u159f\3\2\2\2\u1575\u1576"+
		"\7\"\2\2\u1576\u1577\7\u0162\2\2\u1577\u1578\5\u0420\u0211\2\u1578\u1579"+
		"\7\u010d\2\2\u1579\u157a\7\u016a\2\2\u157a\u157b\5\u0434\u021b\2\u157b"+
		"\u159f\3\2\2\2\u157c\u157d\7\"\2\2\u157d\u157e\7\u0166\2\2\u157e\u157f"+
		"\7\u013f\2\2\u157f\u1580\7z\2\2\u1580\u1581\5\u01b2\u00da\2\u1581\u1582"+
		"\7\u010d\2\2\u1582\u1583\7\u016a\2\2\u1583\u1584\5\u0434\u021b\2\u1584"+
		"\u159f\3\2\2\2\u1585\u1586\7\"\2\2\u1586\u1587\7\u0166\2\2\u1587\u1588"+
		"\7\u013f\2\2\u1588\u1589\7T\2\2\u1589\u158a\5\u01b2\u00da\2\u158a\u158b"+
		"\7\u010d\2\2\u158b\u158c\7\u016a\2\2\u158c\u158d\5\u0434\u021b\2\u158d"+
		"\u159f\3\2\2\2\u158e\u158f\7\"\2\2\u158f\u1590\7\u009d\2\2\u1590\u1591"+
		"\7j\2\2\u1591\u1592\7\u0195\2\2\u1592\u1593\5\u0420\u0211\2\u1593\u1594"+
		"\7\u010d\2\2\u1594\u1595\7\u016a\2\2\u1595\u1596\5\u0434\u021b\2\u1596"+
		"\u159f\3\2\2\2\u1597\u1598\7\"\2\2\u1598\u1599\7\u0146\2\2\u1599\u159a"+
		"\5\u0420\u0211\2\u159a\u159b\7\u010d\2\2\u159b\u159c\7\u016a\2\2\u159c"+
		"\u159d\5\u0434\u021b\2\u159d\u159f\3\2\2\2\u159e\u1510\3\2\2\2\u159e\u1518"+
		"\3\2\2\2\u159e\u1520\3\2\2\2\u159e\u1528\3\2\2\2\u159e\u1532\3\2\2\2\u159e"+
		"\u153c\3\2\2\2\u159e\u1543\3\2\2\2\u159e\u154a\3\2\2\2\u159e\u1551\3\2"+
		"\2\2\u159e\u1558\3\2\2\2\u159e\u155f\3\2\2\2\u159e\u1567\3\2\2\2\u159e"+
		"\u156e\3\2\2\2\u159e\u1575\3\2\2\2\u159e\u157c\3\2\2\2\u159e\u1585\3\2"+
		"\2\2\u159e\u158e\3\2\2\2\u159e\u1597\3\2\2\2\u159f\u0261\3\2\2\2\u15a0"+
		"\u15a1\7]\2\2\u15a1\u15a2\5\u0210\u0109\2\u15a2\u15a3\7\u013b\2\2\u15a3"+
		"\u15a4\5\u0420\u0211\2\u15a4\u15a5\7)\2\2\u15a5\u15a6\7\u0100\2\2\u15a6"+
		"\u15a7\5\u026c\u0137\2\u15a7\u15a8\7\u016a\2\2\u15a8\u15a9\5\u041c\u020f"+
		"\2\u15a9\u15aa\5\u0368\u01b5\2\u15aa\u15ab\7~\2\2\u15ab\u15ac\5\u026e"+
		"\u0138\2\u15ac\u15ad\5\u0264\u0133\2\u15ad\u0263\3\2\2\2\u15ae\u15af\7"+
		"\7\2\2\u15af\u15b0\5\u0266\u0134\2\u15b0\u15b1\7\b\2\2\u15b1\u15b5\3\2"+
		"\2\2\u15b2\u15b5\5\u0268\u0135\2\u15b3\u15b5\7\u00f3\2\2\u15b4\u15ae\3"+
		"\2\2\2\u15b4\u15b2\3\2\2\2\u15b4\u15b3\3\2\2\2\u15b5\u0265\3\2\2\2\u15b6"+
		"\u15b7\b\u0134\1\2\u15b7\u15b8\5\u026a\u0136\2\u15b8\u15be\3\2\2\2\u15b9"+
		"\u15ba\f\4\2\2\u15ba\u15bb\7\3\2\2\u15bb\u15bd\5\u026a\u0136\2\u15bc\u15b9"+
		"\3\2\2\2\u15bd\u15c0\3\2\2\2\u15be\u15bc\3\2\2\2\u15be\u15bf\3\2\2\2\u15bf"+
		"\u0267\3\2\2\2\u15c0\u15be\3\2\2\2\u15c1\u15c7\5\u0302\u0182\2\u15c2\u15c7"+
		"\5\u02d6\u016c\2\u15c3\u15c7\5\u02ec\u0177\2\u15c4\u15c7\5\u02e0\u0171"+
		"\2\u15c5\u15c7\5\u0272\u013a\2\u15c6\u15c1\3\2\2\2\u15c6\u15c2\3\2\2\2"+
		"\u15c6\u15c3\3\2\2\2\u15c6\u15c4\3\2\2\2\u15c6\u15c5\3\2\2\2\u15c7\u0269"+
		"\3\2\2\2\u15c8\u15cb\5\u0268\u0135\2\u15c9\u15cb\3\2\2\2\u15ca\u15c8\3"+
		"\2\2\2\u15ca\u15c9\3\2\2\2\u15cb\u026b\3\2\2\2\u15cc\u15cd\t\n\2\2\u15cd"+
		"\u026d\3\2\2\2\u15ce\u15d2\7\u00c2\2\2\u15cf\u15d2\7!\2\2\u15d0\u15d2"+
		"\3\2\2\2\u15d1\u15ce\3\2\2\2\u15d1\u15cf\3\2\2\2\u15d1\u15d0\3\2\2\2\u15d2"+
		"\u026f\3\2\2\2\u15d3\u15d4\7\u0082\2\2\u15d4\u15d5\7\u013b\2\2\u15d5\u15d6"+
		"\5\u0420\u0211\2\u15d6\u15d7\7\u0100\2\2\u15d7\u15d8\5\u01b2\u00da\2\u15d8"+
		"\u15d9\5d\63\2\u15d9\u15e4\3\2\2\2\u15da\u15db\7\u0082\2\2\u15db\u15dc"+
		"\7\u013b\2\2\u15dc\u15dd\7\u00af\2\2\u15dd\u15de\7\u0090\2\2\u15de\u15df"+
		"\5\u0420\u0211\2\u15df\u15e0\7\u0100\2\2\u15e0\u15e1\5\u01b2\u00da\2\u15e1"+
		"\u15e2\5d\63\2\u15e2\u15e4\3\2\2\2\u15e3\u15d3\3\2\2\2\u15e3\u15da\3\2"+
		"\2\2\u15e4\u0271\3\2\2\2\u15e5\u15e6\7\u00f4\2\2\u15e6\u15e7\5\u0438\u021d"+
		"\2\u15e7\u15e8\5\u0274\u013b\2\u15e8\u0273\3\2\2\2\u15e9\u15ea\7\6\2\2"+
		"\u15ea\u15ed\5\u0432\u021a\2\u15eb\u15ed\3\2\2\2\u15ec\u15e9\3\2\2\2\u15ec"+
		"\u15eb\3\2\2\2\u15ed\u0275\3\2\2\2\u15ee\u15ef\7\u00db\2\2\u15ef\u15f0"+
		"\5\u0438\u021d\2\u15f0\u0277\3\2\2\2\u15f1\u15f2\7\u017b\2\2\u15f2\u15f6"+
		"\7\t\2\2\u15f3\u15f4\7\u017b\2\2\u15f4\u15f6\5\u0438\u021d\2\u15f5\u15f1"+
		"\3\2\2\2\u15f5\u15f3\3\2\2\2\u15f6\u0279\3\2\2\2\u15f7\u15f8\7\63\2\2"+
		"\u15f8\u15f9\5\u027c\u013f\2\u15f9\u15fa\5\u0282\u0142\2\u15fa\u1622\3"+
		"\2\2\2\u15fb\u15fc\7\u0138\2\2\u15fc\u15fd\5\u027c\u013f\2\u15fd\u15fe"+
		"\7\u016a\2\2\u15fe\u15ff\7\u013c\2\2\u15ff\u1600\5\u0438\u021d\2\u1600"+
		"\u1622\3\2\2\2\u1601\u1602\7\u0138\2\2\u1602\u1603\5\u027c\u013f\2\u1603"+
		"\u1604\7\u016a\2\2\u1604\u1605\5\u0438\u021d\2\u1605\u1622\3\2\2\2\u1606"+
		"\u1607\7\30\2\2\u1607\u1622\5\u027c\u013f\2\u1608\u1609\7\u0154\2\2\u1609"+
		"\u160a\7\u016c\2\2\u160a\u1622\5\u0282\u0142\2\u160b\u160c\7Q\2\2\u160c"+
		"\u1622\5\u027c\u013f\2\u160d\u160e\7\u0088\2\2\u160e\u1622\5\u027c\u013f"+
		"\2\u160f\u1610\7\u0138\2\2\u1610\u1622\5\u027c\u013f\2\u1611\u1612\7\u013c"+
		"\2\2\u1612\u1622\5\u0438\u021d\2\u1613\u1614\7\u012b\2\2\u1614\u1615\7"+
		"\u013c\2\2\u1615\u1622\5\u0438\u021d\2\u1616\u1617\7\u012b\2\2\u1617\u1622"+
		"\5\u0438\u021d\2\u1618\u1619\7\u0118\2\2\u1619\u161a\7\u016c\2\2\u161a"+
		"\u1622\5\u0432\u021a\2\u161b\u161c\7Q\2\2\u161c\u161d\7\u0119\2\2\u161d"+
		"\u1622\5\u0432\u021a\2\u161e\u161f\7\u0138\2\2\u161f\u1620\7\u0119\2\2"+
		"\u1620\u1622\5\u0432\u021a\2\u1621\u15f7\3\2\2\2\u1621\u15fb\3\2\2\2\u1621"+
		"\u1601\3\2\2\2\u1621\u1606\3\2\2\2\u1621\u1608\3\2\2\2\u1621\u160b\3\2"+
		"\2\2\u1621\u160d\3\2\2\2\u1621\u160f\3\2\2\2\u1621\u1611\3\2\2\2\u1621"+
		"\u1613\3\2\2\2\u1621\u1616\3\2\2\2\u1621\u1618\3\2\2\2\u1621\u161b\3\2"+
		"\2\2\u1621\u161e\3\2\2\2\u1622\u027b\3\2\2\2\u1623\u1627\7\u0194\2\2\u1624"+
		"\u1627\7\u016c\2\2\u1625\u1627\3\2\2\2\u1626\u1623\3\2\2\2\u1626\u1624"+
		"\3\2\2\2\u1626\u1625\3\2\2\2\u1627\u027d\3\2\2\2\u1628\u1629\7\u00cb\2"+
		"\2\u1629\u162a\7\u00d8\2\2\u162a\u1633\5@!\2\u162b\u162c\7\u0122\2\2\u162c"+
		"\u1633\7\u0101\2\2\u162d\u162e\7\u0122\2\2\u162e\u1633\7\u0196\2\2\u162f"+
		"\u1633\7s\2\2\u1630\u1631\7\u00f2\2\2\u1631\u1633\7s\2\2\u1632\u1628\3"+
		"\2\2\2\u1632\u162b\3\2\2\2\u1632\u162d\3\2\2\2\u1632\u162f\3\2\2\2\u1632"+
		"\u1630\3\2\2\2\u1633\u027f\3\2\2\2\u1634\u1635\b\u0141\1\2\u1635\u1636"+
		"\5\u027e\u0140\2\u1636\u163e\3\2\2\2\u1637\u1638\f\5\2\2\u1638\u1639\7"+
		"\6\2\2\u1639\u163d\5\u027e\u0140\2\u163a\u163b\f\4\2\2\u163b\u163d\5\u027e"+
		"\u0140\2\u163c\u1637\3\2\2\2\u163c\u163a\3\2\2\2\u163d\u1640\3\2\2\2\u163e"+
		"\u163c\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u0281\3\2\2\2\u1640\u163e\3\2"+
		"\2\2\u1641\u1644\5\u0280\u0141\2\u1642\u1644\3\2\2\2\u1643\u1641\3\2\2"+
		"\2\u1643\u1642\3\2\2\2\u1644\u0283\3\2\2\2\u1645\u1646\7]\2\2\u1646\u1647"+
		"\5\u009aN\2\u1647\u1648\7\u018c\2\2\u1648\u1649\5\u041c\u020f\2\u1649"+
		"\u164a\5\u00c0a\2\u164a\u164b\5l\67\2\u164b\u164c\7)\2\2\u164c\u164d\5"+
		"\u0302\u0182\2\u164d\u164e\5\u0286\u0144\2\u164e\u165c\3\2\2\2\u164f\u1650"+
		"\7]\2\2\u1650\u1651\7\u0105\2\2\u1651\u1652\7\u012e\2\2\u1652\u1653\5"+
		"\u009aN\2\u1653\u1654\7\u018c\2\2\u1654\u1655\5\u041c\u020f\2\u1655\u1656"+
		"\5\u00c0a\2\u1656\u1657\5l\67\2\u1657\u1658\7)\2\2\u1658\u1659\5\u0302"+
		"\u0182\2\u1659\u165a\5\u0286\u0144\2\u165a\u165c\3\2\2\2\u165b\u1645\3"+
		"\2\2\2\u165b\u164f\3\2\2\2\u165c\u0285\3\2\2\2\u165d\u165e\7\u0192\2\2"+
		"\u165e\u165f\7F\2\2\u165f\u166a\7\u0103\2\2\u1660\u1661\7\u0192\2\2\u1661"+
		"\u1662\7>\2\2\u1662\u1663\7F\2\2\u1663\u166a\7\u0103\2\2\u1664\u1665\7"+
		"\u0192\2\2\u1665\u1666\7\u00dd\2\2\u1666\u1667\7F\2\2\u1667\u166a\7\u0103"+
		"\2\2\u1668\u166a\3\2\2\2\u1669\u165d\3\2\2\2\u1669\u1660\3\2\2\2\u1669"+
		"\u1664\3\2\2\2\u1669\u1668\3\2\2\2\u166a\u0287\3\2\2\2\u166b\u166c\7\u00dc"+
		"\2\2\u166c\u166d\5\u042a\u0216\2\u166d\u0289\3\2\2\2\u166e\u166f\7]\2"+
		"\2\u166f\u1670\7k\2\2\u1670\u1671\5\u0422\u0212\2\u1671\u1672\5\n\6\2"+
		"\u1672\u1673\5\u028c\u0147\2\u1673\u028b\3\2\2\2\u1674\u1679\b\u0147\1"+
		"\2\u1675\u1676\f\4\2\2\u1676\u1678\5\u028e\u0148\2\u1677\u1675\3\2\2\2"+
		"\u1678\u167b\3\2\2\2\u1679\u1677\3\2\2\2\u1679\u167a\3\2\2\2\u167a\u028d"+
		"\3\2\2\2\u167b\u1679\3\2\2\2\u167c\u167d\7\u0162\2\2\u167d\u167e\5\u0290"+
		"\u0149\2\u167e\u167f\5\u0420\u0211\2\u167f\u16be\3\2\2\2\u1680\u1681\7"+
		"\u00e0\2\2\u1681\u1682\5\u0290\u0149\2\u1682\u1683\5\u0432\u021a\2\u1683"+
		"\u16be\3\2\2\2\u1684\u1685\7\u0164\2\2\u1685\u1686\5\u0290\u0149\2\u1686"+
		"\u1687\5\u0420\u0211\2\u1687\u16be\3\2\2\2\u1688\u1689\7\u0086\2\2\u1689"+
		"\u168a\5\u0290\u0149\2\u168a\u168b\5\u0432\u021a\2\u168b\u16be\3\2\2\2"+
		"\u168c\u168d\7\u0086\2\2\u168d\u168e\5\u0290\u0149\2\u168e\u168f\5\u0430"+
		"\u0219\2\u168f\u16be\3\2\2\2\u1690\u1691\7\u00d2\2\2\u1691\u1692\5\u0290"+
		"\u0149\2\u1692\u1693\5\u0432\u021a\2\u1693\u16be\3\2\2\2\u1694\u1695\7"+
		"\u00d3\2\2\u1695\u1696\5\u0290\u0149\2\u1696\u1697\5\u0432\u021a\2\u1697"+
		"\u16be\3\2\2\2\u1698\u1699\7U\2\2\u1699\u169a\7\u00da\2\2\u169a\u169b"+
		"\5\u0290\u0149\2\u169b\u169c\5\u0436\u021c\2\u169c\u16be\3\2\2\2\u169d"+
		"\u169e\7\u010d\2\2\u169e\u169f\5\u0290\u0149\2\u169f\u16a0\5\u0420\u0211"+
		"\2\u16a0\u16be\3\2\2\2\u16a1\u16a2\7\u0162\2\2\u16a2\u16a3\5\u0290\u0149"+
		"\2\u16a3\u16a4\7q\2\2\u16a4\u16be\3\2\2\2\u16a5\u16a6\7\u00e0\2\2\u16a6"+
		"\u16a7\5\u0290\u0149\2\u16a7\u16a8\7q\2\2\u16a8\u16be\3\2\2\2\u16a9\u16aa"+
		"\7\u0164\2\2\u16aa\u16ab\5\u0290\u0149\2\u16ab\u16ac\7q\2\2\u16ac\u16be"+
		"\3\2\2\2\u16ad\u16ae\7\u0086\2\2\u16ae\u16af\5\u0290\u0149\2\u16af\u16b0"+
		"\7q\2\2\u16b0\u16be\3\2\2\2\u16b1\u16b2\7\u00d2\2\2\u16b2\u16b3\5\u0290"+
		"\u0149\2\u16b3\u16b4\7q\2\2\u16b4\u16be\3\2\2\2\u16b5\u16b6\7\u00d3\2"+
		"\2\u16b6\u16b7\5\u0290\u0149\2\u16b7\u16b8\7q\2\2\u16b8\u16be\3\2\2\2"+
		"\u16b9\u16ba\7\u010d\2\2\u16ba\u16bb\5\u0290\u0149\2\u16bb\u16bc\7q\2"+
		"\2\u16bc\u16be\3\2\2\2\u16bd\u167c\3\2\2\2\u16bd\u1680\3\2\2\2\u16bd\u1684"+
		"\3\2\2\2\u16bd\u1688\3\2\2\2\u16bd\u168c\3\2\2\2\u16bd\u1690\3\2\2\2\u16bd"+
		"\u1694\3\2\2\2\u16bd\u1698\3\2\2\2\u16bd\u169d\3\2\2\2\u16bd\u16a1\3\2"+
		"\2\2\u16bd\u16a5\3\2\2\2\u16bd\u16a9\3\2\2\2\u16bd\u16ad\3\2\2\2\u16bd"+
		"\u16b1\3\2\2\2\u16bd\u16b5\3\2\2\2\u16bd\u16b9\3\2\2\2\u16be\u028f\3\2"+
		"\2\2\u16bf\u16c2\7\4\2\2\u16c0\u16c2\3\2\2\2\u16c1\u16bf\3\2\2\2\u16c1"+
		"\u16c0\3\2\2\2\u16c2\u0291\3\2\2\2\u16c3\u16c4\7\"\2\2\u16c4\u16c5\7k"+
		"\2\2\u16c5\u16c6\5\u0422\u0212\2\u16c6\u16c7\5\n\6\2\u16c7\u16c8\5\u0296"+
		"\u014c\2\u16c8\u16d1\3\2\2\2\u16c9\u16ca\7\"\2\2\u16ca\u16cb\7k\2\2\u16cb"+
		"\u16cc\5\u0422\u0212\2\u16cc\u16cd\7\u0149\2\2\u16cd\u16ce\7\u0162\2\2"+
		"\u16ce\u16cf\5\u0420\u0211\2\u16cf\u16d1\3\2\2\2\u16d0\u16c3\3\2\2\2\u16d0"+
		"\u16c9\3\2\2\2\u16d1\u0293\3\2\2\2\u16d2\u16d3\7\"\2\2\u16d3\u16d4\7k"+
		"\2\2\u16d4\u16d5\5\u0422\u0212\2\u16d5\u16d6\5L\'\2\u16d6\u0295\3\2\2"+
		"\2\u16d7\u16dc\b\u014c\1\2\u16d8\u16d9\f\4\2\2\u16d9\u16db\5\u0298\u014d"+
		"\2\u16da\u16d8\3\2\2\2\u16db\u16de\3\2\2\2\u16dc\u16da\3\2\2\2\u16dc\u16dd"+
		"\3\2\2\2\u16dd\u0297\3\2\2\2\u16de\u16dc\3\2\2\2\u16df\u16e0\7U\2\2\u16e0"+
		"\u16e1\7\u00da\2\2\u16e1\u16e2\5\u0290\u0149\2\u16e2\u16e3\5\u0436\u021c"+
		"\2\u16e3\u0299\3\2\2\2\u16e4\u16e5\7\u0082\2\2\u16e5\u16e6\7k\2\2\u16e6"+
		"\u16ed\5\u0422\u0212\2\u16e7\u16e8\7\u0082\2\2\u16e8\u16e9\7k\2\2\u16e9"+
		"\u16ea\7\u00af\2\2\u16ea\u16eb\7\u0090\2\2\u16eb\u16ed\5\u0422\u0212\2"+
		"\u16ec\u16e4\3\2\2\2\u16ec\u16e7\3\2\2\2\u16ed\u029b\3\2\2\2\u16ee\u16ef"+
		"\7]\2\2\u16ef\u16f0\7\u0080\2\2\u16f0\u16f1\5\u01b2\u00da\2\u16f1\u16f2"+
		"\5\u02a0\u0151\2\u16f2\u16f3\5\u0372\u01ba\2\u16f3\u16f4\5\u00acW\2\u16f4"+
		"\u029d\3\2\2\2\u16f5\u16f6\7\"\2\2\u16f6\u16f7\7\u0080\2\2\u16f7\u16f8"+
		"\5\u01b2\u00da\2\u16f8\u16f9\7\u0082\2\2\u16f9\u16fa\7V\2\2\u16fa\u16fb"+
		"\5\u0420\u0211\2\u16fb\u16fc\5d\63\2\u16fc\u1728\3\2\2\2\u16fd\u16fe\7"+
		"\"\2\2\u16fe\u16ff\7\u0080\2\2\u16ff\u1700\5\u01b2\u00da\2\u1700\u1701"+
		"\7\u0082\2\2\u1701\u1702\7V\2\2\u1702\u1703\7\u00af\2\2\u1703\u1704\7"+
		"\u0090\2\2\u1704\u1705\5\u0420\u0211\2\u1705\u1706\5d\63\2\u1706\u1728"+
		"\3\2\2\2\u1707\u1708\7\"\2\2\u1708\u1709\7\u0080\2\2\u1709\u170a\5\u01b2"+
		"\u00da\2\u170a\u170b\5b\62\2\u170b\u1728\3\2\2\2\u170c\u170d\7\"\2\2\u170d"+
		"\u170e\7\u0080\2\2\u170e\u170f\5\u01b2\u00da\2\u170f\u1710\7\34\2\2\u1710"+
		"\u1711\5\u00ba^\2\u1711\u1728\3\2\2\2\u1712\u1713\7\"\2\2\u1713\u1714"+
		"\7\u0080\2\2\u1714\u1715\5\u01b2\u00da\2\u1715\u1716\7\u0183\2\2\u1716"+
		"\u1717\7V\2\2\u1717\u1718\5\u0420\u0211\2\u1718\u1728\3\2\2\2\u1719\u171a"+
		"\7\"\2\2\u171a\u171b\7\u0080\2\2\u171b\u171c\5\u01b2\u00da\2\u171c\u171d"+
		"\7\u0082\2\2\u171d\u171e\7\u00f2\2\2\u171e\u171f\7\u00f7\2\2\u171f\u1728"+
		"\3\2\2\2\u1720\u1721\7\"\2\2\u1721\u1722\7\u0080\2\2\u1722\u1723\5\u01b2"+
		"\u00da\2\u1723\u1724\7\u0149\2\2\u1724\u1725\7\u00f2\2\2\u1725\u1726\7"+
		"\u00f7\2\2\u1726\u1728\3\2\2\2\u1727\u16f5\3\2\2\2\u1727\u16fd\3\2\2\2"+
		"\u1727\u1707\3\2\2\2\u1727\u170c\3\2\2\2\u1727\u1712\3\2\2\2\u1727\u1719"+
		"\3\2\2\2\u1727\u1720\3\2\2\2\u1728\u029f\3\2\2\2\u1729\u172c\7)\2\2\u172a"+
		"\u172c\3\2\2\2\u172b\u1729\3\2\2\2\u172b\u172a\3\2\2\2\u172c\u02a1\3\2"+
		"\2\2\u172d\u172e\7\"\2\2\u172e\u172f\7\u0166\2\2\u172f\u1730\7\u013f\2"+
		"\2\u1730\u1731\7z\2\2\u1731\u1732\5\u01b2\u00da\2\u1732\u1733\5\u0178"+
		"\u00bd\2\u1733\u02a3\3\2\2\2\u1734\u1735\7\"\2\2\u1735\u1736\7\u0166\2"+
		"\2\u1736\u1737\7\u013f\2\2\u1737\u1738\7T\2\2\u1738\u1739\5\u01b2\u00da"+
		"\2\u1739\u173a\7\"\2\2\u173a\u173b\7\u00e2\2\2\u173b\u173c\7\u009b\2\2"+
		"\u173c\u173d\5\u041e\u0210\2\u173d\u173e\7\u012e\2\2\u173e\u173f\5\u01b2"+
		"\u00da\2\u173f\u1740\7\u0192\2\2\u1740\u1741\5\u01b2\u00da\2\u1741\u177d"+
		"\3\2\2\2\u1742\u1743\7\"\2\2\u1743\u1744\7\u0166\2\2\u1744\u1745\7\u013f"+
		"\2\2\u1745\u1746\7T\2\2\u1746\u1747\5\u01b2\u00da\2\u1747\u1748\7\34\2"+
		"\2\u1748\u1749\7\u00e2\2\2\u1749\u174a\7\u009b\2\2\u174a\u174b\5\u041e"+
		"\u0210\2\u174b\u174c\7\u0192\2\2\u174c\u174d\5\u01b0\u00d9\2\u174d\u177d"+
		"\3\2\2\2\u174e\u174f\7\"\2\2\u174f\u1750\7\u0166\2\2\u1750\u1751\7\u013f"+
		"\2\2\u1751\u1752\7T\2\2\u1752\u1753\5\u01b2\u00da\2\u1753\u1754\7\"\2"+
		"\2\u1754\u1755\7\u00e2\2\2\u1755\u1756\7\u009b\2\2\u1756\u1757\5\u041e"+
		"\u0210\2\u1757\u1758\7\u0192\2\2\u1758\u1759\5\u01b0\u00d9\2\u1759\u177d"+
		"\3\2\2\2\u175a\u175b\7\"\2\2\u175b\u175c\7\u0166\2\2\u175c\u175d\7\u013f"+
		"\2\2\u175d\u175e\7T\2\2\u175e\u175f\5\u01b2\u00da\2\u175f\u1760\7\"\2"+
		"\2\u1760\u1761\7\u00e2\2\2\u1761\u1762\7\u012e\2\2\u1762\u1763\5\u01b2"+
		"\u00da\2\u1763\u1764\7\u0192\2\2\u1764\u1765\5\u01b2\u00da\2\u1765\u177d"+
		"\3\2\2\2\u1766\u1767\7\"\2\2\u1767\u1768\7\u0166\2\2\u1768\u1769\7\u013f"+
		"\2\2\u1769\u176a\7T\2\2\u176a\u176b\5\u01b2\u00da\2\u176b\u176c\7\u0082"+
		"\2\2\u176c\u176d\7\u00e2\2\2\u176d\u176e\7\u009b\2\2\u176e\u176f\5\u041e"+
		"\u0210\2\u176f\u177d\3\2\2\2\u1770\u1771\7\"\2\2\u1771\u1772\7\u0166\2"+
		"\2\u1772\u1773\7\u013f\2\2\u1773\u1774\7T\2\2\u1774\u1775\5\u01b2\u00da"+
		"\2\u1775\u1776\7\u0082\2\2\u1776\u1777\7\u00e2\2\2\u1777\u1778\7\u00af"+
		"\2\2\u1778\u1779\7\u0090\2\2\u1779\u177a\7\u009b\2\2\u177a\u177b\5\u041e"+
		"\u0210\2\u177b\u177d\3\2\2\2\u177c\u1734\3\2\2\2\u177c\u1742\3\2\2\2\u177c"+
		"\u174e\3\2\2\2\u177c\u175a\3\2\2\2\u177c\u1766\3\2\2\2\u177c\u1770\3\2"+
		"\2\2\u177d\u02a5\3\2\2\2\u177e\u177f\7]\2\2\u177f\u1780\5\u0194\u00cb"+
		"\2\u1780\u1781\7Z\2\2\u1781\u1782\5\u01b2\u00da\2\u1782\u1783\7\u009b"+
		"\2\2\u1783\u1784\5\u0432\u021a\2\u1784\u1785\7\u016a\2\2\u1785\u1786\5"+
		"\u0432\u021a\2\u1786\u1787\7\u00a0\2\2\u1787\u1788\5\u01b2\u00da\2\u1788"+
		"\u02a7\3\2\2\2\u1789\u178a\7J\2\2\u178a\u178b\5\u02b6\u015c\2\u178b\u178c"+
		"\5\u041c\u020f\2\u178c\u178d\5\u02aa\u0156\2\u178d\u1797\3\2\2\2\u178e"+
		"\u178f\7J\2\2\u178f\u1790\5\u02b6\u015c\2\u1790\u1791\5\u0428\u0215\2"+
		"\u1791\u1792\7\u0100\2\2\u1792\u1793\5\u041c\u020f\2\u1793\u1797\3\2\2"+
		"\2\u1794\u1795\7J\2\2\u1795\u1797\5\u02b6\u015c\2\u1796\u1789\3\2\2\2"+
		"\u1796\u178e\3\2\2\2\u1796\u1794\3\2\2\2\u1797\u02a9\3\2\2\2\u1798\u1799"+
		"\7\u0180\2\2\u1799\u179c\5\u0428\u0215\2\u179a\u179c\3\2\2\2\u179b\u1798"+
		"\3\2\2\2\u179b\u179a\3\2\2\2\u179c\u02ab\3\2\2\2\u179d\u179e\7\u0181\2"+
		"\2\u179e\u179f\7\7\2\2\u179f\u17a0\5\u02ae\u0158\2\u17a0\u17a1\7\b\2\2"+
		"\u17a1\u17a2\5\u041c\u020f\2\u17a2\u17a3\5\u02bc\u015f\2\u17a3\u17bb\3"+
		"\2\2\2\u17a4\u17a5\7\u0181\2\2\u17a5\u17a6\7\7\2\2\u17a6\u17a7\5\u02ae"+
		"\u0158\2\u17a7\u17a8\7\b\2\2\u17a8\u17bb\3\2\2\2\u17a9\u17aa\7\u0181\2"+
		"\2\u17aa\u17ab\5\u02b8\u015d\2\u17ab\u17ac\5\u02ba\u015e\2\u17ac\u17ad"+
		"\5\u02b6\u015c\2\u17ad\u17ae\5\u041c\u020f\2\u17ae\u17bb\3\2\2\2\u17af"+
		"\u17b0\7\u0181\2\2\u17b0\u17b1\5\u02b8\u015d\2\u17b1\u17b2\5\u02ba\u015e"+
		"\2\u17b2\u17b3\5\u02b6\u015c\2\u17b3\u17b4\5\u02b2\u015a\2\u17b4\u17bb"+
		"\3\2\2\2\u17b5\u17b6\7\u0181\2\2\u17b6\u17b7\5\u02b8\u015d\2\u17b7\u17b8"+
		"\5\u02ba\u015e\2\u17b8\u17b9\5\u02b6\u015c\2\u17b9\u17bb\3\2\2\2\u17ba"+
		"\u179d\3\2\2\2\u17ba\u17a4\3\2\2\2\u17ba\u17a9\3\2\2\2\u17ba\u17af\3\2"+
		"\2\2\u17ba\u17b5\3\2\2\2\u17bb\u02ad\3\2\2\2\u17bc\u17bd\b\u0158\1\2\u17bd"+
		"\u17be\5\u02b0\u0159\2\u17be\u17c4\3\2\2\2\u17bf\u17c0\f\4\2\2\u17c0\u17c1"+
		"\7\6\2\2\u17c1\u17c3\5\u02b0\u0159\2\u17c2\u17bf\3\2\2\2\u17c3\u17c6\3"+
		"\2\2\2\u17c4\u17c2\3\2\2\2\u17c4\u17c5\3\2\2\2\u17c5\u02af\3\2\2\2\u17c6"+
		"\u17c4\3\2\2\2\u17c7\u17cc\5\u02b4\u015b\2\u17c8\u17cc\7\u018a\2\2\u17c9"+
		"\u17cc\7\u009f\2\2\u17ca\u17cc\7\u00a1\2\2\u17cb\u17c7\3\2\2\2\u17cb\u17c8"+
		"\3\2\2\2\u17cb\u17c9\3\2\2\2\u17cb\u17ca\3\2\2\2\u17cc\u02b1\3\2\2\2\u17cd"+
		"\u17ce\5\u02b4\u015b\2\u17ce\u17cf\5\u02b6\u015c\2\u17cf\u17d0\5\u041c"+
		"\u020f\2\u17d0\u17d1\5\u02bc\u015f\2\u17d1\u17d6\3\2\2\2\u17d2\u17d3\5"+
		"\u02b4\u015b\2\u17d3\u17d4\5\u02b6\u015c\2\u17d4\u17d6\3\2\2\2\u17d5\u17cd"+
		"\3\2\2\2\u17d5\u17d2\3\2\2\2\u17d6\u02b3\3\2\2\2\u17d7\u17d8\t\13\2\2"+
		"\u17d8\u02b5\3\2\2\2\u17d9\u17dc\7\u018a\2\2\u17da\u17dc\3\2\2\2\u17db"+
		"\u17d9\3\2\2\2\u17db\u17da\3\2\2\2\u17dc\u02b7\3\2\2\2\u17dd\u17e0\7\u00a1"+
		"\2\2\u17de\u17e0\3\2\2\2\u17df\u17dd\3\2\2\2\u17df\u17de\3\2\2\2\u17e0"+
		"\u02b9\3\2\2\2\u17e1\u17e4\7\u009f\2\2\u17e2\u17e4\3\2\2\2\u17e3\u17e1"+
		"\3\2\2\2\u17e3\u17e2\3\2\2\2\u17e4\u02bb\3\2\2\2\u17e5\u17e6\7\7\2\2\u17e6"+
		"\u17e7\5\u041e\u0210\2\u17e7\u17e8\7\b\2\2\u17e8\u17eb\3\2\2\2\u17e9\u17eb"+
		"\3\2\2\2\u17ea\u17e5\3\2\2\2\u17ea\u17e9\3\2\2\2\u17eb\u02bd\3\2\2\2\u17ec"+
		"\u17ed\7\u0091\2\2\u17ed\u17ee\7\7\2\2\u17ee\u17ef\5\u02c2\u0162\2\u17ef"+
		"\u17f0\7\b\2\2\u17f0\u17f1\5\u02c0\u0161\2\u17f1\u17fd\3\2\2\2\u17f2\u17f3"+
		"\7\u0091\2\2\u17f3\u17f4\5\u02b4\u015b\2\u17f4\u17f5\5\u02b6\u015c\2\u17f5"+
		"\u17f6\5\u02c0\u0161\2\u17f6\u17fd\3\2\2\2\u17f7\u17f8\7\u0091\2\2\u17f8"+
		"\u17fd\5\u02c0\u0161\2\u17f9\u17fa\7\u0091\2\2\u17fa\u17fb\7\u018a\2\2"+
		"\u17fb\u17fd\5\u02c0\u0161\2\u17fc\u17ec\3\2\2\2\u17fc\u17f2\3\2\2\2\u17fc"+
		"\u17f7\3\2\2\2\u17fc\u17f9\3\2\2\2\u17fd\u02bf\3\2\2\2\u17fe\u1806\5\u0302"+
		"\u0182\2\u17ff\u1806\5\u02d6\u016c\2\u1800\u1806\5\u02ec\u0177\2\u1801"+
		"\u1806\5\u02e0\u0171\2\u1802\u1806\5\u02fa\u017e\2\u1803\u1806\5\u00e2"+
		"r\2\u1804\u1806\5\u02d0\u0169\2\u1805\u17fe\3\2\2\2\u1805\u17ff\3\2\2"+
		"\2\u1805\u1800\3\2\2\2\u1805\u1801\3\2\2\2\u1805\u1802\3\2\2\2\u1805\u1803"+
		"\3\2\2\2\u1805\u1804\3\2\2\2\u1806\u02c1\3\2\2\2\u1807\u1808\b\u0162\1"+
		"\2\u1808\u1809\5\u02c4\u0163\2\u1809\u180f\3\2\2\2\u180a\u180b\f\4\2\2"+
		"\u180b\u180c\7\6\2\2\u180c\u180e\5\u02c4\u0163\2\u180d\u180a\3\2\2\2\u180e"+
		"\u1811\3\2\2\2\u180f\u180d\3\2\2\2\u180f\u1810\3\2\2\2\u1810\u02c3\3\2"+
		"\2\2\u1811\u180f\3\2\2\2\u1812\u1813\5\u02c6\u0164\2\u1813\u1814\5\u02c8"+
		"\u0165\2\u1814\u02c5\3\2\2\2\u1815\u1819\5\u0438\u021d\2\u1816\u1819\5"+
		"\u02b4\u015b\2\u1817\u1819\7\u018a\2\2\u1818\u1815\3\2\2\2\u1818\u1816"+
		"\3\2\2\2\u1818\u1817\3\2\2\2\u1819\u02c7\3\2\2\2\u181a\u181e\5B\"\2\u181b"+
		"\u181e\5\u00f4{\2\u181c\u181e\3\2\2\2\u181d\u181a\3\2\2\2\u181d\u181b"+
		"\3\2\2\2\u181d\u181c\3\2\2\2\u181e\u02c9\3\2\2\2\u181f\u1820\7\u0118\2"+
		"\2\u1820\u1821\5\u0420\u0211\2\u1821\u1822\5\u02cc\u0167\2\u1822\u1823"+
		"\7)\2\2\u1823\u1824\5\u02ce\u0168\2\u1824\u02cb\3\2\2\2\u1825\u1826\7"+
		"\7\2\2\u1826\u1827\5\u03e2\u01f2\2\u1827\u1828\7\b\2\2\u1828\u182b\3\2"+
		"\2\2\u1829\u182b\3\2\2\2\u182a\u1825\3\2\2\2\u182a\u1829\3\2\2\2\u182b"+
		"\u02cd\3\2\2\2\u182c\u1831\5\u0302\u0182\2\u182d\u1831\5\u02d6\u016c\2"+
		"\u182e\u1831\5\u02ec\u0177\2\u182f\u1831\5\u02e0\u0171\2\u1830\u182c\3"+
		"\2\2\2\u1830\u182d\3\2\2\2\u1830\u182e\3\2\2\2\u1830\u182f\3\2\2\2\u1831"+
		"\u02cf\3\2\2\2\u1832\u1833\7]\2\2\u1833\u1834\5\u009aN\2\u1834\u1835\7"+
		"\u0160\2\2\u1835\u1836\5\u00e4s\2\u1836\u1837\7)\2\2\u1837\u1838\7\u008f"+
		"\2\2\u1838\u1839\5\u0420\u0211\2\u1839\u183a\5\u02d2\u016a\2\u183a\u183b"+
		"\5\u00e6t\2\u183b\u1841\3\2\2\2\u183c\u183d\7\u008f\2\2\u183d\u183e\5"+
		"\u0420\u0211\2\u183e\u183f\5\u02d2\u016a\2\u183f\u1841\3\2\2\2\u1840\u1832"+
		"\3\2\2\2\u1840\u183c\3\2\2\2\u1841\u02d1\3\2\2\2\u1842\u1843\7\7\2\2\u1843"+
		"\u1844\5\u03dc\u01ef\2\u1844\u1845\7\b\2\2\u1845\u1848\3\2\2\2\u1846\u1848"+
		"\3\2\2\2\u1847\u1842\3\2\2\2\u1847\u1846\3\2\2\2\u1848\u02d3\3\2\2\2\u1849"+
		"\u184a\7m\2\2\u184a\u1854\5\u0420\u0211\2\u184b\u184c\7m\2\2\u184c\u184d"+
		"\7\u0118\2\2\u184d\u1854\5\u0420\u0211\2\u184e\u184f\7m\2\2\u184f\u1854"+
		"\7 \2\2\u1850\u1851\7m\2\2\u1851\u1852\7\u0118\2\2\u1852\u1854\7 \2\2"+
		"\u1853\u1849\3\2\2\2\u1853\u184b\3\2\2\2\u1853\u184e\3\2\2\2\u1853\u1850"+
		"\3\2\2\2\u1854\u02d5\3\2\2\2\u1855\u1856\5\u0312\u018a\2\u1856\u1857\7"+
		"\u00c1\2\2\u1857\u1858\7\u00c7\2\2\u1858\u1859\5\u041c\u020f\2\u1859\u185a"+
		"\5\u02d8\u016d\2\u185a\u185b\5\u02de\u0170\2\u185b\u02d7\3\2\2\2\u185c"+
		"\u185d\7\7\2\2\u185d\u185e\5\u02da\u016e\2\u185e\u185f\7\b\2\2\u185f\u1860"+
		"\5\u0302\u0182\2\u1860\u1865\3\2\2\2\u1861\u1865\5\u0302\u0182\2\u1862"+
		"\u1863\7q\2\2\u1863\u1865\7\u0186\2\2\u1864\u185c\3\2\2\2\u1864\u1861"+
		"\3\2\2\2\u1864\u1862\3\2\2\2\u1865\u02d9\3\2\2\2\u1866\u1867\b\u016e\1"+
		"\2\u1867\u1868\5\u02dc\u016f\2\u1868\u186e\3\2\2\2\u1869\u186a\f\4\2\2"+
		"\u186a\u186b\7\6\2\2\u186b\u186d\5\u02dc\u016f\2\u186c\u1869\3\2\2\2\u186d"+
		"\u1870\3\2\2\2\u186e\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u02db\3\2"+
		"\2\2\u1870\u186e\3\2\2\2\u1871\u1872\5\u0438\u021d\2\u1872\u1873\5\u040c"+
		"\u0207\2\u1873\u02dd\3\2\2\2\u1874\u1875\7\u0133\2\2\u1875\u1876\5\u0416"+
		"\u020c\2\u1876\u1877\5\u0314\u018b\2\u1877\u187a\3\2\2\2\u1878\u187a\3"+
		"\2\2\2\u1879\u1874\3\2\2\2\u1879\u1878\3\2\2\2\u187a\u02df\3\2\2\2\u187b"+
		"\u187c\5\u0312\u018a\2\u187c\u187d\7v\2\2\u187d\u187e\7\u00a0\2\2\u187e"+
		"\u187f\5\u0364\u01b3\2\u187f\u1880\5\u02e2\u0172\2\u1880\u1881\5\u036a"+
		"\u01b6\2\u1881\u1882\5\u02de\u0170\2\u1882\u1883\5\u0314\u018b\2\u1883"+
		"\u02e1\3\2\2\2\u1884\u1885\7\u0180\2\2\u1885\u1888\5\u0350\u01a9\2\u1886"+
		"\u1888\3\2\2\2\u1887\u1884\3\2\2\2\u1887\u1886\3\2\2\2\u1888\u02e3\3\2"+
		"\2\2\u1889\u188a\7\u00e1\2\2\u188a\u188b\5\u031c\u018f\2\u188b\u188c\5"+
		"\u0362\u01b2\2\u188c\u188d\5\u02e6\u0174\2\u188d\u188e\5\u02ea\u0176\2"+
		"\u188e\u02e5\3\2\2\2\u188f\u1890\7\u00b4\2\2\u1890\u1891\5\u02e8\u0175"+
		"\2\u1891\u1892\7\u00e7\2\2\u1892\u1895\3\2\2\2\u1893\u1895\3\2\2\2\u1894"+
		"\u188f\3\2\2\2\u1894\u1893\3\2\2\2\u1895\u02e7\3\2\2\2\u1896\u1897\7\32"+
		"\2\2\u1897\u18a7\7\u014b\2\2\u1898\u1899\7\u0139\2\2\u1899\u18a7\7\u014b"+
		"\2\2\u189a\u189b\7\u0139\2\2\u189b\u18a7\7\u008e\2\2\u189c\u189d\7\u014b"+
		"\2\2\u189d\u189e\7\u017e\2\2\u189e\u18a7\7\u008e\2\2\u189f\u18a7\7\u014b"+
		"\2\2\u18a0\u18a1\7\u014b\2\2\u18a1\u18a2\7\u0139\2\2\u18a2\u18a7\7\u008e"+
		"\2\2\u18a3\u18a7\7\u008e\2\2\u18a4\u18a5\7\32\2\2\u18a5\u18a7\7\u008e"+
		"\2\2\u18a6\u1896\3\2\2\2\u18a6\u1898\3\2\2\2\u18a6\u189a\3\2\2\2\u18a6"+
		"\u189c\3\2\2\2\u18a6\u189f\3\2\2\2\u18a6\u18a0\3\2\2\2\u18a6\u18a3\3\2"+
		"\2\2\u18a6\u18a4\3\2\2\2\u18a7\u02e9\3\2\2\2\u18a8\u18ab\7\u00f6\2\2\u18a9"+
		"\u18ab\3\2\2\2\u18aa\u18a8\3\2\2\2\u18aa\u18a9\3\2\2\2\u18ab\u02eb\3\2"+
		"\2\2\u18ac\u18ad\5\u0312\u018a\2\u18ad\u18ae\7\u017e\2\2\u18ae\u18af\5"+
		"\u0364\u01b3\2\u18af\u18b0\7\u0149\2\2\u18b0\u18b1\5\u02ee\u0178\2\u18b1"+
		"\u18b2\5\u034e\u01a8\2\u18b2\u18b3\5\u036a\u01b6\2\u18b3\u18b4\5\u02de"+
		"\u0170\2\u18b4\u18b5\5\u0314\u018b\2\u18b5\u02ed\3\2\2\2\u18b6\u18b7\b"+
		"\u0178\1\2\u18b7\u18b8\5\u02f0\u0179\2\u18b8\u18be\3\2\2\2\u18b9\u18ba"+
		"\f\4\2\2\u18ba\u18bb\7\6\2\2\u18bb\u18bd\5\u02f0\u0179\2\u18bc\u18b9\3"+
		"\2\2\2\u18bd\u18c0\3\2\2\2\u18be\u18bc\3\2\2\2\u18be\u18bf\3\2\2\2\u18bf"+
		"\u02ef\3\2\2\2\u18c0\u18be\3\2\2\2\u18c1\u18c4\5\u02f2\u017a\2\u18c2\u18c4"+
		"\5\u02f4\u017b\2\u18c3\u18c1\3\2\2\2\u18c3\u18c2\3\2\2\2\u18c4\u02f1\3"+
		"\2\2\2\u18c5\u18c6\5\u02f6\u017c\2\u18c6\u18c7\7\4\2\2\u18c7\u18c8\5\u0410"+
		"\u0209\2\u18c8\u02f3\3\2\2\2\u18c9\u18ca\7\7\2\2\u18ca\u18cb\5\u02f8\u017d"+
		"\2\u18cb\u18cc\7\b\2\2\u18cc\u18cd\7\4\2\2\u18cd\u18ce\5\u0414\u020b\2"+
		"\u18ce\u02f5\3\2\2\2\u18cf\u18d0\5\u0438\u021d\2\u18d0\u18d1\5\u040c\u0207"+
		"\2\u18d1\u02f7\3\2\2\2\u18d2\u18d3\b\u017d\1\2\u18d3\u18d4\5\u02f6\u017c"+
		"\2\u18d4\u18da\3\2\2\2\u18d5\u18d6\f\4\2\2\u18d6\u18d7\7\6\2\2\u18d7\u18d9"+
		"\5\u02f6\u017c\2\u18d8\u18d5\3\2\2\2\u18d9\u18dc\3\2\2\2\u18da\u18d8\3"+
		"\2\2\2\u18da\u18db\3\2\2\2\u18db\u02f9\3\2\2\2\u18dc\u18da\3\2\2\2\u18dd"+
		"\u18de\7p\2\2\u18de\u18df\5\u02fc\u017f\2\u18df\u18e0\5\u02fe\u0180\2"+
		"\u18e0\u18e1\7h\2\2\u18e1\u18e2\5\u0300\u0181\2\u18e2\u18e3\7\u009b\2"+
		"\2\u18e3\u18e4\5\u0302\u0182\2\u18e4\u02fb\3\2\2\2\u18e5\u18e6\5\u0420"+
		"\u0211\2\u18e6\u02fd\3\2\2\2\u18e7\u18f3\b\u0180\1\2\u18e8\u18e9\f\7\2"+
		"\2\u18e9\u18ea\7\u00f0\2\2\u18ea\u18f2\7\u013e\2\2\u18eb\u18ec\f\6\2\2"+
		"\u18ec\u18f2\7\u013e\2\2\u18ed\u18ee\f\5\2\2\u18ee\u18f2\7\66\2\2\u18ef"+
		"\u18f0\f\4\2\2\u18f0\u18f2\7\u00c0\2\2\u18f1\u18e8\3\2\2\2\u18f1\u18eb"+
		"\3\2\2\2\u18f1\u18ed\3\2\2\2\u18f1\u18ef\3\2\2\2\u18f2\u18f5\3\2\2\2\u18f3"+
		"\u18f1\3\2\2\2\u18f3\u18f4\3\2\2\2\u18f4\u02ff\3\2\2\2\u18f5\u18f3\3\2"+
		"\2\2\u18f6\u18fc\3\2\2\2\u18f7\u18f8\7\u0192\2\2\u18f8\u18fc\7\u00ac\2"+
		"\2\u18f9\u18fa\7\u0193\2\2\u18fa\u18fc\7\u00ac\2\2\u18fb\u18f6\3\2\2\2"+
		"\u18fb\u18f7\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fc\u0301\3\2\2\2\u18fd\u1900"+
		"\5\u0306\u0184\2\u18fe\u1900\5\u0304\u0183\2\u18ff\u18fd\3\2\2\2\u18ff"+
		"\u18fe\3\2\2\2\u1900\u0303\3\2\2\2\u1901\u1902\b\u0183\1\2\u1902\u1903"+
		"\7\7\2\2\u1903\u1904\5\u0306\u0184\2\u1904\u1905\7\b\2\2\u1905\u190b\3"+
		"\2\2\2\u1906\u1907\7\7\2\2\u1907\u1908\5\u0304\u0183\2\u1908\u1909\7\b"+
		"\2\2\u1909\u190b\3\2\2\2\u190a\u1901\3\2\2\2\u190a\u1906\3\2\2\2\u190b"+
		"\u191d\3\2\2\2\u190c\u190d\f\5\2\2\u190d\u190e\7\u0178\2\2\u190e\u190f"+
		"\5\u031e\u0190\2\u190f\u1910\5\u0308\u0185\2\u1910\u191c\3\2\2\2\u1911"+
		"\u1912\f\4\2\2\u1912\u1913\7\u00c5\2\2\u1913\u1914\5\u031e\u0190\2\u1914"+
		"\u1915\5\u0308\u0185\2\u1915\u191c\3\2\2\2\u1916\u1917\f\3\2\2\u1917\u1918"+
		"\7\u008b\2\2\u1918\u1919\5\u031e\u0190\2\u1919\u191a\5\u0308\u0185\2\u191a"+
		"\u191c\3\2\2\2\u191b\u190c\3\2\2\2\u191b\u1911\3\2\2\2\u191b\u1916\3\2"+
		"\2\2\u191c\u191f\3\2\2\2\u191d\u191b\3\2\2\2\u191d\u191e\3\2\2\2\u191e"+
		"\u0305\3\2\2\2\u191f\u191d\3\2\2\2\u1920\u1921\5\u030c\u0187\2\u1921\u1922"+
		"\5\u0308\u0185\2\u1922\u1923\5\u0322\u0192\2\u1923\u1924\5\u0342\u01a2"+
		"\2\u1924\u1925\5\u032c\u0197\2\u1925\u1926\5\u0314\u018b\2\u1926\u1945"+
		"\3\2\2\2\u1927\u1928\5\u030c\u0187\2\u1928\u1929\5\u0308\u0185\2\u1929"+
		"\u192a\5\u0322\u0192\2\u192a\u192b\5\u032a\u0196\2\u192b\u192c\5\u0344"+
		"\u01a3\2\u192c\u1945\3\2\2\2\u192d\u192e\5\u0308\u0185\2\u192e\u192f\5"+
		"\u0322\u0192\2\u192f\u1930\5\u0342\u01a2\2\u1930\u1931\5\u032c\u0197\2"+
		"\u1931\u1932\5\u0314\u018b\2\u1932\u1945\3\2\2\2\u1933\u1934\5\u0308\u0185"+
		"\2\u1934\u1935\5\u0322\u0192\2\u1935\u1936\5\u032a\u0196\2\u1936\u1937"+
		"\5\u0314\u018b\2\u1937\u1938\5\u0344\u01a3\2\u1938\u1945\3\2\2\2\u1939"+
		"\u193a\5\u030c\u0187\2\u193a\u193b\5\u0308\u0185\2\u193b\u193c\5\u0324"+
		"\u0193\2\u193c\u1945\3\2\2\2\u193d\u193e\5\u0308\u0185\2\u193e\u193f\5"+
		"\u0324\u0193\2\u193f\u1945\3\2\2\2\u1940\u1941\5\u030c\u0187\2\u1941\u1942"+
		"\5\u0308\u0185\2\u1942\u1945\3\2\2\2\u1943\u1945\5\u030a\u0186\2\u1944"+
		"\u1920\3\2\2\2\u1944\u1927\3\2\2\2\u1944\u192d\3\2\2\2\u1944\u1933\3\2"+
		"\2\2\u1944\u1939\3\2\2\2\u1944\u193d\3\2\2\2\u1944\u1940\3\2\2\2\u1944"+
		"\u1943\3\2\2\2\u1945\u0307\3\2\2\2\u1946\u1949\5\u030a\u0186\2\u1947\u1949"+
		"\5\u0304\u0183\2\u1948\u1946\3\2\2\2\u1948\u1947\3\2\2\2\u1949\u0309\3"+
		"\2\2\2\u194a\u194b\b\u0186\1\2\u194b\u194c\7\u0142\2\2\u194c\u194d\5\u0320"+
		"\u0191\2\u194d\u194e\5\u0416\u020c\2\u194e\u194f\5\u0314\u018b\2\u194f"+
		"\u1950\5\u034e\u01a8\2\u1950\u1951\5\u0368\u01b5\2\u1951\u1952\5\u033e"+
		"\u01a0\2\u1952\u1953\5\u0340\u01a1\2\u1953\u1954\5\u03ba\u01de\2\u1954"+
		"\u196d\3\2\2\2\u1955\u1956\7\u0142\2\2\u1956\u1957\5\u0320\u0191\2\u1957"+
		"\u1958\5\u0416\u020c\2\u1958\u1959\5\u034e\u01a8\2\u1959\u195a\5\u0314"+
		"\u018b\2\u195a\u195b\5\u0368\u01b5\2\u195b\u195c\5\u033e\u01a0\2\u195c"+
		"\u195d\5\u0340\u01a1\2\u195d\u195e\5\u03ba\u01de\2\u195e\u196d\3\2\2\2"+
		"\u195f\u1960\7\u0142\2\2\u1960\u1961\5\u0320\u0191\2\u1961\u1962\5\u0416"+
		"\u020c\2\u1962\u1963\5\u034e\u01a8\2\u1963\u1964\5\u0368\u01b5\2\u1964"+
		"\u1965\5\u0314\u018b\2\u1965\u1966\5\u033e\u01a0\2\u1966\u1967\5\u0340"+
		"\u01a1\2\u1967\u1968\5\u03ba\u01de\2\u1968\u196d\3\2\2\2\u1969\u196d\5"+
		"\u034c\u01a7\2\u196a\u196b\7\u0160\2\2\u196b\u196d\5\u0360\u01b1\2\u196c"+
		"\u194a\3\2\2\2\u196c\u1955\3\2\2\2\u196c\u195f\3\2\2\2\u196c\u1969\3\2"+
		"\2\2\u196c\u196a\3\2\2\2\u196d\u197f\3\2\2\2\u196e\u196f\f\5\2\2\u196f"+
		"\u1970\7\u0178\2\2\u1970\u1971\5\u031e\u0190\2\u1971\u1972\5\u0308\u0185"+
		"\2\u1972\u197e\3\2\2\2\u1973\u1974\f\4\2\2\u1974\u1975\7\u00c5\2\2\u1975"+
		"\u1976\5\u031e\u0190\2\u1976\u1977\5\u0308\u0185\2\u1977\u197e\3\2\2\2"+
		"\u1978\u1979\f\3\2\2\u1979\u197a\7\u008b\2\2\u197a\u197b\5\u031e\u0190"+
		"\2\u197b\u197c\5\u0308\u0185\2\u197c\u197e\3\2\2\2\u197d\u196e\3\2\2\2"+
		"\u197d\u1973\3\2\2\2\u197d\u1978\3\2\2\2\u197e\u1981\3\2\2\2\u197f\u197d"+
		"\3\2\2\2\u197f\u1980\3\2\2\2\u1980\u030b\3\2\2\2\u1981\u197f\3\2\2\2\u1982"+
		"\u1983\7\u0192\2\2\u1983\u1988\5\u030e\u0188\2\u1984\u1985\7\u0192\2\2"+
		"\u1985\u1986\7\u0126\2\2\u1986\u1988\5\u030e\u0188\2\u1987\u1982\3\2\2"+
		"\2\u1987\u1984\3\2\2\2\u1988\u030d\3\2\2\2\u1989\u198a\b\u0188\1\2\u198a"+
		"\u198b\5\u0310\u0189\2\u198b\u1991\3\2\2\2\u198c\u198d\f\4\2\2\u198d\u198e"+
		"\7\6\2\2\u198e\u1990\5\u0310\u0189\2\u198f\u198c\3\2\2\2\u1990\u1993\3"+
		"\2\2\2\u1991\u198f\3\2\2\2\u1991\u1992\3\2\2\2\u1992\u030f\3\2\2\2\u1993"+
		"\u1991\3\2\2\2\u1994\u1995\5\u0420\u0211\2\u1995\u1996\5\u02bc\u015f\2"+
		"\u1996\u1997\7)\2\2\u1997\u1998\7\7\2\2\u1998\u1999\5\u02ce\u0168\2\u1999"+
		"\u199a\7\b\2\2\u199a\u0311\3\2\2\2\u199b\u199e\5\u030c\u0187\2\u199c\u199e"+
		"\3\2\2\2\u199d\u199b\3\2\2\2\u199d\u199c\3\2\2\2\u199e\u0313\3\2\2\2\u199f"+
		"\u19a1\7\u00c7\2\2\u19a0\u19a2\7\u015a\2\2\u19a1\u19a0\3\2\2\2\u19a1\u19a2"+
		"\3\2\2\2\u19a2\u19a3\3\2\2\2\u19a3\u19ab\5\u031a\u018e\2\u19a4\u19a6\7"+
		"\u00c7\2\2\u19a5\u19a7\7\u015a\2\2\u19a6\u19a5\3\2\2\2\u19a6\u19a7\3\2"+
		"\2\2\u19a7\u19a8\3\2\2\2\u19a8\u19ab\5\u0316\u018c\2\u19a9\u19ab\3\2\2"+
		"\2\u19aa\u199f\3\2\2\2\u19aa\u19a4\3\2\2\2\u19aa\u19a9\3\2\2\2\u19ab\u0315"+
		"\3\2\2\2\u19ac\u19b1\5\u0318\u018d\2\u19ad\u19ae\7\6\2\2\u19ae\u19b0\5"+
		"\u0318\u018d\2\u19af\u19ad\3\2\2\2\u19b0\u19b3\3\2\2\2\u19b1\u19af\3\2"+
		"\2\2\u19b1\u19b2\3\2\2\2\u19b2\u0317\3\2\2\2\u19b3\u19b1\3\2\2\2\u19b4"+
		"\u19b5\5\u041c\u020f\2\u19b5\u0319\3\2\2\2\u19b6\u19b7\7\u0165\2\2\u19b7"+
		"\u19b8\5\u031c\u018f\2\u19b8\u19b9\5\u041c\u020f\2\u19b9\u19da\3\2\2\2"+
		"\u19ba\u19bb\7\u0163\2\2\u19bb\u19bc\5\u031c\u018f\2\u19bc\u19bd\5\u041c"+
		"\u020f\2\u19bd\u19da\3\2\2\2\u19be\u19bf\7\u00dd\2\2\u19bf\u19c0\7\u0165"+
		"\2\2\u19c0\u19c1\5\u031c\u018f\2\u19c1\u19c2\5\u041c\u020f\2\u19c2\u19da"+
		"\3\2\2\2\u19c3\u19c4\7\u00dd\2\2\u19c4\u19c5\7\u0163\2\2\u19c5\u19c6\5"+
		"\u031c\u018f\2\u19c6\u19c7\5\u041c\u020f\2\u19c7\u19da\3\2\2\2\u19c8\u19c9"+
		"\7\u00a4\2\2\u19c9\u19ca\7\u0165\2\2\u19ca\u19cb\5\u031c\u018f\2\u19cb"+
		"\u19cc\5\u041c\u020f\2\u19cc\u19da\3\2\2\2\u19cd\u19ce\7\u00a4\2\2\u19ce"+
		"\u19cf\7\u0163\2\2\u19cf\u19d0\5\u031c\u018f\2\u19d0\u19d1\5\u041c\u020f"+
		"\2\u19d1\u19da\3\2\2\2\u19d2\u19d3\7\u017c\2\2\u19d3\u19d4\5\u031c\u018f"+
		"\2\u19d4\u19d5\5\u041c\u020f\2\u19d5\u19da\3\2\2\2\u19d6\u19d7\7\u0160"+
		"\2\2\u19d7\u19da\5\u041c\u020f\2\u19d8\u19da\5\u041c\u020f\2\u19d9\u19b6"+
		"\3\2\2\2\u19d9\u19ba\3\2\2\2\u19d9\u19be\3\2\2\2\u19d9\u19c3\3\2\2\2\u19d9"+
		"\u19c8\3\2\2\2\u19d9\u19cd\3\2\2\2\u19d9\u19d2\3\2\2\2\u19d9\u19d6\3\2"+
		"\2\2\u19d9\u19d8\3\2\2\2\u19da\u031b\3\2\2\2\u19db\u19de\7\u0160\2\2\u19dc"+
		"\u19de\3\2\2\2\u19dd\u19db\3\2\2\2\u19dd\u19dc\3\2\2\2\u19de\u031d\3\2"+
		"\2\2\u19df\u19e3\7 \2\2\u19e0\u19e3\7}\2\2\u19e1\u19e3\3\2\2\2\u19e2\u19df"+
		"\3\2\2\2\u19e2\u19e0\3\2\2\2\u19e2\u19e1\3\2\2\2\u19e3\u031f\3\2\2\2\u19e4"+
		"\u19e5\7}\2\2\u19e5\u19e6\7\u0100\2\2\u19e6\u19e7\7\7\2\2\u19e7\u19e8"+
		"\5\u03dc\u01ef\2\u19e8\u19e9\7\b\2\2\u19e9\u19ee\3\2\2\2\u19ea\u19ee\7"+
		"}\2\2\u19eb\u19ee\7 \2\2\u19ec\u19ee\3\2\2\2\u19ed\u19e4\3\2\2\2\u19ed"+
		"\u19ea\3\2\2\2\u19ed\u19eb\3\2\2\2\u19ed\u19ec\3\2\2\2\u19ee\u0321\3\2"+
		"\2\2\u19ef\u19f2\5\u0324\u0193\2\u19f0\u19f2\3\2\2\2\u19f1\u19ef\3\2\2"+
		"\2\u19f1\u19f0\3\2\2\2\u19f2\u0323\3\2\2\2\u19f3\u19f4\7\u0106\2\2\u19f4"+
		"\u19f5\7:\2\2\u19f5\u19f6\5\u0326\u0194\2\u19f6\u0325\3\2\2\2\u19f7\u19f8"+
		"\b\u0194\1\2\u19f8\u19f9\5\u0328\u0195\2\u19f9\u19ff\3\2\2\2\u19fa\u19fb"+
		"\f\4\2\2\u19fb\u19fc\7\6\2\2\u19fc\u19fe\5\u0328\u0195\2\u19fd\u19fa\3"+
		"\2\2\2\u19fe\u1a01\3\2\2\2\u19ff\u19fd\3\2\2\2\u19ff\u1a00\3\2\2\2\u1a00"+
		"\u0327\3\2\2\2\u1a01\u19ff\3\2\2\2\u1a02\u1a03\5\u03a2\u01d2\2\u1a03\u1a04"+
		"\7\u0180\2\2\u1a04\u1a05\5\u03d8\u01ed\2\u1a05\u1a06\5\u020c\u0107\2\u1a06"+
		"\u1a0c\3\2\2\2\u1a07\u1a08\5\u03a2\u01d2\2\u1a08\u1a09\5\u020a\u0106\2"+
		"\u1a09\u1a0a\5\u020c\u0107\2\u1a0a\u1a0c\3\2\2\2\u1a0b\u1a02\3\2\2\2\u1a0b"+
		"\u1a07\3\2\2\2\u1a0c\u0329\3\2\2\2\u1a0d\u1a0e\5\u032e\u0198\2\u1a0e\u1a0f"+
		"\5\u0330\u0199\2\u1a0f\u1a16\3\2\2\2\u1a10\u1a11\5\u0330\u0199\2\u1a11"+
		"\u1a12\5\u032e\u0198\2\u1a12\u1a16\3\2\2\2\u1a13\u1a16\5\u032e\u0198\2"+
		"\u1a14\u1a16\5\u0330\u0199\2\u1a15\u1a0d\3\2\2\2\u1a15\u1a10\3\2\2\2\u1a15"+
		"\u1a13\3\2\2\2\u1a15\u1a14\3\2\2\2\u1a16\u032b\3\2\2\2\u1a17\u1a1a\5\u032a"+
		"\u0196\2\u1a18\u1a1a\3\2\2\2\u1a19\u1a17\3\2\2\2\u1a19\u1a18\3\2\2\2\u1a1a"+
		"\u032d\3\2\2\2\u1a1b\u1a1c\7\u00da\2\2\u1a1c\u1a1d\5\u0332\u019a\2\u1a1d"+
		"\u1a1e\7\6\2\2\u1a1e\u1a1f\5\u0334\u019b\2\u1a1f\u1a29\3\2\2\2\u1a20\u1a21"+
		"\7\u0097\2\2\u1a21\u1a22\5\u033c\u019f\2\u1a22\u1a23\5\u0336\u019c\2\u1a23"+
		"\u1a24\5\u033a\u019e\2\u1a24\u1a25\7\u0101\2\2\u1a25\u1a29\3\2\2\2\u1a26"+
		"\u1a27\7\u00da\2\2\u1a27\u1a29\5\u0332\u019a\2\u1a28\u1a1b\3\2\2\2\u1a28"+
		"\u1a20\3\2\2\2\u1a28\u1a26\3\2\2\2\u1a29\u032f\3\2\2\2\u1a2a\u1a2b\7\u00fe"+
		"\2\2\u1a2b\u1a2c\5\u0338\u019d\2\u1a2c\u1a2d\5\u033a\u019e\2\u1a2d\u1a31"+
		"\3\2\2\2\u1a2e\u1a2f\7\u00fe\2\2\u1a2f\u1a31\5\u0334\u019b\2\u1a30\u1a2a"+
		"\3\2\2\2\u1a30\u1a2e\3\2\2\2\u1a31\u0331\3\2\2\2\u1a32\u1a35\5\u03a2\u01d2"+
		"\2\u1a33\u1a35\7 \2\2\u1a34\u1a32\3\2\2\2\u1a34\u1a33\3\2\2\2\u1a35\u0333"+
		"\3\2\2\2\u1a36\u1a37\5\u03a2\u01d2\2\u1a37\u0335\3\2\2\2\u1a38\u1a39\7"+
		"\7\2\2\u1a39\u1a3a\5\u03a2\u01d2\2\u1a3a\u1a3b\7\b\2\2\u1a3b\u1a3f\3\2"+
		"\2\2\u1a3c\u1a3f\5\u0436\u021c\2\u1a3d\u1a3f\3\2\2\2\u1a3e\u1a38\3\2\2"+
		"\2\u1a3e\u1a3c\3\2\2\2\u1a3e\u1a3d\3\2\2\2\u1a3f\u0337\3\2\2\2\u1a40\u1a41"+
		"\5\u03a6\u01d4\2\u1a41\u0339\3\2\2\2\u1a42\u1a43\t\f\2\2\u1a43\u033b\3"+
		"\2\2\2\u1a44\u1a45\t\r\2\2\u1a45\u033d\3\2\2\2\u1a46\u1a47\7\u00a8\2\2"+
		"\u1a47\u1a48\7:\2\2\u1a48\u1a4b\5\u03dc\u01ef\2\u1a49\u1a4b\3\2\2\2\u1a4a"+
		"\u1a46\3\2\2\2\u1a4a\u1a49\3\2\2\2\u1a4b\u033f\3\2\2\2\u1a4c\u1a4d\7\u00aa"+
		"\2\2\u1a4d\u1a50\5\u03a2\u01d2\2\u1a4e\u1a50\3\2\2\2\u1a4f\u1a4c\3\2\2"+
		"\2\u1a4f\u1a4e\3\2\2\2\u1a50\u0341\3\2\2\2\u1a51\u1a56\5\u0346\u01a4\2"+
		"\u1a52\u1a53\7\u009b\2\2\u1a53\u1a54\7\u0122\2\2\u1a54\u1a56\7\u0101\2"+
		"\2\u1a55\u1a51\3\2\2\2\u1a55\u1a52\3\2\2\2\u1a56\u0343\3\2\2\2\u1a57\u1a5a"+
		"\5\u0342\u01a2\2\u1a58\u1a5a\3\2\2\2\u1a59\u1a57\3\2\2\2\u1a59\u1a58\3"+
		"\2\2\2\u1a5a\u0345\3\2\2\2\u1a5b\u1a5c\b\u01a4\1\2\u1a5c\u1a5d\5\u0348"+
		"\u01a5\2\u1a5d\u1a62\3\2\2\2\u1a5e\u1a5f\f\4\2\2\u1a5f\u1a61\5\u0348\u01a5"+
		"\2\u1a60\u1a5e\3\2\2\2\u1a61\u1a64\3\2\2\2\u1a62\u1a60\3\2\2\2\u1a62\u1a63"+
		"\3\2\2\2\u1a63\u0347\3\2\2\2\u1a64\u1a62\3\2\2\2\u1a65\u1a66\7\u009b\2"+
		"\2\u1a66\u1a67\7\u017e\2\2\u1a67\u1a68\5\u034a\u01a6\2\u1a68\u1a69\5\u02ea"+
		"\u0176\2\u1a69\u1a70\3\2\2\2\u1a6a\u1a6b\7\u009b\2\2\u1a6b\u1a6c\7\u014b"+
		"\2\2\u1a6c\u1a6d\5\u034a\u01a6\2\u1a6d\u1a6e\5\u02ea\u0176\2\u1a6e\u1a70"+
		"\3\2\2\2\u1a6f\u1a65\3\2\2\2\u1a6f\u1a6a\3\2\2\2\u1a70\u0349\3\2\2\2\u1a71"+
		"\u1a72\7\u00fc\2\2\u1a72\u1a75\5\u041a\u020e\2\u1a73\u1a75\3\2\2\2\u1a74"+
		"\u1a71\3\2\2\2\u1a74\u1a73\3\2\2\2\u1a75\u034b\3\2\2\2\u1a76\u1a77\b\u01a7"+
		"\1\2\u1a77\u1a78\7\u0186\2\2\u1a78\u1a79\5\u0414\u020b\2\u1a79\u1a7f\3"+
		"\2\2\2\u1a7a\u1a7b\f\4\2\2\u1a7b\u1a7c\7\6\2\2\u1a7c\u1a7e\5\u0414\u020b"+
		"\2\u1a7d\u1a7a\3\2\2\2\u1a7e\u1a81\3\2\2\2\u1a7f\u1a7d\3\2\2\2\u1a7f\u1a80"+
		"\3\2\2\2\u1a80\u034d\3\2\2\2\u1a81\u1a7f\3\2\2\2\u1a82\u1a83\7\u00a0\2"+
		"\2\u1a83\u1a86\5\u0350\u01a9\2\u1a84\u1a86\3\2\2\2\u1a85\u1a82\3\2\2\2"+
		"\u1a85\u1a84\3\2\2\2\u1a86\u034f\3\2\2\2\u1a87\u1a88\b\u01a9\1\2\u1a88"+
		"\u1a89\5\u0352\u01aa\2\u1a89\u1a8f\3\2\2\2\u1a8a\u1a8b\f\4\2\2\u1a8b\u1a8c"+
		"\7\6\2\2\u1a8c\u1a8e\5\u0352\u01aa\2\u1a8d\u1a8a\3\2\2\2\u1a8e\u1a91\3"+
		"\2\2\2\u1a8f\u1a8d\3\2\2\2\u1a8f\u1a90\3\2\2\2\u1a90\u0351\3\2\2\2\u1a91"+
		"\u1a8f\3\2\2\2\u1a92\u1a95\5\u0356\u01ac\2\u1a93\u1a95\5\u0354\u01ab\2"+
		"\u1a94\u1a92\3\2\2\2\u1a94\u1a93\3\2\2\2\u1a95\u0353\3\2\2\2\u1a96\u1ab6"+
		"\5\u0360\u01b1\2\u1a97\u1a98\5\u0360\u01b1\2\u1a98\u1a99\5\u0358\u01ad"+
		"\2\u1a99\u1ab6\3\2\2\2\u1a9a\u1ab6\5\u0366\u01b4\2\u1a9b\u1a9c\5\u0366"+
		"\u01b4\2\u1a9c\u1a9d\5\u0358\u01ad\2\u1a9d\u1ab6\3\2\2\2\u1a9e\u1a9f\5"+
		"\u0366\u01b4\2\u1a9f\u1aa0\7)\2\2\u1aa0\u1aa1\7\7\2\2\u1aa1\u1aa2\5\u036e"+
		"\u01b8\2\u1aa2\u1aa3\7\b\2\2\u1aa3\u1ab6\3\2\2\2\u1aa4\u1aa5\5\u0366\u01b4"+
		"\2\u1aa5\u1aa6\7)\2\2\u1aa6\u1aa7\5\u0438\u021d\2\u1aa7\u1aa8\7\7\2\2"+
		"\u1aa8\u1aa9\5\u036e\u01b8\2\u1aa9\u1aaa\7\b\2\2\u1aaa\u1ab6\3\2\2\2\u1aab"+
		"\u1aac\5\u0366\u01b4\2\u1aac\u1aad\5\u0438\u021d\2\u1aad\u1aae\7\7\2\2"+
		"\u1aae\u1aaf\5\u036e\u01b8\2\u1aaf\u1ab0\7\b\2\2\u1ab0\u1ab6\3\2\2\2\u1ab1"+
		"\u1ab6\5\u0304\u0183\2\u1ab2\u1ab3\5\u0304\u0183\2\u1ab3\u1ab4\5\u0358"+
		"\u01ad\2\u1ab4\u1ab6\3\2\2\2\u1ab5\u1a96\3\2\2\2\u1ab5\u1a97\3\2\2\2\u1ab5"+
		"\u1a9a\3\2\2\2\u1ab5\u1a9b\3\2\2\2\u1ab5\u1a9e\3\2\2\2\u1ab5\u1aa4\3\2"+
		"\2\2\u1ab5\u1aab\3\2\2\2\u1ab5\u1ab1\3\2\2\2\u1ab5\u1ab2\3\2\2\2\u1ab6"+
		"\u0355\3\2\2\2\u1ab7\u1ab8\b\u01ac\1\2\u1ab8\u1ab9\7\7\2\2\u1ab9\u1aba"+
		"\5\u0352\u01aa\2\u1aba\u1abc\7\b\2\2\u1abb\u1abd\5\u0358\u01ad\2\u1abc"+
		"\u1abb\3\2\2\2\u1abc\u1abd\3\2\2\2\u1abd\u1ada\3\2\2\2\u1abe\u1abf\5\u0354"+
		"\u01ab\2\u1abf\u1ac0\7^\2\2\u1ac0\u1ac1\7\u00cc\2\2\u1ac1\u1ac2\5\u0352"+
		"\u01aa\2\u1ac2\u1ada\3\2\2\2\u1ac3\u1ac4\5\u0354\u01ab\2\u1ac4\u1ac5\5"+
		"\u035a\u01ae\2\u1ac5\u1ac6\7\u00cc\2\2\u1ac6\u1ac7\5\u0352\u01aa\2\u1ac7"+
		"\u1ac8\5\u035e\u01b0\2\u1ac8\u1ada\3\2\2\2\u1ac9\u1aca\5\u0354\u01ab\2"+
		"\u1aca\u1acb\7\u00cc\2\2\u1acb\u1acc\5\u0352\u01aa\2\u1acc\u1acd\5\u035e"+
		"\u01b0\2\u1acd\u1ada\3\2\2\2\u1ace\u1acf\5\u0354\u01ab\2\u1acf\u1ad0\7"+
		"\u00ed\2\2\u1ad0\u1ad1\5\u035a\u01ae\2\u1ad1\u1ad2\7\u00cc\2\2\u1ad2\u1ad3"+
		"\5\u0352\u01aa\2\u1ad3\u1ada\3\2\2\2\u1ad4\u1ad5\5\u0354\u01ab\2\u1ad5"+
		"\u1ad6\7\u00ed\2\2\u1ad6\u1ad7\7\u00cc\2\2\u1ad7\u1ad8\5\u0352\u01aa\2"+
		"\u1ad8\u1ada\3\2\2\2\u1ad9\u1ab7\3\2\2\2\u1ad9\u1abe\3\2\2\2\u1ad9\u1ac3"+
		"\3\2\2\2\u1ad9\u1ac9\3\2\2\2\u1ad9\u1ace\3\2\2\2\u1ad9\u1ad4\3\2\2\2\u1ada"+
		"\u1af6\3\2\2\2\u1adb\u1adc\f\7\2\2\u1adc\u1add\7^\2\2\u1add\u1ade\7\u00cc"+
		"\2\2\u1ade\u1af5\5\u0352\u01aa\2\u1adf\u1ae0\f\6\2\2\u1ae0\u1ae1\5\u035a"+
		"\u01ae\2\u1ae1\u1ae2\7\u00cc\2\2\u1ae2\u1ae3\5\u0352\u01aa\2\u1ae3\u1ae4"+
		"\5\u035e\u01b0\2\u1ae4\u1af5\3\2\2\2\u1ae5\u1ae6\f\5\2\2\u1ae6\u1ae7\7"+
		"\u00cc\2\2\u1ae7\u1ae8\5\u0352\u01aa\2\u1ae8\u1ae9\5\u035e\u01b0\2\u1ae9"+
		"\u1af5\3\2\2\2\u1aea\u1aeb\f\4\2\2\u1aeb\u1aec\7\u00ed\2\2\u1aec\u1aed"+
		"\5\u035a\u01ae\2\u1aed\u1aee\7\u00cc\2\2\u1aee\u1aef\5\u0352\u01aa\2\u1aef"+
		"\u1af5\3\2\2\2\u1af0\u1af1\f\3\2\2\u1af1\u1af2\7\u00ed\2\2\u1af2\u1af3"+
		"\7\u00cc\2\2\u1af3\u1af5\5\u0352\u01aa\2\u1af4\u1adb\3\2\2\2\u1af4\u1adf"+
		"\3\2\2\2\u1af4\u1ae5\3\2\2\2\u1af4\u1aea\3\2\2\2\u1af4\u1af0\3\2\2\2\u1af5"+
		"\u1af8\3\2\2\2\u1af6\u1af4\3\2\2\2\u1af6\u1af7\3\2\2\2\u1af7\u0357\3\2"+
		"\2\2\u1af8\u1af6\3\2\2\2\u1af9\u1afa\7)\2\2\u1afa\u1afb\5\u0438\u021d"+
		"\2\u1afb\u1afc\7\7\2\2\u1afc\u1afd\5\u041e\u0210\2\u1afd\u1afe\7\b\2\2"+
		"\u1afe\u1b08\3\2\2\2\u1aff\u1b00\5\u0438\u021d\2\u1b00\u1b01\7\7\2\2\u1b01"+
		"\u1b02\5\u041e\u0210\2\u1b02\u1b03\7\b\2\2\u1b03\u1b08\3\2\2\2\u1b04\u1b05"+
		"\7)\2\2\u1b05\u1b08\5\u0438\u021d\2\u1b06\u1b08\5\u0438\u021d\2\u1b07"+
		"\u1af9\3\2\2\2\u1b07\u1aff\3\2\2\2\u1b07\u1b04\3\2\2\2\u1b07\u1b06\3\2"+
		"\2\2\u1b08\u0359\3\2\2\2\u1b09\u1b0a\7\u00a1\2\2\u1b0a\u1b11\5\u035c\u01af"+
		"\2\u1b0b\u1b0c\7\u00d7\2\2\u1b0c\u1b11\5\u035c\u01af\2\u1b0d\u1b0e\7\u0136"+
		"\2\2\u1b0e\u1b11\5\u035c\u01af\2\u1b0f\u1b11\7\u00bd\2\2\u1b10\u1b09\3"+
		"\2\2\2\u1b10\u1b0b\3\2\2\2\u1b10\u1b0d\3\2\2\2\u1b10\u1b0f\3\2\2\2\u1b11"+
		"\u035b\3\2\2\2\u1b12\u1b15\7\u0108\2\2\u1b13\u1b15\3\2\2\2\u1b14\u1b12"+
		"\3\2\2\2\u1b14\u1b13\3\2\2\2\u1b15\u035d\3\2\2\2\u1b16\u1b17\7\u0180\2"+
		"\2\u1b17\u1b18\7\7\2\2\u1b18\u1b19\5\u041e\u0210\2\u1b19\u1b1a\7\b\2\2"+
		"\u1b1a\u1b1e\3\2\2\2\u1b1b\u1b1c\7\u0100\2\2\u1b1c\u1b1e\5\u03a2\u01d2"+
		"\2\u1b1d\u1b16\3\2\2\2\u1b1d\u1b1b\3\2\2\2\u1b1e\u035f\3\2\2\2\u1b1f\u1b20"+
		"\7\u0101\2\2\u1b20\u1b21\7\7\2\2\u1b21\u1b22\5\u041c\u020f\2\u1b22\u1b23"+
		"\7\b\2\2\u1b23\u1b2b\3\2\2\2\u1b24\u1b25\5\u041c\u020f\2\u1b25\u1b26\7"+
		"\t\2\2\u1b26\u1b2b\3\2\2\2\u1b27\u1b2b\5\u041c\u020f\2\u1b28\u1b29\7\u0101"+
		"\2\2\u1b29\u1b2b\5\u041c\u020f\2\u1b2a\u1b1f\3\2\2\2\u1b2a\u1b24\3\2\2"+
		"\2\u1b2a\u1b27\3\2\2\2\u1b2a\u1b28\3\2\2\2\u1b2b\u0361\3\2\2\2\u1b2c\u1b2d"+
		"\b\u01b2\1\2\u1b2d\u1b2e\5\u0360\u01b1\2\u1b2e\u1b34\3\2\2\2\u1b2f\u1b30"+
		"\f\4\2\2\u1b30\u1b31\7\6\2\2\u1b31\u1b33\5\u0360\u01b1\2\u1b32\u1b2f\3"+
		"\2\2\2\u1b33\u1b36\3\2\2\2\u1b34\u1b32\3\2\2\2\u1b34\u1b35\3\2\2\2\u1b35"+
		"\u0363\3\2\2\2\u1b36\u1b34\3\2\2\2\u1b37\u1b38\5\u0360\u01b1\2\u1b38\u1b39"+
		"\5\u0438\u021d\2\u1b39\u1b40\3\2\2\2\u1b3a\u1b3b\5\u0360\u01b1\2\u1b3b"+
		"\u1b3c\7)\2\2\u1b3c\u1b3d\5\u0438\u021d\2\u1b3d\u1b40\3\2\2\2\u1b3e\u1b40"+
		"\5\u0360\u01b1\2\u1b3f\u1b37\3\2\2\2\u1b3f\u1b3a\3\2\2\2\u1b3f\u1b3e\3"+
		"\2\2\2\u1b40\u0365\3\2\2\2\u1b41\u1b42\5\u03a8\u01d5\2\u1b42\u0367\3\2"+
		"\2\2\u1b43\u1b44\7\u018f\2\2\u1b44\u1b47\5\u03a2\u01d2\2\u1b45\u1b47\3"+
		"\2\2\2\u1b46\u1b43\3\2\2\2\u1b46\u1b45\3\2\2\2\u1b47\u0369\3\2\2\2\u1b48"+
		"\u1b49\7\u018f\2\2\u1b49\u1b50\5\u03a2\u01d2\2\u1b4a\u1b4b\7\u018f\2\2"+
		"\u1b4b\u1b4c\7`\2\2\u1b4c\u1b4d\7\u00fc\2\2\u1b4d\u1b50\5\u02fc\u017f"+
		"\2\u1b4e\u1b50\3\2\2\2\u1b4f\u1b48\3\2\2\2\u1b4f\u1b4a\3\2\2\2\u1b4f\u1b4e"+
		"\3\2\2\2\u1b50\u036b\3\2\2\2\u1b51\u1b54\5\u036e\u01b8\2\u1b52\u1b54\3"+
		"\2\2\2\u1b53\u1b51\3\2\2\2\u1b53\u1b52\3\2\2\2\u1b54\u036d\3\2\2\2\u1b55"+
		"\u1b56\b\u01b8\1\2\u1b56\u1b57\5\u0370\u01b9\2\u1b57\u1b5d\3\2\2\2\u1b58"+
		"\u1b59\f\4\2\2\u1b59\u1b5a\7\6\2\2\u1b5a\u1b5c\5\u0370\u01b9\2\u1b5b\u1b58"+
		"\3\2\2\2\u1b5c\u1b5f\3\2\2\2\u1b5d\u1b5b\3\2\2\2\u1b5d\u1b5e\3\2\2\2\u1b5e"+
		"\u036f\3\2\2\2\u1b5f\u1b5d\3\2\2\2\u1b60\u1b61\5\u0438\u021d\2\u1b61\u1b62"+
		"\5\u0372\u01ba\2\u1b62\u1b63\5f\64\2\u1b63\u0371\3\2\2\2\u1b64\u1b65\5"+
		"\u0376\u01bc\2\u1b65\u1b66\7(\2\2\u1b66\u1b67\7\f\2\2\u1b67\u1b68\5\u0430"+
		"\u0219\2\u1b68\u1b69\7\r\2\2\u1b69\u1b80\3\2\2\2\u1b6a\u1b6b\7\u014a\2"+
		"\2\u1b6b\u1b6c\5\u0376\u01bc\2\u1b6c\u1b6d\7(\2\2\u1b6d\u1b6e\7\f\2\2"+
		"\u1b6e\u1b6f\5\u0430\u0219\2\u1b6f\u1b70\7\r\2\2\u1b70\u1b80\3\2\2\2\u1b71"+
		"\u1b72\5\u0376\u01bc\2\u1b72\u1b73\5\u0374\u01bb\2\u1b73\u1b80\3\2\2\2"+
		"\u1b74\u1b75\7\u014a\2\2\u1b75\u1b76\5\u0376\u01bc\2\u1b76\u1b77\5\u0374"+
		"\u01bb\2\u1b77\u1b80\3\2\2\2\u1b78\u1b79\5\u0376\u01bc\2\u1b79\u1b7a\7"+
		"(\2\2\u1b7a\u1b80\3\2\2\2\u1b7b\u1b7c\7\u014a\2\2\u1b7c\u1b7d\5\u0376"+
		"\u01bc\2\u1b7d\u1b7e\7(\2\2\u1b7e\u1b80\3\2\2\2\u1b7f\u1b64\3\2\2\2\u1b7f"+
		"\u1b6a\3\2\2\2\u1b7f\u1b71\3\2\2\2\u1b7f\u1b74\3\2\2\2\u1b7f\u1b78\3\2"+
		"\2\2\u1b7f\u1b7b\3\2\2\2\u1b80\u0373\3\2\2\2\u1b81\u1b8c\b\u01bb\1\2\u1b82"+
		"\u1b83\f\5\2\2\u1b83\u1b84\7\f\2\2\u1b84\u1b8b\7\r\2\2\u1b85\u1b86\f\4"+
		"\2\2\u1b86\u1b87\7\f\2\2\u1b87\u1b88\5\u0430\u0219\2\u1b88\u1b89\7\r\2"+
		"\2\u1b89\u1b8b\3\2\2\2\u1b8a\u1b82\3\2\2\2\u1b8a\u1b85\3\2\2\2\u1b8b\u1b8e"+
		"\3\2\2\2\u1b8c\u1b8a\3\2\2\2\u1b8c\u1b8d\3\2\2\2\u1b8d\u0375\3\2\2\2\u1b8e"+
		"\u1b8c\3\2\2\2\u1b8f\u1b90\5\u039a\u01ce\2\u1b90\u1b91\7\7\2\2\u1b91\u1b92"+
		"\5\u0430\u0219\2\u1b92\u1b93\7\b\2\2\u1b93\u1b94\5\u039e\u01d0\2\u1b94"+
		"\u1b9e\3\2\2\2\u1b95\u1b96\5\u039a\u01ce\2\u1b96\u1b97\5\u039e\u01d0\2"+
		"\u1b97\u1b9e\3\2\2\2\u1b98\u1b9e\5\u037a\u01be\2\u1b99\u1b9e\5\u037e\u01c0"+
		"\2\u1b9a\u1b9e\5\u0382\u01c2\2\u1b9b\u1b9e\5\u038a\u01c6\2\u1b9c\u1b9e"+
		"\5\u0398\u01cd\2\u1b9d\u1b8f\3\2\2\2\u1b9d\u1b95\3\2\2\2\u1b9d\u1b98\3"+
		"\2\2\2\u1b9d\u1b99\3\2\2\2\u1b9d\u1b9a\3\2\2\2\u1b9d\u1b9b\3\2\2\2\u1b9d"+
		"\u1b9c\3\2\2\2\u1b9e\u0377\3\2\2\2\u1b9f\u1ba4\5\u037e\u01c0\2\u1ba0\u1ba4"+
		"\5\u0384\u01c3\2\u1ba1\u1ba4\5\u038c\u01c7\2\u1ba2\u1ba4\5\u0398\u01cd"+
		"\2\u1ba3\u1b9f\3\2\2\2\u1ba3\u1ba0\3\2\2\2\u1ba3\u1ba1\3\2\2\2\u1ba3\u1ba2"+
		"\3\2\2\2\u1ba4\u0379\3\2\2\2\u1ba5\u1ba6\5\u043a\u021e\2\u1ba6\u1ba7\5"+
		"\u01b4\u00db\2\u1ba7\u1ba8\5\u037c\u01bf\2\u1ba8\u1bad\3\2\2\2\u1ba9\u1baa"+
		"\5\u043a\u021e\2\u1baa\u1bab\5\u037c\u01bf\2\u1bab\u1bad\3\2\2\2\u1bac"+
		"\u1ba5\3\2\2\2\u1bac\u1ba9\3\2\2\2\u1bad\u037b\3\2\2\2\u1bae\u1baf\7\7"+
		"\2\2\u1baf\u1bb0\5\u03dc\u01ef\2\u1bb0\u1bb1\7\b\2\2\u1bb1\u1bb4\3\2\2"+
		"\2\u1bb2\u1bb4\3\2\2\2\u1bb3\u1bae\3\2\2\2\u1bb3\u1bb2\3\2\2\2\u1bb4\u037d"+
		"\3\2\2\2\u1bb5\u1bb6\7\u0099\2\2\u1bb6\u1bc6\5\u0380\u01c1\2\u1bb7\u1bb8"+
		"\7o\2\2\u1bb8\u1bc6\5\u037c\u01bf\2\u1bb9\u1bba\7n\2\2\u1bba\u1bc6\5\u037c"+
		"\u01bf\2\u1bbb\u1bbc\7\u00fa\2\2\u1bbc\u1bc6\5\u037c\u01bf\2\u1bbd\u1bc6"+
		"\7\u00c3\2\2\u1bbe\u1bc6\7\u00c4\2\2\u1bbf\u1bc6\7\u014f\2\2\u1bc0\u1bc6"+
		"\7\65\2\2\u1bc1\u1bc6\7\u0123\2\2\u1bc2\u1bc3\7\u0081\2\2\u1bc3\u1bc6"+
		"\7\u0117\2\2\u1bc4\u1bc6\78\2\2\u1bc5\u1bb5\3\2\2\2\u1bc5\u1bb7\3\2\2"+
		"\2\u1bc5\u1bb9\3\2\2\2\u1bc5\u1bbb\3\2\2\2\u1bc5\u1bbd\3\2\2\2\u1bc5\u1bbe"+
		"\3\2\2\2\u1bc5\u1bbf\3\2\2\2\u1bc5\u1bc0\3\2\2\2\u1bc5\u1bc1\3\2\2\2\u1bc5"+
		"\u1bc2\3\2\2\2\u1bc5\u1bc4\3\2\2\2\u1bc6\u037f\3\2\2\2\u1bc7\u1bc8\7\7"+
		"\2\2\u1bc8\u1bc9\5\u0430\u0219\2\u1bc9\u1bca\7\b\2\2\u1bca\u1bcd\3\2\2"+
		"\2\u1bcb\u1bcd\3\2\2\2\u1bcc\u1bc7\3\2\2\2\u1bcc\u1bcb\3\2\2\2\u1bcd\u0381"+
		"\3\2\2\2\u1bce\u1bd1\5\u0386\u01c4\2\u1bcf\u1bd1\5\u0388\u01c5\2\u1bd0"+
		"\u1bce\3\2\2\2\u1bd0\u1bcf\3\2\2\2\u1bd1\u0383\3\2\2\2\u1bd2\u1bd5\5\u0386"+
		"\u01c4\2\u1bd3\u1bd5\5\u0388\u01c5\2\u1bd4\u1bd2\3\2\2\2\u1bd4\u1bd3\3"+
		"\2\2\2\u1bd5\u0385\3\2\2\2\u1bd6\u1bd7\7\67\2\2\u1bd7\u1bd8\5\u0394\u01cb"+
		"\2\u1bd8\u1bd9\7\7\2\2\u1bd9\u1bda\5\u03dc\u01ef\2\u1bda\u1bdb\7\b\2\2"+
		"\u1bdb\u0387\3\2\2\2\u1bdc\u1bdd\7\67\2\2\u1bdd\u1bde\5\u0394\u01cb\2"+
		"\u1bde\u0389\3\2\2\2\u1bdf\u1be2\5\u038e\u01c8\2\u1be0\u1be2\5\u0390\u01c9"+
		"\2\u1be1\u1bdf\3\2\2\2\u1be1\u1be0\3\2\2\2\u1be2\u038b\3\2\2\2\u1be3\u1be6"+
		"\5\u038e\u01c8\2\u1be4\u1be6\5\u0390\u01c9\2\u1be5\u1be3\3\2\2\2\u1be5"+
		"\u1be4\3\2\2\2\u1be6\u038d\3\2\2\2\u1be7\u1be8\5\u0392\u01ca\2\u1be8\u1be9"+
		"\7\7\2\2\u1be9\u1bea\5\u0430\u0219\2\u1bea\u1beb\7\b\2\2\u1beb\u1bec\5"+
		"\u0396\u01cc\2\u1bec\u038f\3\2\2\2\u1bed\u1bee\5\u0392\u01ca\2\u1bee\u1bef"+
		"\5\u0396\u01cc\2\u1bef\u0391\3\2\2\2\u1bf0\u1bf1\7D\2\2\u1bf1\u1bfe\5"+
		"\u0394\u01cb\2\u1bf2\u1bf3\7C\2\2\u1bf3\u1bfe\5\u0394\u01cb\2\u1bf4\u1bf5"+
		"\7\u00ec\2\2\u1bf5\u1bf6\7D\2\2\u1bf6\u1bfe\5\u0394\u01cb\2\u1bf7\u1bf8"+
		"\7\u00ec\2\2\u1bf8\u1bf9\7C\2\2\u1bf9\u1bfe\5\u0394\u01cb\2\u1bfa\u1bfb"+
		"\7\u00ee\2\2\u1bfb\u1bfe\5\u0394\u01cb\2\u1bfc\u1bfe\7\u0187\2\2\u1bfd"+
		"\u1bf0\3\2\2\2\u1bfd\u1bf2\3\2\2\2\u1bfd\u1bf4\3\2\2\2\u1bfd\u1bf7\3\2"+
		"\2\2\u1bfd\u1bfa\3\2\2\2\u1bfd\u1bfc\3\2\2\2\u1bfe\u0393\3\2\2\2\u1bff"+
		"\u1c02\7\u0189\2\2\u1c00\u1c02\3\2\2\2\u1c01\u1bff\3\2\2\2\u1c01\u1c00"+
		"\3\2\2\2\u1c02\u0395\3\2\2\2\u1c03\u1c04\7D\2\2\u1c04\u1c05\7\u0149\2"+
		"\2\u1c05\u1c08\5\u0438\u021d\2\u1c06\u1c08\3\2\2\2\u1c07\u1c03\3\2\2\2"+
		"\u1c07\u1c06\3\2\2\2\u1c08\u0397\3\2\2\2\u1c09\u1c0a\7\u0169\2\2\u1c0a"+
		"\u1c0b\7\7\2\2\u1c0b\u1c0c\5\u0430\u0219\2\u1c0c\u1c0d\7\b\2\2\u1c0d\u1c0e"+
		"\5\u039c\u01cf\2\u1c0e\u1c1a\3\2\2\2\u1c0f\u1c10\7\u0168\2\2\u1c10\u1c11"+
		"\7\7\2\2\u1c11\u1c12\5\u0430\u0219\2\u1c12\u1c13\7\b\2\2\u1c13\u1c14\5"+
		"\u039c\u01cf\2\u1c14\u1c1a\3\2\2\2\u1c15\u1c16\7\u0169\2\2\u1c16\u1c1a"+
		"\5\u039c\u01cf\2\u1c17\u1c18\7\u0168\2\2\u1c18\u1c1a\5\u039c\u01cf\2\u1c19"+
		"\u1c09\3\2\2\2\u1c19\u1c0f\3\2\2\2\u1c19\u1c15\3\2\2\2\u1c19\u1c17\3\2"+
		"\2\2\u1c1a\u0399\3\2\2\2\u1c1b\u1c1c\7\u00c6\2\2\u1c1c\u039b\3\2\2\2\u1c1d"+
		"\u1c1e\7\27\2\2\u1c1e\u1c24\7\u01a3\2\2\u1c1f\u1c20\7\u0193\2\2\u1c20"+
		"\u1c21\7\u0168\2\2\u1c21\u1c24\7\u01a3\2\2\u1c22\u1c24\3\2\2\2\u1c23\u1c1d"+
		"\3\2\2\2\u1c23\u1c1f\3\2\2\2\u1c23\u1c22\3\2\2\2\u1c24\u039d\3\2\2\2\u1c25"+
		"\u1c42\5\u03a0\u01d1\2\u1c26\u1c27\7l\2\2\u1c27\u1c28\7\u016a\2\2\u1c28"+
		"\u1c42\5\u03a0\u01d1\2\u1c29\u1c2a\7\u00ad\2\2\u1c2a\u1c2b\7\u016a\2\2"+
		"\u1c2b\u1c42\5\u03a0\u01d1\2\u1c2c\u1c2d\7\u00e5\2\2\u1c2d\u1c2e\7\u016a"+
		"\2\2\u1c2e\u1c42\5\u03a0\u01d1\2\u1c2f\u1c42\7\u01a1\2\2\u1c30\u1c42\7"+
		"\u00e8\2\2\u1c31\u1c42\7l\2\2\u1c32\u1c42\7\u00ad\2\2\u1c33\u1c42\7\u00e5"+
		"\2\2\u1c34\u1c35\7\u01a1\2\2\u1c35\u1c36\7\u016a\2\2\u1c36\u1c42\7\u00e8"+
		"\2\2\u1c37\u1c38\7l\2\2\u1c38\u1c39\7\u016a\2\2\u1c39\u1c42\7\u00ad\2"+
		"\2\u1c3a\u1c3b\7l\2\2\u1c3b\u1c3c\7\u016a\2\2\u1c3c\u1c42\7\u00e5\2\2"+
		"\u1c3d\u1c3e\7\u00ad\2\2\u1c3e\u1c3f\7\u016a\2\2\u1c3f\u1c42\7\u00e5\2"+
		"\2\u1c40\u1c42\3\2\2\2\u1c41\u1c25\3\2\2\2\u1c41\u1c26\3\2\2\2\u1c41\u1c29"+
		"\3\2\2\2\u1c41\u1c2c\3\2\2\2\u1c41\u1c2f\3\2\2\2\u1c41\u1c30\3\2\2\2\u1c41"+
		"\u1c31\3\2\2\2\u1c41\u1c32\3\2\2\2\u1c41\u1c33\3\2\2\2\u1c41\u1c34\3\2"+
		"\2\2\u1c41\u1c37\3\2\2\2\u1c41\u1c3a\3\2\2\2\u1c41\u1c3d\3\2\2\2\u1c41"+
		"\u1c40\3\2\2\2\u1c42\u039f\3\2\2\2\u1c43\u1c44\7\u0140\2\2\u1c44\u1c45"+
		"\7\7\2\2\u1c45\u1c46\5\u0430\u0219\2\u1c46\u1c47\7\b\2\2\u1c47\u1c4a\3"+
		"\2\2\2\u1c48\u1c4a\7\u0140\2\2\u1c49\u1c43\3\2\2\2\u1c49\u1c48\3\2\2\2"+
		"\u1c4a\u03a1\3\2\2\2\u1c4b\u1c4c\b\u01d2\1\2\u1c4c\u1c4d\7\20\2\2\u1c4d"+
		"\u1c5d\5\u03a2\u01d2!\u1c4e\u1c4f\7\n\2\2\u1c4f\u1c5d\5\u03a2\u01d2 \u1c50"+
		"\u1c51\5\u03d6\u01ec\2\u1c51\u1c52\5\u03a2\u01d2\36\u1c52\u1c5d\3\2\2"+
		"\2\u1c53\u1c54\7\u00f2\2\2\u1c54\u1c5d\5\u03a2\u01d2\34\u1c55\u1c56\5"+
		"\u03ce\u01e8\2\u1c56\u1c57\7\u010a\2\2\u1c57\u1c58\5\u03ce\u01e8\2\u1c58"+
		"\u1c5d\3\2\2\2\u1c59\u1c5d\5\u03a6\u01d4\2\u1c5a\u1c5b\7\u0179\2\2\u1c5b"+
		"\u1c5d\5\u0304\u0183\2\u1c5c\u1c4b\3\2\2\2\u1c5c\u1c4e\3\2\2\2\u1c5c\u1c50"+
		"\3\2\2\2\u1c5c\u1c53\3\2\2\2\u1c5c\u1c55\3\2\2\2\u1c5c\u1c59\3\2\2\2\u1c5c"+
		"\u1c5a\3\2\2\2\u1c5d\u1d47\3\2\2\2\u1c5e\u1c5f\f>\2\2\u1c5f\u1c60\7\16"+
		"\2\2\u1c60\u1d46\5\u03a2\u01d2?\u1c61\u1c62\f=\2\2\u1c62\u1c63\7\t\2\2"+
		"\u1c63\u1d46\5\u03a2\u01d2>\u1c64\u1c65\f<\2\2\u1c65\u1c66\7\17\2\2\u1c66"+
		"\u1d46\5\u03a2\u01d2=\u1c67\u1c68\f;\2\2\u1c68\u1c69\7\13\2\2\u1c69\u1d46"+
		"\5\u03a2\u01d2<\u1c6a\u1c6b\f:\2\2\u1c6b\u1c6c\7\20\2\2\u1c6c\u1d46\5"+
		"\u03a2\u01d2;\u1c6d\u1c6e\f9\2\2\u1c6e\u1c6f\7\n\2\2\u1c6f\u1d46\5\u03a2"+
		"\u01d2:\u1c70\u1c71\f8\2\2\u1c71\u1c72\7\4\2\2\u1c72\u1d46\5\u03a2\u01d2"+
		"9\u1c73\u1c74\f\67\2\2\u1c74\u1c75\7\21\2\2\u1c75\u1d46\5\u03a2\u01d2"+
		"8\u1c76\u1c77\f\66\2\2\u1c77\u1c78\7\22\2\2\u1c78\u1d46\5\u03a2\u01d2"+
		"\67\u1c79\u1c7a\f\65\2\2\u1c7a\u1c7b\7\23\2\2\u1c7b\u1d46\5\u03a2\u01d2"+
		"\66\u1c7c\u1c7d\f\64\2\2\u1c7d\u1c7e\7\u00d9\2\2\u1c7e\u1c7f\5\u03a2\u01d2"+
		"\2\u1c7f\u1c80\7\u008a\2\2\u1c80\u1c81\5\u03a2\u01d2\65\u1c81\u1d46\3"+
		"\2\2\2\u1c82\u1c83\f\63\2\2\u1c83\u1c84\7\u00f2\2\2\u1c84\u1c85\7\u00d9"+
		"\2\2\u1c85\u1c86\5\u03a2\u01d2\2\u1c86\u1c87\7\u008a\2\2\u1c87\u1c88\5"+
		"\u03a2\u01d2\64\u1c88\u1d46\3\2\2\2\u1c89\u1c8a\f\62\2\2\u1c8a\u1c8b\7"+
		"\u00b0\2\2\u1c8b\u1c8c\5\u03a2\u01d2\2\u1c8c\u1c8d\7\u008a\2\2\u1c8d\u1c8e"+
		"\5\u03a2\u01d2\63\u1c8e\u1d46\3\2\2\2\u1c8f\u1c90\f\61\2\2";
	private static final String _serializedATNSegment3 =
		"\u1c90\u1c91\7\u00f2\2\2\u1c91\u1c92\7\u00b0\2\2\u1c92\u1c93\5\u03a2\u01d2"+
		"\2\u1c93\u1c94\7\u008a\2\2\u1c94\u1c95\5\u03a2\u01d2\62\u1c95\u1d46\3"+
		"\2\2\2\u1c96\u1c97\f\60\2\2\u1c97\u1c98\7\u014d\2\2\u1c98\u1c99\7\u016a"+
		"\2\2\u1c99\u1c9a\5\u03a2\u01d2\2\u1c9a\u1c9b\7\u008a\2\2\u1c9b\u1c9c\5"+
		"\u03a2\u01d2\61\u1c9c\u1d46\3\2\2\2\u1c9d\u1c9e\f/\2\2\u1c9e\u1c9f\7\u00f2"+
		"\2\2\u1c9f\u1ca0\7\u014d\2\2\u1ca0\u1ca1\7\u016a\2\2\u1ca1\u1ca2\5\u03a2"+
		"\u01d2\2\u1ca2\u1ca3\7\u008a\2\2\u1ca3\u1ca4\5\u03a2\u01d2\60\u1ca4\u1d46"+
		"\3\2\2\2\u1ca5\u1ca6\f,\2\2\u1ca6\u1ca7\7&\2\2\u1ca7\u1d46\5\u03a2\u01d2"+
		"-\u1ca8\u1ca9\f+\2\2\u1ca9\u1caa\7\u0105\2\2\u1caa\u1d46\5\u03a2\u01d2"+
		",\u1cab\u1cac\f*\2\2\u1cac\u1cad\7\u00d9\2\2\u1cad\u1d46\5\u03a2\u01d2"+
		"+\u1cae\u1caf\f)\2\2\u1caf\u1cb0\7\u00f2\2\2\u1cb0\u1cb1\7\u00d9\2\2\u1cb1"+
		"\u1d46\5\u03a2\u01d2*\u1cb2\u1cb3\f(\2\2\u1cb3\u1cb4\7\u00b0\2\2\u1cb4"+
		"\u1d46\5\u03a2\u01d2)\u1cb5\u1cb6\f\'\2\2\u1cb6\u1cb7\7\u00f2\2\2\u1cb7"+
		"\u1cb8\7\u00b0\2\2\u1cb8\u1d46\5\u03a2\u01d2(\u1cb9\u1cba\f\"\2\2\u1cba"+
		"\u1cbb\7.\2\2\u1cbb\u1cbc\7\u0168\2\2\u1cbc\u1cbd\7\u01a3\2\2\u1cbd\u1d46"+
		"\5\u03a2\u01d2#\u1cbe\u1cbf\f\37\2\2\u1cbf\u1cc0\5\u03d6\u01ec\2\u1cc0"+
		"\u1cc1\5\u03a2\u01d2 \u1cc1\u1d46\3\2\2\2\u1cc2\u1cc3\f\33\2\2\u1cc3\u1cc4"+
		"\7\u014d\2\2\u1cc4\u1cc5\7\u016a\2\2\u1cc5\u1d46\5\u03a2\u01d2\34\u1cc6"+
		"\u1cc7\f\32\2\2\u1cc7\u1cc8\7\u00f2\2\2\u1cc8\u1cc9\7\u014d\2\2\u1cc9"+
		"\u1cca\7\u016a\2\2\u1cca\u1d46\5\u03a2\u01d2\33\u1ccb\u1ccc\f\17\2\2\u1ccc"+
		"\u1ccd\7\u00c9\2\2\u1ccd\u1cce\7}\2\2\u1cce\u1ccf\7\u00a0\2\2\u1ccf\u1d46"+
		"\5\u03a2\u01d2\20\u1cd0\u1cd1\f\16\2\2\u1cd1\u1cd2\7\u00c9\2\2\u1cd2\u1cd3"+
		"\7\u00f2\2\2\u1cd3\u1cd4\7}\2\2\u1cd4\u1cd5\7\u00a0\2\2\u1cd5\u1d46\5"+
		"\u03a2\u01d2\17\u1cd6\u1cd7\f.\2\2\u1cd7\u1cd8\7\u01a6\2\2\u1cd8\u1d46"+
		"\5\u0372\u01ba\2\u1cd9\u1cda\f-\2\2\u1cda\u1cdb\7L\2\2\u1cdb\u1d46\5\u01b2"+
		"\u00da\2\u1cdc\u1cdd\f%\2\2\u1cdd\u1cde\7\u00b4\2\2\u1cde\u1d46\5\u03fa"+
		"\u01fe\2\u1cdf\u1ce0\f$\2\2\u1ce0\u1ce1\7\u00f2\2\2\u1ce1\u1ce2\7\u00b4"+
		"\2\2\u1ce2\u1d46\5\u03fa\u01fe\2\u1ce3\u1ce4\f\35\2\2\u1ce4\u1d46\5\u03d6"+
		"\u01ec\2\u1ce5\u1ce6\f\31\2\2\u1ce6\u1ce7\7\u00c9\2\2\u1ce7\u1d46\7\u00f7"+
		"\2\2\u1ce8\u1ce9\f\30\2\2\u1ce9\u1d46\7\u00ca\2\2\u1cea\u1ceb\f\27\2\2"+
		"\u1ceb\u1cec\7\u00c9\2\2\u1cec\u1ced\7\u00f2\2\2\u1ced\u1d46\7\u00f7\2"+
		"\2\u1cee\u1cef\f\26\2\2\u1cef\u1d46\7\u00f5\2\2\u1cf0\u1cf1\f\25\2\2\u1cf1"+
		"\u1cf2\7\u00c9\2\2\u1cf2\u1d46\7\u0170\2\2\u1cf3\u1cf4\f\24\2\2\u1cf4"+
		"\u1cf5\7\u00c9\2\2\u1cf5\u1cf6\7\u00f2\2\2\u1cf6\u1d46\7\u0170\2\2\u1cf7"+
		"\u1cf8\f\23\2\2\u1cf8\u1cf9\7\u00c9\2\2\u1cf9\u1d46\7\u0095\2\2\u1cfa"+
		"\u1cfb\f\22\2\2\u1cfb\u1cfc\7\u00c9\2\2\u1cfc\u1cfd\7\u00f2\2\2\u1cfd"+
		"\u1d46\7\u0095\2\2\u1cfe\u1cff\f\21\2\2\u1cff\u1d00\7\u00c9\2\2\u1d00"+
		"\u1d46\7\u017a\2\2\u1d01\u1d02\f\20\2\2\u1d02\u1d03\7\u00c9\2\2\u1d03"+
		"\u1d04\7\u00f2\2\2\u1d04\u1d46\7\u017a\2\2\u1d05\u1d06\f\r\2\2\u1d06\u1d07"+
		"\7\u00c9\2\2\u1d07\u1d08\7\u00fc\2\2\u1d08\u1d09\7\7\2\2\u1d09\u1d0a\5"+
		"\u03e2\u01f2\2\u1d0a\u1d0b\7\b\2\2\u1d0b\u1d46\3\2\2\2\u1d0c\u1d0d\f\f"+
		"\2\2\u1d0d\u1d0e\7\u00c9\2\2\u1d0e\u1d0f\7\u00f2\2\2\u1d0f\u1d10\7\u00fc"+
		"\2\2\u1d10\u1d11\7\7\2\2\u1d11\u1d12\5\u03e2\u01f2\2\u1d12\u1d13\7\b\2"+
		"\2\u1d13\u1d46\3\2\2\2\u1d14\u1d15\f\13\2\2\u1d15\u1d16\7\64\2\2\u1d16"+
		"\u1d17\5\u040e\u0208\2\u1d17\u1d18\5\u03a4\u01d3\2\u1d18\u1d19\7&\2\2"+
		"\u1d19\u1d1a\5\u03a4\u01d3\2\u1d1a\u1d46\3\2\2\2\u1d1b\u1d1c\f\n\2\2\u1d1c"+
		"\u1d1d\7\u00f2\2\2\u1d1d\u1d1e\7\64\2\2\u1d1e\u1d1f\5\u040e\u0208\2\u1d1f"+
		"\u1d20\5\u03a4\u01d3\2\u1d20\u1d21\7&\2\2\u1d21\u1d22\5\u03a4\u01d3\2"+
		"\u1d22\u1d46\3\2\2\2\u1d23\u1d24\f\t\2\2\u1d24\u1d25\7\64\2\2\u1d25\u1d26"+
		"\7\u015d\2\2\u1d26\u1d27\5\u03a4\u01d3\2\u1d27\u1d28\7&\2\2\u1d28\u1d29"+
		"\5\u03a4\u01d3\2\u1d29\u1d46\3\2\2\2\u1d2a\u1d2b\f\b\2\2\u1d2b\u1d2c\7"+
		"\u00f2\2\2\u1d2c\u1d2d\7\64\2\2\u1d2d\u1d2e\7\u015d\2\2\u1d2e\u1d2f\5"+
		"\u03a4\u01d3\2\u1d2f\u1d30\7&\2\2\u1d30\u1d31\5\u03a4\u01d3\2\u1d31\u1d46"+
		"\3\2\2\2\u1d32\u1d33\f\7\2\2\u1d33\u1d34\5\u03da\u01ee\2\u1d34\u1d35\5"+
		"\u03d0\u01e9\2\u1d35\u1d36\5\u0304\u0183\2\u1d36\u1d46\3\2\2\2\u1d37\u1d38"+
		"\f\6\2\2\u1d38\u1d39\5\u03da\u01ee\2\u1d39\u1d3a\5\u03d0\u01e9\2\u1d3a"+
		"\u1d3b\7\7\2\2\u1d3b\u1d3c\5\u03a2\u01d2\2\u1d3c\u1d3d\7\b\2\2\u1d3d\u1d46"+
		"\3\2\2\2\u1d3e\u1d3f\f\4\2\2\u1d3f\u1d40\7\u00c9\2\2\u1d40\u1d46\7\177"+
		"\2\2\u1d41\u1d42\f\3\2\2\u1d42\u1d43\7\u00c9\2\2\u1d43\u1d44\7\u00f2\2"+
		"\2\u1d44\u1d46\7\177\2\2\u1d45\u1c5e\3\2\2\2\u1d45\u1c61\3\2\2\2\u1d45"+
		"\u1c64\3\2\2\2\u1d45\u1c67\3\2\2\2\u1d45\u1c6a\3\2\2\2\u1d45\u1c6d\3\2"+
		"\2\2\u1d45\u1c70\3\2\2\2\u1d45\u1c73\3\2\2\2\u1d45\u1c76\3\2\2\2\u1d45"+
		"\u1c79\3\2\2\2\u1d45\u1c7c\3\2\2\2\u1d45\u1c82\3\2\2\2\u1d45\u1c89\3\2"+
		"\2\2\u1d45\u1c8f\3\2\2\2\u1d45\u1c96\3\2\2\2\u1d45\u1c9d\3\2\2\2\u1d45"+
		"\u1ca5\3\2\2\2\u1d45\u1ca8\3\2\2\2\u1d45\u1cab\3\2\2\2\u1d45\u1cae\3\2"+
		"\2\2\u1d45\u1cb2\3\2\2\2\u1d45\u1cb5\3\2\2\2\u1d45\u1cb9\3\2\2\2\u1d45"+
		"\u1cbe\3\2\2\2\u1d45\u1cc2\3\2\2\2\u1d45\u1cc6\3\2\2\2\u1d45\u1ccb\3\2"+
		"\2\2\u1d45\u1cd0\3\2\2\2\u1d45\u1cd6\3\2\2\2\u1d45\u1cd9\3\2\2\2\u1d45"+
		"\u1cdc\3\2\2\2\u1d45\u1cdf\3\2\2\2\u1d45\u1ce3\3\2\2\2\u1d45\u1ce5\3\2"+
		"\2\2\u1d45\u1ce8\3\2\2\2\u1d45\u1cea\3\2\2\2\u1d45\u1cee\3\2\2\2\u1d45"+
		"\u1cf0\3\2\2\2\u1d45\u1cf3\3\2\2\2\u1d45\u1cf7\3\2\2\2\u1d45\u1cfa\3\2"+
		"\2\2\u1d45\u1cfe\3\2\2\2\u1d45\u1d01\3\2\2\2\u1d45\u1d05\3\2\2\2\u1d45"+
		"\u1d0c\3\2\2\2\u1d45\u1d14\3\2\2\2\u1d45\u1d1b\3\2\2\2\u1d45\u1d23\3\2"+
		"\2\2\u1d45\u1d2a\3\2\2\2\u1d45\u1d32\3\2\2\2\u1d45\u1d37\3\2\2\2\u1d45"+
		"\u1d3e\3\2\2\2\u1d45\u1d41\3\2\2\2\u1d46\u1d49\3\2\2\2\u1d47\u1d45\3\2"+
		"\2\2\u1d47\u1d48\3\2\2\2\u1d48\u03a3\3\2\2\2\u1d49\u1d47\3\2\2\2\u1d4a"+
		"\u1d4b\b\u01d3\1\2\u1d4b\u1d4c\7\20\2\2\u1d4c\u1d54\5\u03a4\u01d3\r\u1d4d"+
		"\u1d4e\7\n\2\2\u1d4e\u1d54\5\u03a4\u01d3\f\u1d4f\u1d50\5\u03d6\u01ec\2"+
		"\u1d50\u1d51\5\u03a4\u01d3\n\u1d51\u1d54\3\2\2\2\u1d52\u1d54\5\u03a6\u01d4"+
		"\2\u1d53\u1d4a\3\2\2\2\u1d53\u1d4d\3\2\2\2\u1d53\u1d4f\3\2\2\2\u1d53\u1d52"+
		"\3\2\2\2\u1d54\u1d9c\3\2\2\2\u1d55\u1d56\f\30\2\2\u1d56\u1d57\7\16\2\2"+
		"\u1d57\u1d9b\5\u03a4\u01d3\31\u1d58\u1d59\f\27\2\2\u1d59\u1d5a\7\t\2\2"+
		"\u1d5a\u1d9b\5\u03a4\u01d3\30\u1d5b\u1d5c\f\26\2\2\u1d5c\u1d5d\7\17\2"+
		"\2\u1d5d\u1d9b\5\u03a4\u01d3\27\u1d5e\u1d5f\f\25\2\2\u1d5f\u1d60\7\13"+
		"\2\2\u1d60\u1d9b\5\u03a4\u01d3\26\u1d61\u1d62\f\24\2\2\u1d62\u1d63\7\20"+
		"\2\2\u1d63\u1d9b\5\u03a4\u01d3\25\u1d64\u1d65\f\23\2\2\u1d65\u1d66\7\n"+
		"\2\2\u1d66\u1d9b\5\u03a4\u01d3\24\u1d67\u1d68\f\22\2\2\u1d68\u1d69\7\4"+
		"\2\2\u1d69\u1d9b\5\u03a4\u01d3\23\u1d6a\u1d6b\f\21\2\2\u1d6b\u1d6c\7\21"+
		"\2\2\u1d6c\u1d9b\5\u03a4\u01d3\22\u1d6d\u1d6e\f\20\2\2\u1d6e\u1d6f\7\22"+
		"\2\2\u1d6f\u1d9b\5\u03a4\u01d3\21\u1d70\u1d71\f\13\2\2\u1d71\u1d72\5\u03d6"+
		"\u01ec\2\u1d72\u1d73\5\u03a4\u01d3\f\u1d73\u1d9b\3\2\2\2\u1d74\u1d75\f"+
		"\b\2\2\u1d75\u1d76\7\u00c9\2\2\u1d76\u1d77\7}\2\2\u1d77\u1d78\7\u00a0"+
		"\2\2\u1d78\u1d9b\5\u03a4\u01d3\t\u1d79\u1d7a\f\7\2\2\u1d7a\u1d7b\7\u00c9"+
		"\2\2\u1d7b\u1d7c\7\u00f2\2\2\u1d7c\u1d7d\7}\2\2\u1d7d\u1d7e\7\u00a0\2"+
		"\2\u1d7e\u1d9b\5\u03a4\u01d3\b\u1d7f\u1d80\f\17\2\2\u1d80\u1d81\7\u01a6"+
		"\2\2\u1d81\u1d9b\5\u0372\u01ba\2\u1d82\u1d83\f\t\2\2\u1d83\u1d9b\5\u03d6"+
		"\u01ec\2\u1d84\u1d85\f\6\2\2\u1d85\u1d86\7\u00c9\2\2\u1d86\u1d87\7\u00fc"+
		"\2\2\u1d87\u1d88\7\7\2\2\u1d88\u1d89\5\u03e2\u01f2\2\u1d89\u1d8a\7\b\2"+
		"\2\u1d8a\u1d9b\3\2\2\2\u1d8b\u1d8c\f\5\2\2\u1d8c\u1d8d\7\u00c9\2\2\u1d8d"+
		"\u1d8e\7\u00f2\2\2\u1d8e\u1d8f\7\u00fc\2\2\u1d8f\u1d90\7\7\2\2\u1d90\u1d91"+
		"\5\u03e2\u01f2\2\u1d91\u1d92\7\b\2\2\u1d92\u1d9b\3\2\2\2\u1d93\u1d94\f"+
		"\4\2\2\u1d94\u1d95\7\u00c9\2\2\u1d95\u1d9b\7\177\2\2\u1d96\u1d97\f\3\2"+
		"\2\u1d97\u1d98\7\u00c9\2\2\u1d98\u1d99\7\u00f2\2\2\u1d99\u1d9b\7\177\2"+
		"\2\u1d9a\u1d55\3\2\2\2\u1d9a\u1d58\3\2\2\2\u1d9a\u1d5b\3\2\2\2\u1d9a\u1d5e"+
		"\3\2\2\2\u1d9a\u1d61\3\2\2\2\u1d9a\u1d64\3\2\2\2\u1d9a\u1d67\3\2\2\2\u1d9a"+
		"\u1d6a\3\2\2\2\u1d9a\u1d6d\3\2\2\2\u1d9a\u1d70\3\2\2\2\u1d9a\u1d74\3\2"+
		"\2\2\u1d9a\u1d79\3\2\2\2\u1d9a\u1d7f\3\2\2\2\u1d9a\u1d82\3\2\2\2\u1d9a"+
		"\u1d84\3\2\2\2\u1d9a\u1d8b\3\2\2\2\u1d9a\u1d93\3\2\2\2\u1d9a\u1d96\3\2"+
		"\2\2\u1d9b\u1d9e\3\2\2\2\u1d9c\u1d9a\3\2\2\2\u1d9c\u1d9d\3\2\2\2\u1d9d"+
		"\u03a5\3\2\2\2\u1d9e\u1d9c\3\2\2\2\u1d9f\u1da0\7\7\2\2\u1da0\u1da1\5\u03a2"+
		"\u01d2\2\u1da1\u1da2\7\b\2\2\u1da2\u1da3\5\u040c\u0207\2\u1da3\u1db4\3"+
		"\2\2\2\u1da4\u1db4\5\u0406\u0204\2\u1da5\u1db4\5\u042e\u0218\2\u1da6\u1da7"+
		"\7\u01ad\2\2\u1da7\u1db4\5\u040c\u0207\2\u1da8\u1db4\5\u03fc\u01ff\2\u1da9"+
		"\u1db4\5\u03a8\u01d5\2\u1daa\u1db4\5\u0304\u0183\2\u1dab\u1dac\7\u0090"+
		"\2\2\u1dac\u1db4\5\u0304\u0183\2\u1dad\u1dae\7(\2\2\u1dae\u1db4\5\u0304"+
		"\u0183\2\u1daf\u1db0\7(\2\2\u1db0\u1db4\5\u03e4\u01f3\2\u1db1\u1db4\5"+
		"\u03e4\u01f3\2\u1db2\u1db4\5\u03ce\u01e8\2\u1db3\u1d9f\3\2\2\2\u1db3\u1da4"+
		"\3\2\2\2\u1db3\u1da5\3\2\2\2\u1db3\u1da6\3\2\2\2\u1db3\u1da8\3\2\2\2\u1db3"+
		"\u1da9\3\2\2\2\u1db3\u1daa\3\2\2\2\u1db3\u1dab\3\2\2\2\u1db3\u1dad\3\2"+
		"\2\2\u1db3\u1daf\3\2\2\2\u1db3\u1db1\3\2\2\2\u1db3\u1db2\3\2\2\2\u1db4"+
		"\u03a7\3\2\2\2\u1db5\u1db6\7M\2\2\u1db6\u1db7\7\u009b\2\2\u1db7\u1db8"+
		"\7\7\2\2\u1db8\u1db9\5\u03a2\u01d2\2\u1db9\u1dba\7\b\2\2\u1dba\u1eb7\3"+
		"\2\2\2\u1dbb\u1dbc\7e\2\2\u1dbc\u1dbd\7\7\2\2\u1dbd\u1dbe\5\u0430\u0219"+
		"\2\u1dbe\u1dbf\7\b\2\2\u1dbf\u1eb7\3\2\2\2\u1dc0\u1dc1\7f\2\2\u1dc1\u1dc2"+
		"\7\7\2\2\u1dc2\u1dc3\5\u0430\u0219\2\u1dc3\u1dc4\7\b\2\2\u1dc4\u1eb7\3"+
		"\2\2\2\u1dc5\u1dc6\7\u00de\2\2\u1dc6\u1dc7\7\7\2\2\u1dc7\u1dc8\5\u0430"+
		"\u0219\2\u1dc8\u1dc9\7\b\2\2\u1dc9\u1eb7\3\2\2\2\u1dca\u1dcb\7\u00df\2"+
		"\2\u1dcb\u1dcc\7\7\2\2\u1dcc\u1dcd\5\u0430\u0219\2\u1dcd\u1dce\7\b\2\2"+
		"\u1dce\u1eb7\3\2\2\2\u1dcf\u1dd0\7\u0094\2\2\u1dd0\u1dd1\7\7\2\2\u1dd1"+
		"\u1dd2\5\u03e8\u01f5\2\u1dd2\u1dd3\7\b\2\2\u1dd3\u1eb7\3\2\2\2\u1dd4\u1dd5"+
		"\7\u010b\2\2\u1dd5\u1dd6\7\7\2\2\u1dd6\u1dd7\5\u03ec\u01f7\2\u1dd7\u1dd8"+
		"\7\b\2\2\u1dd8\u1eb7\3\2\2\2\u1dd9\u1dda\7\u0115\2\2\u1dda\u1ddb\7\7\2"+
		"\2\u1ddb\u1ddc\5\u03f0\u01f9\2\u1ddc\u1ddd\7\b\2\2\u1ddd\u1eb7\3\2\2\2"+
		"\u1dde\u1ddf\7\u015c\2\2\u1ddf\u1de0\7\7\2\2\u1de0\u1de1\5\u03f2\u01fa"+
		"\2\u1de1\u1de2\7\b\2\2\u1de2\u1eb7\3\2\2\2\u1de3\u1de4\7\u016f\2\2\u1de4"+
		"\u1de5\7\7\2\2\u1de5\u1de6\79\2\2\u1de6\u1de7\5\u03f8\u01fd\2\u1de7\u1de8"+
		"\7\b\2\2\u1de8\u1eb7\3\2\2\2\u1de9\u1dea\7\u016f\2\2\u1dea\u1deb\7\7\2"+
		"\2\u1deb\u1dec\7\u00d4\2\2\u1dec\u1ded\5\u03f8\u01fd\2\u1ded\u1dee\7\b"+
		"\2\2\u1dee\u1eb7\3\2\2\2\u1def\u1df0\7\u016f\2\2\u1df0\u1df1\7\7\2\2\u1df1"+
		"\u1df2\7\u016b\2\2\u1df2\u1df3\5\u03f8\u01fd\2\u1df3\u1df4\7\b\2\2\u1df4"+
		"\u1eb7\3\2\2\2\u1df5\u1df6\7\u016f\2\2\u1df6\u1df7\7\7\2\2\u1df7\u1df8"+
		"\5\u03f8\u01fd\2\u1df8\u1df9\7\b\2\2\u1df9\u1eb7\3\2\2\2\u1dfa\u1dfb\7"+
		"K\2\2\u1dfb\u1dfc\7\7\2\2\u1dfc\u1dfd\5\u03dc\u01ef\2\u1dfd\u1dfe\7\b"+
		"\2\2\u1dfe\u1eb7\3\2\2\2\u1dff\u1e00\7\u00a7\2\2\u1e00\u1e01\7\7\2\2\u1e01"+
		"\u1e02\5\u03dc\u01ef\2\u1e02\u1e03\7\b\2\2\u1e03\u1eb7\3\2\2\2\u1e04\u1e05"+
		"\7\u00d6\2\2\u1e05\u1e06\7\7\2\2\u1e06\u1e07\5\u03dc\u01ef\2\u1e07\u1e08"+
		"\7\b\2\2\u1e08\u1eb7\3\2\2\2\u1e09\u1e0a\7\u0199\2\2\u1e0a\u1e0b\7\7\2"+
		"\2\u1e0b\u1e0c\5\u03dc\u01ef\2\u1e0c\u1e0d\7\b\2\2\u1e0d\u1eb7\3\2\2\2"+
		"\u1e0e\u1e0f\7\u019a\2\2\u1e0f\u1e10\7\7\2\2\u1e10\u1e11\7\u00ea\2\2\u1e11"+
		"\u1e12\5\u043c\u021f\2\u1e12\u1e13\7\b\2\2\u1e13\u1eb7\3\2\2\2\u1e14\u1e15"+
		"\7\u019c\2\2\u1e15\u1e16\7\7\2\2\u1e16\u1e17\5\u03b0\u01d9\2\u1e17\u1e18"+
		"\7\b\2\2\u1e18\u1eb7\3\2\2\2\u1e19\u1e1a\7\u019e\2\2\u1e1a\u1e1b\7\7\2"+
		"\2\u1e1b\u1e1c\7\u00ea\2\2\u1e1c\u1e1d\5\u043c\u021f\2\u1e1d\u1e1e\7\b"+
		"\2\2\u1e1e\u1eb7\3\2\2\2\u1e1f\u1e20\7@\2\2\u1e20\u1e21\7\7\2\2\u1e21"+
		"\u1e22\5\u03a2\u01d2\2\u1e22\u1e23\7)\2\2\u1e23\u1e24\5\u0372\u01ba\2"+
		"\u1e24\u1e25\7\b\2\2\u1e25\u1eb7\3\2\2\2\u1e26\u1e27\7\u016d\2\2\u1e27"+
		"\u1e28\7\7\2\2\u1e28\u1e29\5\u03a2\u01d2\2\u1e29\u1e2a\7)\2\2\u1e2a\u1e2b"+
		"\5\u0372\u01ba\2\u1e2b\u1e2c\7\b\2\2\u1e2c\u1eb7\3\2\2\2\u1e2d\u1e2e\7"+
		"\u019b\2\2\u1e2e\u1e2f\7\7\2\2\u1e2f\u1e30\5\u03a6\u01d4\2\u1e30\u1e31"+
		"\5\u03b8\u01dd\2\u1e31\u1e32\7\b\2\2\u1e32\u1eb7\3\2\2\2\u1e33\u1e34\7"+
		"\u00f8\2\2\u1e34\u1e35\7\7\2\2\u1e35\u1e36\5\u03a2\u01d2\2\u1e36\u1e37"+
		"\7\6\2\2\u1e37\u1e38\5\u03a2\u01d2\2\u1e38\u1e39\7\b\2\2\u1e39\u1eb7\3"+
		"\2\2\2\u1e3a\u1e3b\7\u019a\2\2\u1e3b\u1e3c\7\7\2\2\u1e3c\u1e3d\7\u00ea"+
		"\2\2\u1e3d\u1e3e\5\u043c\u021f\2\u1e3e\u1e3f\7\6\2\2\u1e3f\u1e40\5\u03ae"+
		"\u01d8\2\u1e40\u1e41\7\b\2\2\u1e41\u1eb7\3\2\2\2\u1e42\u1e43\7\u019a\2"+
		"\2\u1e43\u1e44\7\7\2\2\u1e44\u1e45\7\u00ea\2\2\u1e45\u1e46\5\u043c\u021f"+
		"\2\u1e46\u1e47\7\6\2\2\u1e47\u1e48\5\u03dc\u01ef\2\u1e48\u1e49\7\b\2\2"+
		"\u1e49\u1eb7\3\2\2\2\u1e4a\u1e4b\7\u019d\2\2\u1e4b\u1e4c\7\7\2\2\u1e4c"+
		"\u1e4d\5\u03b4\u01db\2\u1e4d\u1e4e\5\u03a2\u01d2\2\u1e4e\u1e4f\5\u03b6"+
		"\u01dc\2\u1e4f\u1e50\7\b\2\2\u1e50\u1eb7\3\2\2\2\u1e51\u1e52\7\u019e\2"+
		"\2\u1e52\u1e53\7\7\2\2\u1e53\u1e54\7\u00ea\2\2\u1e54\u1e55\5\u043c\u021f"+
		"\2\u1e55\u1e56\7\6\2\2\u1e56\u1e57\5\u03a2\u01d2\2\u1e57\u1e58\7\b\2\2"+
		"\u1e58\u1eb7\3\2\2\2\u1e59\u1e5a\7\u01a0\2\2\u1e5a\u1e5b\7\7\2\2\u1e5b"+
		"\u1e5c\5\u03b4\u01db\2\u1e5c\u1e5d\5\u03a2\u01d2\2\u1e5d\u1e5e\7)\2\2"+
		"\u1e5e\u1e5f\5\u0376\u01bc\2\u1e5f\u1e60\7\b\2\2\u1e60\u1eb7\3\2\2\2\u1e61"+
		"\u1e62\7\u019f\2\2\u1e62\u1e63\7\7\2\2\u1e63\u1e64\5\u03a2\u01d2\2\u1e64"+
		"\u1e65\7\6\2\2\u1e65\u1e66\5\u03aa\u01d6\2\u1e66\u1e67\5\u03ac\u01d7\2"+
		"\u1e67\u1e68\7\b\2\2\u1e68\u1eb7\3\2\2\2\u1e69\u1e6a\7\u019a\2\2\u1e6a"+
		"\u1e6b\7\7\2\2\u1e6b\u1e6c\7\u00ea\2\2\u1e6c\u1e6d\5\u043c\u021f\2\u1e6d"+
		"\u1e6e\7\6\2\2\u1e6e\u1e6f\5\u03ae\u01d8\2\u1e6f\u1e70\7\6\2\2\u1e70\u1e71"+
		"\5\u03dc\u01ef\2\u1e71\u1e72\7\b\2\2\u1e72\u1eb7\3\2\2\2\u1e73\u1e74\5"+
		"\u042c\u0217\2\u1e74\u1e75\7\7\2\2\u1e75\u1e76\7\b\2\2\u1e76\u1e77\5\u03c0"+
		"\u01e1\2\u1e77\u1eb7\3\2\2\2\u1e78\u1e79\5\u042c\u0217\2\u1e79\u1e7a\7"+
		"\7\2\2\u1e7a\u1e7b\7\t\2\2\u1e7b\u1e7c\7\b\2\2\u1e7c\u1e7d\5\u03c0\u01e1"+
		"\2\u1e7d\u1eb7\3\2\2\2\u1e7e\u1e7f\5\u042c\u0217\2\u1e7f\u1e80\7\7\2\2"+
		"\u1e80\u1e81\5\u03de\u01f0\2\u1e81\u1e82\7\b\2\2\u1e82\u1e83\5\u03c0\u01e1"+
		"\2\u1e83\u1eb7\3\2\2\2\u1e84\u1e85\5\u042c\u0217\2\u1e85\u1e86\7\7\2\2"+
		"\u1e86\u1e87\7\u0188\2\2\u1e87\u1e88\5\u03e0\u01f1\2\u1e88\u1e89\7\b\2"+
		"\2\u1e89\u1e8a\5\u03c0\u01e1\2\u1e8a\u1eb7\3\2\2\2\u1e8b\u1e8c\5\u042c"+
		"\u0217\2\u1e8c\u1e8d\7\7\2\2\u1e8d\u1e8e\5\u03de\u01f0\2\u1e8e\u1e8f\5"+
		"\u0324\u0193\2\u1e8f\u1e90\7\b\2\2\u1e90\u1e91\5\u03c0\u01e1\2\u1e91\u1eb7"+
		"\3\2\2\2\u1e92\u1e93\5\u042c\u0217\2\u1e93\u1e94\7\7\2\2\u1e94\u1e95\7"+
		" \2\2\u1e95\u1e96\5\u03de\u01f0\2\u1e96\u1e97\5\u0322\u0192\2\u1e97\u1e98"+
		"\7\b\2\2\u1e98\u1e99\5\u03c0\u01e1\2\u1e99\u1eb7\3\2\2\2\u1e9a\u1e9b\5"+
		"\u042c\u0217\2\u1e9b\u1e9c\7\7\2\2\u1e9c\u1e9d\7}\2\2\u1e9d\u1e9e\5\u03de"+
		"\u01f0\2\u1e9e\u1e9f\5\u0322\u0192\2\u1e9f\u1ea0\7\b\2\2\u1ea0\u1ea1\5"+
		"\u03c0\u01e1\2\u1ea1\u1eb7\3\2\2\2\u1ea2\u1ea3\5\u042c\u0217\2\u1ea3\u1ea4"+
		"\7\7\2\2\u1ea4\u1ea5\5\u03de\u01f0\2\u1ea5\u1ea6\7\6\2\2\u1ea6\u1ea7\7"+
		"\u0188\2\2\u1ea7\u1ea8\5\u03e0\u01f1\2\u1ea8\u1ea9\7\b\2\2\u1ea9\u1eaa"+
		"\5\u03c0\u01e1\2\u1eaa\u1eb7\3\2\2\2\u1eab\u1eb7\7b\2\2\u1eac\u1eb7\7"+
		"e\2\2\u1ead\u1eb7\7f\2\2\u1eae\u1eb7\7\u00de\2\2\u1eaf\u1eb7\7\u00df\2"+
		"\2\u1eb0\u1eb7\7c\2\2\u1eb1\u1eb7\7g\2\2\u1eb2\u1eb7\7\u0148\2\2\u1eb3"+
		"\u1eb7\7\u017f\2\2\u1eb4\u1eb7\7a\2\2\u1eb5\u1eb7\7d\2\2\u1eb6\u1db5\3"+
		"\2\2\2\u1eb6\u1dbb\3\2\2\2\u1eb6\u1dc0\3\2\2\2\u1eb6\u1dc5\3\2\2\2\u1eb6"+
		"\u1dca\3\2\2\2\u1eb6\u1dcf\3\2\2\2\u1eb6\u1dd4\3\2\2\2\u1eb6\u1dd9\3\2"+
		"\2\2\u1eb6\u1dde\3\2\2\2\u1eb6\u1de3\3\2\2\2\u1eb6\u1de9\3\2\2\2\u1eb6"+
		"\u1def\3\2\2\2\u1eb6\u1df5\3\2\2\2\u1eb6\u1dfa\3\2\2\2\u1eb6\u1dff\3\2"+
		"\2\2\u1eb6\u1e04\3\2\2\2\u1eb6\u1e09\3\2\2\2\u1eb6\u1e0e\3\2\2\2\u1eb6"+
		"\u1e14\3\2\2\2\u1eb6\u1e19\3\2\2\2\u1eb6\u1e1f\3\2\2\2\u1eb6\u1e26\3\2"+
		"\2\2\u1eb6\u1e2d\3\2\2\2\u1eb6\u1e33\3\2\2\2\u1eb6\u1e3a\3\2\2\2\u1eb6"+
		"\u1e42\3\2\2\2\u1eb6\u1e4a\3\2\2\2\u1eb6\u1e51\3\2\2\2\u1eb6\u1e59\3\2"+
		"\2\2\u1eb6\u1e61\3\2\2\2\u1eb6\u1e69\3\2\2\2\u1eb6\u1e73\3\2\2\2\u1eb6"+
		"\u1e78\3\2\2\2\u1eb6\u1e7e\3\2\2\2\u1eb6\u1e84\3\2\2\2\u1eb6\u1e8b\3\2"+
		"\2\2\u1eb6\u1e92\3\2\2\2\u1eb6\u1e9a\3\2\2\2\u1eb6\u1ea2\3\2\2\2\u1eb6"+
		"\u1eab\3\2\2\2\u1eb6\u1eac\3\2\2\2\u1eb6\u1ead\3\2\2\2\u1eb6\u1eae\3\2"+
		"\2\2\u1eb6\u1eaf\3\2\2\2\u1eb6\u1eb0\3\2\2\2\u1eb6\u1eb1\3\2\2\2\u1eb6"+
		"\u1eb2\3\2\2\2\u1eb6\u1eb3\3\2\2\2\u1eb6\u1eb4\3\2\2\2\u1eb6\u1eb5\3\2"+
		"\2\2\u1eb7\u03a9\3\2\2\2\u1eb8\u1eb9\7\u018b\2\2\u1eb9\u1ebe\5\u03a2\u01d2"+
		"\2\u1eba\u1ebb\7\u018b\2\2\u1ebb\u1ebc\7\u00f0\2\2\u1ebc\u1ebe\7\u0185"+
		"\2\2\u1ebd\u1eb8\3\2\2\2\u1ebd\u1eba\3\2\2\2\u1ebe\u03ab\3\2\2\2\u1ebf"+
		"\u1ec0\7\6\2\2\u1ec0\u1ec1\7\u0153\2\2\u1ec1\u1ecb\7\u01a2\2\2\u1ec2\u1ec3"+
		"\7\6\2\2\u1ec3\u1ec4\7\u0153\2\2\u1ec4\u1ecb\7\u00f0\2\2\u1ec5\u1ec6\7"+
		"\6\2\2\u1ec6\u1ec7\7\u0153\2\2\u1ec7\u1ec8\7\u00f0\2\2\u1ec8\u1ecb\7\u0185"+
		"\2\2\u1ec9\u1ecb\3\2\2\2\u1eca\u1ebf\3\2\2\2\u1eca\u1ec2\3\2\2\2\u1eca"+
		"\u1ec5\3\2\2\2\u1eca\u1ec9\3\2\2\2\u1ecb\u03ad\3\2\2\2\u1ecc\u1ecd\7\u0198"+
		"\2\2\u1ecd\u1ece\7\7\2\2\u1ece\u1ecf\5\u03b0\u01d9\2\u1ecf\u1ed0\7\b\2"+
		"\2\u1ed0\u03af\3\2\2\2\u1ed1\u1ed2\b\u01d9\1\2\u1ed2\u1ed3\5\u03b2\u01da"+
		"\2\u1ed3\u1ed9\3\2\2\2\u1ed4\u1ed5\f\4\2\2\u1ed5\u1ed6\7\6\2\2\u1ed6\u1ed8"+
		"\5\u03b2\u01da\2\u1ed7\u1ed4\3\2\2\2\u1ed8\u1edb\3\2\2\2\u1ed9\u1ed7\3"+
		"\2\2\2\u1ed9\u1eda\3\2\2\2\u1eda\u03b1\3\2\2\2\u1edb\u1ed9\3\2\2\2\u1edc"+
		"\u1edd\5\u03a2\u01d2\2\u1edd\u1ede\7)\2\2\u1ede\u1edf\5\u043c\u021f\2"+
		"\u1edf\u1ee2\3\2\2\2\u1ee0\u1ee2\5\u03a2\u01d2\2\u1ee1\u1edc\3\2\2\2\u1ee1"+
		"\u1ee0\3\2\2\2\u1ee2\u03b3\3\2\2\2\u1ee3\u1ee4\t\16\2\2\u1ee4\u03b5\3"+
		"\2\2\2\u1ee5\u1ee6\7\u011a\2\2\u1ee6\u1eeb\7\u0190\2\2\u1ee7\u1ee8\7\u015b"+
		"\2\2\u1ee8\u1eeb\7\u0190\2\2\u1ee9\u1eeb\3\2\2\2\u1eea\u1ee5\3\2\2\2\u1eea"+
		"\u1ee7\3\2\2\2\u1eea\u1ee9\3\2\2\2\u1eeb\u03b7\3\2\2\2\u1eec\u1eed\7\u0111"+
		"\2\2\u1eed\u1eff\5\u03a6\u01d4\2\u1eee\u1eef\7\u0111\2\2\u1eef\u1ef0\5"+
		"\u03a6\u01d4\2\u1ef0\u1ef1\7:\2\2\u1ef1\u1ef2\7\u0127\2\2\u1ef2\u1eff"+
		"\3\2\2\2\u1ef3\u1ef4\7\u0111\2\2\u1ef4\u1ef5\7:\2\2\u1ef5\u1ef6\7\u0127"+
		"\2\2\u1ef6\u1eff\5\u03a6\u01d4\2\u1ef7\u1ef8\7\u0111\2\2\u1ef8\u1ef9\7"+
		":\2\2\u1ef9\u1efa\7\u0127\2\2\u1efa\u1efb\5\u03a6\u01d4\2\u1efb\u1efc"+
		"\7:\2\2\u1efc\u1efd\7\u0127\2\2\u1efd\u1eff\3\2\2\2\u1efe\u1eec\3\2\2"+
		"\2\u1efe\u1eee\3\2\2\2\u1efe\u1ef3\3\2\2\2\u1efe\u1ef7\3\2\2\2\u1eff\u03b9"+
		"\3\2\2\2\u1f00\u1f01\7\u0191\2\2\u1f01\u1f04\5\u03bc\u01df\2\u1f02\u1f04"+
		"\3\2\2\2\u1f03\u1f00\3\2\2\2\u1f03\u1f02\3\2\2\2\u1f04\u03bb\3\2\2\2\u1f05"+
		"\u1f06\b\u01df\1\2\u1f06\u1f07\5\u03be\u01e0\2\u1f07\u1f0d\3\2\2\2\u1f08"+
		"\u1f09\f\4\2\2\u1f09\u1f0a\7\6\2\2\u1f0a\u1f0c\5\u03be\u01e0\2\u1f0b\u1f08"+
		"\3\2\2\2\u1f0c\u1f0f\3\2\2\2\u1f0d\u1f0b\3\2\2\2\u1f0d\u1f0e\3\2\2\2\u1f0e"+
		"\u03bd\3\2\2\2\u1f0f\u1f0d\3\2\2\2\u1f10\u1f11\5\u0438\u021d\2\u1f11\u1f12"+
		"\7)\2\2\u1f12\u1f13\5\u03c2\u01e2\2\u1f13\u03bf\3\2\2\2\u1f14\u1f15\7"+
		"\u0109\2\2\u1f15\u1f1a\5\u03c2\u01e2\2\u1f16\u1f17\7\u0109\2\2\u1f17\u1f1a"+
		"\5\u0438\u021d\2\u1f18\u1f1a\3\2\2\2\u1f19\u1f14\3\2\2\2\u1f19\u1f16\3"+
		"\2\2\2\u1f19\u1f18\3\2\2\2\u1f1a\u03c1\3\2\2\2\u1f1b\u1f1c\7\7\2\2\u1f1c"+
		"\u1f1d\5\u03c4\u01e3\2\u1f1d\u1f1e\5\u03c6\u01e4\2\u1f1e\u1f1f\5\u0322"+
		"\u0192\2\u1f1f\u1f20\5\u03c8\u01e5\2\u1f20\u1f21\7\b\2\2\u1f21\u03c3\3"+
		"\2\2\2\u1f22\u1f25\5\u0438\u021d\2\u1f23\u1f25\3\2\2\2\u1f24\u1f22\3\2"+
		"\2\2\u1f24\u1f23\3\2\2\2\u1f25\u03c5\3\2\2\2\u1f26\u1f27\7\u0110\2\2\u1f27"+
		"\u1f28\7:\2\2\u1f28\u1f2b\5\u03dc\u01ef\2\u1f29\u1f2b\3\2\2\2\u1f2a\u1f26"+
		"\3\2\2\2\u1f2a\u1f29\3\2\2\2\u1f2b\u03c7\3\2\2\2\u1f2c\u1f2d\7\u0121\2"+
		"\2\u1f2d\u1f32\5\u03ca\u01e6\2\u1f2e\u1f2f\7\u013a\2\2\u1f2f\u1f32\5\u03ca"+
		"\u01e6\2\u1f30\u1f32\3\2\2\2\u1f31\u1f2c\3\2\2\2\u1f31\u1f2e\3\2\2\2\u1f31"+
		"\u1f30\3\2\2\2\u1f32\u03c9\3\2\2\2\u1f33\u1f34\7\64\2\2\u1f34\u1f35\5"+
		"\u03cc\u01e7\2\u1f35\u1f36\7&\2\2\u1f36\u1f37\5\u03cc\u01e7\2\u1f37\u1f3a"+
		"\3\2\2\2\u1f38\u1f3a\5\u03cc\u01e7\2\u1f39\u1f33\3\2\2\2\u1f39\u1f38\3"+
		"\2\2\2\u1f3a\u03cb\3\2\2\2\u1f3b\u1f3c\5\u03a2\u01d2\2\u1f3c\u1f3d\7\u0116"+
		"\2\2\u1f3d\u1f48\3\2\2\2\u1f3e\u1f3f\5\u03a2\u01d2\2\u1f3f\u1f40\7\u009a"+
		"\2\2\u1f40\u1f48\3\2\2\2\u1f41\u1f42\7\u0175\2\2\u1f42\u1f48\7\u0116\2"+
		"\2\u1f43\u1f44\7\u0175\2\2\u1f44\u1f48\7\u009a\2\2\u1f45\u1f46\7`\2\2"+
		"\u1f46\u1f48\7\u0139\2\2\u1f47\u1f3b\3\2\2\2\u1f47\u1f3e\3\2\2\2\u1f47"+
		"\u1f41\3\2\2\2\u1f47\u1f43\3\2\2\2\u1f47\u1f45\3\2\2\2\u1f48\u03cd\3\2"+
		"\2\2\u1f49\u1f4a\7\u0139\2\2\u1f4a\u1f4b\7\7\2\2\u1f4b\u1f58\7\b\2\2\u1f4c"+
		"\u1f4d\7\u0139\2\2\u1f4d\u1f4e\7\7\2\2\u1f4e\u1f4f\5\u03dc\u01ef\2\u1f4f"+
		"\u1f50\7\b\2\2\u1f50\u1f58\3\2\2\2\u1f51\u1f52\7\7\2\2\u1f52\u1f53\5\u03dc"+
		"\u01ef\2\u1f53\u1f54\7\6\2\2\u1f54\u1f55\5\u03a2\u01d2\2\u1f55\u1f56\7"+
		"\b\2\2\u1f56\u1f58\3\2\2\2\u1f57\u1f49\3\2\2\2\u1f57\u1f4c\3\2\2\2\u1f57"+
		"\u1f51\3\2\2\2\u1f58\u03cf\3\2\2\2\u1f59\u1f5a\t\17\2\2\u1f5a\u03d1\3"+
		"\2\2\2\u1f5b\u1f5e\7\u01b0\2\2\u1f5c\u1f5e\5\u03d4\u01eb\2\u1f5d\u1f5b"+
		"\3\2\2\2\u1f5d\u1f5c\3\2\2\2\u1f5e\u03d3\3\2\2\2\u1f5f\u1f60\t\20\2\2"+
		"\u1f60\u03d5\3\2\2\2\u1f61\u1f62\7\u0102\2\2\u1f62\u1f63\7\7\2\2\u1f63"+
		"\u1f64\5\u0242\u0122\2\u1f64\u1f65\7\b\2\2\u1f65\u1f68\3\2\2\2\u1f66\u1f68"+
		"\7\u01b0\2\2\u1f67\u1f61\3\2\2\2\u1f67\u1f66\3\2\2\2\u1f68\u03d7\3\2\2"+
		"\2\u1f69\u1f6a\7\u0102\2\2\u1f6a\u1f6b\7\7\2\2\u1f6b\u1f6c\5\u0242\u0122"+
		"\2\u1f6c\u1f6d\7\b\2\2\u1f6d\u1f70\3\2\2\2\u1f6e\u1f70\5\u03d2\u01ea\2"+
		"\u1f6f\u1f69\3\2\2\2\u1f6f\u1f6e\3\2\2\2\u1f70\u03d9\3\2\2\2\u1f71\u1f72"+
		"\7\u0102\2\2\u1f72\u1f73\7\7\2\2\u1f73\u1f74\5\u0242\u0122\2\u1f74\u1f75"+
		"\7\b\2\2\u1f75\u1f7e\3\2\2\2\u1f76\u1f7e\5\u03d2\u01ea\2\u1f77\u1f7e\7"+
		"\u00d9\2\2\u1f78\u1f79\7\u00f2\2\2\u1f79\u1f7e\7\u00d9\2\2\u1f7a\u1f7e"+
		"\7\u00b0\2\2\u1f7b\u1f7c\7\u00f2\2\2\u1f7c\u1f7e\7\u00b0\2\2\u1f7d\u1f71"+
		"\3\2\2\2\u1f7d\u1f76\3\2\2\2\u1f7d\u1f77\3\2\2\2\u1f7d\u1f78\3\2\2\2\u1f7d"+
		"\u1f7a\3\2\2\2\u1f7d\u1f7b\3\2\2\2\u1f7e\u03db\3\2\2\2\u1f7f\u1f80\b\u01ef"+
		"\1\2\u1f80\u1f81\5\u03a2\u01d2\2\u1f81\u1f87\3\2\2\2\u1f82\u1f83\f\4\2"+
		"\2\u1f83\u1f84\7\6\2\2\u1f84\u1f86\5\u03a2\u01d2\2\u1f85\u1f82\3\2\2\2"+
		"\u1f86\u1f89\3\2\2\2\u1f87\u1f85\3\2\2\2\u1f87\u1f88\3\2\2\2\u1f88\u03dd"+
		"\3\2\2\2\u1f89\u1f87\3\2\2\2\u1f8a\u1f8b\b\u01f0\1\2\u1f8b\u1f8c\5\u03e0"+
		"\u01f1\2\u1f8c\u1f92\3\2\2\2\u1f8d\u1f8e\f\4\2\2\u1f8e\u1f8f\7\6\2\2\u1f8f"+
		"\u1f91\5\u03e0\u01f1\2\u1f90\u1f8d\3\2\2\2\u1f91\u1f94\3\2\2\2\u1f92\u1f90"+
		"\3\2\2\2\u1f92\u1f93\3\2\2\2\u1f93\u03df\3\2\2\2\u1f94\u1f92\3\2\2\2\u1f95"+
		"\u1f96\5\u021e\u0110\2\u1f96\u1f97\7\u01a8\2\2\u1f97\u1f98\5\u03a2\u01d2"+
		"\2\u1f98\u1f9b\3\2\2\2\u1f99\u1f9b\5\u03a2\u01d2\2\u1f9a\u1f95\3\2\2\2"+
		"\u1f9a\u1f99\3\2\2\2\u1f9b\u03e1\3\2\2\2\u1f9c\u1f9d\b\u01f2\1\2\u1f9d"+
		"\u1f9e\5\u0372\u01ba\2\u1f9e\u1fa4\3\2\2\2\u1f9f\u1fa0\f\4\2\2\u1fa0\u1fa1"+
		"\7\6\2\2\u1fa1\u1fa3\5\u0372\u01ba\2\u1fa2\u1f9f\3\2\2\2\u1fa3\u1fa6\3"+
		"\2\2\2\u1fa4\u1fa2\3\2\2\2\u1fa4\u1fa5\3\2\2\2\u1fa5\u03e3\3\2\2\2\u1fa6"+
		"\u1fa4\3\2\2\2\u1fa7\u1fa8\7\f\2\2\u1fa8\u1fb2\7\r\2\2\u1fa9\u1faa\7\f"+
		"\2\2\u1faa\u1fab\5\u03dc\u01ef\2\u1fab\u1fac\7\r\2\2\u1fac\u1fb2\3\2\2"+
		"\2\u1fad\u1fae\7\f\2\2\u1fae\u1faf\5\u03e6\u01f4\2\u1faf\u1fb0\7\r\2\2"+
		"\u1fb0\u1fb2\3\2\2\2\u1fb1\u1fa7\3\2\2\2\u1fb1\u1fa9\3\2\2\2\u1fb1\u1fad"+
		"\3\2\2\2\u1fb2\u03e5\3\2\2\2\u1fb3\u1fb4\b\u01f4\1\2\u1fb4\u1fb5\5\u03e4"+
		"\u01f3\2\u1fb5\u1fbb\3\2\2\2\u1fb6\u1fb7\f\4\2\2\u1fb7\u1fb8\7\6\2\2\u1fb8"+
		"\u1fba\5\u03e4\u01f3\2\u1fb9\u1fb6\3\2\2\2\u1fba\u1fbd\3\2\2\2\u1fbb\u1fb9"+
		"\3\2\2\2\u1fbb\u1fbc\3\2\2\2\u1fbc\u03e7\3\2\2\2\u1fbd\u1fbb\3\2\2\2\u1fbe"+
		"\u1fbf\5\u03ea\u01f6\2\u1fbf\u1fc0\7\u00a0\2\2\u1fc0\u1fc1\5\u03a2\u01d2"+
		"\2\u1fc1\u1fc4\3\2\2\2\u1fc2\u1fc4\3\2\2\2\u1fc3\u1fbe\3\2\2\2\u1fc3\u1fc2"+
		"\3\2\2\2\u1fc4\u03e9\3\2\2\2\u1fc5\u1fce\5\u0432\u021a\2\u1fc6\u1fce\7"+
		"\u01ac\2\2\u1fc7\u1fce\7\u01a1\2\2\u1fc8\u1fce\7\u00e8\2\2\u1fc9\u1fce"+
		"\7l\2\2\u1fca\u1fce\7\u00ad\2\2\u1fcb\u1fce\7\u00e5\2\2\u1fcc\u1fce\7"+
		"\u0140\2\2\u1fcd\u1fc5\3\2\2\2\u1fcd\u1fc6\3\2\2\2\u1fcd\u1fc7\3\2\2\2"+
		"\u1fcd\u1fc8\3\2\2\2\u1fcd\u1fc9\3\2\2\2\u1fcd\u1fca\3\2\2\2\u1fcd\u1fcb"+
		"\3\2\2\2\u1fcd\u1fcc\3\2\2\2\u1fce\u03eb\3\2\2\2\u1fcf\u1fd0\5\u03a2\u01d2"+
		"\2\u1fd0\u1fd1\5\u03ee\u01f8\2\u1fd1\u1fd2\5\u03f4\u01fb\2\u1fd2\u1fd3"+
		"\5\u03f6\u01fc\2\u1fd3\u1fd9\3\2\2\2\u1fd4\u1fd5\5\u03a2\u01d2\2\u1fd5"+
		"\u1fd6\5\u03ee\u01f8\2\u1fd6\u1fd7\5\u03f4\u01fb\2\u1fd7\u1fd9\3\2\2\2"+
		"\u1fd8\u1fcf\3\2\2\2\u1fd8\u1fd4\3\2\2\2\u1fd9\u03ed\3\2\2\2\u1fda\u1fdb"+
		"\7\u0113\2\2\u1fdb\u1fdc\5\u03a2\u01d2\2\u1fdc\u03ef\3\2\2\2\u1fdd\u1fde"+
		"\5\u03a4\u01d3\2\u1fde\u1fdf\7\u00b4\2\2\u1fdf\u1fe0\5\u03a4\u01d3\2\u1fe0"+
		"\u1fe3\3\2\2\2\u1fe1\u1fe3\3\2\2\2\u1fe2\u1fdd\3\2\2\2\u1fe2\u1fe1\3\2"+
		"\2\2\u1fe3\u03f1\3\2\2\2\u1fe4\u1fe5\5\u03a2\u01d2\2\u1fe5\u1fe6\5\u03f4"+
		"\u01fb\2\u1fe6\u1fe7\5\u03f6\u01fc\2\u1fe7\u1ff5\3\2\2\2\u1fe8\u1fe9\5"+
		"\u03a2\u01d2\2\u1fe9\u1fea\5\u03f6\u01fc\2\u1fea\u1feb\5\u03f4\u01fb\2"+
		"\u1feb\u1ff5\3\2\2\2\u1fec\u1fed\5\u03a2\u01d2\2\u1fed\u1fee\5\u03f4\u01fb"+
		"\2\u1fee\u1ff5\3\2\2\2\u1fef\u1ff0\5\u03a2\u01d2\2\u1ff0\u1ff1\5\u03f6"+
		"\u01fc\2\u1ff1\u1ff5\3\2\2\2\u1ff2\u1ff5\5\u03dc\u01ef\2\u1ff3\u1ff5\3"+
		"\2\2\2\u1ff4\u1fe4\3\2\2\2\u1ff4\u1fe8\3\2\2\2\u1ff4\u1fec\3\2\2\2\u1ff4"+
		"\u1fef\3\2\2\2\u1ff4\u1ff2\3\2\2\2\u1ff4\u1ff3\3\2\2\2\u1ff5\u03f3\3\2"+
		"\2\2\u1ff6\u1ff7\7\u00a0\2\2\u1ff7\u1ff8\5\u03a2\u01d2\2\u1ff8\u03f5\3"+
		"\2\2\2\u1ff9\u1ffa\7\u009b\2\2\u1ffa\u1ffb\5\u03a2\u01d2\2\u1ffb\u03f7"+
		"\3\2\2\2\u1ffc\u1ffd\5\u03a2\u01d2\2\u1ffd\u1ffe\7\u00a0\2\2\u1ffe\u1fff"+
		"\5\u03dc\u01ef\2\u1fff\u2004\3\2\2\2\u2000\u2001\7\u00a0\2\2\u2001\u2004"+
		"\5\u03dc\u01ef\2\u2002\u2004\5\u03dc\u01ef\2\u2003\u1ffc\3\2\2\2\u2003"+
		"\u2000\3\2\2\2\u2003\u2002\3\2\2\2\u2004\u03f9\3\2\2\2\u2005\u2006\7\7"+
		"\2\2\u2006\u2007\5\u03dc\u01ef\2\u2007\u2008\7\b\2\2\u2008\u200b\3\2\2"+
		"\2\u2009\u200b\5\u0304\u0183\2\u200a\u2005\3\2\2\2\u200a\u2009\3\2\2\2"+
		"\u200b\u03fb\3\2\2\2\u200c\u200d\7?\2\2\u200d\u200e\5\u0404\u0203\2\u200e"+
		"\u200f\5\u03fe\u0200\2\u200f\u2010\5\u0402\u0202\2\u2010\u2011\7\u0088"+
		"\2\2\u2011\u03fd\3\2\2\2\u2012\u2013\b\u0200\1\2\u2013\u2014\5\u0400\u0201"+
		"\2\u2014\u2019\3\2\2\2\u2015\u2016\f\4\2\2\u2016\u2018\5\u0400\u0201\2"+
		"\u2017\u2015\3\2\2\2\u2018\u201b\3\2\2\2\u2019\u2017\3\2\2\2\u2019\u201a"+
		"\3\2\2\2\u201a\u03ff\3\2\2\2\u201b\u2019\3\2\2\2\u201c\u201d\7\u018e\2"+
		"\2\u201d\u201e\5\u03a2\u01d2\2\u201e\u201f\7\u0167\2\2\u201f\u2020\5\u03a2"+
		"\u01d2\2\u2020\u0401\3\2\2\2\u2021\u2022\7\u0084\2\2\u2022\u2025\5\u03a2"+
		"\u01d2\2\u2023\u2025\3\2\2\2\u2024\u2021\3\2\2\2\u2024\u2023\3\2\2\2\u2025"+
		"\u0403\3\2\2\2\u2026\u2029\5\u03a2\u01d2\2\u2027\u2029\3\2\2\2\u2028\u2026"+
		"\3\2\2\2\u2028\u2027\3\2\2\2\u2029\u0405\3\2\2\2\u202a\u202b\5\u0438\u021d"+
		"\2\u202b\u202c\5\u040a\u0206\2\u202c\u202f\3\2\2\2\u202d\u202f\5\u0438"+
		"\u021d\2\u202e\u202a\3\2\2\2\u202e\u202d\3\2\2\2\u202f\u0407\3\2\2\2\u2030"+
		"\u2031\7\5\2\2\u2031\u203f\7\t\2\2\u2032\u2033\7\5\2\2\u2033\u203f\5\u0426"+
		"\u0214\2\u2034\u2035\7\f\2\2\u2035\u2036\5\u03a2\u01d2\2\u2036\u2037\7"+
		"\r\2\2\u2037\u203f\3\2\2\2\u2038\u2039\7\f\2\2\u2039\u203a\5\u03a2\u01d2"+
		"\2\u203a\u203b\7\24\2\2\u203b\u203c\5\u03a2\u01d2\2\u203c\u203d\7\r\2"+
		"\2\u203d\u203f\3\2\2\2\u203e\u2030\3\2\2\2\u203e\u2032\3\2\2\2\u203e\u2034"+
		"\3\2\2\2\u203e\u2038\3\2\2\2\u203f\u0409\3\2\2\2\u2040\u2041\b\u0206\1"+
		"\2\u2041\u2042\5\u0408\u0205\2\u2042\u2047\3\2\2\2\u2043\u2044\f\4\2\2"+
		"\u2044\u2046\5\u0408\u0205\2\u2045\u2043\3\2\2\2\u2046\u2049\3\2\2\2\u2047"+
		"\u2045\3\2\2\2\u2047\u2048\3\2\2\2\u2048\u040b\3\2\2\2\u2049\u2047\3\2"+
		"\2\2\u204a\u204f\b\u0207\1\2\u204b\u204c\f\4\2\2\u204c\u204e\5\u0408\u0205"+
		"\2\u204d\u204b\3\2\2\2\u204e\u2051\3\2\2\2\u204f\u204d\3\2\2\2\u204f\u2050"+
		"\3\2\2\2\u2050\u040d\3\2\2\2\u2051\u204f\3\2\2\2\u2052\u2055\7-\2\2\u2053"+
		"\u2055\3\2\2\2\u2054\u2052\3\2\2\2\u2054\u2053\3\2\2\2\u2055\u040f\3\2"+
		"\2\2\u2056\u2059\5\u03a2\u01d2\2\u2057\u2059\7q\2\2\u2058\u2056\3\2\2"+
		"\2\u2058\u2057\3\2\2\2\u2059\u0411\3\2\2\2\u205a\u205b\b\u020a\1\2\u205b"+
		"\u205c\5\u0410\u0209\2\u205c\u2062\3\2\2\2\u205d\u205e\f\4\2\2\u205e\u205f"+
		"\7\6\2\2\u205f\u2061\5\u0410\u0209\2\u2060\u205d\3\2\2\2\u2061\u2064\3"+
		"\2\2\2\u2062\u2060\3\2\2\2\u2062\u2063\3\2\2\2\u2063\u0413\3\2\2\2\u2064"+
		"\u2062\3\2\2\2\u2065\u2066\7\7\2\2\u2066\u2067\5\u0412\u020a\2\u2067\u2068"+
		"\7\b\2\2\u2068\u0415\3\2\2\2\u2069\u206a\b\u020c\1\2\u206a\u206b\5\u0418"+
		"\u020d\2\u206b\u2071\3\2\2\2\u206c\u206d\f\4\2\2\u206d\u206e\7\6\2\2\u206e"+
		"\u2070\5\u0418\u020d\2\u206f\u206c\3\2\2\2\u2070\u2073\3\2\2\2\u2071\u206f"+
		"\3\2\2\2\u2071\u2072\3\2\2\2\u2072\u0417\3\2\2\2\u2073\u2071\3\2\2\2\u2074"+
		"\u207e\7\t\2\2\u2075\u2076\5\u03a2\u01d2\2\u2076\u2077\7)\2\2\u2077\u2078"+
		"\5\u043c\u021f\2\u2078\u207e\3\2\2\2\u2079\u207a\5\u03a2\u01d2\2\u207a"+
		"\u207b\7\u01ac\2\2\u207b\u207e\3\2\2\2\u207c\u207e\5\u03a2\u01d2\2\u207d"+
		"\u2074\3\2\2\2\u207d\u2075\3\2\2\2\u207d\u2079\3\2\2\2\u207d\u207c\3\2"+
		"\2\2\u207e\u0419\3\2\2\2\u207f\u2080\b\u020e\1\2\u2080\u2081\5\u041c\u020f"+
		"\2\u2081\u2087\3\2\2\2\u2082\u2083\f\4\2\2\u2083\u2084\7\6\2\2\u2084\u2086"+
		"\5\u041c\u020f\2\u2085\u2082\3\2\2\2\u2086\u2089\3\2\2\2\u2087\u2085\3"+
		"\2\2\2\u2087\u2088\3\2\2\2\u2088\u041b\3\2\2\2\u2089\u2087\3\2\2\2\u208a"+
		"\u208b\5\u0438\u021d\2\u208b\u208c\5\u040a\u0206\2\u208c\u208f\3\2\2\2"+
		"\u208d\u208f\5\u0438\u021d\2\u208e\u208a\3\2\2\2\u208e\u208d\3\2\2\2\u208f"+
		"\u041d\3\2\2\2\u2090\u2091\b\u0210\1\2\u2091\u2092\5\u0420\u0211\2\u2092"+
		"\u2098\3\2\2\2\u2093\u2094\f\4\2\2\u2094\u2095\7\6\2\2\u2095\u2097\5\u0420"+
		"\u0211\2\u2096\u2093\3\2\2\2\u2097\u209a\3\2\2\2\u2098\u2096\3\2\2\2\u2098"+
		"\u2099\3\2\2\2\u2099\u041f\3\2\2\2\u209a\u2098\3\2\2\2\u209b\u209c\5\u0438"+
		"\u021d\2\u209c\u0421\3\2\2\2\u209d\u209e\5\u0438\u021d\2\u209e\u0423\3"+
		"\2\2\2\u209f\u20a0\5\u0438\u021d\2\u20a0\u0425\3\2\2\2\u20a1\u20a2\5\u043c"+
		"\u021f\2\u20a2\u0427\3\2\2\2\u20a3\u20a4\5\u0438\u021d\2\u20a4\u0429\3"+
		"\2\2\2\u20a5\u20a6\5\u0432\u021a\2\u20a6\u042b\3\2\2\2\u20a7\u20a8\5\u0438"+
		"\u021d\2\u20a8\u20a9\5\u040a\u0206\2\u20a9\u20ac\3\2\2\2\u20aa\u20ac\5"+
		"\u043a\u021e\2\u20ab\u20a7\3\2\2\2\u20ab\u20aa\3\2\2\2\u20ac\u042d\3\2"+
		"\2\2\u20ad\u20ae\5\u039a\u01ce\2\u20ae\u20af\7\7\2\2\u20af\u20b0\5\u0430"+
		"\u0219\2\u20b0\u20b1\7\b\2\2\u20b1\u20b2\5\u0432\u021a\2\u20b2\u20b3\5"+
		"\u039e\u01d0\2\u20b3\u20cd\3\2\2\2\u20b4\u20b5\5\u042c\u0217\2\u20b5\u20b6"+
		"\7\7\2\2\u20b6\u20b7\5\u03de\u01f0\2\u20b7\u20b8\7\b\2\2\u20b8\u20b9\5"+
		"\u0432\u021a\2\u20b9\u20cd\3\2\2\2\u20ba\u20bb\5\u039a\u01ce\2\u20bb\u20bc"+
		"\5\u0432\u021a\2\u20bc\u20bd\5\u039e\u01d0\2\u20bd\u20cd\3\2\2\2\u20be"+
		"\u20bf\5\u042c\u0217\2\u20bf\u20c0\5\u0432\u021a\2\u20c0\u20cd\3\2\2\2"+
		"\u20c1\u20c2\5\u0378\u01bd\2\u20c2\u20c3\5\u0432\u021a\2\u20c3\u20cd\3"+
		"\2\2\2\u20c4\u20cd\5\u0430\u0219\2\u20c5\u20cd\5\u0432\u021a\2\u20c6\u20cd"+
		"\7\u01ae\2\2\u20c7\u20cd\7\u01aa\2\2\u20c8\u20cd\7\u01ab\2\2\u20c9\u20cd"+
		"\7\u0170\2\2\u20ca\u20cd\7\u0095\2\2\u20cb\u20cd\7\u00f7\2\2\u20cc\u20ad"+
		"\3\2\2\2\u20cc\u20b4\3\2\2\2\u20cc\u20ba\3\2\2\2\u20cc\u20be\3\2\2\2\u20cc"+
		"\u20c1\3\2\2\2\u20cc\u20c4\3\2\2\2\u20cc\u20c5\3\2\2\2\u20cc\u20c6\3\2"+
		"\2\2\u20cc\u20c7\3\2\2\2\u20cc\u20c8\3\2\2\2\u20cc\u20c9\3\2\2\2\u20cc"+
		"\u20ca\3\2\2\2\u20cc\u20cb\3\2\2\2\u20cd\u042f\3\2\2\2\u20ce\u20cf\7\u01af"+
		"\2\2\u20cf\u0431\3\2\2\2\u20d0\u20d1\7\u01a9\2\2\u20d1\u0433\3\2\2\2\u20d2"+
		"\u20d3\5\u0438\u021d\2\u20d3\u0435\3\2\2\2\u20d4\u20d5\7\20\2\2\u20d5"+
		"\u20da\5\u0430\u0219\2\u20d6\u20d7\7\n\2\2\u20d7\u20da\5\u0430\u0219\2"+
		"\u20d8\u20da\5\u0430\u0219\2\u20d9\u20d4\3\2\2\2\u20d9\u20d6\3\2\2\2\u20d9"+
		"\u20d8\3\2\2\2\u20da\u0437\3\2\2\2\u20db\u20df\5\u043e\u0220\2\u20dc\u20df"+
		"\5\u0440\u0221\2\u20dd\u20df\7\u01ac\2\2\u20de\u20db\3\2\2\2\u20de\u20dc"+
		"\3\2\2\2\u20de\u20dd\3\2\2\2\u20df\u0439\3\2\2\2\u20e0\u20e4\5\u043e\u0220"+
		"\2\u20e1\u20e4\5\u0442\u0222\2\u20e2\u20e4\7\u01ac\2\2\u20e3\u20e0\3\2"+
		"\2\2\u20e3\u20e1\3\2\2\2\u20e3\u20e2\3\2\2\2\u20e4\u043b\3\2\2\2\u20e5"+
		"\u20eb\5\u043e\u0220\2\u20e6\u20eb\5\u0440\u0221\2\u20e7\u20eb\5\u0442"+
		"\u0222\2\u20e8\u20eb\5\u0444\u0223\2\u20e9\u20eb\7\u01ac\2\2\u20ea\u20e5"+
		"\3\2\2\2\u20ea\u20e6\3\2\2\2\u20ea\u20e7\3\2\2\2\u20ea\u20e8\3\2\2\2\u20ea"+
		"\u20e9\3\2\2\2\u20eb\u043d\3\2\2\2\u20ec\u20ed\t\21\2\2\u20ed\u043f\3"+
		"\2\2\2\u20ee\u20ef\t\22\2\2\u20ef\u0441\3\2\2\2\u20f0\u20f1\t\23\2\2\u20f1"+
		"\u0443\3\2\2\2\u20f2\u20f3\t\24\2\2\u20f3\u0445\3\2\2\2\u01b5\u0450\u04c2"+
		"\u04cc\u04d3\u04db\u04f2\u0501\u0513\u052e\u0538\u0551\u055f\u0563\u056a"+
		"\u0573\u057d\u0587\u05b4\u05be\u05c9\u05ce\u05d7\u05dd\u05ef\u05f4\u05f8"+
		"\u0608\u060d\u0612\u0622\u062b\u0639\u066b\u0675\u071d\u0724\u0729\u072e"+
		"\u0733\u073c\u0746\u0758\u0767\u0784\u078a\u079e\u07a5\u07ac\u07b3\u07d6"+
		"\u07da\u07df\u07e6\u07ea\u07f4\u0802\u080c\u0845\u0853\u0857\u085e\u0868"+
		"\u0873\u0879\u087d\u088e\u0899\u08b5\u08be\u08cb\u08cd\u08d7\u090f\u0914"+
		"\u091b\u0925\u0931\u093b\u0949\u0951\u095c\u096e\u0976\u097f\u098d\u0992"+
		"\u0999\u09b3\u09c7\u09cb\u09d4\u09f4\u09f8\u09fe\u0a08\u0a1d\u0a21\u0a27"+
		"\u0a2c\u0a32\u0a36\u0a46\u0a4a\u0a56\u0a60\u0a71\u0a78\u0a81\u0a8e\u0b46"+
		"\u0b58\u0b61\u0b66\u0b78\u0b89\u0b91\u0b9b\u0bab\u0bb5\u0bcc\u0bd2\u0bd6"+
		"\u0be4\u0bf6\u0c0d\u0c15\u0c1f\u0c32\u0c40\u0c54\u0c84\u0c8a\u0c94\u0c9e"+
		"\u0ca5\u0ca9\u0cb3\u0cb8\u0cbf\u0cc6\u0ccb\u0cd2\u0ce0\u0cf2\u0d59\u0d67"+
		"\u0d6f\u0d76\u0d7f\u0d8d\u0d96\u0da0\u0dbc\u0dd4\u0df3\u0df7\u0dfc\u0e05"+
		"\u0e09\u0e24\u0e2e\u0e3d\u0e51\u0e65\u0e8e\u0ea8\u0eb2\u0eb9\u0ec4\u0ed2"+
		"\u0f68\u0f7e\u0f82\u0fb5\u0fba\u0fc8\u0fcc\u0fd2\u1016\u101c\u1039\u104a"+
		"\u1054\u1060\u108e\u1098\u109e\u10a4\u10ae\u10cc\u10d2\u10d8\u10e5\u10f1"+
		"\u110e\u1123\u1127\u112b\u1130\u113a\u1151\u1156\u115c\u1161\u1166\u1187"+
		"\u118c\u1194\u119e\u11a7\u11b1\u11c3\u11cb\u11dd\u11e8\u11f1\u1213\u121b"+
		"\u1222\u1227\u1234\u1244\u1249\u1259\u1269\u1279\u1291\u1298\u12a4\u12aa"+
		"\u12ce\u12d5\u12e4\u12f5\u12fb\u144f\u1453\u1458\u150e\u159e\u15b4\u15be"+
		"\u15c6\u15ca\u15d1\u15e3\u15ec\u15f5\u1621\u1626\u1632\u163c\u163e\u1643"+
		"\u165b\u1669\u1679\u16bd\u16c1\u16d0\u16dc\u16ec\u1727\u172b\u177c\u1796"+
		"\u179b\u17ba\u17c4\u17cb\u17d5\u17db\u17df\u17e3\u17ea\u17fc\u1805\u180f"+
		"\u1818\u181d\u182a\u1830\u1840\u1847\u1853\u1864\u186e\u1879\u1887\u1894"+
		"\u18a6\u18aa\u18be\u18c3\u18da\u18f1\u18f3\u18fb\u18ff\u190a\u191b\u191d"+
		"\u1944\u1948\u196c\u197d\u197f\u1987\u1991\u199d\u19a1\u19a6\u19aa\u19b1"+
		"\u19d9\u19dd\u19e2\u19ed\u19f1\u19ff\u1a0b\u1a15\u1a19\u1a28\u1a30\u1a34"+
		"\u1a3e\u1a4a\u1a4f\u1a55\u1a59\u1a62\u1a6f\u1a74\u1a7f\u1a85\u1a8f\u1a94"+
		"\u1ab5\u1abc\u1ad9\u1af4\u1af6\u1b07\u1b10\u1b14\u1b1d\u1b2a\u1b34\u1b3f"+
		"\u1b46\u1b4f\u1b53\u1b5d\u1b7f\u1b8a\u1b8c\u1b9d\u1ba3\u1bac\u1bb3\u1bc5"+
		"\u1bcc\u1bd0\u1bd4\u1be1\u1be5\u1bfd\u1c01\u1c07\u1c19\u1c23\u1c41\u1c49"+
		"\u1c5c\u1d45\u1d47\u1d53\u1d9a\u1d9c\u1db3\u1eb6\u1ebd\u1eca\u1ed9\u1ee1"+
		"\u1eea\u1efe\u1f03\u1f0d\u1f19\u1f24\u1f2a\u1f31\u1f39\u1f47\u1f57\u1f5d"+
		"\u1f67\u1f6f\u1f7d\u1f87\u1f92\u1f9a\u1fa4\u1fb1\u1fbb\u1fc3\u1fcd\u1fd8"+
		"\u1fe2\u1ff4\u2003\u200a\u2019\u2024\u2028\u202e\u203e\u2047\u204f\u2054"+
		"\u2058\u2062\u2071\u207d\u2087\u208e\u2098\u20ab\u20cc\u20d9\u20de\u20e3"+
		"\u20ea";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}